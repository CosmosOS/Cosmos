<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.Design</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs">
      <summary>Contains event data for the <see cref="E:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEvent" /> that gets raised when an assembly is deleted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs" /> class for the supplied assembly.</summary>
      <param name="assembly"> The assembly that has been deleted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.#ctor(System.Reflection.Assembly,System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs" /> class for the supplied assembly and types.</summary>
      <param name="assembly">The assembly that has been deleted.</param>
      <param name="types">An array of <see cref="T:System.Type" /> containing objects for all the types defined in this assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.-or-<paramref name="types" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.DeletedAssembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> that has been deleted.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> that has been deleted.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs.DeletedTypes">
      <summary>Gets the set of <see cref="T:System.Type" /> that have been deleted.</summary>
      <returns>An array of <see cref="T:System.Type" /> containing deleted types.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventHandler">
      <summary>The delegate for the <see cref="E:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEvent" /> that is raised when an assembly has been deleted.</summary>
      <param name="sender"> <see cref="T:System.Object" /> that raised the event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs">
      <summary>Represents an argument class for the <see cref="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyObsolete" /> event. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs" /> class.</summary>
      <param name="assembly">A dynamic assembly that may have changed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.#ctor(System.Reflection.Assembly,System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs" /> class.</summary>
      <param name="assembly">A dynamic assembly that may have changed.</param>
      <param name="types">An array of <see cref="T:System.Type" /> containing objects for all the types defined in this assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.-or-<paramref name="types" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.ObsoleteAssembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> that has become obsolete.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> that has become obsolete.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs.ObsoleteTypes">
      <summary>Gets the set of <see cref="T:System.Type" /> that have become obsolete.</summary>
      <returns>An array of <see cref="T:System.Type" /> containing obsolete types.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventHandler">
      <summary>An event that gets raised when an assembly has become obsolete. This delegate cannot be inherited.</summary>
      <param name="sender">
        <see cref="T:System.Object" /> that raised the event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs">
      <summary>An event that is raised when an assembly has been refreshed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs" />.</summary>
      <param name="assembly">The assembly that has been refreshed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.#ctor(System.Reflection.Assembly,System.Type[])">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs" /> containing an array of changed types.</summary>
      <param name="assembly">The assembly that has been refreshed.</param>
      <param name="types">An array of <see cref="T:System.Type" /> containing objects for all the types defined in this assembly that have been refreshed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.RefreshedAssembly">
      <summary>Gets the assembly that was refreshed.</summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> that was refreshed.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs.RefreshedTypes">
      <summary>Gets the types that were refreshed.</summary>
      <returns>An array of types.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventHandler">
      <summary>A delegate that passes along the event that an assembly has become obsolete.</summary>
      <param name="sender">The sender of the message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.AttributeScope">
      <summary>Specifies the scope of an attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.File">
      <summary>File scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.Global">
      <summary>Global scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.Language">
      <summary>Language scope.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper">
      <summary>Provides extra properties for the <see cref="T:System.Reflection.ConstructorInfo" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.#ctor(System.Reflection.ConstructorInfo,System.Type)">
      <summary>Instantiates a new instance of ConstructorInfoWrapper.</summary>
      <param name="constructor">The constructor.</param>
      <param name="reflectedType">The type of the class that was used to get this method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Attributes">
      <summary>Gets the attributes of this method.</summary>
      <returns>Returns <see cref="T:System.Reflection.MethodAttributes" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.CallingConvention">
      <summary>Gets the calling conventions for this method.</summary>
      <returns>Returns <see cref="T:System.Reflection.CallingConventions" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.ContainsGenericParameters">
      <summary>Determines whether this method has generic parameters.</summary>
      <returns>true if the method has generic parameters, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.DeclaringType">
      <summary>Gets the type that declares this method.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Equals(System.Object)">
      <summary>Determines whether this instance is the same as the specified object.</summary>
      <returns>true if the objects are equal.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes applied to this member.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets all the custom attributes applied to this member of the specified type.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="attributeType">The type of attribute</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetCustomAttributesData">
      <summary>Gets the data for the attributes that have been applied to this method.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IList`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetGenericArguments">
      <summary>Gets the type arguments of a generic method or the type parameters of a generic method definition.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetMethodBody">
      <summary>Gets a MethodBody object that provides access to the MSIL stream, local variables, and exceptions for this method.</summary>
      <returns>Returns <see cref="T:System.Reflection.MethodBody" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetMethodImplementationFlags">
      <summary>Gets the method implementation attributes.</summary>
      <returns>Returns <see cref="T:System.Reflection.MethodImplAttributes" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.GetParameters">
      <summary>Gets the parameters of this method.</summary>
      <returns>Returns <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor with the specified parameters.</summary>
      <returns>An Object containing the return value of the invoked method, or null in the case of a constructor, or null if the method's return type is void. Before calling the method or constructor, Invoke checks to see if the user has access permission and verifies that the parameters are valid.</returns>
      <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</param>
      <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from BindingFlags. If binder is null, this parameter is assigned the value Default; thus, whatever you pass in is ignored.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is null, the default binder is used.</param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.</param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used.  </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor with the specified parameters.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from BindingFlags. If binder is null, this parameter is assigned the value Default; thus, whatever you pass in is ignored.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is null, the default binder is used.</param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.</param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether one or more attributes of the specified type or of its derived types is applied to this member.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="attributeType">The type of custom attribute to search for. The search includes derived types.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.IsGenericMethodDefinition">
      <summary>Determines whether this is a generic method definition.</summary>
      <returns>true if this is a generic method definition.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.MemberType">
      <summary>Gets a MemberTypes value indicating that this is a constructor.</summary>
      <returns>Returns <see cref="T:System.Reflection.MemberTypes" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.MetadataToken">
      <summary>Gets the ID of the metadata element.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of a method.</summary>
      <returns>Returns <see cref="T:System.RuntimeMethodHandle" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Module">
      <summary>Gets the module in which the type that declares the member represented by the current MemberInfo is defined.</summary>
      <returns>Returns <see cref="T:System.Reflection.Module" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.Name">
      <summary>Gets the name of this method.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.ReflectedType">
      <summary>Gets the type of the class that was used to get this method.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ConstructorInfoWrapper.UnderlyingConstructor">
      <summary>Gets this <see cref="T:System.Reflection.ConstructorInfo" />.</summary>
      <returns>Returns <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane">
      <summary>This class inherits from <see cref="T:Microsoft.VisualStudio.Shell.WindowPane" /> and extends it to provide designer features.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.#ctor(System.ComponentModel.Design.DesignSurface)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" /> class.</summary>
      <param name="surface">The design surface for which to create the window pane.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="surface" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.AddDefaultServices">
      <summary>Adds the default services the window pane provides.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.CommandGuid">
      <summary>Gets the command UI GUID associated with this window pane.</summary>
      <returns>A GUID associated with this window pane.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Dispose(System.Boolean)">
      <summary>Disposes the design surface.</summary>
      <param name="disposing">true if <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" /> is being disposed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.EditorView">
      <summary>Gets the editor view for this window pane.</summary>
      <returns>An editor view associated with this window pane.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.GetAutomationObject(System.String)">
      <summary>Gets the automation object for this window pane.</summary>
      <returns>The automation object, or null.</returns>
      <param name="propName">The name of the automation object. This can be null or an empty string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />.-or-null if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">A <see cref="T:System.Type" /> that specifies the type of service object to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.GetToolboxItemSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether or not the given data object is supported by the designer.</summary>
      <returns>true if the data object represents a supported toolbox item.</returns>
      <param name="toolboxItem">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toolboxItem" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsBatchUpdate#FlushPendingUpdates(System.UInt32)">
      <summary>Called when Visual Studio wants the window pane to flush its state to the underlying buffer.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful.</returns>
      <param name="reserved">Reserved for the future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsDesignerInfo#get_DesignerTechnology(System.String@)">
      <summary>Returns the Windows form.</summary>
      <returns>VSConstants.s_OK.</returns>
      <param name="pbstrTechnology">[out] Always returns "Microsoft:System.Windows.Forms:Form".</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsExtensibleObject#GetAutomationObject(System.String,System.Object@)">
      <summary>Gets the automation object for this window pane.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if successful.</returns>
      <param name="propName">The name of the automation object. This can be null or an empty string.</param>
      <param name="extObj">The automation object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsToolboxUser#IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether the <see cref="F:System.ComponentModel.Design.StandardToolWindows.Toolbox" /> user supports the referenced data object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dataObject">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsToolboxUser#ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Sends notification that an item in the <see cref="F:System.ComponentModel.Design.StandardToolWindows.Toolbox" /> is selected through a click, or by pressing ENTER.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dataObject">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnDockableChange(System.Int32)">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> that a window's docked state is being altered.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDockable">true if the window frame is being docked, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnMove">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> that a window is being moved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnShow(System.Int32)">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> of a change in the window's display state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fShow">Specifies the reason for the display state change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowFrameNotify#OnSize">
      <summary>Notifies the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> that a window is being resized.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.OnClose">
      <summary>Called in response to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.ClosePane" /> method on the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.OnFlush">
      <summary>This method is called when Visual Studio wants the window pane to flush its state to the underlying buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.OnToolboxItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Called when the user double clicks or presses enter on a toolbox item on the Visual Studio toolbox.</summary>
      <returns>true if the toolbox item was used by a designer.</returns>
      <param name="toolboxItem">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toolboxItem" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane.Surface">
      <summary>Gets the design surface.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignSurface" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension">
      <summary>The base class for any object provided by a VSPackage to be called by the Visual Studio environment upon designer creation to customize or extend services and metadata provided by any implementation of <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.#ctor">
      <summary>Create a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Dispose">
      <summary>Disposes this object and its resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Dispose(System.Boolean)">
      <summary>Disposes this object and its resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Finalize">
      <summary>Destroys the object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Initialize(System.ComponentModel.Design.DesignSurface)">
      <summary>Initializes the design surface extension.</summary>
      <param name="surface">The design surface that is being created.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="surface" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.OnComponentCreated(System.ComponentModel.IComponent)">
      <summary>This method is called when a new component is created but before that component is added to the designer.</summary>
      <param name="component">The component that has been created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.OnDesignerCreated(System.ComponentModel.Design.IDesigner)">
      <summary>This method is called when a new designer is created.</summary>
      <param name="designer">The designer that has been created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.OnDesignerCreated(System.ComponentModel.IComponent,System.ComponentModel.Design.IDesigner,System.Boolean)">
      <summary>This method is called when a new designer is created.</summary>
      <param name="component">The component that has been created.</param>
      <param name="designer">The designer that has been created.</param>
      <param name="rootDesigner">The root designer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension.Surface">
      <summary>Gets the design surface this extension was initialized with.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.DesignSurface" /> this extension was initialized with, or null of the extension has been disposed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute">
      <summary>Notifies the Visual Studio environment that a VSPackage provides a <see cref="T:System.Type" /> implementing a service to customize or extend services provided by any implementation of <see cref="T:System.ComponentModel.Design.DesignSurface" /> at designer load time.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute" /> class specifying a given object as providing a VSPackage's implementation of <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" />.</summary>
      <param name="extensionType">The <see cref="T:System.Type" /> of the object providing an implementation of <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> to customize design surfaces.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extensionType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="extensionType " />does not derive from <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" />.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.ExtensionType">
      <summary>The <see cref="T:System.Type" /> of the object registered as providing a VSPackage with an implementation of <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> to customize design surfaces.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> implementation provided by the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.LoadAtIdle">
      <summary>Controls when, relative to the loading of a designer used by a VSPackage, the extensions provided by the implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute" /> registered by <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute" /> are installed.</summary>
      <returns>A Boolean value is returned:trueThe object providing design surface modifications by implementing <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> will be instantiated and initialized only during the idle period after the designer used by the VSPackage has finished loading.falseThe object providing design surface modifications by implementing <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtension" /> will be instantiated and initialized when a designer starts up.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the design surface extension.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DesignSurfaceExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the design surface extension registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService">
      <summary>Provides instances of <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> for a project. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService" />.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyDeleted">
      <summary>Notifies clients when an assembly has been deleted.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyObsolete">
      <summary>Notifies clients when an assembly has been made obsolete, that is, when it no longer resolves.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.AssemblyRefreshed">
      <summary>Notifies clients when an assembly has been refreshed, for example when it has been rebuilt and the name or configuration has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.CreateDynamicAssembly(System.String)">
      <summary>This method creates a new assembly whose contents are the given assembly file.</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" />.</returns>
      <param name="fileName">The name of the assembly.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetContextTypeResolver(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Gets a type resolver for the specified hierarchy node.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetContextTypeResolver(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Gets a type resolver for the specified hierarchy node and item ID.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeDiscoveryService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Gets a type discovery service for the specified hierarchy node.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeDiscoveryService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Gets a type discovery service for the specified hierarchy node and item ID.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeDiscoveryService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeResolutionService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Gets a type resolution service for a given hierarchy node.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetTypeResolutionService(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Gets a type resolution service for a given hierarchy node and item ID.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />.</returns>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the <see cref="T:Microsoft.VisualStudio.Package.HierarchyNode" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.IsDynamicAssembly(System.Reflection.AssemblyName)">
      <summary>Determines whether or not the specified assembly has been dynamically created.</summary>
      <returns>true if the assembly was dynamically created, otherwise false.</returns>
      <param name="name"> <see cref="T:System.Reflection.AssemblyName" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnAssemblyDeleted(Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs)">
      <summary>Raised when an assembly has been deleted.</summary>
      <param name="e"> <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyDeletedEventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnAssemblyObsolete(Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs)">
      <summary>Raised when an assembly has been made obsolete.</summary>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyObsoleteEventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnAssemblyRefreshed(Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs)">
      <summary>Raised when an assembly has been refreshed, for example when it has been rebuilt and the name or configuration has changed.</summary>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AssemblyRefreshedEventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.OnTypeObsolete(Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs)">
      <summary>Raised when a type has been made obsolete, that is, when it no longer resolves.</summary>
      <param name="e">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs" />.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.TypeObsolete">
      <summary>Notifies clients when a type has been made obsolete, that is, when it no longer resolves.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver">
      <summary>An <see cref="T:System.IDisposable" /> object that routes assembly/type resolution issues to the <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> for the given hierarchy. It is instantiated by a call to <see cref="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.GetContextTypeResolver(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver.#ctor(System.ComponentModel.Design.ITypeResolutionService)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver" /> for the specified service.</summary>
      <param name="resolver">
        <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.DynamicTypeService.ContextTypeResolver.System#IDisposable#Dispose">
      <summary>Disposes the object and its resources.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObject">
      <summary>Provides the base class for types whose instances are accessible for each project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> class.</summary>
      <param name="objectType">The <see cref="T:System.Type" /> of the global object.</param>
      <param name="objectName">A <see cref="T:System.String" /> containing the name of the global object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.ClearInstance">
      <summary>Clears the <see cref="P:Microsoft.VisualStudio.Shell.Design.GlobalObject.Instance" /> property.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalObject.Created">
      <summary>Occurs when an instance of the global object is created.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.CreateInstance">
      <summary>Creates a cached instance of the global object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents an instance of the global object class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.Equals(System.Object)">
      <summary>Checks if the specified object is equal to the current global object.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="o">The object to compare with this <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.GetHashCode">
      <summary>Returns the hash code for the current global object.</summary>
      <returns>An <see cref="T:System.Int32" /> that specifies a hash value for the current global object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.GetSerializer(System.Type)">
      <summary>Returns the checked serializer of the specified type for the global object.</summary>
      <returns>A serializer of the specified type if supported; otherwise, null.</returns>
      <param name="serializerType">The type of serializer to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializerType" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The non-null serializer retrieved is itself not serializable.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.GetSerializerCore(System.Type)">
      <summary>Returns a serializer of the specified type for the global object.</summary>
      <returns>A serializer of the specified type if supported; otherwise, null.</returns>
      <param name="serializerType">The type of serializer to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObject.Instance">
      <summary>Gets an on-demand created instance of the global object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents an instance of the global object class.</returns>
      <exception cref="T:System.InvalidOperationException">The resulting instance is not serializable, which indicates an incorrect implementation.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObject.Name">
      <summary>Gets the recommended name of the global object.</summary>
      <returns>A <see cref="T:System.String" /> that contains the recommended name of the global object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.OnCreated(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalObject.Created" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.PerformChange">
      <summary>Reinitializes the global object and notifies users to changes to its state or shape.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObject.PerformRemove">
      <summary>Clears the global object and notifies users of its removal.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection">
      <summary>A strongly typed collection of global objects. The collection can be read-write or read-only. A read-write collection can be cheaply passed to the constructor of GlobalObjectCollection to make a read only version without copying the collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor">
      <summary>Initializes a new instance of a strongly-typed collection of global objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject[])">
      <summary>Initializes a new instance of a strongly-typed collection of global objects initially populated by an array of global objects.</summary>
      <param name="items">An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> objects to initially populate the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject[],System.Boolean)">
      <summary>Initializes a new instance of a strongly-typed collection of global objects initially populated by an array of global objects.</summary>
      <param name="items">An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> objects to initially populate the collection.</param>
      <param name="readOnly">If true, the collection cannot be modified. The default value for <paramref name="readOnly" /> if not passed is false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection)">
      <summary>Initializes a new instance of a strongly-typed collection of global objects initially populated by the array <paramref name="items" />.</summary>
      <param name="items">A collection of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> objects to initially populate the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection,System.Boolean)">
      <summary>Initializes a new instance of global objects for the specified global object collection for the specified read/write access.</summary>
      <param name="items">A collection of objects to initially populate the collection.</param>
      <param name="readOnly">If true, the collection cannot be modified. The default value for <paramref name="readOnly" /> if not passed is false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Add(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Adds a new item to the collection.</summary>
      <param name="item">An object to be appended to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalObject[])">
      <summary>Appends the objects in an array to the end of the collection.</summary>
      <param name="items">An array of objects to be appended to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection)">
      <summary>Appends the objects in an array to the end of the collection.</summary>
      <param name="items">A collection of objects to be appended to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Clear">
      <summary>Clears the contents of this collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Contains(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Determines whether this collection contains the given item.</summary>
      <returns>true if the collection contains the object, otherwise false.</returns>
      <param name="item">An object that will have its collection membership verified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.CopyTo(Microsoft.VisualStudio.Shell.Design.GlobalObject[],System.Int32)">
      <summary>Copies the contents of this collection to the given array starting at the given index.</summary>
      <param name="array">A destination for copied objects.</param>
      <param name="index">The position in the collection at which to begin copying.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Count">
      <summary>Returns the number of items in this collection.</summary>
      <returns>The number of items in this collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.GetEnumerator">
      <summary>Returns an enumerator for this collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IndexOf(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Gets the position of an object in the collection.</summary>
      <returns>The position of the object in the collection, or -1 if the object is not in the collection.</returns>
      <param name="item">An item that should have its offset retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Inserts a new item into the collection at the given index.</summary>
      <param name="index">The position in the collection where the item should be inserted.</param>
      <param name="item">The item to be inserted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IsFixedSize">
      <summary>Determines whether this collection's size can be changed.</summary>
      <returns>true if the size cannot be changed, false if it can.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IsReadOnly">
      <summary>Determines whether this collection is read-only.</summary>
      <returns>true if the collection is read-only, false if it is read-write.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.IsSynchronized">
      <summary>Determines whether this collection is synchronized for multi-threaded access.</summary>
      <returns>true if the collection is synchronized, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Item(System.Int32)">
      <summary>Gets or sets the item at the given index.</summary>
      <returns>The item.</returns>
      <param name="index">The position of the requested item in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.Remove(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Removes an object from the collection.</summary>
      <param name="item">The object to be removed from the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.RemoveAt(System.Int32)">
      <summary>Removes an object from the collection at the specified position.</summary>
      <param name="index">The position of the item in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.SyncRoot">
      <summary>Gets the object on which to synchronize access.</summary>
      <returns>The object on which to synchronize access.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of this collection to the given array starting at the given index.</summary>
      <param name="array">The destination for the copied items.</param>
      <param name="index">The position in the array at which to begin copying.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an object to the collection.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
      <param name="item">The object to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether an object is in the collection.</summary>
      <returns>true if the object is in the collection, otherwise false.</returns>
      <param name="item">An item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the position of an object in the collection.</summary>
      <returns>The position of the object in the collection.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Adds an item to the collection at the specified position.</summary>
      <param name="index">The position at which the <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to be inserted in the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the global object at the specified index. </summary>
      <returns>The global object.</returns>
      <param name="index">The index of the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes an object from the collection.</summary>
      <param name="item">The object to be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute">
      <summary>Allows global object providers to tag the global object instances they provide with additional metadata. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute" /> for the specified global object.</summary>
      <param name="globalObject">The global object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalObject,System.Collections.IDictionary)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute" /> for the specified global object and custom data.</summary>
      <param name="globalObject">The global object.</param>
      <param name="customData">An <see cref="T:System.Collections.IDictionary" /> to store custom data.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.CustomData">
      <summary>Gets the custom data.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of custom data.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalObjectDescriptionAttribute.GlobalObject">
      <summary>Gets the global object to which the custom data should apply.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider">
      <summary>Provides a base class for accessing one or more global object types. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" />.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.CollectionChanged">
      <summary>Occurs when there is a change to the collection of global object or global types.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Dispose">
      <summary>Disposes this global object provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Dispose(System.Boolean)">
      <summary>Disposes this object and its resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjects(EnvDTE.Project)">
      <summary>Gets a collection of global objects for the specified project. </summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the global objects for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> to obtain global objects from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="project" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The implementation of <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjectsCore(EnvDTE.Project,System.Type)" /> returned null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjects(EnvDTE.Project,System.Type)">
      <summary>Gets a collection of global objects for the specified project that match the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the global objects of the specified <see cref="T:System.Type" /> for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> to obtain global objects from. </param>
      <param name="baseType">The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> to filter on. Can be null to indicate no filtering.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="project" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The implementation of <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjectsCore(EnvDTE.Project,System.Type)" /> returned null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalObjectsCore(EnvDTE.Project,System.Type)">
      <summary>When overridden in a derived class, returns a collection of global objects for the specified project that match the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the global objects of the specified <see cref="T:System.Type" /> for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> to obtain global objects from. </param>
      <param name="baseType">The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> to filter on. Can be null to indicate no filtering.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalTypes(EnvDTE.Project)">
      <summary>Gets a collection of global types for the specified project that match the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> containing the global types for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" />  to obtain global types from. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="project" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The implementation of <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalTypesCore(EnvDTE.Project)" /> returned null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetGlobalTypesCore(EnvDTE.Project)">
      <summary>Gets a collection of global types for the specified project that match the specified type. </summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> containing the global types for the specified project.</returns>
      <param name="project">The <see cref="T:EnvDTE.Project" /> from which to obtain global types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.GetService(System.Type)">
      <summary>Gets the requested service.</summary>
      <returns>An <see cref="T:System.Object" /> that represents an instance of the requested service; otherwise, null if no such service exists.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service to retrieve </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
      <summary>Gets the service provider.</summary>
      <param name="riid">The GUID of the service provider.</param>
      <param name="ppv">[out] Returns a pointer to the service provider as an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" />. </param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An internal <see cref="T:System.IServiceProvider" /> has not been set by a call to <see cref="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(System.Object)" /> or the provider cannot be cast to the IObjectWithSite type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
      <summary>Sets the <see cref="T:System.IserviceProvider" />. </summary>
      <param name="site">The service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.OnCollectionChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider.CollectionChanged" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory">
      <summary>Provides a base class for enumerating global object providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory.#ctor">
      <summary>Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectProviderFactory.GetProviders">
      <summary>Returns an array of all the currently available global object providers.</summary>
      <returns>An array containing instances of the currently available <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" /> instances.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectService">
      <summary>Maintains the current table of global object providers. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.#ctor(System.IServiceProvider,EnvDTE.Project,System.Type)">
      <summary>Initializes an new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectService" /> class</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that will be used to obtain other services.</param>
      <param name="project">The <see cref="T:EnvDTE.Project" /> associated with this global object service.</param>
      <param name="serializerType">The serializer <see cref="T:System.Type" /> supported by the current designer loader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.GetGlobalObjects">
      <summary>Returns a collection of all the currently available global objects.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the currently available global objects.</returns>
      <exception cref="T:System.NotSupportedException">One of the queried global service provider factories returned null provider or provider collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.GetGlobalObjects(System.Type)">
      <summary>Returns a collection of currently available global objects that are of the specified type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectCollection" /> containing the currently available global objects.</returns>
      <param name="baseType">The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObject" /> to filter on.</param>
      <exception cref="T:System.NotSupportedException">One of the queried global service provider factories returned null provider or provider collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.GetGlobalTypes">
      <summary>Returns a collection of currently available global types.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> containing the currently available global types.</returns>
      <exception cref="T:System.NotSupportedException">One of the queried global service provider factories returned null provider or provider collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalObjectService.System#IDisposable#Dispose">
      <summary>Disposes <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalType">
      <summary>Provides the base class for types that are defined in the project or generated from code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</summary>
      <param name="objectType">The <see cref="T:System.Type" /> of the global type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> is null.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changed">
      <summary>Occurs after the current global type is modified.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changing">
      <summary>Occurs before the current global type is modified.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.ClearObjectType">
      <summary>Clears the <see cref="P:Microsoft.VisualStudio.Shell.Design.GlobalType.ObjectType" /> property. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.Equals(System.Object)">
      <summary>Checks if the specified object is equal to the current global type.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="o">The object to compare with this <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.GetHashCode">
      <summary>Returns the hash code for the current global type.</summary>
      <returns>An <see cref="T:System.Int32" /> that specifies a hash value for the current global type.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.GetObjectType">
      <summary>Returns the type of this global type.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalType.ObjectType">
      <summary>Gets the checked type of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalType" />.</returns>
      <exception cref="T:System.InvalidOperationException">The global object's type resolved to null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changed" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnChanging(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Changing" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnRemoved(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removed" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.OnRemoving(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removing" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.PerformChange">
      <summary>Reinitializes the global type and notifies users to changes to its shape.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalType.PerformRemove">
      <summary>Clears the global type and notifies users of its removal.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removed">
      <summary>Occurs after the current global type is removed from use.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.GlobalType.Removing">
      <summary>Occurs before the current global type is removed from use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection">
      <summary>A strongly typed collection of global types.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor">
      <summary>Creates a strongly-typed collection of global objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalType[])">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalType[],System.Boolean)">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
      <param name="readOnly">Indicates whether or not the collection may be subsequently modified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection)">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.#ctor(Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection,System.Boolean)">
      <summary>Creates a strongly-typed collection of global objects.</summary>
      <param name="items">The objects added to the collection in this overloaded constructor.</param>
      <param name="readOnly">Indicates whether or not the collection may be subsequently modified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Add(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Adds a new item to the collection.</summary>
      <param name="item">The object to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalType[])">
      <summary>Adds a range of items to the collection.</summary>
      <param name="items">The objects to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.AddRange(Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection)">
      <summary>Adds a range of items to the collection.</summary>
      <param name="items">The objects to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Clear">
      <summary>Clears the contents of this collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Contains(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Determines whether the specified item is in the collection</summary>
      <returns>true if this collection contains the given item, otherwise false.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.CopyTo(Microsoft.VisualStudio.Shell.Design.GlobalType[],System.Int32)">
      <summary>Copies the contents of this collection to the given array starting at the given <paramref name="index" />.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The index of the array at which to begin copying.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Count">
      <summary>Gets the number of items in this collection.</summary>
      <returns>The number of items in this collection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Empty">
      <summary>Gets an empty instance of this collection.</summary>
      <returns>An empty instance of this collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.GetEnumerator">
      <summary>Returns an enumerator you can use to enumerate through this collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IndexOf(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Get the position of the specified item.</summary>
      <returns>The index at which the item was found, or -1 if it is not in the collection.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Inserts an item into the underlying list at the specified position.</summary>
      <param name="index">The position at which the item should be inserted.</param>
      <param name="item">The object to be inserted into the collection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IsFixedSize">
      <summary>Gets whether or not this collection's size can be changed.</summary>
      <returns>true if this collection's size cannot be changed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IsReadOnly">
      <summary>Gets whether the collection is read-only.</summary>
      <returns>true if this collection is read-only, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.IsSynchronized">
      <summary>Determines whether this collection is synchronized for multi-threaded access.</summary>
      <returns>Always returns false. Instances of <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection" /> are never synchronized.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Item(System.Int32)">
      <summary>Gets an item at the specified position.</summary>
      <returns>The item found at the given index.</returns>
      <param name="index">The position of the item within the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.Remove(Microsoft.VisualStudio.Shell.Design.GlobalType)">
      <summary>Remove an item from the collection.</summary>
      <param name="item">The object to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified position.</summary>
      <param name="index">The position of the item to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.SyncRoot">
      <summary>Returns an object to use for thread-safe access.</summary>
      <returns>An object to use for thread-safe access.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies objects to the specified array starting at the specified position.</summary>
      <param name="array">The target array.</param>
      <param name="index">The position in the array at which to start copying.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the collection.</summary>
      <returns>The position at which the item was added.</returns>
      <param name="item">The item to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the specified item is in the collection.</summary>
      <returns>true if the object can be found in the collection, otherwise false.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the position of an item in the collection.</summary>
      <returns>The position of the item, or -1 if it was not found.</returns>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an object in the collection at the specified position.</summary>
      <param name="index">The position at which the item should be inserted.</param>
      <param name="item">The item to be inserted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the item at the specified position in the collection.</summary>
      <returns>The item at the specified position.</returns>
      <param name="index">The index of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.GlobalTypeCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes an item from the collection.</summary>
      <param name="item">The item to be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine">
      <summary>Provides a default implementation of undo management for designers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine" />.</summary>
      <param name="provider">A instance of the <see cref="T:System.IServiceProvider" /> interface to be used to obtain system resources by the instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine" />.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:System.IServiceProvider" /> does not supply necessary services.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>Adds the undo unit to the undo unit manager.</summary>
      <param name="unit">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.CreateUndoUnit(System.String,System.Boolean)">
      <summary>Creates a new undo unit.</summary>
      <returns>The created <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</returns>
      <param name="name">The name of the undo unit.</param>
      <param name="primary">true if the undo unit is primary, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>Closes this unit if it is a parent undo unit.</summary>
      <param name="unit">
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.Dispose(System.Boolean)">
      <summary>Disposes the resources of this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.Microsoft#VisualStudio#TextManager#Interop#IVsLinkedUndoClient#OnInterveningUnitBlockingLinkedUndo">
      <summary>Indicates that the undo manager is blocking another undo manager from executing a linked action. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit">
      <summary>Extends support for encapsulating a unit of work that a user can undo.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.#ctor(System.ComponentModel.Design.UndoEngine,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit" /> class.</summary>
      <param name="engine">The undo engine that owns this undo unit.</param>
      <param name="name">The name for this undo unit.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Add(Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit)">
      <summary>Adds an undo unit to the parent collection.</summary>
      <param name="pUU">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit" /> to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Close(Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit,System.Int32)">
      <summary>Closes the specified parent undo unit.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the parent unit had open child units and it was successfully closed. <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the parent undo unit did not have an open child and it was successfully closed. <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> if <paramref name="parentUnit" /> does not match the currently open parent undo unit. Do not change any internal state unless the parent unit is blocked. </returns>
      <param name="parentUnit">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit" />  to close.</param>
      <param name="fCommit">true if the unit should be kept in the collection, false if it should be discarded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Do(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager)">
      <summary>Performs the undo operation.</summary>
      <param name="pManager">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#FindUnit(Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit)">
      <summary>Searches for the specified unit in the child undo unit hierarchy.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the undo unit was located, otherwise <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
      <param name="pUU">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit" /> to search for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#GetDescription(System.String@)">
      <summary>Gets the description of the undo unit.</summary>
      <param name="name">[out] Returns the description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#GetParentState(System.UInt32@)">
      <summary>Gets the state of the top-level parent undo unit.</summary>
      <param name="state">[out] Returns the state of the parent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#GetUnitType(System.Guid@,System.Int32@)">
      <summary>Gets the type of the undo unit.</summary>
      <param name="clsid">[out] Returns the GUID of this class.</param>
      <param name="id">[out] Returns 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#OnNextAdd">
      <summary>Notifies the last undo unit in the collection that a new unit has been added.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleParentUndoUnit#Open(Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit)">
      <summary>Opens an undo unit.</summary>
      <param name="parentUnit">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit" /> to be opened</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#Do(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager)">
      <summary>Performs the undo operation.</summary>
      <param name="manager">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#GetDescription(System.String@)">
      <summary>Gets the description of the undo unit.</summary>
      <param name="name">[out] Returns the name of the undo unit.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#GetUnitType(System.Guid@,System.Int32@)">
      <summary>Gets the type of the undo unit.</summary>
      <param name="clsid">[out] The GUID of this class.</param>
      <param name="id">[out] Returns 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.OleUndoEngine.UndoUnit.Microsoft#VisualStudio#OLE#Interop#IOleUndoUnit#OnNextAdd">
      <summary>Notifies the last undo unit in the collection that a new unit has been added.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService">
      <summary>An abstract class that provides the Visual Studio implementation of the <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService.GetType(System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Design.ReferenceType)">
      <summary>When implemented in a derived class, attempts to retrieve a reference type based on search criteria like the name of the type and its case-sensitivity.</summary>
      <returns>The retrieved type.</returns>
      <param name="name">The name of the reference to be retrieved.</param>
      <param name="throwOnError">If true, indicates that a type retrieval error should throw an exception of type <see cref="T:System.TypeLoadException" />.</param>
      <param name="ignoreCase">If true, indicates that the name search should be case-sensitive.</param>
      <param name="type">A value from the <see cref="T:Microsoft.VisualStudio.Shell.Design.ReferenceType" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute">
      <summary>Declares additional metadata for types or objects, allowing third parties to modify the set of metadata available on a class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" />, associating a new metadata <see cref="T:System.Type" /> with the current <see cref="T:System.Type" />.</summary>
      <param name="runtimeType">The <see cref="T:System.Type" /> whose metadata will be updated.</param>
      <param name="metadataType">The <see cref="T:System.Type" /> containing the metadata to be added to an existing type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.IsGlobal">
      <summary>Gets or sets the scope of the metadata modifications provided by an instance <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" /></summary>
      <returns>If the value is true, the scope is global: the modification is applied to all instances of the run time type specified in the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" /> constructor.If the value is false, the scope is local: the modification is applied to all instances of the run time type specified in the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute" /> constructor created on the design surface provided by the current VSPackage.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.MetadataType">
      <summary>Gets the type of the metadata.</summary>
      <returns>The <see cref="T:System.Type" /> of the new metadata object assigned to an existing run time <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the designer metadata.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.RuntimeType">
      <summary>Gets the runtime type.</summary>
      <returns>The <see cref="T:System.Type" /> of the existing runtime object to be modified.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerMetadataAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the designer metadata registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute">
      <summary>Associates one or more categories with each designer in the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute" /> with the specified category name.</summary>
      <param name="categoryName">The name of a category associated with the designer.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.CategoryName">
      <summary>Gets the programmatic, nonlocalized name for this category.</summary>
      <returns>The programmatic, nonlocalized name for this category.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the designer options.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideDesignerOptionsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes this attribute from the registry using the specified registry context.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute">
      <summary>Signifies that one or more classes in a package are global object providers. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute" /> class.</summary>
      <param name="providerType">The <see cref="T:System.Type" /> of the provider. The provider must derive from the <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" /> class </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.ProviderType">
      <summary>Gets the type of declared global object provider.</summary>
      <returns>The <see cref="T:System.Type" /> of the associated provider class, which must be derived from <see cref="T:Microsoft.VisualStudio.Shell.Design.GlobalObjectProvider" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute using the specified registry context.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that contains registration data. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.TypeId">
      <summary>Gets a unique identifier associated with the attribute.</summary>
      <returns>An object that is a unique identifier for the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideGlobalObjectProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes this attribute from the registry using the specified registry context.</summary>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that contains registration data. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute">
      <summary>This attribute can be placed on classes that derive from <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" /> to associate them with a particular type of view. There are three types of view adapters: file adapters provide support only for a specific file, language adapters support all the files associated with a given language service, and global adapters are available for any type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute" /> for the specified base type.</summary>
      <param name="baseType">The type that this view adapter should handle.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.#ctor(System.Type,Microsoft.VisualStudio.Shell.Design.AttributeScope,System.Object)">
      <summary>Initializes a new  for the specified base type and scope.</summary>
      <param name="baseType">The type that this view adapter should handle.</param>
      <param name="scope">A value from <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" /> enumeration.</param>
      <param name="scopeData">Data associated with the scope of the attribute.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.BaseType">
      <summary>Gets the base type of the view adapter.</summary>
      <returns>The base type of the view adapter.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the view adapter.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.Scope">
      <summary>Gets the attribute scope of the view adapter.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.ScopeData">
      <summary>Gets the scope data associated with the scope of the view adapter.</summary>
      <returns>The scope data associated with the scope of the view adapter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.TypeId">
      <summary>Gets an ID that is unique for each attribute scope. </summary>
      <returns>The full name of the attribute plus the scope.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.ProvideViewAdapterAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the view adapter's registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.ReferenceType">
      <summary>An enumeration of reference types used by the <see cref="T:Microsoft.VisualStudio.Shell.Design.ProjectTypeResolutionService" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.Generated">
      <summary>Generated</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.None">
      <summary>None</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.Normal">
      <summary>Normal</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.NormalFast">
      <summary>NormalFast</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Design.ReferenceType.Project">
      <summary>Project</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs">
      <summary>An event that gets raised when a type has become obsolete.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs" /> for the specified obsolete type.</summary>
      <param name="typeName">The name of the obsolete type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventArgs.ObsoleteTypeName">
      <summary>Gets the name of the obsolete type.</summary>
      <returns>The name of the obsolete type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.TypeObsoleteEventHandler">
      <summary>An event that gets raised when a type has become obsolete.</summary>
      <param name="sender">Delegate sender.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder">
      <summary>Creates new virtual typea. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AssemblyName">
      <summary>Gets or sets the name of the assembly to which the virtual type should belong.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> that represents an assembly name to which the virtual type should belong.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Attributes">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Attributes" /> for the virtual type.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection" /> that represents the collection of attributes.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.BaseType">
      <summary>Gets or sets the base type from which the virtual type is derived.</summary>
      <returns>A <see cref="T:System.Type" /> that represents a base type from which the virtual type is derived.</returns>
      <exception cref="T:System.ArgumentNullException">The value passed is null.</exception>
      <exception cref="T:System.ArgumentException">The type passed has a <see cref="P:System.Type.UnderlyingSystemType" /> that differs from the type, or if the type passed is a virtual type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Constructors">
      <summary>Gets a collection of constructors for this virtual type.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.CreateType">
      <summary>Creates a virtual type based on the configuration of this virtual type builder.</summary>
      <returns>A created virtual type.</returns>
      <exception cref="T:System.InvalidOperationException">The virtual type builder is not completely configured. A virtual type builder must have a type name, a base type and an implementer to be considered completely configured.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.DeclaringType">
      <summary>Gets or sets the declaring type for the resulting virtual type.</summary>
      <returns>A <see cref="T:System.Type" /> that represents a <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.DeclaringType" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Events">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Events" /> for the virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection" /> that represents a collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Events" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Fields">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Fields" /> for the resulting virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection" /> that represents a collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Fields" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Implementor">
      <summary>Gets or sets the implementer that will be used for the resulting virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor" /> that will be used for the resulting virtual type.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.InitializeFromType(System.ComponentModel.Design.ITypeResolutionService,System.CodeDom.CodeNamespace)">
      <summary>Initializes this virtual type builder with data obtained from the given type.</summary>
      <param name="typeResolutionService">The type resolution service to use when resolving types in the Code Document Object Model (CodeDOM) tree.</param>
      <param name="ns">The namespace that contains a type to create. This namespace must contain exactly one type.</param>
      <exception cref="T:System.ArgumentNullException">If any of the parameters are null.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="ns" /> contains anything other than a single type declaration.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.InitializeFromType(System.ComponentModel.Design.ITypeResolutionService,System.CodeDom.CodeTypeDeclaration)">
      <summary>Initializes this virtual type builder with data obtained from the given type.</summary>
      <param name="typeResolutionService">The type resolution service to use when resolving types in the Code Document Object Model (CodeDOM) tree.</param>
      <param name="typeDecl">Used to initialize a type based on a type declaration.</param>
      <exception cref="T:System.ArgumentNullException">If any of the parameters are null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.InitializeFromType(System.ComponentModel.Design.ITypeResolutionService,System.CodeDom.CodeTypeDeclaration,System.String)">
      <summary>Initializes this virtual type builder with data obtained from the given type.</summary>
      <param name="typeResolutionService">The type resolution service to use when resolving types in the Code Document Object Model (CodeDOM) tree.</param>
      <param name="typeDecl">Used to initialize a type based on a type declaration.</param>
      <param name="namespaceName">The namespace that contains a type to create. This namespace must contain exactly one type.</param>
      <exception cref="T:System.ArgumentNullException">If any of the parameters are null.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="ns" /> contains anything other than a single type declaration.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.IsPublic">
      <summary>Gets or sets a value indicating whether the resulting virtual type has the public access modifier.</summary>
      <returns>true if the access modifier for the virtual type is public; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.IsSerializable">
      <summary>Gets or sets whether the resulting virtual type is serializable.</summary>
      <returns>true if the resulting virtual type is serializable, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Methods">
      <summary>Gets the collection of methods for the resulting virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection" /> that represents the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Methods" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Properties">
      <summary>Gets the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Properties" /> for the virtual type.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection" /> that represents the collection of <see cref="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.Properties" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.TypeName">
      <summary>Gets or sets the type name for the virtual type.</summary>
      <returns>The type name.</returns>
      <exception cref="T:System.ArgumentException">The provided type name does not conform to a valid type name. Valid type names are defined as names consisting of letters, numbers, an underscore and one or more "." or "+" characters.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection">
      <summary>Represents the collection of attributes. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection.Add(System.Attribute)">
      <summary>Adds an <see cref="T:System.Attribute" /> to the end of the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection" />.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Attribute" /> to be added to the end of the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be placed on a class.</exception>
      <exception cref="T:System.ArgumentNullException">The attribute is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection.Item(System.Int32)">
      <summary>Gets or sets the attribute at the specified index.</summary>
      <returns>An <see cref="T:System.Attribute" /> at the specified index.</returns>
      <param name="index">The 0-based index of the attribute.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection.Remove(System.Attribute)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Attribute" /> from the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.AttributeCollection" />.</summary>
      <param name="value">The <see cref="T:System.Attribute" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection">
      <summary>Represents the collection of constructors. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Add(System.Reflection.ConstructorInfo)">
      <summary>Adds a <see cref="T:System.Reflection.ConstructorInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.ConstructorInfo" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Add(System.Type[])">
      <summary>Adds an array of <see cref="T:System.Reflection.ConstructorInfo" /> to the end of the collection. </summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection" /> index at which the value has been added.</returns>
      <param name="argumentTypes">The types of arguments to be passed to the constructor. This can be null or an empty array to declare an empty constructor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Add(System.Type[],System.Attribute[])">
      <summary>Adds an array of <see cref="T:System.Reflection.ConstructorInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="argumentTypes">The types of arguments to be passed to the constructor. This can be null or an empty array to declare an empty constructor.</param>
      <param name="attributes">An array of attributes to be attached to this constructor. This may be null or empty.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the constructor at the specified index.</summary>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.ConstructorInfoCollection.Remove(System.Reflection.ConstructorInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.ConstructorInfo" /> from the collection.</summary>
      <param name="value">The <see cref="T:System.Reflection.ConstructorInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection">
      <summary>Represents the collection of events. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.Reflection.EventInfo)">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.EventInfo" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.String,System.Type)">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the event to add.</param>
      <param name="handlerType">The type of delegate this event represents.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="handlerType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.String,System.Type,System.Attribute[])">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the event to add.</param>
      <param name="handlerType">The type of delegate this event represents.</param>
      <param name="attributes">This value must be <see cref="F:System.Reflection.MethodAttributes.Public" />  and/or <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="handlerType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Add(System.String,System.Type,System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds an <see cref="T:System.Reflection.EventInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the event to add.</param>
      <param name="handlerType">The type of delegate this event represents.</param>
      <param name="attributes">An array of <see cref="T:System.Attribute" /> objects.</param>
      <param name="methodAttributes">The only method attributes currently supported are <see cref="F:System.Reflection.MethodAttributes.Public" /> and/or <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="handlerType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type-or-<paramref name="methodAttributes" /> does not contain <see cref="F:System.Reflection.MethodAttributes.Public" /> or contains set bits other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />, or attributes passed in through the <paramref name="attributes" /> parameter cannot be applied to events.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the event at the specified index.</summary>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.EventInfoCollection.Remove(System.Reflection.EventInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.EventInfo" /> from the collection. </summary>
      <param name="value">The <see cref="T:System.Reflection.EventInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection">
      <summary>Represents the collection of fields. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.Reflection.FieldInfo)">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.FieldInfo" /> to be added to the end of the collection. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type)">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the field to add.</param>
      <param name="fieldType">The type of field.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fieldType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type,System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the field to add.</param>
      <param name="fieldType">The type of field.</param>
      <param name="attributes">An array of attributes that must be <see cref="F:System.Reflection.FieldAttributes.Public" /> and/or <see cref="F:System.Reflection.FieldAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fieldType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type,System.Attribute[],System.Reflection.FieldAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.FieldInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the field to add.</param>
      <param name="fieldType">The type of field.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. <see cref="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Add(System.String,System.Type,System.Attribute[],System.Reflection.FieldAttributes)" /> only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="fieldAttributes">This parameter specifies additional field attributes for this member. The default field attribute is <see cref="F:System.Reflection.FieldAttributes.Public" />. The only field attributes currently supported are <see cref="F:System.Reflection.FieldAttributes.Public" /> and <see cref="F:System.Reflection.FieldAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fieldType" /> or an element in <paramref name="attributes" /> is null. <paramref name="attributes" /> itself may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldType" /> is not a run-time type-or-<paramref name="fieldAttributes" /> does not contain <see cref="F:System.Reflection.FieldAttributes.Public" /> or contains set bits other than <see cref="F:System.Reflection.FieldAttributes.Public" /> and <see cref="F:System.Reflection.FieldAttributes.Static" />, or attributes passed in through the <paramref name="attributes" /> parameter cannot be applied to fields.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Reflection.FieldInfo" /> at the specified index.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.FieldInfoCollection.Remove(System.Reflection.FieldInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.FieldInfo" /> from the collection.</summary>
      <param name="value">The <see cref="T:System.Reflection.FieldInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection">
      <summary>Represents the collection of methods. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.Reflection.MethodInfo)">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.MethodInfo" /> to be added to the end of the collection. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[])">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="returnType">The return type of the method. This should be typeof(void) for void return types.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="returnType" /> is null.-or-An element in <paramref name="paramTypes" /> is null.<paramref name="paramTypes" /> property may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="returnType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="returnType">The return type of the method. This should be typeof(void) for void return types.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. The <see cref="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[])" /> method only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="returnType" /> is null.-or-An element in <paramref name="paramTypes" /> is null.-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes " />and<paramref name=" paramTypes" /> properties may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.MethodInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="returnType">The return type of the method. This should be typeof(void) for void return types.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. The <see cref="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Add(System.String,System.Type,System.Type[],System.Attribute[],System.Reflection.MethodAttributes)" /> method only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="methodAttributes">This parameter specifies additional event attributes for this member. The default method attribute is <see cref="F:System.Reflection.MethodAttributes.Public" />. The only method attributes supported today are <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" /> .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="returnType" /> is null.-or-An element in <paramref name="paramTypes" /> is null.-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes " />and<paramref name=" paramTypes" /> properties may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handlerType" /> is not a run-time type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the method at the specified index.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the method to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than the number of items in the collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.MethodInfoCollection.Remove(System.Reflection.MethodInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.MethodInfo" /> from the collection. </summary>
      <param name="value">The <see cref="T:System.Reflection.MethodInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection">
      <summary>Represents the collection of properties. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.Reflection.PropertyInfo)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The <see cref="T:System.Reflection.PropertyInfo" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines whether this property is read-only or read-write.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="methodAttributes">Specifies additional event attributes for this member. The default method attribute is <see cref="F:System.Reflection.MethodAttributes.Public" />. The only method attributes supported today are <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" /> .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.<paramref name="attributes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Type[])">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read-only or read-write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="paramTypes" /> is null.<paramref name="paramTypes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Type[],System.Attribute[])">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection. </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.-or-An element in <paramref name="paramTypes" /> is null.<paramref name="attributes" /> and <paramref name="paramTypes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Add(System.String,System.Type,System.Boolean,System.Type[],System.Attribute[],System.Reflection.MethodAttributes)">
      <summary>Adds a <see cref="T:System.Reflection.PropertyInfo" /> to the end of the collection.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="name">The name of the property to add.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="readOnly">Determines if this property is read only or read write.</param>
      <param name="attributes">This parameter is used to configure the class member appropriately. Add only accepts the values of <see cref="T:System.CodeDom.MemberAttributes" /> that fit into the <see cref="F:System.CodeDom.MemberAttributes.AccessMask" /> or <see cref="F:System.CodeDom.MemberAttributes.ScopeMask" /> categories.</param>
      <param name="methodAttributes">Specifies additional event attributes for this member. The default method attribute is <see cref="F:System.Reflection.MethodAttributes.Public" />. The only method attributes supported today are <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="propertyType" /> is null-or-An element in <paramref name="attributes" /> is null.-or-An element in <paramref name="paramTypes" /> is null.<paramref name="attributes" /> and <paramref name="paramTypes" /> may be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyType" /> is not a runtime type.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the property at the specified index.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> at the specified index.</returns>
      <param name="index">The 0-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than the number of items in the collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeBuilder.PropertyInfoCollection.Remove(System.Reflection.PropertyInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Reflection.PropertyInfo" /> from the collection.</summary>
      <param name="value">The <see cref="T:System.Reflection.PropertyInfo" /> to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor">
      <summary>The base class you must derive from to provide an implementation of your virtual type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>Adds the given delegate to the given event.</summary>
      <param name="eventInfo">The event to add the handler to.</param>
      <param name="instance">The instance on which to add the event handler. This may be null if the event is static.</param>
      <param name="handler">The event handler to add.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.GetField(System.Reflection.FieldInfo,System.Object)">
      <summary>Gets the value of the requested field.</summary>
      <returns>An object that represents the requested field.</returns>
      <param name="field">The field to get the value of.</param>
      <param name="instance">The instance on which to retrieve the field. This may be null if the field is static.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
      <summary>Gets the value of the requested property.</summary>
      <returns>An object that represents the requested property.</returns>
      <param name="instance">The instance on which to retrieve the property. This may be null if the property is static.</param>
      <param name="args">An optional array of arguments used for parameterized properties.  This will never be null, but may be an empty array.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.InvokeConstructor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>Creates an instance of a type.</summary>
      <returns>An object that represents a created instance of a type.</returns>
      <param name="args">The parameters to pass to the constructor.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
      <summary>Invokes a method on the object.</summary>
      <returns>An object that represents a return value of an invoked method.</returns>
      <param name="method">The method to invoke.</param>
      <param name="instance">The instance on which to invoke the method. This may be null if the method is static.</param>
      <param name="args">The arguments to the method.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.RemoveEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>Removes the given delegate from the given event.</summary>
      <param name="eventInfo">The event to remove the handler from.</param>
      <param name="instance">The instance on which to remove the event handler.  This may be null if the event is static.</param>
      <param name="handler">The event handler to remove.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.SetField(System.Reflection.FieldInfo,System.Object,System.Object)">
      <summary>Sets the value of the requested field.</summary>
      <param name="field">The field for which to set the value.</param>
      <param name="instance">The instance on which to set the field. This may be null if the field is static.</param>
      <param name="value">The new value of the field.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VirtualTypeImplementor.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
      <summary>Sets the value of the requested property.</summary>
      <param name="instance">The instance on which to set the property. This may be null if the property is static.</param>
      <param name="value">An optional array of arguments used for parameterized properties.  This will never be null, but may be an empty array.</param>
      <param name="args">The new value of the property.</param>
      <exception cref="T:System.NotImplementedException">If non-abstract derived class did not provide an implementation by overriding this method.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider">
      <summary>Represents information about the target framework.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution,System.ComponentModel.Design.IDesignTimeAssemblyLoader,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)">
      <summary>Initializes a new instance of VsTargetFrameworkProvider.</summary>
      <param name="assemblyResolution">The assembly resolution.</param>
      <param name="assemblyLoader">The assembly loader.</param>
      <param name="openScope">The open scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution,System.ComponentModel.Design.IDesignTimeAssemblyLoader,System.ComponentModel.TypeDescriptionProvider,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)">
      <summary>Initializes a new instance of VsTargetFrameworkProvider.</summary>
      <param name="assemblyResolution">The assembly resolution</param>
      <param name="assemblyLoader">The assembly loader.</param>
      <param name="openScope">The open scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.ComponentModel.Design.IDesignTimeAssemblyLoader,System.String,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)">
      <summary>Initializes a new instance of VsTargetFrameworkProvider.</summary>
      <param name="targetInfo">The target information.</param>
      <param name="assemblyLoader">The assembly loader.</param>
      <param name="openScope">The open scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.ComponentModel.Design.IDesignTimeAssemblyLoader,System.String,System.ComponentModel.TypeDescriptionProvider,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)">
      <summary>Initializes a new instance of VsTargetFrameworkProvider.</summary>
      <param name="targetInfo">The target information.</param>
      <param name="assemblyLoader">The assembly loader.</param>
      <param name="targetMoniker">The target framework moniker.</param>
      <param name="parentProvider">The type description provider of the parent.</param>
      <param name="openScope">The open scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.String,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)">
      <summary>Initializes a new instance of VsTargetFrameworkProvider.</summary>
      <param name="targetInfo">The target information.</param>
      <param name="targetMoniker">The target framework moniker.</param>
      <param name="openScope">The open scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting,System.String,System.ComponentModel.TypeDescriptionProvider,Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope)">
      <summary>Initializes a new instance of VsTargetFrameworkProvider.</summary>
      <param name="targetInfo">The target information.</param>
      <param name="targetMoniker">The target framework moniker.</param>
      <param name="parentProvider">The type description provider of the parent.</param>
      <param name="openScope">The open scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>Gets the custom type description of the specified object.</summary>
      <returns>The custom type descriptor.</returns>
      <param name="instance">The object for which to get the type description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetReflectionAssembly(System.Reflection.AssemblyName)">
      <summary>Gets the assembly that has the specified assembly name.</summary>
      <returns>The assembly.</returns>
      <param name="assemblyName">The assembly name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetReflectionType(System.Type,System.Object)">
      <summary>Gets the type of the specified object with the specified object type.</summary>
      <returns>The reflection type.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetRuntimeType(System.Type)">
      <summary>Gets the runtime type of the specified type.</summary>
      <returns>The runtime type.</returns>
      <param name="reflectionType">The type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Gets the type descriptor for the specified object and type.</summary>
      <returns>The type descriptor.</returns>
      <param name="objectType">The type.</param>
      <param name="instance">The object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.IsSupportedType(System.Type)">
      <summary>Determines whether or not the specified type is supported.</summary>
      <returns>true if the type is supported, otherwise false.</returns>
      <param name="type">The type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.ProviderService">
      <summary>Gets or sets the provider service.</summary>
      <returns>The provider service.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.Refresh(System.Reflection.AssemblyName)">
      <summary>Refreshes the information for the specified assembly.</summary>
      <param name="assemblyName">The name of the assembly.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VsTargetFrameworkProvider.RefreshAll">
      <summary>Refreshes every assembly.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.VSTypeResolutionHelperService"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VSTypeResolutionHelperService.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VSTypeResolutionHelperService.Dispose"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VSTypeResolutionHelperService.FlushAssembly(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.VSTypeResolutionHelperService.ShouldLoadAssemblyToFindType(System.String,System.String,System.Boolean)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService">
      <summary>A service that provides file-specific window panes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.#ctor(System.IServiceProvider)">
      <summary>Creates a new WindowPaneProviderService.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.#ctor(System.IServiceProvider,System.String)">
      <summary>Creates a new WindowPaneProviderService for the specified file extension.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" />.</param>
      <param name="extension">The file extension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.CreateWindowPane(System.ComponentModel.Design.DesignSurface)">
      <summary>Creates a window pane for the specified design surface.</summary>
      <returns>The created <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" />.</returns>
      <param name="surface">The <see cref="T:System.ComponentModel.Design.DesignSurface" /> from which the window pane is created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.CreateWindowPane(System.Type,System.ComponentModel.Design.DesignSurface)">
      <summary>Creates a designer window pane for the specified type of window pane.</summary>
      <returns>The newly-created <see cref="T:Microsoft.VisualStudio.Shell.Design.DesignerWindowPane" />.</returns>
      <param name="windowPaneType">The type of the window pane.</param>
      <param name="surface">The <see cref="T:System.ComponentModel.Design.DesignSurface" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.Extension">
      <summary>Gets the file extension.</summary>
      <returns>The file extension.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.GetRegisteredPanes(System.String)">
      <summary>Gets the registered set of window panes.</summary>
      <returns>An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane" /> objects.</returns>
      <param name="extension">The file extension for the retrieved panes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.GetService(System.Type)">
      <summary>Gets an instance of the requested service.</summary>
      <returns>The requested service, or null if it is not available.</returns>
      <param name="serviceType">The type of the requested service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane">
      <summary>A structure that encapsulates a view technology and its associated window pane type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.#ctor(System.Type,System.String)">
      <summary>Creates a new RegisteredWindowPane instance.</summary>
      <param name="baseType">The kind of the window pane that is being registered.</param>
      <param name="windowPaneTypeName">The name of the window pane.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.BaseType">
      <summary>Retrieves the <paramref name="baseType" /> specified by the overloaded constructor <see cref="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.#ctor(System.Type,System.String)" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.WindowPaneTypeName">
      <summary>Retrieves the <paramref name="windowPaneTypeName" /> specified by the overloaded constructor <see cref="M:Microsoft.VisualStudio.Shell.Design.WindowPaneProviderService.RegisteredWindowPane.#ctor(System.Type,System.String)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService">
      <summary>A service used by the settings UI in Visual Studio to read and write client settings into the app.config configuration file. It stores user-customizable settings in XML format</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.#ctor">
      <summary>Initializes a new instance of ConfigurationHelperService.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.#ctor(System.Func{System.String,System.String})">
      <summary>Initializes a new instance of ConfigurationHelperService.</summary>
      <param name="typeStringTransformer">The transformer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.GetSectionName(System.String,System.String)">
      <summary>Formats the group name and the key name.</summary>
      <returns>A formatted string of the form settingsGroupName.key.</returns>
      <param name="settingsGroupName">The group name.</param>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.GetSerializeAs(System.Type)">
      <summary>Determines the default serialization mechanism to use for a given type,.</summary>
      <returns>If this type has a <see cref="T:System.ComponentModel.TypeConverter" /> that can convert to and from a string, then F:System.Configuration.SettingsSerializeAs.String, otherwise F:System.Configuration.SettingsSerializeAs.Xml.   </returns>
      <param name="type">The type that is requesting a serializer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.GetUserConfigurationPath(System.IServiceProvider,EnvDTE.Project,System.Configuration.ConfigurationUserLevel,System.Boolean,EnvDTE.Configuration)">
      <summary>Gets the most likely path to user configuration files for the current project, based on the values of different project properties. </summary>
      <returns>The user configuration path, or null if a valid path could not be constructed from the information in the project.</returns>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="project">The current <see cref="T:EnvDTE.Project" />.</param>
      <param name="userLevel">
        <see cref="T:System.Configuration.ConfigurationUserLevel" />.</param>
      <param name="underHostingProcess">true if in a hosted process, otherwise false.</param>
      <param name="buildConfiguration">
        <see cref="T:EnvDTE.BuildConfiguration" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.ReadConnectionStrings(System.String,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String)">
      <summary>Returns all the connection strings in the specified configuration that start with the specified prefix.</summary>
      <returns>The <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> of the strings that were found.</returns>
      <param name="configFileName">The target configuration file.</param>
      <param name="configDocData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> for the configuration.</param>
      <param name="prefix">The string to search for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.ReadSettings(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String,System.Boolean,System.Configuration.SettingsPropertyCollection)">
      <summary>Reads settings from the appropriate section. </summary>
      <returns>
        <see cref="T:System.Configuration.SettingsPropertyValueCollection" />.</returns>
      <param name="fileMap">
        <see cref="T:System.Configuration.ExeConfigurationFileMap" />.</param>
      <param name="userLevel">
        <see cref="T:System.Configuration.ConfigurationUserLevel" />.</param>
      <param name="appConfigDocData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> for the configuration file.</param>
      <param name="sectionName">The name of the section of the configuration file.</param>
      <param name="isUserScoped">True if the section contains user-specific settings.</param>
      <param name="settings">
        <see cref="T:System.Configuration.SettingsPropertyCollection" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.WriteConnectionStrings(System.String,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Writes the connection strings to the specified configuration file after deleting any existing connection strings with the specified prefix.</summary>
      <param name="configFileName">The target configuration file.</param>
      <param name="configDocData">The working <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
      <param name="groupPrefix">The section of the file where the <paramref name="connectionStrings" /> should be written.</param>
      <param name="connectionStrings">
        <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ConfigurationHelperService.WriteSettings(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.String,System.Boolean,System.Configuration.SettingsPropertyValueCollection)">
      <summary>Writes settings to the appropriate section after clearing existing settings.</summary>
      <param name="fileMap">
        <see cref="T:System.Configuration.ExeConfigurationFileMap" />.</param>
      <param name="userLevel">
        <see cref="T:System.Configuration.ConfigurationUserLevel" />.</param>
      <param name="appConfigDocData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> for the configuration file.</param>
      <param name="sectionName">The name of the section to write to.</param>
      <param name="isUserScoped">true if the settings are user-specific, otherwise false.</param>
      <param name="values">The <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> from which to read the settings.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService">
      <summary>Provides a way to create and retrieve buffers for various files in the project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService" />. </summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="primaryHierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the associated node in the project hierarchy.</param>
      <param name="primaryItemId">The item ID for the primary node.</param>
      <param name="primaryDocData">The primary <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Object)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService" /> for the specified node and document data.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="primaryHierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the associated node in the project hierarchy.</param>
      <param name="primaryItemId">The item ID for the primary node.</param>
      <param name="primaryDocData">The primary <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.CheckoutFiles">
      <summary>Ensures that all relevant buffers are checked out.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Dispose">
      <summary>Disposes the service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Flush">
      <summary>Performs a forced flush of all pending changes to the designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetChildDocData(System.String,System.IO.FileAccess,System.String)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the given name.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />, or null if the file does not exist and <paramref name="createTemplate" /> is null.</returns>
      <param name="name">The name of the requested child document.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that describes the access level of the file.</param>
      <param name="createTemplate">The path of a template file to be used in case the named document cannot be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetChildFileName(System.String)">
      <summary>Returns the absolute path of a child file from its name.</summary>
      <returns>The absolute path of the file.</returns>
      <param name="name">The name of the child file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetFileDocData(System.String,System.IO.FileAccess,System.String)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the given name.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />, or null if the file does not exist and <paramref name="createTemplate" /> is null.</returns>
      <param name="fileName">The name of the requested child document.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that describes the access level of the file.</param>
      <param name="createTemplate">The path of a template file to be used in case the named document cannot be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetFileDocData(System.String,System.IO.FileAccess,System.String,System.Boolean)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the given name.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />, or null if the file does not exist and <paramref name="createTemplate" /> is null.</returns>
      <param name="fileName">The name of the requested child document.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that describes the access level of the file.</param>
      <param name="createTemplate">The path of a template file to be used in case the named document cannot be retrieved.</param>
      <param name="addToHostList">true to add to the host list, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetSiblingDocData(System.String,System.IO.FileAccess,System.String)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the given name.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.EnterpriseTools.Shell.DocData" />, or null if the file does not exist and <paramref name="createTemplate" /> is null.</returns>
      <param name="name">The name of the requested child document.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that describes the access level of the file.</param>
      <param name="createTemplate">The path of a template file to be used in case the named document cannot be retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.GetSiblingFileName(System.String)">
      <summary>Gets the absolute path of the sibling file name from the file name.</summary>
      <returns>The absolute path of the file.</returns>
      <param name="name">The short name of the sibling file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.HasChild(System.String)">
      <summary>Determines whether or not there is a child <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with a given <paramref name="name" />.</summary>
      <returns>true if the given child exists in the project, otherwise false.</returns>
      <param name="name">The name of the requested child.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.HasFile(System.String)">
      <summary>Determines whether or not there is a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with a given <paramref name="fileName" />.</summary>
      <returns>true if the given file exists in the project, otherwise false.</returns>
      <param name="fileName">The filename of the requested <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.HasSibling(System.String)">
      <summary>Determines whether or not there is a sibling <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> with the specified name.</summary>
      <returns>true if the given file exists in the project, otherwise false.</returns>
      <param name="name">The filename of the requested sibling <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsHasRelatedSaveItems#GetRelatedSaveTreeItems(Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM[],System.UInt32@)">
      <summary>Coordinates save operations across the documents maintained by this service. </summary>
      <returns>If <paramref name="celt" /> is either 0 or equal to <paramref name="pcActual" />, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; if not, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />. If <paramref name="saveItem" /> doesn't specify to close the documents, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
      <param name="saveItem">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM" /> structure that specifies how the items are to be saves.</param>
      <param name="celt">The number of documents to save.</param>
      <param name="rgSaveTreeItems">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM" />  structures.</param>
      <param name="pcActual">[out] Returns the actual number of documents saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after an attribute has changed on a document in the Running Document Table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="attribs">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> flags for the attributes that have changed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data in the Running Document Table.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window that was hidden. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after the first lock of the specified type is applied to the specified document in the Running Document Table (RDT). </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="lockType">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTFLAGS" /> value specifying the lock type.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before a document window is displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="firstShow">true if the window will be displayed for the first time, otherwise false.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window that will be displayed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents#OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before the last lock of the specified type is released on the specified document in the Running Document Table (RDT). </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="lockType">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTFLAGS" /> values specifying the type of lock being released.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after an attribute has changed on a document in the Running Document Table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="grfAttribs">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> flags for the attributes that have changed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Called after an attribute has changed on a document in the Running Document Table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document in the Running Document Table.</param>
      <param name="attribs">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> values corresponding to the attributes that have changed. </param>
      <param name="pHierOld">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the node that previously owned the document.</param>
      <param name="itemidOld">The previous item ID.</param>
      <param name="pszMkDocumentOld">The previous name of the document.</param>
      <param name="pHierNew">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the node that now owns the document.</param>
      <param name="itemidNew">The new item ID.</param>
      <param name="pszMkDocumentNew">The new name of the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window to be hidden.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after the first lock of the specified type is applied to the specified document in the Running Document Table (RDT). </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Documents Table.</param>
      <param name="lockType">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> values specifying the type of lock.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before a document window is displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="firstShow">true if the window will be displayed for the first time, otherwise false.</param>
      <param name="pFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window that will be displayed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.Microsoft#VisualStudio#Shell#Interop#IVsRunningDocTableEvents2#OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before the last lock of the specified type is released on the specified document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
      <param name="lockType">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTFLAGS" /> values specifying the type of lock being released.</param>
      <param name="readLocksRemaining">The number of read locks remaining.</param>
      <param name="editLocksRemaining">The number of edit locks remaining.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.PrimaryDocData">
      <summary>Gets the document data object for the <paramref name="primaryDocData" /> that was passed into either of this service's overloaded constructors <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Object)" />.</summary>
      <returns>This <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> has its save, checkout and running document table lifetimes linked to all other DocData objects returned by this service. This DocData automatically checks itself when <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modify" /> is called.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.PrimaryName">
      <summary>Gets the fully-qualified file name of the primary doc data object.</summary>
      <returns>The fully-qualified file name of the primary document data object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.SaveDocData(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Performs a save on the given doc data.</summary>
      <param name="docData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> to be saved.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DesignerDocDataService.UseWeakEditLock">
      <summary>Determines whether the DesignerDocDataService instance holds a weak or strong edit lock on the child documents. The default value is false (strong edit lock). Normal designers in document windows should use strong edit lock. Advanced invisible designers should use weak locks, so that when the child document is opened in a visible editor, the control of the edit lock is yielded to the visible editor. The user is then prompted to save the document when the visible editor is closed. </summary>
      <returns>true if the service holds a weak lock, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData">
      <summary>A wrapper around a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object that provides additional features.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.#ctor(System.IServiceProvider,System.String)">
      <summary>Initializes a new instance of DocData from the specified file and sets the site from the specified site.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="fileName">The source file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.#ctor(System.Object)">
      <summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object for the given buffer.</summary>
      <param name="docData">The buffer.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Buffer">
      <summary>The text buffer contained within the doc data.</summary>
      <returns>The text buffer if one exists, otherwise null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.CheckoutFile(System.IServiceProvider)">
      <summary>Checks out the doc data file from source code control.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> interface used for the checkout operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.CreateChangeMarker">
      <summary>Marks the beginning of an external change of the text buffer.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Data">
      <summary>The actual <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object this class wraps.</summary>
      <returns>The doc data object.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.DataChanged">
      <summary>An event that is raised when the data contained within this doc data has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose">
      <summary>Disposes the DocData.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose(System.Boolean)">
      <summary>Disposes the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</summary>
      <param name="disposing">trueto release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Finalize">
      <summary>Called automatically when this object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#Shell#Interop#IVsDocumentLockHolder#CloseDocumentHolder(System.UInt32)">
      <summary>Close the document based on a user request.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> .</returns>
      <param name="saveOptions">Values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#Shell#Interop#IVsDocumentLockHolder#ShowDocumentHolder">
      <summary>Called by Visual Studio to show the window frame associated with this document.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamAttributes(System.Int32,System.Int32)">
      <summary>A notification from Visual Studio that something in the text has changed.</summary>
      <param name="iPos">Starting position of the changed text in the underlying buffer.</param>
      <param name="iLength">Length of the changed text in the underlying buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamText(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Provides a notification from Visual Studio that something in the text has changed.</summary>
      <param name="iPos">The position of the change in the underlying text buffer.</param>
      <param name="iOldLen">The old length of text in the underlying buffer.</param>
      <param name="iNewLen">The new length of text in the underlying buffer.</param>
      <param name="fLast">Not used.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modified">
      <summary>Determines whether the buffer has been modified</summary>
      <returns>true if the buffer has been modified.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modify">
      <summary>Marks this DocData as modified.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modifying">
      <summary>An event that is raised when this <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object is being marked as modified.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Name">
      <summary>Gets the file name of the doc data.</summary>
      <returns>This is typically retrieved by accessing the user data with an ID if IID_IVsUserData.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.OnDataChanged(System.EventArgs)">
      <summary>Called when an external change has been made to the doc data.</summary>
      <param name="e">The arguments of the event change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.OnModifying(System.EventArgs)">
      <summary>Called by <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Modify" />.</summary>
      <param name="e"> <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.RaiseModifying">
      <summary>Raises the Modifying event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader">
      <summary>Derives from <see cref="T:System.IO.TextReader" /> and provides a standard mechanism for reading from a Visual Studio text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader" /> for the given doc data.</summary>
      <param name="docData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader" /> for the specified doc data object and determines whether <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose" /> will be called on the <paramref name="docData" /> when the DocDataTextReader is disposed.</summary>
      <param name="docData">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> that the DocDataTextReader reads.</param>
      <param name="disposeDocData">If true, <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose" /> will be called on the underlying <paramref name="docData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Dispose(System.Boolean)">
      <summary>Overrides the base class implementation to call <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocData.Dispose" /> on the underlying <paramref name="docData" /> if <paramref name="disposeDocData" /> was true in the overloaded constructor <see cref="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.Boolean)" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.DocData">
      <summary>Gets the doc data object.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DocData" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Peek">
      <summary>Gets the current position in the text.</summary>
      <returns>The current position, or -1 if the current position is equal to or greater than the length of the text.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Read">
      <summary>Gets the text at the next position.</summary>
      <returns>The text at the next position (incrementing the internal counter), or -1 if the current position is equal to or greater than the length of the stream.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Sets the text of the specified buffer at the specified position.</summary>
      <returns>The number of characters actually read.</returns>
      <param name="buffer">A character array to be populated.</param>
      <param name="index">The starting point in the underlying text.</param>
      <param name="count">The number of items in the underlying text to be copied.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextReader.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>The service object.</returns>
      <param name="serviceType">The type of the service to be retrieved.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter">
      <summary>Provides a standard <see cref="N:System.IO" /> mechanism for writing to a Visual Studio text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter" /> for the given doc data.</summary>
      <param name="docData">
        <see cref="T:Microsoft.VisualStudio.Modeling.Shell.DocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter" /> for the specified doc data, and determines whether or not to dispose the doc data object when this instance is closed or disposed.</summary>
      <param name="docData">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
      <param name="disposeDocData">If true, this instance should dispose the doc data when it is closed or disposed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Dispose(System.Boolean)">
      <summary>Disposes the object and its resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.DocData">
      <summary>Gets the doc data object.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Encoding">
      <summary>Gets the encoding of this text writer.</summary>
      <returns>
        <see cref="T:System.Text.UnicodeEncoding" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Flush">
      <summary>Replaces the contents of the text stream with the contents of the string builder.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>The service.</returns>
      <param name="serviceType">The type of service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Write(System.Char)">
      <summary>Appends a char to the underlying <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="ch">The char that is appended to the underlying <see cref="T:System.Text.StringBuilder" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.DocDataTextWriter.Write(System.String)">
      <summary>Appends a string to the underlying <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="s">The string that is appended to the underlying <see cref="T:System.Text.StringBuilder" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.LocalizationProviderService">
      <summary>A designer serialization provider that adds extended properties to support localization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.LocalizationProviderService.#ctor">
      <summary>Creates a new instance of a LocalizationProviderService.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.LocalizationProviderService.CreateProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Creates a provider for the given serialization manager.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />.</returns>
      <param name="manager">A serialization manager.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute">
      <summary>Place this attribute on a class that is derived from <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> to associate the class with a particular language service or file extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.#ctor(Microsoft.VisualStudio.Shell.Design.AttributeScope,System.Object)">
      <summary>Provides a new instance of ProvideDesignerLoaderAttribute.</summary>
      <param name="scope">The values of the enumeration <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" /> are Language and File.</param>
      <param name="scopeData">The value of the <paramref name="scope" />. Logic internal to the method treats this as a string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Scope">
      <summary>Gets the scope of this attribute.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.AttributeScope" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.ScopeData">
      <summary>Gets the data for the scope.</summary>
      <returns>The data for the scope. If scope is <see cref="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.Language" />, the scope data is the name of the language service; if it is <see cref="F:Microsoft.VisualStudio.Shell.Design.AttributeScope.File" />, the scope data is the file extension.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.TypeId">
      <summary>Gets a unique type value.</summary>
      <returns>The type value created by concatenating the full type name of this attribute with <see cref="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Scope" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideDesignerLoaderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute">
      <summary>Registers the given code generator for Visual Basic and Visual C# projects when added to a <see cref="T:Microsoft.VisualStudio.Shell.Package" />-derived class or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.#ctor(System.Type,System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute" /> for the given package and generator.</summary>
      <param name="generatorType">The type of the associated code generator.</param>
      <param name="name">The name of the associated code generator.</param>
      <param name="description">The description of the associated code generator.</param>
      <param name="packageGuid">The GUID of the package containing a project that supports invoking a code generator of <paramref name="generatorType" />.</param>
      <param name="generateDesignTimeSource">true if the associated code generator generates source code for use at design time, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Description">
      <summary>Gets the description of the generator.</summary>
      <returns>The description of the generator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.GenerateDesignTimeSource">
      <summary>Gets whether source code is generated for use at design time.</summary>
      <returns>true if the associated code generator generates source code for use at design time, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.GeneratorType">
      <summary>Gets the type of the code generator.</summary>
      <returns>The type of the code generator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Name">
      <summary>Gets the name of the generator.</summary>
      <returns>The name of the generator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.PackageGuid">
      <summary>Gets the GUID of the package containing a project that supports invoking this generator.</summary>
      <returns>The GUID of the package containing a project that supports invoking this generator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute with the given context.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.ProvideGeneratorAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool like regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection">
      <summary>A strongly-typed collection that stores document data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.DocData[])">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> for the specified array of document data objects.</summary>
      <param name="value">An array of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.#ctor(Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> based on another <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> object.</summary>
      <param name="value">An initialization collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Add(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Adds the specified value to the collection. </summary>
      <returns>The position in the collection at which the document data was added.</returns>
      <param name="value">The document data object to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.AddRange(Microsoft.VisualStudio.Shell.Design.Serialization.DocData[])">
      <summary>Copies the elements of an array of document data objects to the end of the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" />.</summary>
      <param name="value">An array of document data objects to be appended to the underlying collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.AddRange(Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection)">
      <summary>Adds the contents of another <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection" /> to the end of the collection.</summary>
      <param name="value">The added value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Contains(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Determines whether the collection contains the specified document data object.</summary>
      <returns>true if the collection contains the specified document data object, otherwise false.</returns>
      <param name="value">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.CopyTo(Microsoft.VisualStudio.Shell.Design.Serialization.DocData[],System.Int32)">
      <summary>Copies the collection to an array of document data objects starting at the specified index.</summary>
      <param name="array">The target array.</param>
      <param name="index">The index of the array at which to begin copying.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.IndexOf(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Gets the index of a specified document data object in the collection. </summary>
      <returns>The index of the document data object, or -1 if it was not found.</returns>
      <param name="value">The document data object to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Inserts a document data object into the collection at the specified index.</summary>
      <param name="index">The index at which to insert the object.</param>
      <param name="value">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> to be inserted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Item(System.Int32)">
      <summary>Gets the document data object at the specified index.</summary>
      <returns>The document data object at the specified index.</returns>
      <param name="index">Index offset of this collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.RelatedDocDataCollection.Remove(Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Removes the specified document data object from the collection.</summary>
      <param name="value">The <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> to be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.ChangeNotificationService">
      <summary>Used to rename project scope symbols.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.ChangeNotificationService.#ctor">
      <summary>Returns a new instance of the service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.ChangeNotificationService.RenameElement(EnvDTE.CodeElement,System.String)">
      <summary>Renames the element</summary>
      <returns>When implemented by derived classes, true if it was possible to rename the element, otherwise false.</returns>
      <param name="element">An instance of a <see cref="T:EnvDTE.CodeElement" />.</param>
      <param name="newName">The new proposed name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData">
      <summary>Provides designer-centric information about an element of the code DOM. It can be stored in the code DOM's user data dictionary. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData.CaretPosition">
      <summary>Gets or sets the recommended caret placement position for the member to which this object is attached.</summary>
      <returns>The recommended caret position.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDesignerData.FileName">
      <summary>Gets or sets the name of the file associated with this element.</summary>
      <returns>The name of the file associated with this element.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter">
      <summary>Maintains a cached <see cref="T:System.CodeDom.Namespace.CodeTypeDeclaration" /> that objects may use to access the code DOM indirectly. Since multiple objects may be working on the code DOM tree for the design surface at a given time, they could overwrite each other's changes if they all accessed the code DOM tree directly. In addition, this class has several properties that expose the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, and contains a reference to the actual <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.DocData" /> object.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.Design.Serialization.DocData)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter" /> for the specified <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
      <param name="docData">
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.CodeDomChanged">
      <summary>This event is raised when an external party has made a change to the code file that would cause the code DOM to need rebuilding.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.CompileUnit">
      <summary>Gets the entire compile unit in which the document data exists.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />, or null if the document data has not been set.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Dispose">
      <summary>Disposes this object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Dispose(System.Boolean)">
      <summary>Disposes the resources of this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.DocData">
      <summary>Gets the associated document data.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Generate">
      <summary>Takes the current type declaration and generates it into the doc data.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Generator">
      <summary>Gets a cached code generator that may be used to validate identifiers and generate code.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.GetService(System.Type)">
      <summary>Gets the service of the specified type.</summary>
      <returns>The object representing the specified service, or null if none is available.</returns>
      <param name="serviceType">The type of the service to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.OnCodeDomChanged(System.EventArgs)">
      <summary>Called when the code has changed externally.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Parser">
      <summary>Gets the code parser.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.Provider">
      <summary>Gets the code DOM provider for the file.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.TypeDeclaration">
      <summary>Gets the code type declaration for this document.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeTypeDeclaration" />, or the first one if there are multiple types in the document.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.TypeNamespace">
      <summary>Gets the code namespace for this document.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeNamespace" />, or the first one if there are multiple types in the project.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService">
      <summary>[SECURITY CRITICAL] A service used to generate event-handling code. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.#ctor(System.IServiceProvider)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService" />.  </summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.CodeDomAdapter">
      <summary>[SECURITY CRITICAL] Gets the code DOM data adapter.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>[SECURITY CRITICAL] Creates a unique method name for the event. </summary>
      <returns>The unique name.</returns>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>[SECURITY CRITICAL] Removes the specified method from the code if no event handlers are using it and it is empty.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <param name="methodName">The name of the method to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>[SECURITY CRITICAL] Gets all the methods in the code DOM that are compatible with the specified event descriptor.</summary>
      <returns>A collection of all the names of compatible methods.</returns>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ShowCode">
      <summary>[SECURITY CRITICAL] Displays the code in the document data in the editor window.</summary>
      <returns>true if it was possible to open the editor window, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>[SECURITY CRITICAL] Shows the body of the user code with the given method name and event descriptor. </summary>
      <returns>true if it was possible to open the editor window, otherwise false.</returns>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <param name="methodName">The name of the method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ShowCode(System.Int32)">
      <summary>[SECURITY CRITICAL] Displays the code at the specified line.</summary>
      <returns>true if it was possible to open the editor window, otherwise false.</returns>
      <param name="lineNumber">The line of the code to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>[SECURITY CRITICAL] Creates the method declaration for the given method name and event descriptor.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <param name="methodName">The name of the method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomEventBindingService.ValidateMethodName(System.String)">
      <summary>[SECURITY CRITICAL] Validates the name of the method.</summary>
      <param name="methodName">The method name to validate.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDesignerInfo">
      <summary>Gets the designer technology and other language agnostic information associated with a designer. It can be retrieved from the Visual Studio document framework.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDesignerInfo.get_DesignerTechnology(System.String@)">
      <summary>Gets the technology of the designer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrTechnology">[out] The name of the technology.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution">
      <summary>Provides methods that perform design-time assembly resolution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution.GetTargetFramework(System.String@)">
      <summary>Gets the target .NET Framework of the project instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppTargetFramework">[out] The target framework.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution.ResolveAssemblyPathInTargetFx(System.String[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath[],System.UInt32@)">
      <summary>Resolves the assembly paths in the target .NET Framework.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prgAssemblySpecs">The list of assembly names that need to be resolved.</param>
      <param name="cAssembliesToResolve">The number of assembly names passed in <paramref name="prgAssemblySpecs" />. </param>
      <param name="prgResolvedAssemblyPaths">[in, out] The resolved assembly reference paths. The caller needs to pre-allocate this array for the number of assemblies to resolve (<paramref name="cAssembliesToResolve" />).</param>
      <param name="pcResolvedAssemblyPaths">The number of resolved assembly paths.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution2">
      <summary>Provides design time resolution of assembly reference paths in the current target framework. This interface retrieved as an ItemContext service from the project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution2.ResolveAssemblyPathInTargetFx2(System.String[],System.UInt32,System.Boolean,Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath[],System.UInt32@)">
      <summary>Resolves the assembly reference paths for the passed in assemblies while giving the ability to ignore version when resolving a reference from the targeted framework.</summary>
      <param name="prgAssemblySpecs">Array of strings containing the list of assembly names that need to be resolved.</param>
      <param name="cAssembliesToResolve">Number of assembly names passed in to <paramref name="prgAssemblySpecs" />.</param>
      <param name="ignoreVersionForFrameworkReferences">Indicates if the version is to be ignored when resolving framework references. If true, the version is ignored.</param>
      <param name="prgResolvedAssemblyPaths">Array containing the resolved assembly reference paths. The caller must preallocate this array for <paramref name="cAssembliesToResolve" /> elements.</param>
      <param name="pcResolvedAssemblyPaths">Number of resolved assembly paths in the <paramref name="prgResolvedAssemblyPaths" /> output array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting._VtblGap1_5"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2">
      <summary>Provides base support for the extensible framework multi-targeting in Visual Studio 2012.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2._VtblGap1_4"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2.ResolveAssemblyPath2(System.String,System.String,System.Boolean)">
      <summary>Resolves the assembly path in the given target framework.</summary>
      <returns>The assembly path. Returns null if the assembly does not belong in the given target framework.</returns>
      <param name="pwszAssemblySpec">[in] The assembly specification that needs to be resolved. The assembly specification is either a path or an assembly name. If it is a path, the assembly name is loaded from the path.</param>
      <param name="pwszTargetFrameworkMoniker">[in] The target framework in which to resolve the assembly path.</param>
      <param name="ignoreVersionForFrameworkReferences">[in] Specifies if the version is to be ignored when resolving framework references. If true, the version is ignored.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath">
      <summary>Represents a resolved assembly path, as used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDesignTimeAssemblyResolution.ResolveAssemblyPathInTargetFx(System.String[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath[],System.UInt32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath.bstrOrigAssemblySpec">
      <summary>The original assembly specification.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath.bstrResolvedAssemblyPath">
      <summary>The resolved assembly path.</summary>
    </member>
  </members>
</doc>