<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.TextManager.Interop</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS">
      <summary>Flags to prompt user for an encoding on an open with specified codepage.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS.codepageNoPrompt">
      <summary>Prompt user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS.codepagePrompt">
      <summary>Do not prompt user.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS">
      <summary>Indicates that a buffer boundary begins or ends a line, without requiring white space characters in the buffer. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.FINDBUFFER_EndOfLine">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.FINDBUFFER_StartOfLine">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.VSFB_EndOfLine">
      <summary>The buffer ends a line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.VSFB_StartOfLine">
      <summary>The buffer starts a line.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR">
      <summary>Specifies errors in find operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_Failure">
      <summary>An error occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_NoError">
      <summary>No error occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_NotInitialized">
      <summary>Search was not initialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_NotSupported">
      <summary>Options were not supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_Syntax">
      <summary>There was a syntax error in expression</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW">
      <summary>Specifies how to find a match. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_Ambient">
      <summary>Use ambient/default options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch">
      <summary>Search for match at span: set match span and tags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_TryMatch">
      <summary>Search for match at span: don't change state (current match span, tags).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_Wrap">
      <summary>Wrap around image boundary.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS">
      <summary>Specifies text find options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_ActionMask">
      <summary>Actions. FR_MarkAll | FR_Find | FR_FindAll | FR_Replace | FR_ReplaceAll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_All">
      <summary>All options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Backwards">
      <summary>Search in reverse</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Block">
      <summary>Current procedure/block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_BlockThread">
      <summary>Blocks the thread when doing a search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Capabilities">
      <summary>FR_OptionSet | FR_SyntaxSet | FR_ActionMask | FR_SelectionDefault</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_CommonOptions">
      <summary>FR_MatchCase | FR_WholeWord | FR_Hidden | FR_KeepCase</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_DocOptionSet">
      <summary>FR_CommonOptions | FR_Backwards | FR_Selection | FR_Block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Document">
      <summary>Search current document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_FIFOptionSet">
      <summary>FR_CommonOptions | FR_SubFolders | FR_KeepOpen | FR_NameOnly</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Files">
      <summary>Find in files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Find">
      <summary>Find next.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_FindAll">
      <summary>Find all (bulk find)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_FromStart">
      <summary>Search from beginning of doc.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Hidden">
      <summary>Search hidden text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_InternalMask">
      <summary>Internal options (no UI) FR_ResetPosition | FR_FromStart | FR_OneMatchPerLine | FR_Report | FR_SelectionDefault</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_KeepCase">
      <summary>Keep case on replace.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_KeepOpen">
      <summary>Keep modified files open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_MarkAll">
      <summary>Mark all matches.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_MatchCase">
      <summary>Match case in search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_NameOnly">
      <summary>Display filename only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_NoFind">
      <summary>Suppress find.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_None">
      <summary>No options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OneMatchPerLine">
      <summary>Return only one match per line (bulk find).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OpenDocuments">
      <summary>Search open documents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OptionMask">
      <summary>Options. FR_MatchCase | FR_WholeWord | FR_Hidden | FR_Backwards | FR_Selection | FR_Block | FR_KeepCase | FR_SubFolders | FR_KeepOpen | FR_NameOnly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OptionSet">
      <summary>FR_CommonOptions | FR_Backwards | FR_Selection | FR_Block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Pattern">
      <summary>Same as FR_Wildcard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Plain">
      <summary>Match exact string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Procedure">
      <summary>Same as FR_Block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Project">
      <summary>Find in project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_RegExpr">
      <summary>Match regular expressions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Replace">
      <summary>Replace text found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_ReplaceAll">
      <summary>Replace all text found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Report">
      <summary>Generate a results list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_ResetPosition">
      <summary>Find new.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Selection">
      <summary>Search selection only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SelectionDefault">
      <summary>GetCapabilities: force selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Solution">
      <summary>Find in solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SubFolders">
      <summary>Search subfolders.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SyntaxMask">
      <summary>FR_Plane | FR_Wildcard | FR_RegExpr.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SyntaxSet">
      <summary>FR_Plain | FR_Wildcard | FR_RegExpr</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_TargetMask">
      <summary>FR_Document | FR_OpenDocuments | FR_Files | FR_Project | FR_Solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_WholeWord">
      <summary>Match whole word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Wildcard">
      <summary>Match wild cards.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS">
      <summary>Indicates the search position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_Current">
      <summary>The current position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_ResetCounts">
      <summary>Clear the match counter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_Start">
      <summary>The start of the search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_Wrapped">
      <summary>The search should wrap to the start.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT">
      <summary>Indicates the result of a find or replace operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_EndOfDoc">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_EndOfSearch">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_Failed">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_FindInFiles">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_Found">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_Replaced">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_AndInterrupt">
      <summary>Search was interrupted with ESC/CANCEL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_AndReplace">
      <summary>Returned in combination with Found or NotFound</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_EndOfDoc">
      <summary>Search reached the end of the document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_EndOfSearch">
      <summary>Search reached the start.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_Error">
      <summary>An error occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_FindInFiles">
      <summary>A background Find in Files was started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_FLAGMASK">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_Found">
      <summary>Text string was found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_NoTarget">
      <summary>No target document was specified or found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_NotFound">
      <summary>The text string was not found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_Replaced">
      <summary>The text string was found and replaced.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC">
      <summary>These values denote the window in which the results of a bulk find operation appear.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.FINDREPLACE_RESULTLOC_ResultsList1">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.FINDREPLACE_RESULTLOC_ResultsList2">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.VSFRL_FindResultList1">
      <summary>Results go in Find Results 1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.VSFRL_FindResultList2">
      <summary>Results go in Find Results 2.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE">
      <summary>Specifies the state of a Find operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Empty">
      <summary>Find was not initialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Error">
      <summary>An error occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Found">
      <summary>Find was initialized and the last action was Found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_NotFound">
      <summary>Initialized and the last action was Not Found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Start">
      <summary>Find was initialized, and no action was taken.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Wrapped">
      <summary>Find wrapped around to the start.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY">
      <summary>Provides notifications to find targets. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_CURRENT">
      <summary>This target has become the current target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_ENDFIND">
      <summary>The find/replace operation is complete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_NOTCURRENT">
      <summary>This target is no longer the current target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_STARTFIND">
      <summary>A find/replace operation is about to start.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID">
      <summary>Specifies target properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_BlockName">
      <summary>VT_BSTR; the name of current block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_DocName">
      <summary>VT_BSTR; the full path of filename/persistence moniker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_InitialPattern">
      <summary>VT_BSTR; the seed Find pattern - the selection is in single line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_InitialPatternAggressive">
      <summary>VT_BSTR; the seed Find pattern - the selection is in a single line, or text near caret if no selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_IsDiskFile">
      <summary>VT_BOOL; VARIANT_TRUE if the object is a file on disk</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_IsFindInFilesForegroundOnly">
      <summary>VT_BOOLEAN; indicates that the document must be searched on the foreground thread (UI thread) only. Normally the environment searches on the background thread. The environment does not marshal pointers on a background thread, so if you require that, specify this value instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_WindowFrame">
      <summary>VT_UNKNOWN; a pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the view being searched.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF">
      <summary>Specifies the format of the text file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_BINARY">
      <summary>Binary handling.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_CPMASK">
      <summary>Mask for the codepage portion of VSTFF.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_DETECT">
      <summary>Extra analysis to detect encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_FLAGSMASK">
      <summary>Mask for the flags portion of VSTFF.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_HTML">
      <summary>HTML.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_SIGNATURE">
      <summary>VS Text File Format file signature (Byte Order Mark, UTF-8 sig.).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_XML">
      <summary>XML.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags">
      <summary>Specifies how a location path should be resolved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags.NLR_ABSOLUTEPATH">
      <summary>The absolute path of the location is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags.NLR_PARTIALPATH">
      <summary>The partial path to location is specified</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags.NLR_URL">
      <summary>The location is a URL.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._QuerySendCommitFlags">
      <summary>Specifies whether an ENTER triggers a text change commit event. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._QuerySendCommitFlags.QSCF_DO_NOT_SEND_ENTER_COMMIT">
      <summary>CRLF does not trigger a commit.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._QuerySendCommitFlags.QSCF_DO_SEND_ENTER_COMMIT">
      <summary>CRLF triggers a commit.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle">
      <summary>Specifies the style of indentation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle.vsIndentStyleDefault">
      <summary>The default style.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle.vsIndentStyleNone">
      <summary>No indent style.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle.vsIndentStyleSmart">
      <summary>Smart indent.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS">
      <summary>Specifies how outline regions are added to an existing outline session object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession" />). </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS.AOR_DEFAULT">
      <summary>Removes any existing outlining regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS.AOR_NON_UNDOABLE">
      <summary>Indicates that the action is not part of the undo/redo stack. For example, this case applies if outlining is done when the document is first loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS.AOR_PRESERVE_EXISTING">
      <summary>Preserves existing outlining regions. New outlining regions are added to those already existing.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.AtomicText">
      <summary>Describes an embedded object within a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.iIndex">
      <summary>Specifies the index of the position in the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.pNext">
      <summary>Specifies the next AtomicText structure in the linked list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.pszAtomicText">
      <summary>Specifies the string containing the atomic text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.punkAtom">
      <summary>The IUnknown interface of the originating object, for any custom processing.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX">
      <summary>Represents buffer initialization parameters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.dwFlags">
      <summary>A combination of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags" /> enumeration members.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.iLength">
      <summary>The buffer length if <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_INITTEXT" /> is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.pStorage">
      <summary>The storage, if <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_CUSTOMSTORAGE" /> is specified</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.pszText">
      <summary>The buffer text, if <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_INITTEXT" /> is specified.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags">
      <summary>Do not use. Deprecated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ">
      <summary>Do not use. Deprecated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE">
      <summary>Do not use. Deprecated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS">
      <summary>Sets the state of a text buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_FILESYS_READONLY">
      <summary>Read-only on the file system, possibly under source code control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_MODIFIED">
      <summary>The buffer has been modified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_RESERVED">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_SUPPRESS_UI">
      <summary>Prevent the buffer from showing the UI (false by default).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_USER_READONLY">
      <summary>The user marked it as read-only; no editing is allowed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE">
      <summary>Specifies the case of selected text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE.CASESELECTION_LOWER">
      <summary>The text is lower-case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE.CASESELECTION_TITLE">
      <summary>The text is title case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE.CASESELECTION_UPPER">
      <summary>The text is upper-case.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS">
      <summary>Specifies whether the region is added to the undo/redo stack.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS.chrDefault">
      <summary>The region can be undone.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS.chrNonUndoable">
      <summary>The region is not added to undo/redo stack (for example, for initial presentation).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS">
      <summary>Specifies whether the region is added to the undo/redo stack.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS.CSR_DEFAULT">
      <summary>The default; the region is added to the undo/redo stack.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS.CSR_NONUNDOABLE">
      <summary>The region is not added to undo/redo stack (e.g. for initial presentation).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags">
      <summary>Provides information about a group of undo/redo operations. Used in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_ABORTED">
      <summary>Indicates that a cluster has been aborted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_AFTER_CLOSE">
      <summary>Indicates that the notification is being fired after a cluster has closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_BEFORE_CLOSE">
      <summary>Indicates that the notification is being fired before a cluster has closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_BEFORE_OPEN">
      <summary>Indicates that the notification is being fired before a cluster has opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_FLUSH">
      <summary>Indicates that an early notification was prompted by an explicit flush request.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_REDO">
      <summary>Indicates that a cluster is a redo operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_UNDO">
      <summary>Indicates that a cluster is an undo operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags">
      <summary>Flags indicating the type of changes made to text that triggered the commit gesture.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_CARET_ON_NEW_BUFFER_LINE">
      <summary>Occurs when the caret has moved to a new buffer line. For example, this occurs on a carriage return or when a user clicks on a different line to move the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_DESTRUCTIVEACTION">
      <summary>Used by the core editor. Editor clients should not use this value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_ENTER_COMMAND">
      <summary>Same as CCG_CARET_ON_NEW_BUFFER_LINE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_FIND_STARTING">
      <summary>Fired before a find operation is started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_LOST_FOCUS">
      <summary>Indicates that the editor window has lost focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_MASS_REPLACE">
      <summary>Occurs when the commit is being fired for multiple changes within the affected span. For example, committing a large replace operation or running a wizard that affects multiple places in the file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_MULTILINE_CHANGE">
      <summary>Occurs when a single change covers multiple lines, for example, a paste operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_PROGRAMMATIC_CHANGE">
      <summary>Signals that the commit is being fired while the editor is running an automation function, for example, if a macro is played back.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_SAVE">
      <summary>Occurs when a file is being saved. A language service can perform any final file fix-ups required and the changes will be persisted in the save.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ChangeInput">
      <summary>Represents information about a pending change request *before* it has happened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_DelSpan">
      <summary>The span to delete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_dwFlags">
      <summary>The flags that describe the change (a combination of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enumeration values).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_iNewLen">
      <summary>The length of the new text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_iOldLen">
      <summary>Length of old text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_pszNewText">
      <summary>The text to insert.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CHARFMT">
      <summary>Represents the file encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_MBCS">
      <summary>MBCS encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_UNI">
      <summary>Unicode encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_UNI_SWAP">
      <summary>Byte-swapped Unicode encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_UTF8">
      <summary>UTF-8 with file signature encoding.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX">
      <summary>Specifies the default foreground, background, or line color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_AQUAMARINE">
      <summary>Aquamarine.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_BLACK">
      <summary>Black.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_BLUE">
      <summary>Blue.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_BROWN">
      <summary>Brown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_CYAN">
      <summary>Cyan.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_DARKBLUE">
      <summary>Dark blue.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_DARKGRAY">
      <summary>Dark gray.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_DARKGREEN">
      <summary>Dark green.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_FIRSTFIXEDCOLOR">
      <summary>The first fixed color. Beginning of fixed color range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_FORBIDCUSTOMIZATION">
      <summary>Forbid customization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_GREEN">
      <summary>Green.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_LASTFIXEDCOLOR">
      <summary>The last fixed color. End of fixed color range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_LIGHTGRAY">
      <summary>Light gray.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_MAGENTA">
      <summary>Magenta.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_MAROON">
      <summary>Maroon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_PALETTESIZE">
      <summary>The palette size.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_PURPLE">
      <summary>Purple.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_RED">
      <summary>Red.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSINACTSEL_BK">
      <summary>The background for inactive selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSINACTSEL_FG">
      <summary>The foreground for inactive selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSPLAINTEXT_BK">
      <summary>The background for plain text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSPLAINTEXT_FG">
      <summary>The foreground for plain text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSSEL_BK">
      <summary>The background for selected text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSSEL_FG">
      <summary>The foreground for selected text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSTEXT_BK">
      <summary>Obsolete. Use USERTEXT_BK instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSTEXT_FG">
      <summary>Obsolete. Use CI_USERTEXT_FG instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSWIDGETMGN_BK">
      <summary>The background for widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_USERTEXT_BK">
      <summary>The background color for user text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_USERTEXT_FG">
      <summary>The foreground color for user text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_WHITE">
      <summary>White.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_YELLOW">
      <summary>Yellow.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE">
      <summary>Specifies color attributes of the text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.COLOR_INDEX_MASK">
      <summary>Indicates the colorable item index to use to render the character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.COLOR_MARKER_MASK">
      <summary>Used internally by the editor. Not used by clients.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.HUMAN_TEXT_ATTR">
      <summary>Text to be treated as natural language text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.LINE_MARKER_MASK">
      <summary>Used internally by the editor. Not used by clients.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.PRIVATE_CLIENT_MASK">
      <summary>Reserved for editor-client use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.PRIVATE_EDITOR_MASK">
      <summary>Top six bits reserved for editor internal use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.SEPARATOR_AFTER_ATTR">
      <summary>Indicates that a visual line separator should follow the character's line.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS">
      <summary>Indicates drop status.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS.CDH_DEFAULT">
      <summary>Successful drop. Indicates that the drop can proceed, or already did so successfully.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS.CDH_INVALID_DEST">
      <summary>Indicates that the destination is unacceptable for a drop.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS.CDH_OVER_SELF">
      <summary>Indicates that the drop would be over the origin, and thus the position would not change.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT">
      <summary>Specifies view or action options for the data object being rendered.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_CLIPBOARD">
      <summary>General Paste from the system Clipboard (for example, CTRL+V).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_DEFAULT">
      <summary>No hint information is available.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_DROP">
      <summary>General Drag and Drop operation. This includes Drag and Drop from the Toolbox as well as DORH_MOVE_IN_SAME_DOC.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_MOVE_IN_SAME_DOC">
      <summary>Rendering was a Move operation in the same document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_PREVIEW">
      <summary>Tentative preview. For example, using CTRL+SHIFT+V to cycle through the contents of the Clipboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_TOOLBOX">
      <summary>User double-clicked an item from the Toolbox.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags">
      <summary>Specifies how to treat deeper layers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_AVOID_OUTER_EDGE">
      <summary>A "request", not a "requirement" flag. This member is used to tell a layer that during the conversion it should avoid converting the coordinate to a local coordinate that is on the "outer" edge of a visible region ("outer" meaning the right edge if DLI_RIGHTMOST is specified, and meaning the left edge otherwise). try to enclose outer edge</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_CLOSEST">
      <summary>Send back the closest available local coordinates</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_DEFAULT">
      <summary>Return <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN" /> if deeper text is hidden.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_RIGHTMOST">
      <summary>Opts for rightmost in case of ambiguity; by default we opt for leftmost in case of ambiguity.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.dliClosest">
      <summary>Same as DLE_CLOSEST.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.dliDefault">
      <summary>Same as DLE_DEFAULT.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.dliRightmost">
      <summary>Same as DLE_RIGHTMOST.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS">
      <summary>Specifies default types that identify items in the core editor view for colorizing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_COMMENT">
      <summary>Denotes a language comment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_IDENTIFIER">
      <summary>Denotes a language identifier. For example, in int MyVariable, MyVariable is an identifier, while int is a keyword.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_KEYWORD">
      <summary>Denotes a language keyword.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_NUMBER">
      <summary>Denotes a number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_STRING">
      <summary>Denotes a string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_TEXT">
      <summary>Default value for plain text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.DEFAULT_ITEM_COUNT">
      <summary>This is the last enumeration value.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE">
      <summary>Specifies the drawing protocol requested for a combo. Used in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE.ENTRY_ATTR">
      <summary>Text that may have bold/italic/underline attributes. <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)" /> will be called.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE.ENTRY_IMAGE">
      <summary>A glyph is drawn to the left of the entries. <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryImage(System.Int32,System.Int32,System.Int32@)" /> will be called.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE.ENTRY_TEXT">
      <summary>Plain text only. <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryText(System.Int32,System.Int32,System.String@)" /> will be called.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR">
      <summary>DROPDOWNFONTATTR is an enum used by IVsDropdownBarClient to describe the appearance of text entries.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_BOLD">
      <summary>bold text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_GRAY">
      <summary>grayed out text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_ITALIC">
      <summary>italicized text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_PLAIN">
      <summary>plain text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_UNDERLINE">
      <summary>underlined text</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS">
      <summary>Provides options for enumerating collections of markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES">
      <summary>Ignore <paramref name="iMarker" /> parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_CONTAINED">
      <summary>Excludes any marker whose span is not fully contained within the given span. For example, say that you have a marker from column 0 to column 1 and a marker from column 1 to column 3. Given a span of 0-1, you return only the first marker; given span of 1-2, you return only the second marker. However, given a span of 0-2, you return both markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_DEFAULT">
      <summary>Default settings.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ENTIREBUFFER">
      <summary>Ignore <paramref name="iPos" /> and <paramref name="iLen" /> parameters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_GLYPHINSPAN">
      <summary>Return markers that have a margin glyph and that start on the same line as the specified span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_INCLUDEINVISIBLE">
      <summary>Includes invisible markers, which are normally excluded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_SORTDESCENDING">
      <summary>Sort in descending order.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_SORTPRIORITY">
      <summary>Sort by marker priority.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE">
      <summary>Enumerates end of line markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolCR">
      <summary>Macintosh: \r.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolCRLF">
      <summary>MS-DOS: \r\n carriage-return/linefeed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolEOF">
      <summary>End of file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolLF">
      <summary>Unix: \n.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolNONE">
      <summary>Artificial ending point (e.g. word-wrapped line).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolUNI_LINESEP">
      <summary>Unicode line separator.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolUNI_PARASEP">
      <summary>Unicode paragraph separator.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.MAX_EOLTYPES">
      <summary>End of enum marker. This value has been redefined in <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS">
      <summary>Specifies options for finding hidden regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_ALL_REGIONS">
      <summary>Specify only this flag to find all hidden regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_BY_CLIENT_DATA">
      <summary>Find region by matching client-specified value in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.EnumHiddenRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)" /> with the <paramref name="dwClient" /> member value specified in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure for each hidden region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_BY_TYPE">
      <summary>Find region by type. Casts marker type to DWORD and puts in <paramref name="dwCookie" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_CLIENT_CONTROLLED_ONLY">
      <summary>Finds only regions that are controlled by the <paramref name="dwClient" /> member value specified in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure for each hidden region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_EDITOR_CONTROLLED_ONLY">
      <summary>Finds only regions that are controlled by the active editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_ENTIRELY_WITHIN_SPAN">
      <summary>Finds regions that are entirely within the given span, not simply intersecting the span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_EXACT_SPAN">
      <summary>Finds only regions whose base span exactly matches the specified span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_INNERMOST">
      <summary>Finds one region that is the most deeply nested region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_INTERSECTS_SPAN">
      <summary>Finds all regions intersecting the given span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_MUST_START_IN_SPAN">
      <summary>Like FHR_PREFER_START_IN_SPAN, except that only regions starting within spans will be returned</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_PREFER_START_IN_SPAN">
      <summary>Gives a region starting within the span higher priority than one ending in the span. Only has an effect when FHR_INNERMOST is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_VISIBLE_ONLY">
      <summary>Excludes regions inside a collapsed region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrAllRegions">
      <summary>Compatibility member. Use FHR_ALL_REGIONS.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrByClientData">
      <summary>Compatibility member. Use FHR_BY_CLIENT_DATA.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrByType">
      <summary>Compatibility member. Use FHR_BY_TYPE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrClientControlledOnly">
      <summary>Compatibility member. Use FHR_CLIENT_CONTROLLED_ONLY.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrEditorControlledOnly">
      <summary>Compatibility member. Use FHR_EDITOR_CONTROLLED_ONLY.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrExactSpan">
      <summary>Compatibility member. Use FHR_EXACT_SPAN.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrWithinSpan">
      <summary>Compatibility member. Use FHR_WITHIN_SPAN.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS">
      <summary>Specifies how to find a synthetic region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_ALL_REGIONS">
      <summary>To find every region, specify *ONLY* this flag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_BY_CLIENT_DATA">
      <summary>dwCookie group. Find region with matching client DWORD</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_EXACT_SPAN">
      <summary>find only those regions whose base span exactly matches the given span</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_WITHIN_SPAN">
      <summary>Span param group (mutually exclusive). Find all regions within the given span.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS">
      <summary>Specifies directional options for locating markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS.FM_BACKWARD">
      <summary>Searches for markers in the backward direction.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS.FM_FORWARD">
      <summary>Searches for markers in the forward direction (implicit).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES">
      <summary>Specifies color table preferences to be used when painting text or markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.hBoldViewFont">
      <summary>Bold fonts that are used by text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.hRegularViewFont">
      <summary>Regular fonts that are used by text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pColorTable">
      <summary>COM pointer to the color table for the colorable item provider indicated by *<paramref name="pguidColorService" />. This object is created as a result of this call if it has not been created already. This pointer is guaranteed to be valid if the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" /> structure is an [in] parameter to a function. If you want to hold onto it beyond that you must AddRef (and later Release) it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pguidColorCategory">
      <summary>GUID of the category to be used for the editor's color settings. The editor can handle separate categories for fonts and colors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pguidColorService">
      <summary>CLSID of an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems" /> implementor. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pguidFontCategory">
      <summary>GUID of the category to be used for the editor's font settings. The editor can handle separate categories for fonts and colors.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS">
      <summary>Provides additional marker options for modifying the font used to display text appearance.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS.FF_BOLD">
      <summary>Bold text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS.FF_DEFAULT">
      <summary>Plain text. Marker does not modify text appearance in terms of bold or strikethrough options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS.FF_STRIKETHROUGH">
      <summary>Strikethrough text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES">
      <summary>Provides frame settings that control whether scroll bars are provided for views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES.fHorzScrollbar">
      <summary>Determines whether the frame should display a horizontal scroll bar for views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES.fVertScrollbar">
      <summary>Determines whether the frame should display a vertical scroll bar for views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.GetSelectedAtomFlags">
      <summary>Specifies when to match a selected atom.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GetSelectedAtomFlags.gsaDefault">
      <summary>Matches an atom when the selection is 1) empty and to the left of it, or 2) exactly selecting it.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS">
      <summary>Provides information about a line in the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeColorizerState">
      <summary>Not implemented.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeDefault">
      <summary>Default behavior: whole line, no attributes, regular locking.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeFullAttr">
      <summary>Combining with a bitwise or of <paramref name="gldeSyntaxAttr" /> and <paramref name="gldeMarkerAttr" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeMarkerAttr">
      <summary>Returns marker coloring attributes plus other attributes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeNoReadLock">
      <summary>This value tells <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> or <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])" /> to skip locking entirely. This is only safe to do if you have separately put a read (or read/write) lock on the buffer beforehand, and keep it locked until you've released the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure again using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])" />. This allows a fast iteration over an entire set of lines, factoring out the locking overhead, which becomes significant if you are iterating over many lines.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeNoWidgetMargin">
      <summary>Specifies that there is no widget margin, so appropriate markers can color text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSubset">
      <summary>Returns information only for the line subset defined by the <paramref name="iStartIndex" /> and <paramref name="iEndIndex" /> parameters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSyntaxAttr">
      <summary>Return syntax coloring attributes and the colorizer state.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS">
      <summary>Provides options for drawing the glyph in the widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_BOTTOMEDGE">
      <summary>Bottom line glyph specifying the ending of a multi-line span of text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_DEFAULT">
      <summary>Single-line glyph.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_MULTILINE">
      <summary>Multi-line glyph.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_TOPEDGE">
      <summary>Top line glyph specifying the beginning of a multi-line span of text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR">
      <summary>Specifies whether the hidden region is controlled by the client or the editor. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbClientControlled">
      <summary>Use to get notifications for a variety of events and to fully control every aspect of a hidden text region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbEditorControlled">
      <summary>Use if you just want to do outlining-type hiding of a region and want the editor to take responsibility for the appearance, behavior, and lifetime of the hidden region.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT">
      <summary>Determines the exact user action taken on the hidden text region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreAfterRegionCollapsed">
      <summary>A region with user-controlled visibility was collapsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreAfterRegionExpanded">
      <summary>A region with user-controlled visibility was expanded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreBeforeRegionCollapsed">
      <summary>A region with user-controlled visibility will be collapsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreBeforeRegionExpanded">
      <summary>A region with user-controlled visibility will be expanded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreRegionDeleted">
      <summary>Region deleted by a text edit.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreRegionReloaded">
      <summary>The text of a hidden region was reloaded and may no longer be at an appropriate location.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreRegionResurrected">
      <summary>Region was deleted, but was restored by an Undo or Redo operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE">
      <summary>Specifies whether the span of text is expanded or collapsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE.hrsDefault">
      <summary>New outline region is collapsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE.hrsExpanded">
      <summary>New outline region is expanded.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE">
      <summary>Specifies whether the new region is a hidden (concealed) or outline (collapsible) region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE.hrtCollapsible">
      <summary>Specifies an outline region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE.hrtConcealed">
      <summary>Specifies a hidden region.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.INITVIEW">
      <summary>Specifies view parameters. Used in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fDragDropMove">
      <summary>Determines whether to use drag/drop moves.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fHotURLs">
      <summary>Determines whether to use single-click URL navigation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fOvertype">
      <summary>Determines whether to use overtype mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fSelectionMargin">
      <summary>Determines whether to display selection margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fStreamSelMode">
      <summary>OBSOLETE: ignored by the core editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fVirtualSpace">
      <summary>Determines use of virtual space navigation and selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fVisibleWhitespace">
      <summary>Determines whether whitespace is visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fWidgetMargin">
      <summary>Determines whether to display the widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.IndentStyle">
      <summary>Determines indent style.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsAction">
      <summary>Defines actions placed in the undo history of a text buffer. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAction.CanMerge(Microsoft.VisualStudio.TextManager.Interop.IVsAction)">
      <summary>Determines if the specified action can be merged into the text buffer undo history.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pAction">[in] The specified action.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAction.Merge(Microsoft.VisualStudio.TextManager.Interop.IVsAction)">
      <summary>Merges the specified action into the text buffer undo history.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pAction">[in] The specified action.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar">
      <summary>Provides a set buttons at the bottom of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.Attach(System.IntPtr,System.Int32,System.IntPtr,Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient)">
      <summary>Creates window/button combinations.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="cButtons">[in] Number of buttons in the button bar.</param>
      <param name="hImageList">[in] Handle to an image list containing the button images.</param>
      <param name="pClient">[in] Pointer to the client for the button bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.Detach">
      <summary>Breaks the link between a button bar and its client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.GetClient(Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient@)">
      <summary>Returns the client associated with a button bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppClient">[out] Pointer to the button bar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.GetCurrentSelection(System.Int32@)">
      <summary>Returns the number of the button that is currently pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piCurButton">[out] Pointer to the number of the button currently pressed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.GetSize(System.Int32@,System.Int32@)">
      <summary>Gets the size of the button bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piWidth">[out] The width of the button bar</param>
      <param name="piHeight">[ref] The height of the button bar</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.SetCurrentSelection(System.Int32)">
      <summary>Specifies The button that is selected.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCurButton">[in] Index of the button to select.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.SetHeight(System.Int32)">
      <summary>Specifies the height of the button bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iHeight">[in] The height of the button bar.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient">
      <summary>The client for a button bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient.GetButtonTipText(System.Int32,System.String@)">
      <summary>Returns the tooltip for a button</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iButton">[in] Number of the button for which to get the tooltip.</param>
      <param name="pbstrTip">[out] String containing the tooltip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient.OnButtonPressed(System.Int32)">
      <summary>Fired when a new button is pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iButton">[in] Number of the button pressed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient.SetButtonBar(Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar)">
      <summary>Called by the button bar to hook itself up to this client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pButtonBar">[in] Pointer to the button bar.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager">
      <summary>Manages a set of buttons in a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager.AddButtonBar(System.Int32,System.IntPtr,Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient)">
      <summary>Adds a set of combo buttons to a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cButtons">[in] The number of buttons in the button bar.</param>
      <param name="hImageList">[in] Actually an HIMAGELIST, the list of images of buttons in the button bar.</param>
      <param name="pClient">[in] The client to be associated with the button bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager.GetButtonBar(Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar@)">
      <summary>Returns the button bar associated with a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppButtonBar">[out] Pointer to a button bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager.RemoveButtonBar">
      <summary>Removes a button bar from a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents">
      <summary>Bracket a series of changes from an undo manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents.OnChangeClusterClosing(System.UInt32)">
      <summary>Called when a change event is closing in the undo manager.</summary>
      <param name="dwFlags">[in] Modification flags determining what kind of change event this was. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents.OnChangeClusterOpening(System.UInt32)">
      <summary>Called when a change event is opening in the undo manager.</summary>
      <param name="dwFlags">[in] Modification flags determining what kind of change event this is. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager">
      <summary>Provides undo management for an editor that supports multiple views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.AdviseTrackingClient(Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents)">
      <summary>Advises the Undo Manager that you want to receive notification when the document is clean.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUndoTrackingEvents">[in] Pointer to an undo tracking events object. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.MarkCleanState">
      <summary>Tells the Undo Manager that an unmodified state has been reached, for example, following a Save operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.QueryCleanState(System.Int32@)">
      <summary>Determines whether the document is in an unmodified state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfClean">[out] true indicates the document is in an unmodified state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.UnadviseTrackingClient">
      <summary>Advises the Undo Manager that you no longer want to receive notification of when the document is clean.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow">
      <summary>Represents a multiple-document interface (MDI) child that contains one or more code views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.Close">
      <summary>Closes the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the buffer used by all views in the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetEditorCaption(Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS,System.String@)">
      <summary>Returns the editor caption to which editors can append custom text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnly">[in] Gets the read and write status of the text buffer. For a list of <paramref name="dwReadOnly" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS" /></param>
      <param name="pbstrEditorCaption">[out] Pointer to a BSTR that contains the caption text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetLastActiveView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the last active view of the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface that represents the last active view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetPrimaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the top (or primary) view of a split code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the primary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetSecondaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the bottom (or secondary) view of a split code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the secondary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetViewClassID(System.Guid@)">
      <summary>Returns the text view class to change or query.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pclsidView">[out] Pointer to the class identifier (CLSID) of the text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.SetBaseEditorCaption(System.String[])">
      <summary>Appends custom text to the editor caption</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBaseEditorCaption">[in] Pointer to the base editor caption string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Sets the text buffer for all views in the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface of the text buffer to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.SetViewClassID(System.Guid@)">
      <summary>Sets the text view class to change or query.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsidView">[in] Class identifier of the text view to change.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents">
      <summary>Allows a VSPackage to listen to certain events associated with the view that contains an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> object. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents.OnCloseView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when a view has been closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that has been closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents.OnNewView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when a view has just been created.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that has been created.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager">
      <summary>Allows adornments, such as drop-down bars, to be added to or removed from a code window. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager.AddAdornments">
      <summary>Adds adornments, such as drop-down bars, to a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager.OnNewView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called by the core editor to notify a language that a new view was created.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object for the new view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager.RemoveAdornments">
      <summary>Removes adornments, such as drop-down bars, from a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem">
      <summary>Provides default font colors, font style, and item name information for a custom colorable item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>Defines the default background and foreground colors for a custom colorable item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piForeground">[out] Returns an integer containing the foreground color. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /></param>
      <param name="piBackground">[out] Returns an integer containing the background color. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem.GetDefaultFontFlags(System.UInt32@)">
      <summary>Returns the default font flags for the custom colorable item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFontFlags">[out] Font flags for the custom colorable item (that is, bold, plain text, and so on). For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem.GetDisplayName(System.String@)">
      <summary>Gets the display name of the custom colorable item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] Returns a localized string containing the display name for the custom colorable item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer">
      <summary>Implemented by the language client to assign color attributes to a span of text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.CloseColorizer">
      <summary>Releases any references held on a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])">
      <summary>Colorizes the given text.</summary>
      <returns>Returns the colorizer's state at the end of the line.</returns>
      <param name="iLine">[in] Line to be colorized.</param>
      <param name="iLength">[in] Length of the line minus the end-of-line marker (CR, LF, CRLF pair, or 0 (EOF)).</param>
      <param name="pszText">[in] The line's text (examine up to <paramref name="iLength" /> characters).</param>
      <param name="iState">[in] The colorizer's state at the beginning of the line.</param>
      <param name="pAttributes">[out] An array of color attributes to be filled in for the text. The array contains one member for each character in the line colorized, and an additional element which represents the background color of the space to the right of the last character. This array is <paramref name="iLength" /> + 1 characters long.Members of the pAttributes array may contain bits that can be masked with the various values provided in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE" /> enumeration to get the information required. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.GetStartState(System.Int32@)">
      <summary>Determines the state in which colorization of the first line of the buffer should begin.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piStartState">[out] Pointer to a long integer that represents the start state of the colorizer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.GetStateAtEndOfLine(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Determines the end-of-line state for a given line.</summary>
      <returns>Returns the state at the end of the line.</returns>
      <param name="iLine">[in] Line whose state is to be queried.</param>
      <param name="iLength">[in] Length of the line minus the end-of-line marker (CR, LF, CRLF pair, or 0 (EOF)).</param>
      <param name="pText">[in] The line's text (examine only up to <paramref name="iLength" /> characters).</param>
      <param name="iState">[in] The colorizer's state at the beginning of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.GetStateMaintenanceFlag(System.Int32@)">
      <summary>Returns the state maintenance requirement for the colorizer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfFlag">[out] true if this colorizer requires per-line state maintenance, otherwise it should be set to false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCommitGestureSink">
      <summary>Indicates that some form of UI commit gesture has occurred.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCommitGestureSink.FlushCommitEventIfCurrentClusterIsOutermost">
      <summary>Fires the commit event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCommitGestureSink.OnCommitGesture(System.UInt32)">
      <summary>Called when a change to the buffer has been committed.</summary>
      <param name="dwGestureFlags">[in] A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags" /> or <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags2" /> that indicate the type of change causing the commit gesture.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet">
      <summary>Provides statement completion capabilities for the language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.Dismiss">
      <summary>Releases the completion set when it is no longer needed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)">
      <summary>Determines the index of the closest matching completion set, given what has been typed so far.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSoFar">[in] A string containing the text typed by the user.</param>
      <param name="iLength">[in] Integer containing the length of the string.</param>
      <param name="piIndex">[out] Returns an integer specifying the index.</param>
      <param name="pdwFlags">[out] Returns the type of match completed. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetCount">
      <summary>Returns the number of items in the completion set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDescriptionText(System.Int32,System.String@)">
      <summary>Returns text describing the indicated item in the completion set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Index identifying the item in the completion set to provide description text for.</param>
      <param name="pbstrDescription">[out] Returns a string containing the description text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])">
      <summary>Returns the text of a completion set item as it appears in the completion set list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Index of completion set item to return display text for.</param>
      <param name="ppszText">[out] Returns a string containing the display text.</param>
      <param name="piGlyph">[out] Returns an integer identifying the glyph to display next to the completion item. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetFlags">
      <summary>Returns flags indicating specific behaviors of this completion set.</summary>
      <returns>Returns one or more flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" /> enumeration (specifically, the flags beginning with CSF_).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetImageList(System.IntPtr@)">
      <summary>Returns the list of images (glyphs) supported by the completion set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImages">[out] Returns a handle to the image list associated with the completion set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)">
      <summary>Determines where to display the completion set list in the editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Returns the line number of the characters that should not be obscured.</param>
      <param name="piStartCol">[out] Returns the column number of the first character that should not be obscured.</param>
      <param name="piEndCol">[out] Returns the last character in the span that should not be obscured. This must be on the same line as <paramref name="piLine" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)">
      <summary>Determines how text is completed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSoFar">[in] The text typed so far.</param>
      <param name="iIndex">[in] Index identifying the match completion set item.</param>
      <param name="fSelected">[in] Indicates whether a completion item is selected in the completion box. If true, then the value of the <paramref name="pszSoFar" /> parameter is replaced by the text returned by <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])" />. If true, this indicates that an <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> return with the value of <paramref name="pbstrCompleteWord" /> equal to <paramref name="pszSoFar" /> is appropriate default behavior. The default value of <paramref name="fSelected" /> is true.</param>
      <param name="cCommit">[in] Last character that was typed.</param>
      <param name="pbstrCompleteWord">[out] Returns the complete word.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction">
      <summary>Enables the creation of compound actions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.AbortCompoundAction">
      <summary>Aborts a compound action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.CloseCompoundAction">
      <summary>Closes a compound action and sets the endpoint of a set of actions to be grouped in a single undo/redo unit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.FlushEditActions">
      <summary>Updates the various text layers (outlining, word wrap, and so on) when called.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.OpenCompoundAction(System.String)">
      <summary>Opens a compound action and sets the starting point of a set of actions to be grouped in a single undo/redo unit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszDescription">Pointer to a null terminated string containing the description.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundActionEvents">
      <summary>Provides events for firing when beginning and aborting a compound action.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundActionEvents.OnAbortAction">
      <summary>Fired when a compound action is aborted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundActionEvents.OnBeforeAction">
      <summary>Fired before a compound action takes place.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundViewChange">
      <summary>Allows the creation of compound view actions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundViewChange.CloseCompoundViewChange">
      <summary>Closes a compound view change.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundViewChange.OpenCompoundViewChange">
      <summary>Opens a compound view change.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName">
      <summary>Provides methods to get a debug breakpoint name and location.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName.GetLocation(System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Gets the breakpoint location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrMkDoc">[out] The document moniker.</param>
      <param name="pspanLocation">[out] The location of the text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName.GetName(System.String@)">
      <summary>Gets the name of the breakpoint.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] The breakpoint name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDefaultButtonBarImages">
      <summary>Obtains default Buttonbar images.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDefaultButtonBarImages.GetButtonCount(System.Int32@)">
      <summary>Returns the number of buttons on a Buttonbar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcButtons">[out] Number of buttons.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDefaultButtonBarImages.GetImageList(System.IntPtr@)">
      <summary>Returns the Buttonbar image list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImageList">[out] Handle of the image list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar">
      <summary>Provides control of the drop-down bar at the top of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.Attach(System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient)">
      <summary>Creates the window and drop-down combination and sets up a link between the drop-down bar and its client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="cCombos">[in] The Drop-down bar/Window combo.</param>
      <param name="pClient">[in] Pointer to the Drop-down bar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.Detach">
      <summary>Breaks the link between the dropdown bar and its client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.GetClient(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient@)">
      <summary>Returns the client associated with this drop-down bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppClient">[out] Pointer to the client. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.GetCurrentSelection(System.Int32,System.Int32@)">
      <summary>Returns the entry that is currently selected in a given combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="piCurSel">[out] Currently selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.RefreshCombo(System.Int32,System.Int32)">
      <summary>Force a repaint of a combo, specifying the new selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> OK. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.SetCurrentSelection(System.Int32,System.Int32)">
      <summary>Sets the current selection in the given drop-down combination</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient">
      <summary>Describes the contents of the drop-down bar combinations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)">
      <summary>Returns information about a drop-down bar/Window combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="pcEntries">[in] Count of entries in the combination.</param>
      <param name="puEntryType">[out] Specifies drawing protocol for a combination. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE" /> enumeration.</param>
      <param name="phImageList">[out] Handle to an HIMAGELIST.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetComboTipText(System.Int32,System.String@)">
      <summary>Returns the tooltip for an entire drop-down bar combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="pbstrText">[out] String containing the tooltip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryAttributes(System.Int32,System.Int32,System.UInt32@)">
      <summary>Returns text appearance attributes for a drop-down combination entry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
      <param name="pAttr">[out] Font attribute. Values for <paramref name="pAttr" /> are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryImage(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the glyph associated with a combo entry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
      <param name="piImageIndex">[out] Index of glyph in the image list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryText(System.Int32,System.Int32,System.String@)">
      <summary>Returns the text for a combo entry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
      <param name="ppszText">[out] String containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.OnComboGetFocus(System.Int32)">
      <summary>Fires when the combo gets focus.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.OnItemChosen(System.Int32,System.Int32)">
      <summary>Fires when a combo item is chosen.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.OnItemSelected(System.Int32,System.Int32)">
      <summary>Fires when a combo item is selected.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.SetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar)">
      <summary>Called by the drop-down bar to hook itself up to the client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDropdownBar">[in] Specifies a drop-down bar object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager">
      <summary>Manages drop-down bars in code windows.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager.AddDropdownBar(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient)">
      <summary>Allows you to add a set of combo dropdowns to a code window.  This call wraps the call to IVsDropdownBar::Attach. If there is already a dropdown bar attached to the code window it returns E_UNEXPECTED. In general you should call GetDropdownBar first before calling AddDropdownBar to make sure there isn't already a dropdown bar associated with the given code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cCombos">[in] The DropdownBar/Window combo.</param>
      <param name="pClient">[in] DropdownBar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager.GetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar@)">
      <summary>Returns the dropdown bar associated with the code window, if any. If there is one, it returns S_OK and sends back a pointer to it. If there isn't one, it returns null.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppDropdownBar">[out] Pointer to the drop-down bar, null if there isn't one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager.RemoveDropdownBar">
      <summary>Removes a drop-down bar from a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDynamicTabProvider">
      <summary>Provides dynamic tabs for the text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDynamicTabProvider.GetTabStop(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TabStop[])">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TabStop" /> for the given text buffer and line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The text buffer within which to find the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TabStop" />.</param>
      <param name="iLine">[in] The text line within which to find the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TabStop" />.</param>
      <param name="sTabStop">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TabStop" /> for the specified line and buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDynamicTabProvider.GetTabStopElements(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.UInt32@)">
      <summary>Gets the number of tab stops in the specified text buffer and line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The text buffer within which to find tab stops.</param>
      <param name="iLine">[in] The line within which to find tab stops.</param>
      <param name="cEl">[out] The number of tab stops found in the specified line and buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEditorGoBackLocations">
      <summary>Optionally provides setting a merge-able or non-merge-able go back location.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEditorGoBackLocations.SetMergeableGoBackLocation(System.Int32,System.Int32,System.Int32)">
      <summary>Sets a merge-able go back location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fCurrentCaretPos">[in] If value is true, it is not necessary to provide line and column, the current carat position is set as a merge-able go back location.</param>
      <param name="iBaseLine">[in] The line to set as the merge-able go back location.</param>
      <param name="iBaseCol">[in] The column to set as the merge-able go back location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEditorGoBackLocations.SetNonMergeableGoBackLocation(System.Int32,System.Int32,System.Int32)">
      <summary>Sets a non-merge-able go back location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fCurrentCaretPos">[in] If value is true, it is not necessary to provide line and column, the current carat position is set as a non- merge-able go back location.</param>
      <param name="iBaseLine">[in] The line to set as the non-merge-able go back location.</param>
      <param name="iBaseCol">[in] The column to set as the non-merge-able go back location.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR">
      <summary>Enumerates a collection of BSTRs. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR@)">
      <summary>Duplicates a collection of BSTRs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.GetCount(System.UInt32@)">
      <summary>Returns the total count of BSTRs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pceltCount">[out] Number of BSTRs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Next(System.UInt32,System.String[],System.UInt32@)">
      <summary>Retrieves BSTRs from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of BSTRs to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of BSTRs that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Skip(System.UInt32)">
      <summary>Skips BSTRs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of BSTRs to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName">
      <summary>Enumerates a collection of debug names.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)">
      <summary>Duplicates a collection of debug names.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.GetCount(System.UInt32@)">
      <summary>Returns the total count of debug names in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pceltCount">[out] Total count of debug names in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsDebugName[],System.UInt32@)">
      <summary>Retrieves debug names from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of DebugNames to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Skip(System.UInt32)">
      <summary>Skips debug names in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of debug names to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID">
      <summary>Enumerates a collection of GUIDs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Duplicates a collection of GUIDs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[in] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.GetCount(System.UInt32@)">
      <summary>Returns the total count of GUIDs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pceltCount">[out] Number of GUIDs in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Next(System.UInt32,System.Guid[],System.UInt32@)">
      <summary>Retrieves GUIDs from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of GUIDs to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of GUIDs that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Skip(System.UInt32)">
      <summary>Skips GUIDs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of GUIDs to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions">
      <summary>Enumerates existing hidden text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions.GetCount(System.UInt32@)">
      <summary>Returns the total count of hidden regions in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcRegions">[out] Number of hidden regions in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion[],System.UInt32@)">
      <summary>Retrieves a specified number of hidden regions in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cEl">[in] The requested number of hidden regions to retrieve.</param>
      <param name="ppOut">[out, size_is(cEl)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> objects that have been retrieved.</param>
      <param name="pcElFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="ppOut" />. The caller of this method can set this to null if <paramref name="cEl" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews">
      <summary>Enumerates a collection of independent views. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews.GetCount(System.UInt32@)">
      <summary>Returns the total count of independent views in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Number of independent views in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews.Next(System.UInt32,System.Object[],System.UInt32@)">
      <summary>Retrieves independent views from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of independent views to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers">
      <summary>Enumerates a collection of layer markers. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers.GetCount(System.Int32@)">
      <summary>Total count of layer markers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcMarkers">[out] Count of layer markers in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers.Next(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker@)">
      <summary>Retrieves the next text layer marker in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppRetval">[out, retval)] Pointer to the next <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers" /> interface in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers">
      <summary>Enumerates a collection of line markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers.GetCount(System.Int32@)">
      <summary>Returns the total count of line markers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcMarkers">[out] Number of line markers.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers.Next(Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker@)">
      <summary>Retrieves the next line marker in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppRetval">[out, retval)] Pointer to the next <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers">
      <summary>Enumerates a collection of stream markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers.GetCount(System.Int32@)">
      <summary>Returns the total count of stream markers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcMarkers">[out] Pointer to the number of stream markers in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers.Next(Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker@)">
      <summary>Retrieves the next stream marker in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppRetval">[out, retval)] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions">
      <summary>Enumerates a collection of synthetic regions. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions.GetCount(System.UInt32@)">
      <summary>Returns the total count of synthetic regions in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcRegions">[out] Total count of synthetic regions in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion[],System.UInt32@)">
      <summary>Retrieves synthetic regions from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cEl">[in] The requested number of synthetic regions to retrieve.</param>
      <param name="ppOut">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion" /> objects that have been retrieved.</param>
      <param name="pcElFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.  </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers">
      <summary>Enumerates a collection of test buffers. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Duplicates an enumeration of text buffers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer[],System.UInt32@)">
      <summary>Retrieves text buffers from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of text buffers to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Skip(System.UInt32)">
      <summary>Skips text buffers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of text buffers to skip in the enumeration sequence.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans">
      <summary>Enumerates a collection of text spans.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans.GetCount(System.UInt32@)">
      <summary>Returns the total count of text spans in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcSpans">[out] Total count of text spans in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
      <summary>Retrieves text spans from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cEl">[in] The requested number of text spans to retrieve.</param>
      <param name="ppOut">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans" />  objects that have been retrieved.  </param>
      <param name="pcElFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews">
      <summary>Enumerates a collection of text views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews.GetCount(System.UInt32@)">
      <summary>Returns the total count of text views in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Total count of text views in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView[],System.UInt32@)">
      <summary>Retrieves text views from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of text views to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFileBackup">
      <summary>Implemented by components interested in being backed up.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFileBackup.BackupFile(System.String)">
      <summary>Persists the object to a single file</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBackupFileName">[in] Filename to persist.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFileBackup.IsBackupFileObsolete(System.Int32@)">
      <summary>Sets a backup dirty bit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbObsolete">[out] Backup file is dirty</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFinalTextChangeCommitEvents">
      <summary>Notifies clients of the last commit gesture to trigger the event and provides the range of text changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinalTextChangeCommitEvents.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Notifies clients of the last commit gesture to trigger the event and provide the range of text changed.</summary>
      <param name="dwGestureFlags">[in] Flags indicating the type of changes made. For a list of <paramref name="dwGestureFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags" />.</param>
      <param name="ptsChanged">[in] Span of text modified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFinder">
      <summary>Finds a text image.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.AttachTextImage(System.Object)">
      <summary>Attaches a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextImage">[in] Object to attach. <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> or <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.Detach">
      <summary>Detaches a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.Find(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
      <summary>Finds a text image within a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFindHow">[in] Instructions for the search. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW" /> enumeration.</param>
      <param name="ptsMatch">[in] The span or extent of text to search.</param>
      <param name="pgrfResult">[out] Enumeration value indicating result of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetMatch(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Gets a textspan match.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[out] Current match. Does not require <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetMatchedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Gets matched textspans.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSpans">[out] Bulk find list. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on Find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetState(System.Int32@,System.UInt32@,System.UInt32@)">
      <summary>Gets state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcFound">[out] Number of state values found.</param>
      <param name="pResult">[out] Enumeration value indicating result of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR" /> enum.</param>
      <param name="pState">[out] Enumeration value indicating state of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetTaggedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Returns tagged textspans.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppTags">[out] Regex tagged expressions. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.Init(System.UInt32,System.String,System.Int32,System.UInt32@)">
      <summary>Sets the find string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Flag containing find options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enum.</param>
      <param name="pszFindPattern">[in] Pattern to search for.</param>
      <param name="fReinit">[in] true for a new pattern.</param>
      <param name="pResult">[out] Enumeration value indicating result of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.SetPosition(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextAddress)">
      <summary>Sets search positions</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fp">[in] Search position. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS" /> enum.</param>
      <param name="ta">[in] The text address.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.SetScope(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet)">
      <summary>Restricts search to the span set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpanScope">[in] Scope of the search. Specified as an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper">
      <summary>Utility for text string matching. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper.FindInText(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt16[],System.UInt32@,System.UInt32@,System.String@,System.Int32@)">
      <summary>Finds, and optionally replaces, a text pattern in a text string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFind">[in] Text pattern to find.</param>
      <param name="pszReplace">[in] Replacement text pattern.</param>
      <param name="grfFindOptions">[in] Search options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
      <param name="grfBufferFlags">[in] Flag indicating that <paramref name="pchText" /> begins or ends a line. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS" /> enumeration.</param>
      <param name="cchText">[in] Size of text, in Unicode characters.</param>
      <param name="pchText">[in, size_is(cchText)] Text buffer to search for <paramref name="pszFind" />.</param>
      <param name="piFound">[out] Index in buffer pointing to match.</param>
      <param name="pcchFound">[out] Length of match found.</param>
      <param name="pbstrReplaceText">[out] Computed replacement text, if necessary.</param>
      <param name="pfFound">[out, retval] true if pattern was found.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope">
      <summary>Defines a custom scope that can be chosen in the Find in Files, Look in combo box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope.EnumFilenames(Microsoft.VisualStudio.OLE.Interop.IEnumString@)">
      <summary>Enumerate filenames (full path only).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnumString">[out] Enumeration of filenames.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope.GetQuery(System.String@,System.String@)">
      <summary>Returns a query string</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrBaseDirectory">[out] The base directory for relative filenames. If value is null, the Find manager's default base is used.</param>
      <param name="pbstrQuery">[out] The query string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope.GetUIName(System.String@)">
      <summary>Returns the name displayed in Find UI</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbsName">[out] Displayed name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget">
      <summary>Implements Find and Replace capabilities within your editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)">
      <summary>Requests a text string search.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSearch">[in] Pointer to a null terminated string containing the search text.</param>
      <param name="grfOptions">[in] Specifies the search options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
      <param name="fResetStartPoint">[in] Flag to reset the search start point.</param>
      <param name="pHelper">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper" /> interface.</param>
      <param name="pResult">[out] Pointer to the search result. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetCapabilities(System.Boolean[],System.UInt32[])">
      <summary>Specifies your supported capabilities.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfImage">[out] Set to true if you support <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetSearchImage(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet[],Microsoft.VisualStudio.TextManager.Interop.IVsTextImage@)" />.</param>
      <param name="pgrfOptions">[out] Specifies supported options, syntax, and actions. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetCurrentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the coordinates or the caret position of the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[out] Specifies the current caret position or highlighted selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetFindState(System.Object@)">
      <summary>Determines the state of a previous Find operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppunk">[out, retval] The find state as pointer to IUnknown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetMatchRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Return the screen coordinates of the matched string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prc">[out] Screen coordinates of the match. Values are returned in a PRECT structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetProperty(System.UInt32,System.Object@)">
      <summary>Returns the value of a requested property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Property identifier of the requested property. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID" /> enumeration.</param>
      <param name="pvar">[out, retval] Specified property information returned in a variant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetSearchImage(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet[],Microsoft.VisualStudio.TextManager.Interop.IVsTextImage@)">
      <summary>Returns a text image for the environment to search.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Specifies Find and Replace options. For a list of values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" />.</param>
      <param name="ppSpans">[out] The set of text spans as pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" /> interface.</param>
      <param name="ppTextImage">[out, retval] The text image as pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> interface</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.MarkSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Highlight a given text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Specifies the text span to highlight. Values are contained in a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.NavigateTo(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Move to a specified location within a document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Specifies the location of a span of text. Values are contained in a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.NotifyFindTarget(System.UInt32)">
      <summary>Sends notification to a find target of a change in status.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="notification">[in] Specifies notification. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Replace(System.String,System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.Int32@)">
      <summary>Requests a text string replace.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSearch">[in] Pointer to a null terminated string containing the search text.</param>
      <param name="pszReplace">[in] Pointer to a null terminated string containing the replacement text.</param>
      <param name="grfOptions">[in] Specifies the search options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
      <param name="fResetStartPoint">[in] Flag to reset the search start point.</param>
      <param name="pHelper">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper" /> interface.</param>
      <param name="pfReplaced">[out, retval] true if the replacement was successful.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.SetFindState(System.Object)">
      <summary>Sets the state of a find operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] The state of the find operation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider">
      <summary>Interface to provide file extension checking for Save As functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.CurFileExtensionFormat(System.String,System.UInt32@)">
      <summary>Provides the index in the filter list that matches the extension of the file passed in.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrFileName">[in] Filename and extension of interest.</param>
      <param name="pdwExtnIndex">[out] Index in the FormatFilterList (the <paramref name="pbstrFilterList" /> parameter of GetFormatFilterList).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.GetFormatFilterList(System.String@)">
      <summary>Provides the list of available extensions for the Save As dialog.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrFilterList">[out] The list of available extensions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.QueryInvalidEncoding(System.UInt32,System.String@)">
      <summary>Supplies a message informing the user that he has chosen encoding that is not supported by the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="Format">[in] Type of encoding specified. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF" /> enumeration.</param>
      <param name="pbstrMessage">[out] String containing the message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner">
      <summary>Exposed by text buffers and used by compilers and other components that need immediate access to the entire buffer. Special-purpose interface exposed by text buffers and used by compilers and other components that need immediate access to the entire buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner.CloseFullTextScan">
      <summary>Closes the buffer for scanning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner.FullTextRead(System.String@,System.Int32@)">
      <summary>Performs the actual scan.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszText">[out] Pointer to the contents of the text buffer.</param>
      <param name="piLength">[out] Length of text pointed to by *<paramref name="ppszText" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner.OpenFullTextScan">
      <summary>Opens the buffer for scanning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion">
      <summary>Manages the hidden region.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetBanner(System.String@)">
      <summary>Returns the banner for the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrBanner">[out] Pointer to the banner for the hidden region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetBaseBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Provides a pointer to the text buffer from the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the text buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetBehavior(System.UInt32@)">
      <summary>Returns the hidden region behavior, that is, client-controlled or editor-controlled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior"> [out] Pointer to the hidden region behavior. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetClientData(System.UInt32@)">
      <summary>Returns the client data for the hidden region. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwData">[out] Pointer to a double word containing the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the text span of the hidden region in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] Pointer to the text span for the hidden region. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetState(System.UInt32@)">
      <summary>Returns the state of the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwState">[out] Pointer to the state of the hidden region. This value is a combining with the bitwise or of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" /> and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" /> values.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetType(System.Int32@)">
      <summary>Returns the hidden region type (that is, concealed or collapsible).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piHiddenRegionType">[out] Pointer to the hidden region type. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.Invalidate(System.UInt32)">
      <summary>Removes the hidden region and exposes the hidden text in the normal view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdate">[in] Combining with the bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" />  values.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.IsValid">
      <summary>Determines whether the hidden region is valid.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetBanner(System.String)">
      <summary>Sets the banner for the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBanner">[in] Pointer to the banner for the hidden region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetClientData(System.UInt32)">
      <summary>Sets the client data for the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwData">[in] Double word containing the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Sets the text span of the hidden region in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[in] Pointer to the text span for the hidden region. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetState(System.UInt32,System.UInt32)">
      <summary>Sets the state of the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwState"> [in] State of the hidden region in regards to whether the region is expanded or collapsed. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" />.</param>
      <param name="dwUpdate"> [in] State of the hidden region in regards to whether the region is added to the Undo/Redo stack. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient">
      <summary>Provides notification of changes to a newly created hidden text session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32)">
      <summary>Executes a text marker command against a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /></param>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32,System.String[],System.UInt32[])">
      <summary>Returns marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /></param>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags. Values for <paramref name="pcmdf" /> are taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration in the Platform SDK.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.String[])">
      <summary>Signals that the user has hovered the mouse over a collapsed hidden text region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" />  for which tip text is required.</param>
      <param name="pbstrText"> [out] Pointer to a string containing the tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.MakeBaseSpanVisible(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Called when a particular hidden region needs to be displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /></param>
      <param name="pBaseSpan">[in] Pointer to a base span object. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> .</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.OnBeforeSessionEnd">
      <summary>Called before the hidden text session is terminated.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.OnHiddenRegionChange(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT,System.Int32)">
      <summary>Called when the user expands or collapses a hidden region.</summary>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> being expanded or collapsed.</param>
      <param name="EventCode"> [in] Indicates the exact user action taken on the hidden text region. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT" />.</param>
      <param name="fBufferModifiable"> [in] Flag indicating whether the buffer can be modified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager">
      <summary>Determines whether a hidden text session exists for a given text buffer and creates one if it does not.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager.CreateHiddenTextSession(System.UInt32,System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession@)">
      <summary>Creates a new hidden text session for a text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] This value is reserved for future use.</param>
      <param name="pOwningObject">[in] Text buffer containing the outlining or hidden text session.</param>
      <param name="pClient">[in] Pointer to a hidden text client for the buffer. The hidden text client provides notification of when a hidden text or outlining region is expanded or collapsed by the user. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient" />.</param>
      <param name="ppState">[out] Pointer to the newly created hidden text session for the text buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager.GetHiddenTextSession(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession@)">
      <summary>Returns the current hidden text session for the specified text buffer, if one exists.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOwningObject">[in] Text buffer containing the outlining or hidden text session.</param>
      <param name="ppSession">[out] Pointer to the outlining or hidden text session object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession" />) for the referenced text buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession">
      <summary>Used to add or enumerate hidden text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.AddHiddenRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions[])">
      <summary>Adds a new hidden region to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdateFlags">[in] Specifies whether the hidden region is added to the Undo/Redo stack. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" /></param>
      <param name="cRegions">[in] Number of hidden regions to add to the text buffer.</param>
      <param name="rgHidReg">[in, size_is (<paramref name="cRegions" />)] Caller-allocated array of outlining regions to add. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" />.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that can be used to enumerate the hidden regions in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.EnumHiddenRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)">
      <summary>Returns a list of the current hidden regions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFindFlags">[in] Options for finding hidden regions. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS" />. </param>
      <param name="dwCookie">[in] Specifies the client-defined hidden region type to find. Specify a value that matches the client-defined identifier specified during the creation of the new hidden region (that is, the <paramref name="dwClient" /> member in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure).</param>
      <param name="ptsRange">[in] Specifies the range of text over which to enumerate the hidden regions.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that is used to enumerate hidden regions of specified type over the specified range in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.Terminate">
      <summary>Ends the hidden text session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.UnadviseClient">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHighlight">
      <summary>Used to move a dialog box to reveal a selection or highlight.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHighlight.GetHighlightRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Returns the screen coordinates of a highlight rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prc">[out] Screen coordinates of highlight or selection.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageBlock">
      <summary>Determines the span of the current language block.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageBlock.GetCurrentBlock(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@,System.Int32@)">
      <summary>Determines the current span of the language block.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLines">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object containing the text to examine.</param>
      <param name="iCurrentLine">[in] Current line position of the cursor.</param>
      <param name="iCurrentChar">[in] Current character position of the cursor within the line.</param>
      <param name="ptsBlockSpan">[out] Specifies a span of text representing the current language block. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
      <param name="pbstrDescription">[out] Returns a string containing the description of the language block.</param>
      <param name="pfBlockAvailable">[out, retval] Returns non-zero if the block is available. Otherwise, returns zero if the current cursor position does not coincide with a language block.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps">
      <summary>Customizes copy and paste operations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.DataObjectRendered(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Allows changes to a data object after it is inserted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLines">[in] Pointer to the text buffer containing the data object.</param>
      <param name="dwHint">[in] Indicates the origin of the text (view or action) for the data object that was just rendered. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT" />.</param>
      <param name="ptsInsertedText">[in] Specifies the span of the newly inserted text, in buffer coordinates.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.GetDataObject(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> with language-specific formats. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[In] The view containing the data object.</param>
      <param name="pTextLayer">[In] The text layer containing the data object.</param>
      <param name="ppDO">[out] The data object. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.IsTextData(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether the data object contains data that can be rendered into text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Pointer to the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.TextFromData(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS[],System.String@)">
      <summary>Render this data object to text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] Pointer to a text layer object for the referenced data object.</param>
      <param name="pDO">[in] Pointer to the data object.</param>
      <param name="ptdfFlags">[out] Specifies options for how text is being pasted. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS" /> .</param>
      <param name="pbstrText">[out] Text of the data object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageContextProvider">
      <summary>Connects context-sensitive help for a language service that uses the Visual Studio core editor. Hooks up context-sensitive help for a language service that uses the Visual Studio core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageContextProvider.UpdateLanguageContext(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)">
      <summary>Provides context from the language service to the Visual Studio core editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwHint">[in] Value indicating whether this is a typical idle-time update of the context bag or a request for F1 Help. For a list of <paramref name="dwHint" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint" />.</param>
      <param name="pBuffer">[in] Text buffer in question.</param>
      <param name="ptsSelection">[in] Relevant range of text within the buffer (that is, the context).</param>
      <param name="pUC">[in, out] Pointer to the context bag on the Visual Studio core text editor.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo">
      <summary>Implement to support debugging for your language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetLanguageID(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Guid@)">
      <summary>Returns the corresponding debugger back-end "language ID".</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which the language identifier is required.</param>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index.</param>
      <param name="pguidLanguageID">[out] Returns a GUID specifying the language identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetLocationOfName(System.String,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Deprecated. Do not use.</summary>
      <param name="pszName">Do not use.</param>
      <param name="pbstrMkDoc">Do not use.</param>
      <param name="pspanLocation">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetNameOfLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.String@,System.Int32@)">
      <summary>Generates a name for the given location in the file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Returns the text buffer (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> object) that contains the location.</param>
      <param name="iLine">[in] Number of the line containing the location.</param>
      <param name="iCol">[in] Column containing the location in the line.</param>
      <param name="pbstrName">[out] Returns a string containing the name of the location.</param>
      <param name="piLineOffset">[out] Returns an integer containing the line offset from <paramref name="iLine" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetProximityExpressions(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR@)">
      <summary>Generates proximity expressions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for the text buffer containing the expression.</param>
      <param name="iLine">[in] Number of the line containing the start of the expression.</param>
      <param name="iCol">[in] Column position within the line.</param>
      <param name="cLines">[in] Number of lines within the expression.</param>
      <param name="ppEnum">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR" /> object that is used to enumerate BSTRs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.IsMappedLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32)">
      <summary>Returns whether the location contains code that is mapped to another document, for example, client-side script code.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> indicating the location contains mapped code. If the location does not contain mapped code, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />. Otherwise, returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that contains the location in question.</param>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.ResolveName(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)">
      <summary>Disambiguates the given name, providing non-ambiguous names for all entities that "match" the name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszName">[in] String containing the name.</param>
      <param name="dwFlags">[in] Flags. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS" />.</param>
      <param name="ppNames">[out] Returns an object containing a list of names. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.ValidateBreakpointLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Validates the given position as a place to set a breakpoint.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for the text buffer containing the breakpoint.</param>
      <param name="iLine">[in] Number of the line containing the breakpoint.</param>
      <param name="iCol">[in] Number of the column containing the breakpoint.</param>
      <param name="pCodeSpan">[out] Returns a span of text containing the extent of the statement at which execution would stop if the breakpoint were set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo">
      <summary>Retrieves information about a programming or markup language, including language name, associated file extension, and colorizer requirements for code editing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager@)">
      <summary>Allows a language to add adornments to a code editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCodeWin">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> interface for the requested code editor manager.</param>
      <param name="ppCodeWinMgr">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsColorizer@)">
      <summary>Returns the colorizer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface for the requested colorizer.</param>
      <param name="ppColorizer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetFileExtensions(System.String@)">
      <summary>Returns the file extensions belonging to this language.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrExtensions">[out] Returns a BSTR that contains the requested file extensions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetLanguageName(System.String@)">
      <summary>Returns the name of the programming language.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrName">[out] Returns a BSTR that contains the language name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps">
      <summary>Provides additional IntelliSense features for the language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.Format(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Formats the selected text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object containing the text to format.</param>
      <param name="ptsSel">[in] Text span to format within the specified layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.GetDataTip(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Displays a tip over a span of text when the mouse hovers over this location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object representing the text file.</param>
      <param name="ptsSel">[in] Span of text relevant to the specified text layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
      <param name="ptsTip">[out] Returns a span of text to center the tip over. For more information, see <see cref="N:Microsoft.VisualStudio.TextManager.Interop" />.</param>
      <param name="pbstrText">[out] Returns the text of the tip to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.GetPairExtent(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Determines the location of a matching brace, parenthesis, quotation mark, bracket, or any other item the language service wants to match.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object representing the text file.</param>
      <param name="ta">[in] Specifies the text address of the first item in the pair. The text address is relative to the location of text within the text layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextAddress" />.</param>
      <param name="pts">[out] Returns the span of text containing the second item in the pair. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.GetWordExtent(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the extent of a word or token on or near the point.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object representing the text file.</param>
      <param name="ta">[in] Specifies the text address of the characters to determine the word extent of. The text address is relative to the location of text within the text layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextAddress" />.</param>
      <param name="flags">[in] Specifies options for determining the extent of a word. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pts">[out] Returns the span of text identifying the whole word. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLastChangeTimeProvider">
      <summary>Allows an object to tell clients when its last change occurred.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLastChangeTimeProvider.GetLastChangeTime(Microsoft.VisualStudio.OLE.Interop.FILETIME[])">
      <summary>Gets the time of the last change.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFileTime">[out] Time change occurred. For more information see <see cref="T:System.Runtime.InteropServices.FILETIME" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView">
      <summary>Helps a view interact with text layers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetRelativeSelectionState(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Gets the selection relative to a specified layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Selection state flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags" />.</param>
      <param name="pReferenceLayer">[in] Must be null unless <see cref="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssRelativeLayer" /> is specified. If null, specifies the top-most layer.</param>
      <param name="pSelState">[out] The selection relative to the specified layer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetSelectedAtom(System.UInt32,System.Object@)">
      <summary>Tells a client when the selection is "at" an atomic object. The selection flags determine what “at” means.</summary>
      <returns>If an atomic object is found, the method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If an atomic object is not found, the method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
      <param name="dwFlags">[in] Selection flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GetSelectedAtomFlags" />.</param>
      <param name="ppunkAtom">[out] The atomic object the selection is “at”.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetTopmostLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <summary>Gets the view’s top-level layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out] The view's top-level layer representation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.SetRelativeSelectionState(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Sets the selection relative to a specified layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Selection flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags" />.</param>
      <param name="pReferenceLayer">[in] Must be null unless <see cref="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssRelativeLayer" /> is specified</param>
      <param name="pSelState">[in] Selection state. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLifetimeControlledObject">
      <summary>Instructs undo objects to release references to a designer or buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLifetimeControlledObject.SeverReferencesToOwner">
      <summary>Instructs undo objects to release references to a designer or buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLineAttributes">
      <summary>Provides manipulation of line attributes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLineAttributes.SetLineSeparator(System.Int32[],System.Int32,System.Int32)">
      <summary>Sets the line separator.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rgLines">[in] Lines for which separator is set.</param>
      <param name="cLines">[in] Number of line separators.</param>
      <param name="fRemoveAll">[in] Flag indicating that all line separators be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkCapableUndoManager">
      <summary>Manages implicit linked undo capability by calling methods which advise that focus must be put on the owner of the given undo client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkCapableUndoManager.AdviseLinkedUndoClient(Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient)">
      <summary>Specifies that the given client is the linked undo client for this manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pClient">[in] The linked undo client. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkCapableUndoManager.UnadviseLinkedUndoClient">
      <summary>Specifies that there is no linked undo client for this manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient">
      <summary>Indicates that one undo manager is blocking another undo manager from executing a linked action.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient.OnInterveningUnitBlockingLinkedUndo">
      <summary>Indicates that the undo manager is blocking another undo manager from executing a linked action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager">
      <summary>Implements the linked undo stack feature.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.AbortLinkedUndo">
      <summary>Aborts a linked undo transaction.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.CloseLinkedUndo">
      <summary>Successfully closes a linked undo transaction.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.CountOpenTransactions(System.Int32@)">
      <summary>Returns the nesting level of the linked undo transactions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">Pointer to a count object. The count object indicates the levels of nesting.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.IsAborted(System.Int32@)">
      <summary>Determines if the linked undo transaction is aborted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfAborted">Pointer to a flag, true indicating aborted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.IsStrict(System.Int32@)">
      <summary>Determines if the linked undo transaction is strict.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfStrict">Pointer to a flag, true indicating strict.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.OpenLinkedUndo(System.UInt32,System.String)">
      <summary>Opens a linked undo transaction parent unit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Value taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags" /> enumeration. <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtDefault" /> specifies the transaction to be nonstrict, which is default behavior. The other possible enum values are <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtStrict" /> which specifies the undo linking behavior as strict, and <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags2.mdtGlobal" />, which specifies the undo linking behavior as global. For more information, see the Remarks section later in this topic.</param>
      <param name="pszDescription">[in] Localized string that describes this action; appears in the undo/redo dropdown menus. This value may not be null.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem">
      <summary>Manages access to names, description and priority of a UI item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetCanonicalName(System.String@)">
      <summary>Returns non-localized item name, used for comparison in inter-language merging of items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrNonLocalizeName">[out] String containing the canonical name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetDescription(System.String@)">
      <summary>Returns the description of the item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDesc">[out] The string containing the description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetDisplayName(System.String@)">
      <summary>Returns the localized item name used for display in UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] String containing the display name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetMergingPriority(System.Int32@)">
      <summary>Returns the merging priority.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMergingPriority">[out] Priority</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData">
      <summary>Sets method data for the tip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream for the tip.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Integer identifying the stream position in the text buffer.</param>
      <param name="piLength">[out] Integer identifying the length of text in the stream past <paramref name="piPos" /> that should not be obscured with the method tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetCurMethod">
      <summary>Returns the current method number.</summary>
      <returns>Returns the current method number.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetCurrentParameter(System.Int32)">
      <summary>Gets the current parameter number of the specified method.</summary>
      <returns>Returns the current parameter number.</returns>
      <param name="iMethod">[in] Number of the method that contains the desired parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)">
      <summary>Gets a method return type, method name, or method description.</summary>
      <returns>Returns the text of the specified method type. May be null.</returns>
      <param name="iMethod">[in] Method number.</param>
      <param name="type">[in] Method text type values to return. For a list of <paramref name="type" /> values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MethodTextType" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetOverloadCount">
      <summary>Returns the number of overloaded methods.</summary>
      <returns>Returns the overload count.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetParameterCount(System.Int32)">
      <summary>Returns the total number of parameters in a specified method.</summary>
      <returns>Returns the number of parameters in the method.</returns>
      <param name="iMethod">[in] The number of the method for which to get parameter count.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetParameterText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.ParameterTextType)">
      <summary>Gets the text, usually the name, of a specified parameter for a specified method.</summary>
      <returns>Returns the text of the specified parameter. May be null.</returns>
      <param name="iMethod">[in] Method number for which to obtain parameter information.</param>
      <param name="iParm">[in] Parameter number for which information is required.</param>
      <param name="type">[in] Parameter type. For a list of <paramref name="type" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.NextMethod">
      <summary>Gets the next method number.</summary>
      <returns>Returns the next method number.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.OnDismiss">
      <summary>Dismisses the context.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.PrevMethod">
      <summary>Gets the previous method number.</summary>
      <returns>Returns the previous method number.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.UpdateView">
      <summary>Updates the tip window when context or content has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow">
      <summary>Provides a method tip window for an item in a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.Dismiss">
      <summary>The window is being dismissed by the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position, <paramref name="piPos." /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Returns the size preferences for the tip window.  </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out]The bounding rectangle of the tip window in screen coordinates.</param>
      <param name="pSizeData">[out]Size and position of the tip window. For a list of <paramref name="pSizeData" /> values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in]Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.SetMethodData(Microsoft.VisualStudio.TextManager.Interop.IVsMethodData)">
      <summary>Sets method data to display in the method tip window and releases previous method data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMethodData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData" /> interface, which is used to set method and parameter information for the method tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="hwnd">Do not use.</param>
      <param name="iMsg">Do not use.</param>
      <param name="wParam">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMouseCursorProvider">
      <summary>Allows a marker to alter the mouse cursor when it is over its glyph.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMouseCursorProvider.SetMouseCursor(System.UInt32)">
      <summary>Indicates that the text marker client should call the Win 32 API function SetCursor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Currently unused.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver">
      <summary>Resolves the location of the specified text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver.GetDisplayText(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.UInt32@,System.String@)">
      <summary>Gets text to display in context menu for specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved. Set to zero.</param>
      <param name="ptsBase">[in] Current selection or caret location.</param>
      <param name="pBuffer">[in] Base buffer.</param>
      <param name="dwOutFlags">[out] If current location is a URL.</param>
      <param name="pbstrDisplayText">[out] Text to display in context menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver.GetPathFromLocation(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.String,System.UInt32@,System.String@)">
      <summary>Get the path of the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved. Set to zero.</param>
      <param name="ptsBase">[in] Current selection or caret location.</param>
      <param name="pBuffer">[in] Base buffer.</param>
      <param name="pszDisplayText">[in] Display Text from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver.GetDisplayText(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.UInt32@,System.String@)" /></param>
      <param name="dwOutFlags">[out] true if current location is a URL</param>
      <param name="pbstrPath">[out] As much of a path as possible or just the file name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningCapableLanguage">
      <summary>Provides support for the Collapse to Definitions command from the outlining menu.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningCapableLanguage.CollapseToDefinitions(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession)">
      <summary>Outlines a specific range of text in response to the Collapse to Definitions command.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLines">[in] Pointer to the text buffer.</param>
      <param name="pSession">[in] Pointer to the outlining session object for the text buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession">
      <summary>Adds one or more outline regions to a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession.AddOutlineRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion[])">
      <summary>Creates an outlining region over the specified span of text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwOutliningFlags">[in] Outlining flags controlling whether existing outlining regions are removed or preserved. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS" />.</param>
      <param name="cRegions">[in] Number of outlining regions to add.</param>
      <param name="rgOutlnReg">[in, size_is(cRegions)] Caller-allocated array of outlining regions to add. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion" />. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType">
      <summary>Describes how a custom marker type behaves and appears to the user.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.DrawGlyphWithColors(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet,System.UInt32,System.Int32)">
      <summary>Draws a glyph in the given display context and bounding rectangle using the provided colors.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest.</param>
      <param name="pRect">[in] Pointer to a RECT structure that defines the bounding rectangle for the marker.</param>
      <param name="iMarkerType">[in] Integer containing the marker type.</param>
      <param name="pMarkerColors">[in] Pointer to a marker colors object.</param>
      <param name="dwGlyphDrawFlags">[in] Options for drawing the glyph in the widget margin. For a list of <paramref name="dwGlyphDrawFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS" /></param>
      <param name="iLineHeight">[in] Integer specifying the line height.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetBehaviorFlags(System.UInt32@)">
      <summary>Controls how the marker tracks text when edits occur.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to flags specifying how the marker tracks text when edits occur. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>Returns the default foreground and background colors for a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piForeground">[out] Pointer to the default foreground color. For a list of <paramref name="piForeground" /> values, see COLORINDEX4C54D3F1-4AEB-497F-8311-2AB027C8BAD8.</param>
      <param name="piBackground">[out] Pointer to the default background color. For a list of <paramref name="piBackground" /> values, see COLORINDEX4C54D3F1-4AEB-497F-8311-2AB027C8BAD8.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultFontFlags(System.UInt32@)">
      <summary>Specifies additional modifications to text appearance determined by the marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFontFlags">[out] Pointer to additional font options for markers. For a list of <paramref name="pdwFontFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultLineStyle(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.LINESTYLE[])">
      <summary>Returns the default line attributes for a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineColor">[out] Pointer to the default line color. For a list of <paramref name="piLineColor" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />. </param>
      <param name="piLineIndex">[out] Pointer to the default line style. For a list of <paramref name="piLineIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetPriorityIndex(System.Int32@)">
      <summary>Returns the priority index for the custom marker type, with the highest priority value receiving the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to the priority index for the type of text marker. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetVisualStyle(System.UInt32@)">
      <summary>Returns the appearance, location, and coloring of a custom marker type as a bit filed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwVisualFlags">[out] A bitwise OR of flags indicating the appearance, location, and coloring of a marker. For a list of <paramref name="pdwVisualFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage">
      <summary>Represents the image that is persisted and un-persisted. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_Alloc(System.Int32)">
      <summary>Allocates space of specified size for persistent disk image storage.</summary>
      <returns>Returns a pointer to the allocated text image space.</returns>
      <param name="iSize">[in] The size of the space to be allocated</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_CloseFullTextScan">
      <summary>Closes the full text scan of the image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_Free(System.IntPtr)">
      <summary>Frees space used by the persistent disk image.</summary>
      <param name="p">[in] Pointer to the image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_FullTextRead(System.String@,System.Int32@)">
      <summary>Reads the full text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszText">[out] The text image.</param>
      <param name="piLength">[out] The length of the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_GetLength">
      <summary>Gets the length of the text image.</summary>
      <returns>Returns the number of Unicode characters in the image.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_LoadText(System.String,System.Int32,System.UInt32)">
      <summary>Loads the specified text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] The text image.</param>
      <param name="iLength">[in] The length of the text image.</param>
      <param name="dwFlags">[in] Flags indicating options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_OpenFullTextScan">
      <summary>Open a full scan of the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_Realloc(System.IntPtr@,System.Int32)">
      <summary>Reallocates space for the specified text image.</summary>
      <returns>Returns a pointer to the reallocated text image space.</returns>
      <param name="p">[in, out] The specified text image.</param>
      <param name="iSize">[in] The size of the specified text image.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsPreliminaryTextChangeCommitEvents">
      <summary>Notifies clients of a commit gesture to trigger a text buffer event, and provides the range of text changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPreliminaryTextChangeCommitEvents.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="dwGestureFlags">[In] Flags indicating the type of changes made. For a list of <paramref name="dwGestureFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags" />.</param>
      <param name="ptsChanged">[In] Span of text modified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems">
      <summary>Informs the code editor about custom colorable items proffered by the language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)">
      <summary>Determines the item information for each custom colorable item proffered by the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Integer containing the index value for the custom colorable item. This value is never zero.</param>
      <param name="ppItem">[out] Custom colorable item object. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems.GetItemCount(System.Int32@)">
      <summary>Determines the number of custom colorable items proffered by the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piCount">[out] The number of custom colorable items provided by the language service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsQueryLineChangeCommit">
      <summary>Determines if an <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_CARET_ON_NEW_BUFFER_LINE" /> commit event should be fired.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsQueryLineChangeCommit.QuerySendEnterLineCommit(System.UInt32,System.Int32,System.Int32,System.UInt32@)">
      <summary>Gets a flag indicating whether to send the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_CARET_ON_NEW_BUFFER_LINE" /> event for the specified line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future.</param>
      <param name="iLineStart">[in] Index of start of the line to be committed.</param>
      <param name="iLineEnd">[in] Index of end of the line to be committed.</param>
      <param name="dwQuerySendCommitFlags">[out] Flag indicating the commit action.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope">
      <summary>Registers and un-registers a custom scope that can be chosen in the Find in Files, Look In combo box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope.RegisterFindScope(Microsoft.VisualStudio.TextManager.Interop.IVsFindScope,System.UInt32@)">
      <summary>Registers the specified find scope for Find in Files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pScope">[in] The scope to use for Find in Files.</param>
      <param name="pdwCookie">[out] Cookie for the registered find scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope.UnRegisterFindScope(System.UInt32)">
      <summary>Un-registers the specified find scope.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Cookie of the registered find scope to be un-registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager">
      <summary>Contains shortcut manager methods for the text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.CreateItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.String)">
      <summary>Creates a shortcut for the specified text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iShortcutLine">[in] The shortcut line index.</param>
      <param name="pBuffer">[in] The buffer of text lines.</param>
      <param name="pszBufMoniker">[in] The buffer moniker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Reads user options stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in] The user options stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.RemoveItem(Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker)">
      <summary>Removes the specified item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] The specified item’s line marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Writes user options stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in] The user options stream.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane">
      <summary>Represents the split pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.ClosePane">
      <summary>Closes the pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.DetachPane">
      <summary>Detaches the pane from its parent splitter, without closing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetPaneFlags(System.UInt32@)">
      <summary>Returns the pane flags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwPaneFlags">[out] The flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Gets the parent splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSplitter">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetParentWindow(System.IntPtr@)">
      <summary>Returns the parent window of the pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phwndParent">[out] Parent window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetPosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Gets the position of the pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLeft">[out] The left side of the pane.</param>
      <param name="piTop">[out] The top of the pane.</param>
      <param name="piRight">[out] The right side of the pane.</param>
      <param name="piBottom">[out] The bottom of the pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetSizeExtents(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns minimum and maximum size values for this pane. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMinHorz">[out] The minimum horizontal size.</param>
      <param name="piMaxHorz">[out] The maximum horizontal size.</param>
      <param name="piMinVert">[out] The minimum vertical size.</param>
      <param name="piMaxVert">[out] The maximum vertical size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.NotifyPane(Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE)">
      <summary>Sends notification of splitter adjustment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCode">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.SetFocus">
      <summary>Set focus on this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.SetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter)">
      <summary>Sets the parent splitter for this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSplitter">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the position relative to the parent window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLeft">[in] The left side.</param>
      <param name="iTop">[in] The top.</param>
      <param name="iRight">[in] The right side.</param>
      <param name="iBottom">[in] The bottom.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot">
      <summary>Represents the root of the split pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetPane(Microsoft.VisualStudio.TextManager.Interop.PANETYPE,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)">
      <summary>Gets the split pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="PANETYPE">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.PANETYPE" /> that specifies which pane to get.</param>
      <param name="ppPane">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetRootSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Gets the root splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppPane">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetWindowHandle(System.IntPtr@)">
      <summary>Gets the window handle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="phwnd">[out] The window handle.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter">
      <summary>Represents the split pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.ClosePane">
      <summary>Closes this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.DetachPane">
      <summary>Detaches this pane from its parent splitter, without closing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetPane(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)">
      <summary>Returns the indicated pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] The index of the pane. <paramref name="iIndex" /> can be 0 (primary) or 1 (secondary)</param>
      <param name="ppPane">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetPaneFlags(System.UInt32@)">
      <summary>Returns the pane flags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwPaneFlags">[out] The pane flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Gets the parent splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSplitter">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetParentWindow(System.IntPtr@)">
      <summary>Get the parent window of this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phwndParent">[out] The window handle of the parent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetPosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Gets the position of the splitter relative to its parent.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLeft">[out] The left side.</param>
      <param name="piTop">[out] The top.</param>
      <param name="piRight">[out] The right side.</param>
      <param name="piBottom">[out] The bottom.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetSizeExtents(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the minimums and maximums for this pane (<see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" /> is allowed; 0 and full screen are defaults).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMinHorz">[out] The minimum horizontal size.</param>
      <param name="piMaxHorz">[out] The maximum horizontal size.</param>
      <param name="piMinVert">[out] The minimum vertical size.</param>
      <param name="piMaxVert">[out] The maximum vertical size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.HandleMessage(System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Handles mouse-oriented message.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMsg">[in] The ID of the message.</param>
      <param name="wParam">[in] Information about the message.</param>
      <param name="lParam">[in] Information needed by the message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.IsPanePrimary(Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane)">
      <summary>Determines if the pane is the primary pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> indicating that the pane is the primary. <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> means it is the secondary pane.</returns>
      <param name="pPane">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.NotifyPane(Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE)">
      <summary>Notifies of splitter adjustment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCode">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.NotifySplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane,Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS)">
      <summary>Called by child panes when they get focus, close, or other events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPane">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
      <param name="iEvent">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SetFocus">
      <summary>Sets focus on this pane</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter)">
      <summary>Sets/Gets the parent splitter for this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSplitter">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the position relative to the parent window..</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLeft">[in] The left side.</param>
      <param name="iTop">[in] The top.</param>
      <param name="iRight">[in] The right side.</param>
      <param name="iBottom">[in] The bottom.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SplitPane(Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Splits the indicated pane of this splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNewPane">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" /> of the new pane.</param>
      <param name="iIndex">[in] The index of the pane.</param>
      <param name="iSize">[in] The size of the pane.</param>
      <param name="dwFlags">[in] The flags.</param>
      <param name="ppSplitter">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion">
      <summary>Provides methods for management for a synthetic region.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetBaseBufferAnchor(System.Int32@,System.Int32@)">
      <summary>Gets the base buffer anchor of the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piAnchorLine">[out] The index of the base buffer line location.</param>
      <param name="piAnchorIndex">[out] The current base buffer location of the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetBehavior(System.UInt32@)">
      <summary>Gets the behavior of the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior of the region. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetClientData(System.UInt32@)">
      <summary>Gets the client data for the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwData">[out] The data associated with the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetMarkerType(System.Int32@)">
      <summary>Gets the marker type for the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] The region’s marker type. See SYNTHETIC_REGION_TYPE enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetSyntheticLayerSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Gets the owning layer span for the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] The extent of the region in coordinates of the owning layer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetText(System.String@)">
      <summary>Gets the text associated with the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] The text for the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetTextImage(Microsoft.VisualStudio.TextManager.Interop.IVsTextImage@)">
      <summary>Gets the text image of the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppImage">[out] A relative text image that encompasses only the synthetic region's text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetTextLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <summary>Gets the associated layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out] The associated layer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.Invalidate(System.UInt32)">
      <summary>Handles deletion management, causing the region to go away and the text to become exposed and normal.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdate">[in] Flag which is an ORed result of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.IsValid(System.Int32@)">
      <summary>Determines whether the region is currently valid.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfValid">[out] Flag determining whether region is valid. True if valid, false if not.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.SetBaseBufferAnchor(System.Int32,System.Int32)">
      <summary>Sets the base buffer anchor of the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAnchorLine">[in] The index of the base buffer line location.</param>
      <param name="iAnchorIndex">[in] The current base buffer location of the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.SetClientData(System.UInt32)">
      <summary>Sets the client data for the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwData">[in] The <paramref name="dwClient" /> DWORD associated with the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.SetText(System.String)">
      <summary>Sets the text of the region. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] The text.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient">
      <summary>Provides management of the client of a synthetic text region.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.Int32)">
      <summary>Execute the specified marker command on the specified synthetic region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="iItem">[in] The marker command to execute. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.GetErrorText(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.String@)">
      <summary>Returns error text for hovering.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReason">[in] The reason for the call.</param>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="pbstrText">[out] The text to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.Int32,System.String[],System.UInt32[])">
      <summary>Returns marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="iItem">[in] The marker command to execute. (see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />)</param>
      <param name="pbstrText">[out] [optional to set] The title for command.</param>
      <param name="pcmdf">[out] Command flags indicating such properties as visibility or being enabled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.String[])">
      <summary>Returns the tip text for hovering.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="pbstrText">[out] The text to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.OnBeforeSessionEnd">
      <summary>Fires event indicating the synthetic text session end.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.OnSyntheticRegionChange(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT)">
      <summary>Fires event indicating the synthetic text region has changed.</summary>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="EventCode">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT" /> value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextManager">
      <summary>Creates a synthetic text session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextManager.CreateSyntheticTextSession(System.UInt32,System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession@)">
      <summary>Creates the specified synthetic text session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Unused; must be zero</param>
      <param name="pOwningObject">[in] The owning object (normally the buffer) for the session.</param>
      <param name="pClient">[in] The client interface for the session.</param>
      <param name="ppState">[out] The new session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextManager.GetSyntheticTextSession(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession@)">
      <summary>Asks the owning object whether a synthetic text session currently exists.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOwningObject">[in] The owning object (normally the buffer) of the session.</param>
      <param name="ppSession">[out] An existing <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession">
      <summary>Handles the addition of regions and communication with synthetic text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.AddSyntheticRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions[])">
      <summary>Adds synthetic text sessions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdateFlags">[in] Update flags. For values of <paramref name="dwUpdateFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS" /> enumeration.</param>
      <param name="cRegions">[in] Number of regions to add.</param>
      <param name="rgSynthReg">[in] An array of <paramref name="cRegions" /> structs defining the new regions.</param>
      <param name="ppEnum">[out] May be null; if non-null, returns an enumeration of the new regions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.EnumSyntheticRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions@)">
      <summary>Returns a static snapshot list of synthetic regions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFindFlags">[in] Indicates how to find the region. For values of <paramref name="dwFindFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS" /> enumeration.</param>
      <param name="dwCookie">[in] Additional search parameter; can be used to search for a specific client DWORD.</param>
      <param name="ptsRange">[in] Search parameter for finding text.</param>
      <param name="ppEnum">[out] The resulting enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.Terminate">
      <summary>Immediately kills the synthetic text session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.UnadviseClient">
      <summary>Tells the session to sever its link, and drop its COM reference, to the client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer">
      <summary>Acts as the base interface for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object and provides general information about the text buffer's properties. Also see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx" />, which adds GetTrackChanges and SetTrackChangesSuppression methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBufferEx(System.UInt32)">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">Has no effect. Deprecated. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBufferEx(System.UInt32)">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">Has no effect. Deprecated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents">
      <summary>Notifies clients when a text buffer is initialized and when changes are made to text buffer data.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnFileChanged(System.UInt32,System.UInt32)">
      <summary>Forwards the IVsFileChangeEvents::FilesChanged notification that the text buffer monitors to other interested parties.</summary>
      <param name="grfChange">[in] Specifies the type of change made to the file. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS" />.</param>
      <param name="dwFileAttrs">[in] File attributes that changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(System.Int32)">
      <summary>Notifies client when the buffer is initialized.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fReload">[in] Specifies that the load was a result of a reload and not a "fresh" load.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEvents">
      <summary>Notifies clients when a new language service is associated with a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEvents.OnNewLanguageService(System.Guid@)">
      <summary>Notifies the client when a new language service is associated with a buffer.</summary>
      <param name="sidLangServiceID">[in] Reference ID of the new language service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferTempInit">
      <summary>Temporary interface for special initialization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferTempInit.InitializeContentEx(Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX[])">
      <summary>New initialization methods. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pInit">[in] Enumeration of text buffer initialization flags, storage and size values.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState">
      <summary>Changes the color state of lines in a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState.GetColorStateAtStartOfLine(System.Int32,System.Int32@)">
      <summary>Returns the buffer's cached state for the start of the given line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line of interest.</param>
      <param name="piState">[out] Current color state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState.ReColorizeLines(System.Int32,System.Int32)">
      <summary>Recalculates the color state of lines in a text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] First line to check.</param>
      <param name="iBottomLine">[in] Last line to check.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyCategoryContainer">
      <summary>Allows an object to expose a set of text editor properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyCategoryContainer.GetPropertyCategory(System.Guid@,Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer@)">
      <summary>Returns the specified property category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] Specifies the GUID category for the property. Predefined categories for the core text editor are GUID_EditPropCategory_View_MasterSettings and GUID_EditPropCategory_TextMgr_Global, as defined in textmgr.idl. Other objects can define different categories, as required.</param>
      <param name="ppProp">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer" /> object, which allows you to get, set, and remove editor properties.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer">
      <summary>Manages properties of text editors.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer.GetProperty(Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID,System.Object@)">
      <summary>Returns the specified text editor property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="idProp">[in] Specified property to return. For a list of <paramref name="idprop" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID" />.</param>
      <param name="pvar">[out] Variant containing the returned property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer.RemoveProperty(Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID)">
      <summary>Removes a property for a text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="idProp">[in] Property to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer.SetProperty(Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID,System.Object)">
      <summary>Sets the specified property for the text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="idProp">[in] Specified property to set. For a list of <paramref name="idprop" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID" />.</param>
      <param name="var">[in] Variant containing the property information to set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextFind">
      <summary>Finds a given block of text in the buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextFind.Find(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Finds a given block of text in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Pointer to a null terminated string containing the text.</param>
      <param name="iStartLine">[in] Integer containing the start line.</param>
      <param name="iStartIndex">[in] Integer index value for the starting character within the line. Must be less than or equal to the length of line.)</param>
      <param name="iEndLine">[in] Integer value for the end of the line.</param>
      <param name="iEndIndex">[in] Integer index value for the ending character in the line. Must be less than or equal to the length of the line.)</param>
      <param name="iFlags">[in] Flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextFindMode" /> enumeration.</param>
      <param name="piLine">[out] Pointer to the line number where the desired text is located.</param>
      <param name="piCol">[out] Pointer to the column number on the line where the desired text is located.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextHidingLayerModule">
      <summary>Implemented by any layer module that hides text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextHidingLayerModule.MakeBaseSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Makes a text span visible.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />: the span was hidden but is now visible<see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />: the span wasn't hidden by this layer<see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />: the span is hidden but the layer doesn't know how to unhide it (will result in the layer being destroyed)</returns>
      <param name="pBaseSpan">Make EVERY CHARACTER of the span visible.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage">
      <summary>Supports text string matching.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.AdviseTextImageEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents,System.UInt32@)">
      <summary>Registers the environment to receive notification of text image changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents" /> interface on the object requesting notification of text image events.</param>
      <param name="pCookie">[out] Pointer to an abstract handle for the referenced event sink. This value is required to unadvised the event sink using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnadviseTextImageEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetCharSize(System.Int32@)">
      <summary>Returns the number of characters in the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcch">[out] Pointer to a character count of the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetLine(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfGet">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] Integer containing the line number. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the environment and filled in by the GetLine method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetLineLength(System.Int32,System.Int32@)">
      <summary>Return the length of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line number.</param>
      <param name="piLength">[out] Pointer to an integer containing the character count of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetLineSize(System.Int32@)">
      <summary>Returns the number of lines in the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcLines">[out] Pointer to a count of lines in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetOffsetOfTextAddress(Microsoft.VisualStudio.TextManager.Interop.TextAddress,System.Int32@)">
      <summary>Return the buffer address of a given text address.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ta">[in] Specifies the requested text address.</param>
      <param name="piOffset">[out] Pointer to an integer containing the offset from the start of the text image buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetSpanLength(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>Return the number of characters in a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pcch">[out] Pointer to a character count of the text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.UInt16[])">
      <summary>Return the text of a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Number of characters to return.</param>
      <param name="psz">[out] Pointer to a null terminated string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetTextAddressOfOffset(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextAddress[])">
      <summary>Return the text address of a given buffer address.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iOffset">[in] Integer containing the offset from the start of the text image buffer.</param>
      <param name="pta">[out] Pointer to the text address.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetTextBSTR(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Return the text of a text span as a BSTR</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pbstrText">[out] Pointer to a BSTR containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.LockImage(System.UInt32)">
      <summary>Notifies that the text image is in use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.ReleaseLine(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.Replace(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Notification of a text span replacement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Double word containing flags. For future use. Set to zero.</param>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Count of characters in <paramref name="pchText" />.</param>
      <param name="pchText">[in] Pointer to a text string.</param>
      <param name="ptsChanged">[out] Specifies the modified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnadviseTextImageEvents(System.UInt32)">
      <summary>Cancels the environment's registration to receive notifications of text image changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="Cookie">[in] Abstract handle for the referenced event sink.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnlockImage(System.UInt32)">
      <summary>Notifies that the text image is not in use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents">
      <summary>Implemented to notify a client of a text image change.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents.OnTextChange(Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.TextAddress)">
      <summary>Notifies client of a text image change.</summary>
      <param name="taStart">[in] Starting address of text image.</param>
      <param name="taEnd">[in] Ending address of text image.</param>
      <param name="taNewEnd">[in] New ending address of text image.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities">
      <summary>Provides utilities for loading and saving text files and images.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.GetReplaceText(System.UInt32,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet,System.String@)">
      <summary>Gets replace text for find/replace operations.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Find options. Values are from the <see cref="T:EnvDTE.vsFindOptions" /> enum.</param>
      <param name="pszReplace">[in] Replacement string.</param>
      <param name="pText">[in] Text image containing string to replace.</param>
      <param name="pMatch">[in] The Find match.</param>
      <param name="pTags">[in] Optional, set of text spans describing the Find match. Obtained by <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetTaggedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)" />.</param>
      <param name="pbstrComputedText">[out] The replace text string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.GetTextFormat(System.UInt32,System.UInt32,System.Byte[],System.UInt32@)">
      <summary>Gets text format </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="vstffIn">[in] Instructions for format and detection.</param>
      <param name="cbData">[in] The size of data in bytes.</param>
      <param name="pData">[in] The data.</param>
      <param name="pvstffOut">[out] The result text format.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.LoadTextFile(System.String,System.UInt32,System.UInt32@,System.String@)">
      <summary>Loads the specified text file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Name of file to load.</param>
      <param name="vstffIn">[in] Instructions for text format and detection</param>
      <param name="pvstffOut">[out] The format used. </param>
      <param name="pbstr">[out] The text from the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.LoadTextImageFromFile(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32@)">
      <summary>Loads a text image from the specified file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] The name of the file.</param>
      <param name="pImage">[in] The text image to load.</param>
      <param name="vstffIn">[in] Instructions for text format and detection.</param>
      <param name="pvstffOut">[out] The text format used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.LoadTextImageFromMemory(Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32,System.Byte[],System.UInt32@)">
      <summary>Loads a text image from memory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pImage">[in] The text image to load.</param>
      <param name="vstffIn">[in] Instructions for text format and detection.</param>
      <param name="cbData">[in] The size of the data in bytes.</param>
      <param name="pData">[in] The data.</param>
      <param name="pvstffOut">[out] The format used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.SaveTextImageToFile(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32@)">
      <summary>Saves a text image to a file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] The name of the file.</param>
      <param name="pImage">[in] The text image.</param>
      <param name="vstffIn">[in] Instructions for text format and detection.</param>
      <param name="pvstffOut">[out] The format used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.SaveTextImageToMemory(Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32,System.Byte[],System.UInt32@,System.UInt32@)">
      <summary>Saves a text image to memory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pImage">[in] The text image.</param>
      <param name="vstffIn">[in] Instructions for text format and detection.</param>
      <param name="cbData">[in] The size of the data in bytes.</param>
      <param name="pData">[out] The data.</param>
      <param name="pcbWritten">[out] The length of the data written to memory.</param>
      <param name="pvstffOut">[out] The format used.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer">
      <summary>Handles layout between a base buffer and a view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.BaseLineIndexToLocal(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts base line coordinates to local coordinates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. The method returns <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN" /> indicating that the coordinates you requested exist, but are hidden in the UI at present. The method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> to indicate bad input parameters.</returns>
      <param name="iBaseLine">[in] The base line.</param>
      <param name="iBaseIndex">[in] The base line character index.</param>
      <param name="piLocalLine">[out] The local line.</param>
      <param name="piLocalIndex">[out] The local line character index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.CanReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines if specified number of replacement characters can be inserted into lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iNewLen">[in] Number of chars to insert, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.CopyLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Puts the specified span of text into a caller-allocated buffer</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line)</param>
      <param name="iEndLine">[in] Ending line</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line)</param>
      <param name="pszBuf">[in] Text to insert, if any</param>
      <param name="pcchBuf">[in, out] On input, the number of characters to copy. On output, the required size of the buffer. Count is UNICODE characters, not bytes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.CreateTrackingPoint(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint@)">
      <summary>Creates a zero-length tracking point that is similar to a zero-length marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line where tracking point is inserted.</param>
      <param name="iIndex">[in] Character index within the line (must be &lt;= length of line)</param>
      <param name="ppMarker">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint" /> that is inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.DeeperLayerLineIndexToLocal(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts deeper layer line coordinates to local line coordinates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. The method returns <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN" /> indicating that the coordinates you requested exist, but are hidden in the UI at present. The method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> to indicate bad input parameters.</returns>
      <param name="dwFlags">[in] ORing of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags" /> enumeration.</param>
      <param name="pTargetLayer">[in] The targeted deeper layer.</param>
      <param name="iLayerLine">[in] The targeted deeper layer line.</param>
      <param name="iLayerIndex">[in] The targeted deeper layer line character index.</param>
      <param name="piLocalLine">[out] The local line.</param>
      <param name="piLocalIndex">[out] The local line character index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.EnumLayerMarkers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers@)">
      <summary>Enumerates all markers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iMarkerType">[in] The marker type.</param>
      <param name="dwFlags">[in] ORing of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" /> enumeration.</param>
      <param name="ppEnum">[out] The enumeration of the markers.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetBaseBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Gets the base buffer of text lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppiBuf">[out] Base buffer. <paramref name="ppiBuf" /> is AddRef'd.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the length and index of the last line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] The length of the last line.</param>
      <param name="piIndex">[out] The index of the last line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line of interest.</param>
      <param name="piLength">[out] Length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Count of lines.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Gets all line data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags that apply to line data.</param>
      <param name="iLine">[in] The line for which to get data.</param>
      <param name="iStartIndex">[in] The start index for getting data.</param>
      <param name="iEndIndex">[in] The end index for getting data.</param>
      <param name="pLineData">[out] The line data obtained.</param>
      <param name="pMarkerData">[in] Marker data for the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Gets the specified span of text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="pbstrBuf">[out] Text of the span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Gets the marker data of the specified line span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] The top line.</param>
      <param name="iBottomLine">[in] The bottom line.</param>
      <param name="pMarkerData">[out] The marker data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.LocalLineIndexToBase(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts local line coordinates to base coordinates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code The method returns <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN" /> indicating that the coordinates you requested exist, but are hidden in the UI at present. The method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> to indicate bad input parameters.</returns>
      <param name="iLocalLine">[in] The local line.</param>
      <param name="iLocalIndex">[in] The local line character index.</param>
      <param name="piBaseLine">[out] The base line.</param>
      <param name="piBaseIndex">[out] The base line character index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.LocalLineIndexToDeeperLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts local line coordinates to deeper layer line coordinates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. The method returns <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN" /> indicating that the coordinates you requested exist, but are hidden in the UI at present. The method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> to indicate bad input parameters.</returns>
      <param name="pTargetLayer">[in] The targeted deeper layer.</param>
      <param name="iLocalLine">[in] The local line.</param>
      <param name="iLocalIndex">[in] The local line character index.</param>
      <param name="piTargetLine">[out] The target deeper layer line.</param>
      <param name="piTargetIndex">[out] The targeted deeper layer line character index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.LockBufferEx(System.UInt32)">
      <summary>Locks the buffer as specified for reading and writing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> (currently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.MapLocalSpansToTextOriginatingLayer(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans@)">
      <summary>Maps a set of local spans to the shallowest layer that originates text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] One of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags" /> values.</param>
      <param name="pLocalSpanEnum">[in] The local text spans to be mapped.</param>
      <param name="ppTargetLayer">[out] The shallowest layer that originates text.</param>
      <param name="ppTargetSpanEnum">[out] The mapped layer set of text spans.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases previously obtained line data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] The line data to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReleaseMarkerData(Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Releases previously obtained marker data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarkerData">[in] The marker data to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles line breaking/joining, etc.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="pszText">[in] Text to insert, if any.</param>
      <param name="iNewLen">[in] Number of chars to insert, if any.</param>
      <param name="pChangedSpan">[out] Range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles line breaking/joining, etc.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enum.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="pszText">[in] Text to insert, if any.</param>
      <param name="iNewLen">[in] Number of chars to insert, if any.</param>
      <param name="pChangedSpan">[out] Range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.UnlockBufferEx(System.UInt32)">
      <summary>Unlocks the buffer as specified for reading and writing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> (currently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerEvents">
      <summary>Notifies a client that a layer's coordinate mapping is changing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerEvents.OnMappingChange">
      <summary>Fires to notify client to convert all of its local coordinates to base buffer coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerEvents.OnMappingChangeComplete">
      <summary>Fires to notify client to convert to the new local coordinates.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker">
      <summary>Provides marker object management in an arbitrary layer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the given DC &amp; RECT.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Device context handle.</param>
      <param name="pRect">[in] Pointer to RECT.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.DrawGlyphEx(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
      <summary>Draws a glyph in the given DC &amp; RECT.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS" />.</param>
      <param name="hdc">[in] Device context handle.</param>
      <param name="pRect">[in] Pointer to the RECT.</param>
      <param name="iLineHeight">[in] The line height.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.ExecMarkerCommand(System.Int32)">
      <summary>Executes the specified marker command.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] The marker command value, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetBehavior(System.UInt32@)">
      <summary>Returns marker behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] The marker behavior.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetCurrentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current span position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] The current span position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <summary>Gets the marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] The marker command item, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] The text of the marker command, if any.</param>
      <param name="pcmdf">[out] The command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the priority index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] The priority index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetTextLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <summary>Gets the text layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out] The text layer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetTipText(System.String[])">
      <summary>Returns tool tip text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Tool tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetType(System.Int32@)">
      <summary>Returns marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] The marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Visual style of the marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.Invalidate">
      <summary>Prevents a marker from appearing in the UI, even if there are lingering references to it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.IsInvalidated">
      <summary>Determines whether a marker was invalidated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the marker was invalidated by a call to <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.Invalidate" /><see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> means the marker was not invalidated.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.QueryClientInterface(System.Guid@,System.IntPtr@)">
      <summary>Gets the client interface specified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="iid">[in] The client iid.</param>
      <param name="ppClient">[out] The client interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.ResetSpan(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Resets marker position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.SetBehavior(System.UInt32)">
      <summary>Sets the marker behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] The marker behavior.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.SetType(System.Int32)">
      <summary>Sets the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] The marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.SetVisualStyle(System.UInt32)">
      <summary>Sets the marker visual style.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] The marker visual style.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.UnadviseClient">
      <summary>Unadvise the client, if any.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker">
      <summary>Provides access to and manipulates the positioning of a text marker within a buffer. This interface has methods to retrieve or change two-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the widget margin given a display context and bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.ExecMarkerCommand(System.Int32)">
      <summary>Executes a text marker against a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetBehavior(System.UInt32@)">
      <summary>Returns a text marker behavior set by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetCurrentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current position of the text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] Pointer to the range of text that the marker covers. The text span for a marker is a set of two [line, index] coordinates. This structure is allocated by the caller.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetLineBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Provides access to an associated text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface of the associated buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <summary>Returns text marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the text marker priority index, with the highest value getting the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to an integer containing the priority index. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetTipText(System.String[])">
      <summary>Returns the text to display in a tip for the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Pointer to the string containing the tip text for the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetType(System.Int32@)">
      <summary>Returns a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.Invalidate">
      <summary>Prevents a text marker from appearing in the user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.ResetSpan(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Resets the position of the text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Line containing the beginning of the text marker.</param>
      <param name="iStartIndex">[in] Starting character index for the text marker within the line. This value must be less than or equal to the length of line.</param>
      <param name="iEndLine">[in] Line containing the end of the text marker.</param>
      <param name="iEndIndex">[in] Ending character index for the text marker within the line. This value must be length of line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.SetBehavior(System.UInt32)">
      <summary>Sets the behavior of a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.SetType(System.Int32)">
      <summary>Sets a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.SetVisualStyle(System.UInt32)">
      <summary>Sets the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.UnadviseClient">
      <summary>Unadvises the client, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines">
      <summary>Provides read and write access to the text buffer using two-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.AdviseTextLinesEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents,System.UInt32@)">
      <summary>Microsoft internal use only.</summary>
      <param name="pSink">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CanReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Tests whether a given editing operation such as copy or cut can succeed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CopyLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Puts the specified span of text into a caller-allocated buffer (an array).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszBuf">[in] Pointer to a caller-allocated buffer.</param>
      <param name="pcchBuf">[in, out] Pointer to a count of Unicode characters — not bytes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CreateEditPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates an <see cref="T:EnvDTE.EditPoint" /> object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line number of the <see cref="T:EnvDTE.EditPoint" /> object in the text buffer.</param>
      <param name="iIndex">[in] Character index of the <see cref="T:EnvDTE.EditPoint" /> object within the line.</param>
      <param name="ppEditPoint">[out] Pointer to the IDispatch interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CreateLineMarker(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker[])">
      <summary>Creates a marker of a given type over the specified region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Type of marker to create.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pClient">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface. Implement this interface to advise the text buffer that you want to receive notification of marker events.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker). If this parameter is null, then the marker is owned by the text buffer. An example of a buffer-owned marker is a temporary bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CreateTextPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates a <see cref="T:EnvDTE.TextPoint" /> object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Specified line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="iIndex">[in] Specified index position within the line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="ppTextPoint">[out] Pointer to the <see cref="T:EnvDTE.TextPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.EnumMarkers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers@)">
      <summary>Enumerates a specific set of text line markers, based on the criteria specified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iMarkerType">[in] This parameter is ignored if a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES" /> is specified for the <paramref name="dwFlags" /> parameter. Otherwise, this parameter indicates the marker type to find.</param>
      <param name="dwFlags">[in] Enumeration options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" />.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.FindMarkerByLineIndex(System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker@)">
      <summary>Locates a marker of a given type based on a line index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Specifies the type of marker to find.</param>
      <param name="iStartingLine">[in] Starting line.</param>
      <param name="iStartingIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="dwFlags">[in] Specifies the direction to search for the marker. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS" />.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Buffer line to access. This is a zero-based value.</param>
      <param name="pLineData">[in,out] The filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in, optional] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> to fill the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the line range that you specify. If you want syntax coloring and marker attributes to return in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure (<paramref name="pLineData" />), then you need to pass in this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] The line about which information is requested. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSubset" /> is specified for <paramref name="dwFlags" />.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[in,out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in, optional] Pointer to a valid <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method..</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns the specified span of text in a BSTR.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="pbstrBuf">[out] Text to insert, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Returns text marker data for the specified line range within the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] Top line of the marker data.</param>
      <param name="iBottomLine">[in] Bottom line of the marker data.</param>
      <param name="pMarkerData">[out] Pointer to filled <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the range indicated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Method information is not provided. Do not use.</summary>
      <param name="pSpanIn">Do not use.</param>
      <param name="pSpanOut">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.IVsTextLinesReserved1(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],System.Int32)">
      <summary>Method information is not provided. Do not use.</summary>
      <param name="iLine">Do not use.</param>
      <param name="pLineData">Do not use.</param>
      <param name="fAttributes">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.LockBuffer">
      <summary>Locks the text buffer for the purpose of access control. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineData(Microsoft.VisualStudio.TextManager.Interop.LINEDATA[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Pointer or reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseMarkerData(Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Cleans up the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarkerData">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReloadLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Replaces text without deleting markers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be les than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer or reference to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] The range of new text inserted. Describes a starting point and an ending point, in terms of a line and index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enum.</param>
      <param name="iStartLine">[in] Starting line</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert, if any.</param>
      <param name="iNewLen">[in] Number of characters to insert, if any.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.UnadviseTextLinesEvents(System.UInt32)">
      <summary>Not implemented. Do not use.</summary>
      <param name="dwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents">
      <summary>Notifies clients of changes to the underlying text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents.OnChangeLineAttributes(System.Int32,System.Int32)">
      <summary>Notifies the client when the text line attributes have been changed.</summary>
      <param name="iFirstLine">[in] First affected line, inclusive.</param>
      <param name="iLastLine">[in] Last affected line, inclusive.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents.OnChangeLineText(Microsoft.VisualStudio.TextManager.Interop.TextLineChange[],System.Int32)">
      <summary>Notifies the client when the content of a text line in the buffer has changed.</summary>
      <param name="pTextLineChange">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextLineChange" /> structure that defines the shape of the old and new text.</param>
      <param name="fLast">[in] Obsolete; Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper">
      <summary>Generates macro recording code. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordActivateDocument">
      <summary>Records that the document was activated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordBookmarkClearAll">
      <summary>Records that all bookmarks were cleared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordBookmarkNextPrev(System.Int32)">
      <summary>Records move to next or previous bookmark.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fNext">Flag indicating whether to move to next (true) or previous (false) bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordBookmarkSetClear(System.Int32)">
      <summary>Records set or clear the current bookmark.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSet">Flag indicating whether to set (true) or clear (false) the bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordChangeCase(Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE)">
      <summary>Records change of case.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cst">[in] Specifies case. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordCollapseSelection">
      <summary>Records collapse of the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordCopy">
      <summary>Records copy of the current selection to the clipboard.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordCut">
      <summary>Records cut of the current selection to the clipboard.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordDelete(System.Int32,System.UInt32)">
      <summary>Records delete action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fLeft">Flag indicating whether there are repetitions left.</param>
      <param name="uiReps">The number of repetitions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordDeleteSpace(System.Int32)">
      <summary>Records delete of space.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fVertical">Flag indicating if the space is vertical (true).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordEnterBoxMode">
      <summary>Records entering box mode.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordFormatSelection">
      <summary>Records format selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordGotoLine(System.Int32,System.Int32)">
      <summary>Records moving position to the specified line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">The line moved to.</param>
      <param name="fExtend">Flag indicating whether to extend the line (true).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordIndentUnindent(System.Int32)">
      <summary>Records indent or unindent action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fIndent">Flag indicating indent (true) or unindent (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordInsertFile(System.String)">
      <summary>Records insert file action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszName">The name of the file inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordMoveSelectionAbs(Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE,System.Int32)">
      <summary>Records absolute move of selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="mst"> Flag indicating absolute move type, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE" />.</param>
      <param name="fExtend">Flag indicating whether move extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordMoveSelectionRel(Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE,System.Int32,System.Int32)">
      <summary>Records relative move of selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="mst">Flag indicating relative move type, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE" />.</param>
      <param name="fBackwards">Flag indicating whether move was backward (true) or forward (false).</param>
      <param name="fExtend">Flag indicating whether move extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordNewLine">
      <summary>Records new line action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordPaste">
      <summary>Records paste from clipboard.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordRemovePreviousTyping(System.String)">
      <summary>Records action to remove previous typing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszPrevChars">The number of characters removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordSelectAll">
      <summary>Records action to select all.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordSwapAnchor">
      <summary>Records an anchor swap.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordTabifyUntabify(System.Int32)">
      <summary>Records a tabify or unify action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fTabify">Flag indicating whether action was tabify (true) or unify (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordTypeChar(System.UInt16,System.Int32)">
      <summary>Records typing a character.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wchChar">The typed character.</param>
      <param name="fIsOvertype">Flag indicating whether character was typed over an existing character (true) or inserted (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordTypeChars(System.String,System.Int32)">
      <summary>Records typing multiple characters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszChars">The typed characters.</param>
      <param name="fIsOvertype">Flag indicating whether characters were typed over existing characters (true) or inserted (false).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager">
      <summary>Provides general services for anyone wanting information about the active text views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.AdjustFileChangeIgnoreCount(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32)">
      <summary>Increases or decreases the ignore count for file changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which to set the ignore count.</param>
      <param name="fIgnore">[in] If true, then the ignore count is increased by a value of one. If false, then the ignore count is decreased by a value of one for the referenced buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.AttemptToCheckOutBufferFromScc(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided.</summary>
      <param name="pBufData">Do not use.</param>
      <param name="pfCheckoutSucceeded">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.AttemptToCheckOutBufferFromScc2(System.String,System.Int32@,System.Int32@)">
      <summary>Attempts to check out a file from source code control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Filename to check out.</param>
      <param name="pfCheckoutSucceeded">[out] Returns true if buffer checkout succeeded.</param>
      <param name="piStatusFlags">[out]Additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. If you pass in a value of null for this parameter, then a <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag is not returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.CreateSelectionAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pBuffer">Do not use.</param>
      <param name="ppAction">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Enumerates text buffers. Not yet implemented.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the IVsEnumBuffers interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumIndependentViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews@)">
      <summary>Enumerates the independent views.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews" /> interface to enumerate the number of independent views.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumLanguageServices(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Enumerates the registered language service IDs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews@)">
      <summary>Enumerates views that are provided with the core editor and are associated with a particular text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which views should be returned. Pass in a value of null to return all views for all buffers.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetActiveView(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the active or previously active view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
      <param name="pBuffer">[in] Pass null for <paramref name="pBuffer" /> to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetBufferSccStatus(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="pBufData">Do not use.</param>
      <param name="pbNonEditable">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetBufferSccStatus2(System.String,System.Int32@,System.Int32@)">
      <summary>Returns information on whether a buffer is under source code control and, if so, whether the file is checked in.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Filename of interest.</param>
      <param name="pbNonEditable">[out] If true, then the file can not be modified (for example, if the file is under source control and checked in). If false, then the file can be edited.)</param>
      <param name="piStatusFlags">[out] Returns additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. Pass in a value of null for this parameter if you do not want the return value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetMarkerTypeCount(System.Int32@)">
      <summary>Returns the number of registered marker types within all buffers associated with the core text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerTypeCount">[out] Pointer to a count of the marker types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetMarkerTypeInterface(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType@)">
      <summary>Maps a numeric marker type ID to an interface that can be used to probe for specific information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerTypeID">[in] The marker type ID, such as from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)" />.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" /> interface, which has been referenced with AddReference.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information is not provided.</summary>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetRegisteredMarkerTypeID(System.Guid@,System.Int32@)">
      <summary>Returns a registered marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidMarker">[in] GUID identifying the caller's implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" />, which provides information about the new category of markers.</param>
      <param name="piMarkerTypeID">[out] Number of the marker type in the marker type collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetShortcutManager(Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager@)">
      <summary>Returns the shortcut manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppShortcutMgr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager" /> interface, which is used to manage shortcuts in the task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[out] Pointer to the view preferences. For more information about <paramref name="pViewPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />.</param>
      <param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about <paramref name="pFramePrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />.</param>
      <param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about <paramref name="pLangPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />.</param>
      <param name="pColorPrefs">[in, out] Pointer to the font color preferences.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.IgnoreNextFileChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Notifies that the next file change is to be ignored.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.MapFilenameToLanguageSID(System.String,System.Guid@)">
      <summary>Given a file name, determines the registered language service, if one exists, that understands it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File name associated with the language service.</param>
      <param name="pguidLangSID">[out] Pointer to the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.NavigateToLineAndColumn(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iStartRow">[in] Starting line for the selection to locate.</param>
      <param name="iStartIndex">[in] Starting index for the selection to locate.</param>
      <param name="iEndRow">[in] Ending line for the selection to locate.</param>
      <param name="iEndIndex">[in] Ending index for the selection to locate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.NavigateToPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and puts the selection on the specified linear position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iPos">[in] Linear position in buffer on which to put the caret.</param>
      <param name="iLen">[in] Length of selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.RegisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a text buffer with the text manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface to register.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.RegisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a view from a source other than the core editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.RegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Method information is not provided.</summary>
      <param name="pView">Do not use.</param>
      <param name="pBuffer">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SetFileChangeAdvise(System.String,System.Int32)">
      <summary>Method information is not provided.</summary>
      <param name="pszFileName">Do not use.</param>
      <param name="fStart">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information is not provided.</summary>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Sets user preferences.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />. Can be null if view preferences are not being set.</param>
      <param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />. Can be null if frame preferences are not being set.</param>
      <param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />. Can be null if language preferences are not being set.</param>
      <param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SuspendFileChangeAdvise(System.String,System.Int32)">
      <summary>Suspends file change notifications for a given file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File on which to suspend notification of changes made.</param>
      <param name="fSuspend">[in] true if change notification is suspended on the specified file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.UnregisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that is being unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.UnregisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters an externally-created view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.UnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Method information is not provided.</summary>
      <param name="pView">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents">
      <summary>Informs users about changes in the text manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnRegisterMarkerType(System.Int32)">
      <summary>Fired when an external marker type is registered.</summary>
      <param name="iMarkerType">[in] External marker type that was registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Fires when a view is registered.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface identifying the view that was registered. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Fires when a view is unregistered.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface identifying the view that was unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnUserPreferencesChanged(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Fires when the user's global preferences are changed.</summary>
      <param name="pViewPrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure. This structure provides the current settings for the view. If this is non-null, preferences that specifically affect text view behavior have changed.</param>
      <param name="pFramePrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" /> structure, which allows the frame to control whether the view shows horizontal or vertical scroll bars. If this is non-NULL, preferences that specifically affect code windows have changed.</param>
      <param name="pLangPrefs">[in] Pointer to the relevant language as specified by the <paramref name="szFileType" /> and <paramref name="guidLang" /> members of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" /> structure. If this is non-null, preferences that affect a specific language's common settings have changed.</param>
      <param name="pColorPrefs">[in] Specifies color preferences. If non-null, the <paramref name="pguidColorService" /> member of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" /> structure indicates which colorable item provider is associated with the <paramref name="pColorTable" /> member. If this is non-null, preferences that affect the colors or font used by a text view have changed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker">
      <summary>Provides methods for managing text markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the widget margin given a display context and bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.ExecMarkerCommand(System.Int32)">
      <summary>Executes a text marker command against a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetBehavior(System.UInt32@)">
      <summary>Returns a text marker behavior set by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <summary>Returns text marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags. Values for <paramref name="pcmdf" /> are taken from the tagOLECMDF enumeration in the Platform SDK.  </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the text marker priority index, with the highest value getting the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to an integer containing the priority index. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetTipText(System.String[])">
      <summary>Returns the text to display in a tip for the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Pointer to the string containing the tip text for the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)">
      <summary>Returns a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] Pointer to integer value representing the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to a DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.Invalidate">
      <summary>Prevents a text marker from appearing in the user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)">
      <summary>Sets the behavior of a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetType(System.Int32)">
      <summary>Sets a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Integer containing the marker type to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetVisualStyle(System.UInt32)">
      <summary>Sets the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.UnadviseClient">
      <summary>Unadvises the client, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient">
      <summary>Provides callbacks to the Visual Studio environment and other processes used to manipulate a text marker.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
      <summary>Executes a command on a specific marker within the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
      <param name="iItem">[in] Command selected by the user from the context menu. For a list of <paramref name="iItem" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32,System.String[],System.UInt32[])">
      <summary>Queries the marker for the command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
      <param name="iItem">[in] ] Command selected by the user from the context menu. For a list of <paramref name="iItem" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Text of the marker command in the context menu.</param>
      <param name="pcmdf">[out] Pointer to command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])">
      <summary>Returns the tip text for the text marker when the mouse hovers over the marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
      <param name="pbstrText">[out] Tip text associated with the marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.MarkerInvalidated">
      <summary>Called when the text associated with a marker is deleted by a user action.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnAfterMarkerChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
      <summary>Signals that the marker position has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker that was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnAfterSpanReload">
      <summary>Signals that the text under the marker has been altered but the marker has not been deleted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnBeforeBufferClose">
      <summary>Sends notification that the text buffer is about to close.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnBufferSave(System.String)">
      <summary>Determines whether the buffer was saved to a different name.</summary>
      <param name="pszFileName">[in] File name associated with the text buffer. Can be null in buffers where the file name cannot change.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet">
      <summary>Allows a marker type to determine whether other marker types share the same color set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet.GetMarkerColors(System.Int32,System.UInt32@,System.UInt32@)">
      <summary>Determines the color set associated with a particular marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Integer containing the marker type.</param>
      <param name="pclrFore">[out] Foreground color of the text marker. For a list of <paramref name="pclrFore" /> values, see COLORREF.</param>
      <param name="pclrBack">[out] Background color of the text marker. For a list of <paramref name="pclrBack" /> values, see COLORREF.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerContextProvider">
      <summary>Provides context for text markers in the core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerContextProvider.RemoveLastContext(System.UInt32,System.Object)">
      <summary>Deprecated. Do not use.</summary>
      <param name="dwReserved">Do not use.</param>
      <param name="pUC">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerContextProvider.UpdateContextForMarker(System.UInt32,System.Object)">
      <summary>Called by the language service to indicate that the context for a text marker should be added to the context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">Unused parameter. Must be set to null.</param>
      <param name="pUC">Pointer to the context bag on the Visual Studio core editor.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler">
      <summary>A handler provided for markers whose glyphs (an icon indicating the position of a marker) support drag and drop.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler.DrawCandidateOutlineGlyph(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.UInt32)">
      <summary>Draws a shadow of the glyph in the widget margin at a potential destination line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Do not use.</param>
      <param name="hdc">[in] Handle to the display context in which to draw the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure that defines the bounding rectangle for the glyph.</param>
      <param name="clrref">[in] RGB color value for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler.DropAtLocation(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.Int32,System.UInt32@)">
      <summary>Tells the client to handle the glyph being dropped at the given location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Do not use.</param>
      <param name="pDestView">[in] Pointer to the destination view. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</param>
      <param name="pDestBuffer">[in] Pointer to the destination buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
      <param name="iLine">[in] Line within the text buffer.</param>
      <param name="iIndex">[in] Char index position within the line in the text buffer.</param>
      <param name="pdwDropResult">[out] Indicates drop status. Combining with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler.QueryDropLocation(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.Int32,System.UInt32@)">
      <summary>Used to determine whether a given location is a valid drop destination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Do not use.</param>
      <param name="pDestView">[in] Pointer to the proposed destination view. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</param>
      <param name="pDestBuffer">[in] Pointer to the proposed destination buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
      <param name="iLine">[in] Proposed line within the text buffer.</param>
      <param name="iIndex">[in] Proposed char index position within the line in the text buffer.</param>
      <param name="pdwDropResult">[out] Indicates drop status. Combing with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType">
      <summary>Provides a uniform mechanism for obtaining information about a given text marker type, whether predefined by the editor or registered by a package.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Determines where a custom marker glyph can be drawn in the widget margin.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph. </param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.DrawGlyphEx(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
      <summary>Draws a glyph in the widget margin given a display device context and a bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Options for drawing the glyph in the widget margin. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS" />.</param>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle.</param>
      <param name="iLineHeight">[in] Height of the line, based on font settings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetBehaviorFlags(System.UInt32@)">
      <summary>Returns marker behavior flags, which define the default marker behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>Returns the default foreground and background colors for a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piForeground">[out] Pointer to the default foreground color. For a list of <paramref name="piForeground" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />.</param>
      <param name="piBackground">[out] Pointer to the default background color. For a list of <paramref name="piBackground" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetDefaultLineStyle(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.LINESTYLE[])">
      <summary>Returns the default line attributes for a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineColor">[out] Pointer to the default line color. For a list of <paramref name="piLineColor" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />.</param>
      <param name="piLineIndex">[out] Pointer to the default line style. For a list of <paramref name="piLineIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetDisplayName(System.String@)">
      <summary>Returns the display name of the custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] Pointer to the display name for the custom marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetPriorityIndex(System.Int32@)">
      <summary>Returns the priority index for the custom marker type, with the highest priority value receiving the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to the priority index for the type of text marker. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetVisualStyle(System.UInt32@)">
      <summary>Returns the appearance, location, and coloring of a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwVisualFlags">[out] Flags indicating the appearance, location, and coloring of a marker. For a list of <paramref name="pdwVisualFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerTypeProvider">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType" /> interface from a service providing a text markers other packages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerTypeProvider.GetTextMarkerType(System.Guid@,Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType@)">
      <summary>Allows you to return a pointer to your <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType" /> implementation for a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidMarker">[in] Pointer to a GUID identifying the external marker type.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType" /> implementation for the external marker type.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents">
      <summary>Manages notification that  a change in text about to occur.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents.OnReplace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])">
      <summary>Called at start of a text replace operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCI">[in] Information about the change request.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner">
      <summary>A special-purpose interface exposed by text buffers and used to provide fast, stream-oriented, sequential access to the text in the buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner.CloseScan">
      <summary>Closes the buffer for scanning and re-enables writing to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner.OpenScan">
      <summary>Opens the text buffer for scanning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner.Read(System.String@,System.Int32@)">
      <summary>Performs a scan of the text buffer, or portion of the text buffer defined by the string length, <paramref name="piLength" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszText">[out] Range of the text buffer to read.</param>
      <param name="piLength">[out] Length of text to read from the buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction">
      <summary>Provides methods for managing text selection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.GetDestination(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Gets the destination of the text selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Line and column of the destination of text selection. Values are in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.GetOrigin(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Gets the origin of the text selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Line and column of the origin of text selection. Values are in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.SetDestination(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Sets the destination of the text selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Fills the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct with the state values of the selected text destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.SetOrigin(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Sets the origin of the text selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Fills the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct with the state values of the selected text destination.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet">
      <summary>Utility for text string matching.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.Add(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Do not use this method.</summary>
      <param name="cEl">Do not use.</param>
      <param name="pSpan">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.AddFromEnum(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans)">
      <summary>Do not use this method.</summary>
      <param name="pEnum">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.AttachTextImage(System.Object)">
      <summary>Passes a text image to the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pText">[in] Pointer to a text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.Detach">
      <summary>Release a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.GetAt(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns a requested text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iEl">[in] Integer containing the text span element number.</param>
      <param name="pSpan">[out] Pointer to a text span object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.GetCount(System.Int32@)">
      <summary>Returns the number of text spans</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcel">[out] Specifies the number of text spans in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.RemoveAll">
      <summary>Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.ResumeTracking">
      <summary>Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.Sort(System.UInt32)">
      <summary>Do not use this method.</summary>
      <param name="SortOptions">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.SuspendTracking">
      <summary>Do not use this method.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage">
      <summary>Represents the range of text that is viewable and editable by text editor views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Attach(System.Object)">
      <summary>Attaches a text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_CopyText(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Copy the specified text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Line containing the start of text to be copied.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be &lt;= length of line.</param>
      <param name="iBufMax">[in] Size of <paramref name="pzeDest" /> destination buffer.</param>
      <param name="pszDest">[in] Destination buffer.</param>
      <param name="pcCharsCopied">[out] Number of characters copied.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Detach">
      <summary>Detach the storage buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Find(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Find the specified text in the indicated span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to locate.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iFlags">[in] Flags indicating search options.</param>
      <param name="piLine">[out] Line containing the start of the located text.</param>
      <param name="piCol">[out] Column of the start of the located text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetCharsInSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>Gets the number of characters in the specified span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpanToMeasure">[in] The span within which to count the characters.</param>
      <param name="piChars">[out] The number of characters in the span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLanguageServiceID(System.Guid@)">
      <summary>Gets the GUID of the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] The GUID of the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLength">
      <summary>Gets the length of the storage.</summary>
      <returns>If the method succeeds, it returns the length of the storage. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Gets the length of the specified line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Index of line of interest.</param>
      <param name="piLength">[out] Length of line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLineCount">
      <summary>Gets the storage line count.</summary>
      <returns>If the method succeeds, it returns the storage line count. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Gets the line data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags indicating line properties.</param>
      <param name="iLine">[in] The line for which to get data.</param>
      <param name="iStartIndex">[in] The start index in the line.</param>
      <param name="iEndIndex">[in] The end index in the line.</param>
      <param name="pLineData">[out] The obtained line data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Gets the line index of a position in the storage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] The position of interest.</param>
      <param name="piLine">[out] The line number of the position.</param>
      <param name="piIndex">[out] The index of the position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Gets the position in the storage of the specified line index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] The line number of interest.</param>
      <param name="iIndex">[in] The index of interest.</param>
      <param name="piPosition">[out] The position of the specified line index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_RefreshColorization(System.Int32,System.Int32,System.Int32@)">
      <summary>Refresh the colorization of the specified set of lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] The top line in the set.</param>
      <param name="iBotLine">[in] The bottom line in the set.</param>
      <param name="piLastAffectedLine">[out] The last line affected by the colorization refresh.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases previously obtained line data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] The line data to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Replace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Replace/change the text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCI">[in] Information about the change/replace request.</param>
      <param name="ptsOut">[out] The changed text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_SetLanguageServiceID(System.Guid@)">
      <summary>Sets the language service for the storage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="guidLangService">[in] The GUID of the language service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorageColorState">
      <summary>Provides line color state for colorizers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorageColorState.GetColorStateAtStartOfLine(System.Int32,System.Int32@)">
      <summary>Gets the color state at the start of the specified line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] The number of the line of interest.</param>
      <param name="piState">[out] The color state.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream">
      <summary>Provides reading and writing capabilities using one-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.AdviseTextStreamEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents,System.UInt32@)">
      <summary>Not implemented.</summary>
      <param name="pSink">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CanReplaceStream(System.Int32,System.Int32,System.Int32)">
      <summary>Tests whether a given editing operation can succeed (for example, copy or cut).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to replace, if any. In an insert operation, this value is zero (0).</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CreateEditPoint(System.Int32,System.Object@)">
      <summary>Creates an EditPoint object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position in the text buffer.</param>
      <param name="ppEditPoint">[out] Pointer to the <see cref="T:EnvDTE.EditPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CreateStreamMarker(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient,Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker[])">
      <summary>Creates a stream marker of a given type over the specified region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Type of marker to create.</param>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iLength">[in] Length of text to create marker over.</param>
      <param name="pClient">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface. Implement this interface to advise the text buffer that you want to receive notification of marker events.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker" /> interface. If this parameter is null, then the text marker is owned by the text buffer. An example of a buffer-owned text marker is a temporary bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CreateTextPoint(System.Int32,System.Object@)">
      <summary>Creates a TextPoint object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Starting position in the text buffer to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="ppTextPoint">[out] Pointer to the <see cref="T:EnvDTE.TextPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.EnumMarkers(System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers@)">
      <summary>Enumerates s specific set of text stream markers, based on the criteria specified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iLen">[in] Length of text to enumerate marker over.</param>
      <param name="iMarkerType">[in] Type of markers to enumerate. This parameter is ignored if a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES" /> is specified for the <paramref name="dwFlags" /> parameter.</param>
      <param name="dwFlags">[in] Enumeration options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" />.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.FindMarkerByPosition(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker@)">
      <summary>Locates a marker of a given type based on a position in the text stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Specifies the type of marker to find.</param>
      <param name="iStartingPos">[in] Starting position in the text stream. </param>
      <param name="dwFlags">[in] Specifies the direction to search for a marker. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS" />.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker" /> interface (that is, the text marker).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetStream(System.Int32,System.Int32,System.IntPtr)">
      <summary>Provides direct, stream-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer</param>
      <param name="iLength">[in] Length of the text stream to access. </param>
      <param name="pszDest">[in] The caller-allocated string buffer. This buffer is filled with the requested text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.LockBuffer">
      <summary>Locks the text buffer for the purpose of access control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.ReloadStream(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Replaces text without deleting markers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to reload.</param>
      <param name="pszText">[in] Pointer to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.ReplaceStream(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Handles editing, such as line breaking, line joining, and so on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to reload.</param>
      <param name="pszText">[in] Text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.ReplaceStreamEx(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32@)">
      <summary>Handles editing, such as line breaking, line joining, and so on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Options for modifying text during a replace operation. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" />.</param>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to reload.</param>
      <param name="pszText">[in] Text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="piActualLen">[out] Number of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.UnadviseTextStreamEvents(System.UInt32)">
      <summary>Not implemented.</summary>
      <param name="dwCookie"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents">
      <summary>Notifies clients of changes to the underlying text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents.OnChangeStreamAttributes(System.Int32,System.Int32)">
      <summary>Notifies the client that the text stream attributes have changed.</summary>
      <param name="iPos">[in] Starting position of the affected text.</param>
      <param name="iLength">[in] Length of the text affected in the text stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents.OnChangeStreamText(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Notifies the clients when the content of a text stream in the buffer has changed.</summary>
      <param name="iPos">[in] Starting position of the affected text.</param>
      <param name="iOldLen">[in] Previous length of text.</param>
      <param name="iNewLen">[in] New length of text.</param>
      <param name="fLast">[in] Obsolete; ignore.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker">
      <summary>Provides access to and manipulates the position of a text marker in the text buffer. This interface has methods to retrieve of change one-dimensional, streaming coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the widget margin given a display context and bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.ExecMarkerCommand(System.Int32)">
      <summary>Executes a text marker command against a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetBehavior(System.UInt32@)">
      <summary>Returns a text marker behavior set by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetCurrentSpan(System.Int32@,System.Int32@)">
      <summary>Returns current position information of the marker in the text stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Position of the text marker.</param>
      <param name="piLen">[out] Length of the text marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <summary>Returns text marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the text marker priority index, with the highest value getting the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to an integer containing the priority index. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetStreamBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextStream@)">
      <summary>Provides access to the associated text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream" /> interface of the associated buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetTipText(System.String[])">
      <summary>Returns the text to display in a tip for the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Pointer to the string containing the tip text for the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetType(System.Int32@)">
      <summary>Returns a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] Pointer to integer value representing the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to a DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.Invalidate">
      <summary>Prevents a text marker from appearing in the user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.ResetSpan(System.Int32,System.Int32)">
      <summary>Resets the position and extent of the text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iNewPos">[in] New position for the text marker in the text stream.</param>
      <param name="iNewLen">[in] New length of the text marker in the text stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.SetBehavior(System.UInt32)">
      <summary>Sets the behavior of a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.SetType(System.Int32)">
      <summary>Sets a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Integer containing the marker type to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.SetVisualStyle(System.UInt32)">
      <summary>Sets the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.UnadviseClient">
      <summary>Unadvises the client, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData">
      <summary>Provides methods for managing text tip data.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Gets a context stream for the tip text data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] The position of the context stream.</param>
      <param name="piLength">[out] The length of the context stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.GetTipFontInfo(System.Int32,System.UInt32[])">
      <summary>Gets font information for the tip text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cChars">[in] The number of characters to check for font information.</param>
      <param name="pdwFontAttr">[out] The font attribute for the text characters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.GetTipText(System.String[],System.Int32@)">
      <summary>Gets the tip text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] The tip text.</param>
      <param name="pfGetFontInfo">[out] The font information for the tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.OnDismiss">
      <summary>Called when the tip is dismissed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.UpdateView">
      <summary>Updates the text view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.Dismiss">
      <summary>Dismisses the tip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position (<paramref name="piPos" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Gets the size preferences for the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out] The bounding rectangle of the tip window, in screen coordinates.</param>
      <param name="pSizeData">[out] Size and position of the tip window. For a list of <paramref name="pSizeData" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.SetTextTipData(Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData)">
      <summary>Sets the text tip.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMethodData">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information is not provided.</summary>
      <param name="hwnd"> </param>
      <param name="iMsg"> </param>
      <param name="wParam"> </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint">
      <summary>Establishes and maintains an internal tracking point.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.GetBehavior(System.UInt32@)">
      <summary>Gets the tracking point behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] The tracking point behavior.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.GetCurrentLineIndex(System.Int32@,System.Int32@)">
      <summary>Gets the tracking point current line and index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] The line number of the tracking point.</param>
      <param name="piIndex">[out] The line index of the tracking point.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.GetTextLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <summary>Gets the tracking point’s text layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out] The text layer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.SetBehavior(System.UInt32)">
      <summary>Sets the tracking point’s behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] The behavior for the tracking point.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView">
      <summary>Manages the text view of an editor window and contains methods to manage the text view. The view is essentially the editor window shown in the user interface (UI). </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.AddCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
      <summary>Adds a command filter to the existing chain of command filters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNewCmdTarg">[in] Pointer to the new command filter (IOleCommandTarget) to add to the command filter chain.</param>
      <param name="ppNextCmdTarg">[out] Pointer to a command filter used to handle commands not dealt with by the <paramref name="pNewCmdTarg" /> command filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.CenterColumns(System.Int32,System.Int32,System.Int32)">
      <summary>Places the specified column of text in the center of the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the first line to center.</param>
      <param name="iLeftCol">[in] Integer containing the index of the starting column to center. Viewcol coordinates may include virtual space.</param>
      <param name="iColCount">[in] Integer containing the total number of columns to center within the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.CenterLines(System.Int32,System.Int32)">
      <summary>Places the specified lines of text in the center of the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] First line to place in the center of the view.</param>
      <param name="iCount">[in] Total number of lines to place in the center of the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.ClearSelection(System.Int32)">
      <summary>Clears the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMoveToAnchor">[in] If true, the cursor is placed at the anchor after the current selection is cleared. If false, then the cursor is not moved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.CloseView">
      <summary>Closes and unregisters a view with the view manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.EnsureSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Ensures that text is in view, both vertically and horizontally.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="span">[in] Specifies the span of text to center. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the current contents of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface representing the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetCaretPos(System.Int32@,System.Int32@)">
      <summary>Returns the line and column index of the cursor position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to an integer containing the line, if the method succeeds.</param>
      <param name="piColumn">[out] Pointer to an integer containing the column, if the method succeeds. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetLineAndColumn(System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a text stream position to a line and column index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Integer containing the position in the text stream.</param>
      <param name="piLine">[out] Pointer containing the line index corresponding to the stream position.</param>
      <param name="piIndex">[out] Pointer containing the column index corresponding to the stream position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetLineHeight(System.Int32@)">
      <summary>Returns the pixel height of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineHeight">[out, retval] Integer containing the line height, in pixels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetNearestPosition(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a line and column index to a text stream position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates might include virtual space.</param>
      <param name="piPos">[out] Pointer to an integer containing the position in the text stream.</param>
      <param name="piVirtualSpaces">[out] Pointer to an integer containing the number of virtual spaces.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetPointOfLineColumn(System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.POINT[])">
      <summary>Returns the coordinates for the upper left corner of a particular line and column.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates may include virtual space.</param>
      <param name="ppt">[out, retval] Structure defining the x- and y- coordinates of the upper left corner of the line. For more information, see POINT in the Platform SDK.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetScrollInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="piMinUnit">[out] Minimum scroll bar unit.</param>
      <param name="piMaxUnit">[out] Maximum scroll bar unit.</param>
      <param name="piVisibleUnits">[out] Additional number of visible units in the scroll bar.</param>
      <param name="piFirstVisibleUnit">[out] First visible unit in the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectedText(System.String@)">
      <summary>Returns a copy of the selected text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] If the method succeeds, specifies a pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelection(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the text span corresponding to the current selection, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piAnchorLine">[out] Anchor line position for the selection. Based on user selection, this value is not necessarily the upper line in the selection.</param>
      <param name="piAnchorCol">[out] Anchor column position for the selection. Based on user selection, this value is not necessarily the upper, left column position in the selection. Viewcol coordinates may include virtual space.</param>
      <param name="piEndLine">[out] End line position for the selection. Based on user selection, this value is not necessarily the lower line in the selection.</param>
      <param name="piEndCol">[out] End column position for the selection. Based on user selection, this value is not necessarily the lower, right column position in the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns a copy of the selected text in <see cref="T:System.Windows.Forms.IDataObject" /> interface format.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIDataObject">[out] Pointer to an <see cref="T:System.Windows.Forms.IDataObject" /> object containing the selected text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectionMode">
      <summary>Returns the current selection mode.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSelMode" /> enum value SM_STREAM or SM_BOX.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectionSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the text span associated with a selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure containing the span information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetTextStream(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns a specified stream of text in a string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] Top line index defining the text stream.</param>
      <param name="iTopCol">[in]Top line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="iBottomLine">[in] Bottom line index defining the text stream.</param>
      <param name="iBottomCol">[in] Bottom line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="pbstrText">[out] Pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetWindowHandle">
      <summary>Returns the window handle for this view.</summary>
      <returns>Returns the window handle for this view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current word extent.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line index for the lines that contains the word.</param>
      <param name="iCol">[in] Column index for the word.</param>
      <param name="dwFlags">[in] Flags specifying how the word extent is determined. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pSpan">[out] Span of text identifying the word extent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Highlights the matching brace in a language construct.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Parameter is not used.</param>
      <param name="cSpans">[in] Number of matching pairs to highlight within the text span.</param>
      <param name="rgBaseSpans">[in, size_is(cSpans)] Span of text to highlight within.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])">
      <summary>Creates the view and allows clients to specify one or more TextViewInitFlags options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to a text buffer object to attach the view to.</param>
      <param name="hwndParent">[in] Specifies a handle to the parent window.</param>
      <param name="InitFlags">[in] Specifies view options. For a list of <paramref name="InitFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags" />.</param>
      <param name="pInitView">[in] Pointer to the view you want to initialize.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.PositionCaretForEditing(System.Int32,System.Int32)">
      <summary>Puts the caret in a position suitable for editing a function.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line to position the caret (cursor) on.</param>
      <param name="cIndentLevels">[in] Count of indent levels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.RemoveCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Removes a command filter from the chain of command filters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCmdTarg">[in] Pointer to a command filter to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.ReplaceTextOnLine(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
      <summary>Replaces line text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line.</param>
      <param name="iStartCol">[in] Integer containing the starting column.</param>
      <param name="iCharsToReplace">[in] Integer containing the number of characters to replace.</param>
      <param name="pszNewText">[in] Pointer the new text being passed in.</param>
      <param name="iNewLen">[in] Length of the buffer (number of characters) being passed in.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.RestrictViewRange(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient)">
      <summary>Reduces the view’s range of visible/editable lines to a subset of the buffer’s lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMinLine">[in] The minimum line number.</param>
      <param name="iMaxLine">[in] The maximum line number.</param>
      <param name="pClient">[in] The view range client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SendExplicitFocus">
      <summary>Sends explicit focus to the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Associates a text buffer with the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the text buffer to associate with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetCaretPos(System.Int32,System.Int32)">
      <summary>Sets the coordinates of the end point of a selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line containing the caret position.</param>
      <param name="iColumn">[in] Column identifying the caret position. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetScrollPosition(System.Int32,System.Int32)">
      <summary>Sets the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="iFirstVisibleUnit">[in] First visible unit for the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Selects specified text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAnchorLine">[in] Anchor line position for the selection.</param>
      <param name="iAnchorCol">[in] Anchor column position for the selection. Viewcol coordinates may include virtual space.</param>
      <param name="iEndLine">[in] End line position for the selection.</param>
      <param name="iEndCol">[in] End column position for the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetSelectionMode(Microsoft.VisualStudio.TextManager.Interop.TextSelMode)">
      <summary>Sets the selection mode.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSelMode">[in] Enumeration value specifying the selection mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetTopLine(System.Int32)">
      <summary>Sets the top line in the view to the baseline.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBaseLine">[in] Indicates the line that should be set as the baseline.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <summary>Used for word completion control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCompSet">[in] Pointer to a completion set object.</param>
      <param name="dwFlags">[in] Flags specifying completion status options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <summary>Updates the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTipWindow">[in] Pointer to a tip window object.</param>
      <param name="dwFlags">[in] Tip window options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateViewFrameCaption">
      <summary>Forces the view to update its frame window caption, such as "[Read only]".</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents">
      <summary>Notifier of events occurring on the text view object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnChangeCaretLine(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
      <summary>Notifies the client when a change of caret line occurs.</summary>
      <param name="pView">[in] Pointer to a view object.</param>
      <param name="iNewLine">[in] Integer containing the new line.</param>
      <param name="iOldLine">[in] Integer containing the old line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnChangeScrollInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Notifies a client when the scrolling information is changed.</summary>
      <param name="pView">[in] Pointer to a view object.</param>
      <param name="iBar">[in] Integer value referring to the bar.</param>
      <param name="iMinUnit">[in] Integer value for the minimum units.</param>
      <param name="iMaxUnits">[in] Integer value for the maximum units.</param>
      <param name="iVisibleUnits">[in] Integer value for the visible units.</param>
      <param name="iFirstVisibleUnit">[in] Integer value for the first visible unit.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Notifies a client when a view loses focus.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnSetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Notifies a client when a view is attached to a new buffer.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Notifies a client when a view receives focus.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter">
      <summary>Allows further modification of the text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter.GetDataTipText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Provides data-tip support by obtaining the string value of the tip text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[in, out] On input, the parameter specifies the user-selected characters to which the tip should apply. On output, the parameter specifies a pointer to the entire span of text associated with the tip.</param>
      <param name="pbstrText">[out] Pointer to a string containing the tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter.GetPairExtents(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the location of a matching pair item, given the location of the first item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index of the first item in the pair.</param>
      <param name="iIndex">[in] Integer containing the column index of the first item in the pair.</param>
      <param name="pSpan">[out] Pointer to a text span that identifies the location of the second pair item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Calculates the word extent based on a character position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index of the character.</param>
      <param name="iIndex">[in] Integer containing the column index of the character.</param>
      <param name="dwFlags">[in] Options for determining the word extent. For a list of <paramref name="dwFlags" /> options, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pSpan">[out] Pointer to a span object identifying the word extent.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsThreadSafeTextView">
      <summary>This is a thread-safe subset of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsThreadSafeTextView.ThreadSafeSetCaretPos(System.Int32,System.Int32)">
      <summary>Sends coordinates to.<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetCaretPos(System.Int32,System.Int32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line containing the caret position.</param>
      <param name="iColumn">[in] Column identifying the caret position. <paramref name="Viewcol" /> coordinates may include virtual space.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.Dismiss">
      <summary>Closes the ToolTip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the position of the text the ToolTip should not obscure and over which the cursor can be held before the ToolTip is closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position (<paramref name="piPos" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Gets the size preferences for the ToolTip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out] The bounding rectangle of the ToolTip window, in screen coordinates.</param>
      <param name="pSizeData">[out] Size and position of the ToolTip window. For a list of <paramref name="pSizeData" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the ToolTip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to the display context in which to draw the ToolTip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the ToolTip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Event handler for the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The window handle.</param>
      <param name="iMsg">[in] The message ID.</param>
      <param name="wParam">[in] Information about the message.</param>
      <param name="lParam">[in] Information needed by the message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoRedoClusterWithCommitEvents">
      <summary>Provides event handling for undo or redo cluster closure.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUndoRedoClusterWithCommitEvents.OnUndoRedoClusterClosingWithCommitGesture(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Fires when an undo or redo cluster is closing.</summary>
      <param name="dwGestureFlags">[in] Flags for the commit gesture.</param>
      <param name="ptsChanged">[in] The text span that changed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents">
      <summary>An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> client can expose this interface to be informed when the undo stack has returned to an unmodified state (that is, no data-changing modifications exist) by the undo manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents.OnReturnToCleanState">
      <summary>Informs the client that the document has returned to a clean state.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoUnit">
      <summary>Determines if the undo unit applies to UI items only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUndoUnit.fChangeData">
      <summary>Indicates whether the undo unit applies to UI only and does not change the document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUserData.GetData(System.Guid@,System.Object@)">
      <summary>Returns user data from a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="pvtData">[out] Pointer to a VARIANT containing the user data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUserData.SetData(System.Guid@,System.Object)">
      <summary>Sets user data to a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="vtData">[in] Data to be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserDataEvents">
      <summary>Notifies clients of changes to the user data.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUserDataEvents.OnUserDataChange(System.Guid@,System.Object)">
      <summary>Notifies the client of changes to the user data.</summary>
      <param name="riidKey">[in] Unique identifier of the data that has changed.</param>
      <param name="vtNewValue">[in] New value. If a client wants to hold on to the value, they must make a copy of this variant.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient">
      <summary>Provides management of the view range.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient.AdjustViewRange(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.TextViewAction,System.Int32,System.Int32)">
      <summary>Adjust the view range as specified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] The text view.</param>
      <param name="action">[in] The text view action.</param>
      <param name="iLine">[in] The line number of the range.</param>
      <param name="iCount">[in] The character count of the range.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES">
      <summary>Used to communicate user preferences with the text manager, views, and language services. View settings follow the text manager's settings unless a specific set of forced settings are specified when <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])" /> is called.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fAutoListMembers">
      <summary>Determines whether a proposed list of members is produced on the fly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fAutoListParams">
      <summary>Determines whether a proposed list of parameters is produced on the fly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fDropdownBar">
      <summary>Determines whether language services support the dropdown or navigation bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fHideAdvancedAutoListMembers">
      <summary>Hide advanced members. This parameter is irrelevant if the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fAutoListMembers" /> parameter is set to false.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fHotURLs">
      <summary>Allows for single-click URL navigation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fInsertTabs">
      <summary>Determines whether the tab character or spaces are inserted for a tab.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fLineNumbers">
      <summary>Determines whether line numbers are shown in the selection margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fShowCompletion">
      <summary>Determines whether statement completion is set through the user interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fShowSmartIndent">
      <summary>Determines whether the smart indent option is set through the user interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fTwoWayTreeview">
      <summary>Determines whether the tree view is shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fVirtualSpace">
      <summary>Determines whether virtual space navigation and selection are allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fWordWrap">
      <summary>Determines whether word wrap occurs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.guidLang">
      <summary>Specifies the Language service GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.IndentStyle">
      <summary>Specifies no indenting, block indenting, or smart indenting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.szFileType">
      <summary>Specifies the file type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.uIndentSize">
      <summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.uTabSize">
      <summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint">
      <summary>Specifies whether the context is an F1 keyword.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint.LCH_DEFAULT">
      <summary>Typical idle-time update; it should be as fast as possible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint.LCH_F1_HELP">
      <summary>Means that the context will be used for F1 handling; Idle time can be longer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES">
      <summary>Enumerates the text manipulation capabilities of a layer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES.LMC_TEXTFIND">
      <summary>Shallow text find operations (for example, ISearch)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES.LMC_TEXTORIGINATE">
      <summary>Originates text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES.LMC_TEXTPRINT">
      <summary>Printing</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA">
      <summary>Used to pass direct-access to line data in a buffer through <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />. This structure returns all of the information for a single line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.fMarkers">
      <summary>If true, then syntax coloring related to the presence of markers is considered in the coloring information provided in the <paramref name="pAttributes" /> parameter. If null, then the marker data does not affect the syntax coloring returned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.iEolType">
      <summary>Type of the new line character at the end of the line (for example "/n", "/r/n", and so on).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.iLength">
      <summary>Number of plain text characters in the line, including the end of line (EOL) character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.pAttributes">
      <summary>An array of ULONG containing a list of syntax coloring attributes for each character in the line. Syntax coloring for a line is affected by the markers present in the line and keyword coloring.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.pszText">
      <summary>Array of WCHAR containing all the characters in the line. Use the <paramref name="iLength" /> parameter to determine the end of text in the line. The <paramref name="pszText" /> parameter is not NULL-terminated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX">
      <summary>Used to pass direct access to line data in a buffer through <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.dwFlags">
      <summary>ORing of LINEDATAFLAGS enumORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.dwReserved">
      <summary>Reserved for use by <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.iEolType">
      <summary>Type of the new line character at the end of the line (for example "/n", "/r/n", and so on).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.iLength">
      <summary>Number of plain text characters, excluding the end of line (EOL) character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.pAtomicTextChain">
      <summary>For internal use. Parameter information is not provided.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.pAttributes">
      <summary>An array of ULONG containing a list of syntax coloring attributes for each character in the line. Syntax coloring for a line is affected by the markers present in the line and keyword coloring.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.pszText">
      <summary>Array of WCHAR containing all the characters in the line. Use the <paramref name="iLength" /> parameter to determine the end of text in the line. The <paramref name="pszText" /> parameter is not NULL-terminated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS">
      <summary>Provides additional information about the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS.ldfDefault">
      <summary>Default value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS.ldfMarkers">
      <summary>Markers do inline coloring of the text of this line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS.ldfNoReadLock">
      <summary>No locking was done for this line data.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE">
      <summary>Specifies default line style options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_DOTTED">
      <summary>Fifty percent gray dither (dotted when 1 pixel). This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER" /> markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_HATCH">
      <summary>Hatched pattern. This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER" /> markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_NONE">
      <summary>No line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_SOLID">
      <summary>Solid line. This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER" /> markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_SQUIGGLY">
      <summary>Squiggly line. This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_LINE" /> markers.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags">
      <summary>Specifies whether the linked undo transaction is strict or not.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtDefault">
      <summary>Specifies the transaction to be non-strict.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtStrict">
      <summary>Specifies the transaction to be strict.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LinkedUndoErrors">
      <summary>Undo errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedUndoErrors.LINKEDUNDO_E_INTERVENING_ACTION">
      <summary>A parent action failed due to another action not being at the top of the stack. This will be returned from <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> when an undo is attempted but fails.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS">
      <summary>Indicates how a data object is pasted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS.LTE_BOX">
      <summary>Box (column) mode data. Text is inserted as a box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS.LTE_LINE">
      <summary>Line mode data. Text is inserted as whole lines only. This option inserts text in the same manner in which it is selected, if it is selected in line mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS.LTE_NORMAL">
      <summary>Normal (stream) mode data.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags">
      <summary>Specifies mapping conditions for local spans.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.MLS_INCLUDE_USER_EXPANDABLE">
      <summary>Omit concealed text but include collapsed text (collapsible text that is in the collapsed state).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.MLS_NEVER_COMBINE_SPANS">
      <summary>Keep adjacent spans from being combined into a single underlying span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.MLS_VISIBLE_ONLY">
      <summary>Omit concealed and collapsed text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.mlsIncludeUserExpandable">
      <summary>Replaced by MSL_INCLUDE_USER_EXPANDABLE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.mlsNeverCombineSpans">
      <summary>Replaced by MSL_NEVER_COMBINE_SPANS.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.mlsVisibleOnly">
      <summary>Replaced by MSL_VISIBLE_ONLY.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS">
      <summary>Provides flags that specify marker behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_DEFAULT">
      <summary>Default stream behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_LEFTEDGE_LEFTTRACK">
      <summary>If edits occur on the left edge of the marker, then the marker tracks to the left.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_LINESPAN">
      <summary>Marker always adjusts itself to span only one line at a time.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_MULTILINESPAN">
      <summary>Marker can span multiple lines.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_RIGHTEDGE_RIGHTTRACK">
      <summary>If edits occur on the right edge of the marker, then the marker tracks to the right.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_TRACK_EDIT_ON_RELOAD">
      <summary>Forces the marker to track every edit as a replace, ignoring any reload semantics. Do not use this value unless you have markers that need to guarantee that they are tracking in response to <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents.OnChangeLineText(Microsoft.VisualStudio.TextManager.Interop.TextLineChange[],System.Int32)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues">
      <summary>Specifies the integer identifying the item number for a marker type's context menu command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvBodyDoubleClickCommand">
      <summary>Fired for a double click on the body text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvFirstContextMenuCommand">
      <summary>First command associated with the marker type. The list of commands associated with each marker type varies with the marker type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvGlyphDoubleClickCommand">
      <summary>Fired for a double click on the glyph (if one exists).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvGlyphSingleClickCommand">
      <summary>Fired for a single click on the glyph (if one exists).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvLastContextMenuCommand">
      <summary>Last command associated with the marker type. The list of commands associated with each marker type varies with the marker type.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA">
      <summary>Specifies directional options for locating markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.iBottomLine">
      <summary>Bottom line of the range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.iCount">
      <summary>Number of markers contained in the range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.iTopLine">
      <summary>Top line of the range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.pLayer">
      <summary>The layer originating this information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.pNext">
      <summary>Pointer to the next <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.rgfLineMarked">
      <summary>Used by <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> for optimization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.rgpMarker">
      <summary>Marker instance. Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE">
      <summary>Sets the characteristics of a text marker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.DEF_MARKER_COUNT">
      <summary>Marker count. This should be at the end to define the number of markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_BOOKMARK">
      <summary>Generic bookmark (or tag). Priority Level: 200</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_CODESENSE_ERROR">
      <summary>CodeSense error. Priority Level: 700</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_COMPILE_ERROR">
      <summary>Compile error. Priority Level: 600</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_IDENTERROR">
      <summary>Obsolete. Use MARKER_COMPILE_ERROR.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_INVISIBLE">
      <summary>Invisible marker. Priority Level: 100</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_LIST_LOCATION">
      <summary>Current location from result list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_OTHER_ERROR">
      <summary>Third party tool error. Priority level: 750.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_READONLY">
      <summary>Read-only. Priority Level: 0 (lower priority for performance reasons)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_REGION_COLLAPSED">
      <summary>Collapsible region is collapsed. Priority Level: 801</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_REGION_EXPANDED">
      <summary>Collapsible region is expanded 800.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_SHORTCUT">
      <summary>Task list shortcut. Priority Level: 199</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_SYNTAXERROR">
      <summary>Obsolete. Use MARKER_COMPILE_ERROR.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL">
      <summary>Determines the visual style of the marker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER">
      <summary>Indicates that a box is drawn around the marked text. The border is not necessarily a square in the case of a multi-line marker. You can specify either a solid or dashed line. For more information, refer to the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultLineStyle(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.LINESTYLE[])" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_COLOR_ALWAYS">
      <summary>Indicates that the marked text should always be colored inline. This option is exclusive of the MV_COLOR_LINE_IF_NO_MARGIN option.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_COLOR_LINE_IF_NO_MARGIN">
      <summary>Indicates that the marked text should be colored only if the widget margin is hidden. This option is exclusive of the MV_COLOR_ALWAYS option.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_COLOR_SPAN_IF_ZERO_LENGTH">
      <summary>Indicates that a marker should paint as a solid bar if the text span is of zero length. This setting should not be used for markers such as wavy lines, because the line will appear only as a solid bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_CONTEXT_CONTRIBUTION_FOR_BODY">
      <summary>Indicates that the body of a marker wants to contribute context, and thus its client can be queried for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_DRAGGABLE_GLYPH">
      <summary>Indicates that a glyph can take part in drag and drop operations. In addition to MV_DRAGGABLE_GLYPH, a marker that allows dragging should also specify MV_GLYPH_HOVER_CURSOR, so that the editor knows to provide a custom cursor for the mouse when it passes over the glyph. These visual styles can either be set for the marker type (if all markers of the given type have the same behavior) or for a given marker instance. The text view negotiates the hover cursor and drag initiation by calling QueryInterface on the marker client provided (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" />). The client object should implement <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMouseCursorProvider" /> to handle mouse cursor updates for MV_GLYPH_HOVER_CURSOR and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler" /> to handle drop negotiation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_FORCE_INVISIBLE">
      <summary>Forces the marker to be invisible. Use this setting to toggle a marker between being visible and invisible, which is faster than using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetType(System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_GLYPH">
      <summary>Can show a glyph in the widget margin. This indicates that you want to draw a margin glyph. Draw the glyph using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.DrawGlyphWithColors(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet,System.UInt32,System.Int32)" />. If the widget margin does not exist, depending on the window and on the user's preferences, then the glyph is not visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_GLYPH_HOVER_CURSOR">
      <summary>Indicates that the client has requested a callback (via their client interface) to set the mouse cursor when the user hovers the mouse over the glyph.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_LINE">
      <summary>Marker is only a line adornment and does not otherwise affect coloring. Thus, the marker is some form of underline style. Currently, the only supported form of this is a wavy line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_MULTILINE_GLYPH">
      <summary>Indicates that a glyph spans multiple lines. This enables the drawing of multi-line glyphs. If you specify this flag, your I<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.DrawGlyphWithColors(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet,System.UInt32,System.Int32)" /> handler is called with the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_MULTILINE" /> flag, and often with <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_BOTTOMEDGE" />, depending on the scenario.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_SEL_MARGIN_GLYPH">
      <summary>Similar to MV_GLYPH, but indicates that the glyph lives in the selection margin, not the normal widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_TIP_FOR_BODY">
      <summary>Determines whether a tip should be shown for the body of the marker text. The MV_TIP_FOR_BODY and MV_TIP_FOR_GLYPH options are dependant on one another. If this value is set, marked text will trigger a tool tip over the body or glyph. However, as the marker type provider, you are not allowed to specify what text shows up. This is handled by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])" />handler of whoever created the given marker instance.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_TIP_FOR_GLYPH">
      <summary>Determines whether a tip should be shown in the widget margin.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MethodTextType">
      <summary>Identifies different portions of the method tip to provide information on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_CLOSEBRACKET">
      <summary>Closed bracket delimiter. Default value is a right parenthesis. To show nothing in the bracket location, return an empty string in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_DELIMITER">
      <summary>Parameter delimiter. default is ", ". You must specify the space if you want it included in your delimiter string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_DESCRIPTION">
      <summary>Description of method, which is provided its own line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_NAME">
      <summary>Method name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_OPENBRACKET">
      <summary>Open bracket delimiter. Default value is a left parenthesis. To show nothing in the bracket location, return an empty string in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_TYPEPOSTFIX">
      <summary>Return type that is provided after the variable name in code. For example, the "Long" type in Visual Basic, which is written as "MyVariable AsLong" in code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_TYPEPREFIX">
      <summary>Return type that is provided before the variable name in code. For example, the "Long" type in Visual C++, which is written as "Long MyVariable" in code.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE">
      <summary>Indicates moving a record selection by an absolute amount.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_FIRSTCOLUMN">
      <summary>Move record selection to first column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_FIRSTLINE">
      <summary>Move record selection to first line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_FIRSTTEXTCOLUMN">
      <summary>Move record selection to first text column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_LASTCOLUMN">
      <summary>Move record selection to last column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_LASTLINE">
      <summary>Move record selection to last line.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE">
      <summary>Indicates expanding a selection by a relative amount.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_CHARACTER">
      <summary>Move selection one character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_LINE">
      <summary>Move selection one line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_PAGE">
      <summary>Move selection one page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_WORD">
      <summary>Move selection one word.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion">
      <summary>Creates a new outline or hidden text region over the specified text span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.dwBehavior">
      <summary>Determines whether a region is client- or editor-controlled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.dwClient">
      <summary>Client-defined information that is used to uniquely identify the new region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.dwState">
      <summary>Determines whether the new hidden region is expanded or collapsed. For more information see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.iType">
      <summary>Specifies whether a hidden (concealed) or outline (collapsible) region is created. This member is a permanent property of the region. For more information, see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.pszBanner">
      <summary>Banner text displayed when the region is collapsed. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbClientControlled" /> is specified for <paramref name="dwBehavior" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.tsHiddenText">
      <summary>Span of text to create the new region for. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion">
      <summary>Specifies the span and state of a new outline region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion.dwState">
      <summary>State of the text span, that is, whether it is expanded or collapsed. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion.tsHiddenText">
      <summary>Structure identifying the span of hidden text. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion">
      <summary>Holds information about a synthetic text region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.dwBehavior">
      <summary>Currently unused; must be zero.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.dwClient">
      <summary>Client-defined DWORD; this can be retrieved with <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetClientData(System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iAnchorIndex">
      <summary>Specifies the zero-based character index (must not be in virtual space).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iAnchorLine">
      <summary>Specifies the zero-based line number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iMarkerType">
      <summary>Specifies the display characteristics (coloring, glyph) to show for this region. It has no effect on base buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iSerialValue">
      <summary>Used to sort adjacent regions. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.pszText">
      <summary>Specifies the text to display (can be &gt;1 line). </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PAINTINGRESTRICTIONS">
      <summary>Defines painting restrictions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PAINTINGRESTRICTIONS.PR_NO_MARGIN">
      <summary>No widget margin available.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PAINTINGRESTRICTIONS.PR_NONE">
      <summary>No restrictions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS">
      <summary>Specifies events for split window panes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_CLOSED">
      <summary>Pane is closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_DETACHED">
      <summary>Pane is detached.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_FLAGSCHANGED">
      <summary>
        <see cref="T:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS" /> has changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_FOCUS_TO_EDIT_PANE">
      <summary>Sets focus on an edit pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_GOTFOCUS">
      <summary>Pane received focus.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS">
      <summary>Indicates appearance of split window panes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_BORDER">
      <summary>Border types are ignored unless this is set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_BORDERMASK">
      <summary>Sets all border bits, raised, etched, and shallow.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_BUMP">
      <summary>Pane appears raised and etched.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_ELASTICX">
      <summary>Pane "prefers" elasticity when sized horizontally.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_ELASTICY">
      <summary>Pane "prefers" elasticity when sized vertically.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_ETCHED">
      <summary>Pane appears etched.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_NOFOCUS">
      <summary>If a pane specifies PF_NOFOCUS it can still get the focus via the mouse, but it will not participate in F6-style pane hopping.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_RAISED">
      <summary>Pane appears raised.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_SHALLOW">
      <summary>Pane appears shallow etched.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_SUNKEN">
      <summary>Default border style, pane appears sunken.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PANETYPE">
      <summary>Specifies the pane to get with <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetPane(Microsoft.VisualStudio.TextManager.Interop.PANETYPE,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANETYPE.GP_FOCUS">
      <summary>Pane with focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANETYPE.GP_NEXT">
      <summary>Next pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANETYPE.GP_PREV">
      <summary>Previous pane.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType">
      <summary>Specifies parameter information for the method tip window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType.PTT_DECLARATION">
      <summary>Full declaration as it appears in signature (that is, "Long MyVariable" or "MyVariable As Long").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType.PTT_DESCRIPTION">
      <summary>Description (gets its own line, and is prefixed with NAME: (bolded)).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType.PTT_NAME">
      <summary>Parameter name only (that is, "MyVariable").</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS">
      <summary>Regular expression evaluation errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_EMPTYSET">
      <summary>[]; Empty set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_ESCAPEMISSINGARG">
      <summary>\ or \x or \u; Missing valid argument.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_GROUPMISSINGCLOSE">
      <summary>(); Missing ).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_INTERNALERROR">
      <summary>Internal error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_MISSINGARG">
      <summary>Missing argument in syntax.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_POWERARGOUTOFRANGE">
      <summary>^n; Power closure argument out of range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_REPLACETEXT">
      <summary>Unable to create replacement text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_SETMISSINGCLOSE">
      <summary>[]; Missing ].</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_SPECIALUNKNOWN">
      <summary>:x; Unknown x.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_STACKOVERFLOW">
      <summary>Evaluation stack overflow.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_SYNTAXERROR">
      <summary>Syntax error in expression.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_TAGMISSINGCLOSE">
      <summary>{}; Tag missing }.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_TAGOUTOFRANGE">
      <summary>\n; n out of range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_TOOMANYTAGS">
      <summary>{}; Too many tagged expressions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS">
      <summary>Sets the read and write status of a text buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS.ROSTATUS_NotReadOnly">
      <summary>Text buffer can be written to.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS.ROSTATUS_ReadOnly">
      <summary>Text buffer is read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS.ROSTATUS_Unknown">
      <summary>Determine the read-only status by checking with the associated text buffer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags">
      <summary>Specifies the state of a selection relative to another layer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_BUFFER">
      <summary>Coordinates relative to the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_DEFAULT">
      <summary>Coordinates relative to the top view layer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_RELATIVE_LAYER">
      <summary>Coordinates relative to the layer specified in <paramref name="pReference" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_SET_TO_NEAREST_LOCAL">
      <summary>For RSS_BUFFER or RSS_RELATIVE_LAYER, tells the view to put the caret at the nearest local position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_SET_WITHOUT_SCROLLING">
      <summary>Flags for <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.SetRelativeSelectionState(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])" /> tells the view to not scroll to force the selection to be visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_TOP_LAYER">
      <summary>Coordinates relative to the top view layer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_TRACKSEL">
      <summary>Coordinates relative to tracking selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssBuffer">
      <summary>Same as RSS_BUFFER. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssDefault">
      <summary>Same as RSS_DEFAULT. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssRelativeLayer">
      <summary>Same as RSS_RELATIVE_LAYER. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssTopLayer">
      <summary>Same as RSS_TOP_LAYER. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssTrackSel">
      <summary>Same as RSS_TRACKSEL. For compatibility.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS">
      <summary>Specifies options for modifying text during a replace operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfClientSuppressFormatting">
      <summary>Stop <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents.OnReplace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])" /> listeners from formatting code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfDefault">
      <summary>New line normalization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfDoNotNormalizeNewlines">
      <summary>Do not normalize new lines.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfInterimText">
      <summary>This flag communicates to <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])" /> that the inserted text is interim text from the Input Method Editor (IME). This affects undo item merging. Subsequent text overwrites the interim text and the undo items need to be merged in a way that reflects this.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfKeepMarkers">
      <summary>Retain existing markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfNormalizeTabsAndSpaces">
      <summary>(Not yet supported) Normalize tabs and spaces.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfSyntacticReformat">
      <summary>(Not yet supported) Reformat syntax.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS">
      <summary>Provides flags for <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.ResolveName(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS.RNF_BREAKPOINT">
      <summary>Resolve names for the breakpoint.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE">
      <summary>Represents the state of a selection so that it can be restored to that state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.dwFlags">
      <summary>Combination of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS" /> enumeration values.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.dwReserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iActiveCol">
      <summary>Index of the active column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iActiveLine">
      <summary>Index of the active line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iAnchorCol">
      <summary>Index of the anchor column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iAnchorLine">
      <summary>Index of the anchor line.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS">
      <summary>Represents the state of a selection so that it can be restored to that state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS.ssfColumn">
      <summary> This is a column selection state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS.ssfDefault">
      <summary> Default selection state.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS">
      <summary>Specifies how a window pane is to be split.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_ADJUSTABLE">
      <summary>Split pane is adjustable. (default)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_FIXED">
      <summary>Split pane is fixed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_HORIZONTAL">
      <summary>Split is horizontal. (default)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_MAKEPRIMARY">
      <summary>Split pane is the primary pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_MAKESECONDARY">
      <summary>Split pane is the secondary pane. (default)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_VERTICAL">
      <summary>Split is vertical.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE">
      <summary>Represents different changes to the splitter. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_ANCESTORATTACHED">
      <summary>The split pane is attached to its parent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_ANCESTORDETACHED">
      <summary>The splitter is detached from its parent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_BEGINSIZE">
      <summary>The initial size of the split pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_ENDSIZE">
      <summary>The final size of the split pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_LBUTTONDBLCLK">
      <summary>The split pane was double-clicked</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.StorageLoadFlags">
      <summary>Flags indicating type of storage load.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.StorageLoadFlags.slfDefault">
      <summary>Default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.StorageLoadFlags.slfReload">
      <summary>Reload.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsCodeWindow">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsCodeWindowManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsLanguageFilter">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsLinkedUndoTransactionManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsTextManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager" /> and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT">
      <summary>Specifies a synthetic region event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT.sreRegionReloaded">
      <summary>The text of a Synthetic region was reloaded and may no longer be at an appropriate location.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TabStop">
      <summary>Holds information about tab stops.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.cEl">
      <summary>The number of elements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.dwFlags">
      <summary>Specifies tab stop flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TabStopFlags" /> enumeration..</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.iCol">
      <summary>The column index of the tab stop.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.iRepeatWidth">
      <summary>The repeat width.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TabStopFlags">
      <summary>Contains flags defining tab stop properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStopFlags.USE_DEFAULT_REPEAT">
      <summary>Use the default repeat value.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextAddress">
      <summary>Defines a text address in terms of a character and a line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextAddress.index">
      <summary>Character position defining the text address.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextAddress.line">
      <summary>Line position defining the text address.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors">
      <summary>General definitions for text buffer errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_DEST_TOO_SMALL">
      <summary>The memory block passed in was too small.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_LOCKED">
      <summary>The buffer was locked for writing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_READONLY">
      <summary>The buffer has been marked as read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_READONLY_REGION">
      <summary>A region has been marked as read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_SCC_READONLY">
      <summary>The file backing the buffer is under source code control and checked in.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_TIMEOUT">
      <summary>Timed out waiting for access.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.MARKER_E_BUFFERDESTROYED">
      <summary>You are trying to manipulate a marker whose buffer has been destroyed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.MARKER_E_INVALIDATED">
      <summary>You are trying to manipulate an invalid marker.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags">
      <summary>Specifies text buffer initialization flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_CUSTOMSTORAGE">
      <summary>Initialize for custom storage.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_DEFAULT">
      <summary>Default initialization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_INITTEXT">
      <summary>Initialize for text buffer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextFindMode">
      <summary>Specifies text find / replace flags shared by both the buffer and view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_BACKWARDS">
      <summary>Search backwards.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_IN_SELECTION">
      <summary>Search within the current selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_MATCH_CASE">
      <summary>Match text case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_NEW_SEARCH">
      <summary>Start a new search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_REG_EXPR">
      <summary>Search involves a regular expression.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_WHOLE_WORD">
      <summary>Search only for the whole word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_WRAP_SEARCH">
      <summary>Search even if target text wraps.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextLineChange">
      <summary>Provides settings for tracking changes to any text line in the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iNewEndIndex">
      <summary>Endpoint of the inserted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iNewEndLine">
      <summary>End line of the inserted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iOldEndIndex">
      <summary>End point of the deleted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iOldEndLine">
      <summary>End line of deleted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iStartIndex">
      <summary>Start point of the old and new text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iStartLine">
      <summary>Start line of the old and new text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSelMode">
      <summary>Determines whether stream or box selection mode is being used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSelMode.SM_BOX">
      <summary>Specifies a box selection. To create a box selection in the core text editor, press the ALT key while you select text with your mouse.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSelMode.SM_STREAM">
      <summary>Specifies a stream selection. To create a stream selection in the core text editor, simply select text with your mouse.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan">
      <summary>Defines a span of text based on character and line index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iEndIndex">
      <summary>Ending character index within the line. This value must be less than or equal to the length of the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iEndLine">
      <summary>Ending line index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iStartIndex">
      <summary>Starting character index within the line. This value must be less than or equal to the length of line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iStartLine">
      <summary>Starting line index.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewAction">
      <summary>Specifies text positioning within a view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewAction.TVA_CENTERLINES">
      <summary>Place the specified lines of text in the center of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewAction.TVA_SETCARETPOS">
      <summary>Caret (insertion point) management.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors">
      <summary>General definitions for text view errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN">
      <summary>The location you referenced (moving selection to, scrolling into view, etc.) is not presently visible in this view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_NO_BOOKMARKS">
      <summary>There are no bookmarks to navigate to or delete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_NO_DEBUGGER">
      <summary>There is no debugger available to handle the requested command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_USERREADONLY">
      <summary>This file cannot be modified in the editor.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags">
      <summary>Specifies view options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_DEFAULT">
      <summary>No view-owned scrollbars, and no forced settings.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_HSCROLL">
      <summary>Indicates that the view should have a horizontal scrollbar. This value is equivalent to WS_HSCROLL from the Platform SDK. Note that this setting is different from the MDI child scrollbars used by the text editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_DRAGDROPMOVE">
      <summary>Use drag and drop move setting</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_HOTURLS">
      <summary>Use the Hot URLs setting</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_INDENT_MODE">
      <summary>Use the auto-indent suppression setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_OVERTYPE">
      <summary>Use overtype mode setting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_SELECTION_MARGIN">
      <summary>Use the selection margin setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_STREAM_SEL_MODE">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_VIRTUAL_SPACE">
      <summary>Use the virtual space setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_VISIBLE_WHITESPACE">
      <summary>Use visible white space setting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_WIDGET_MARGIN">
      <summary>If you wish to force a certain setting upon a view, regardless of the user's editor preference settings, use these flags along with a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> pointer into <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])" /> method to force a given setting. Use the widget margin setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_UPDATE_STATUS_BAR">
      <summary>Tells the view to update the status bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_VSCROLL">
      <summary>Indicates that the view should have a vertical scrollbar. This value is equivalent to WS_VSCROLL from the Platform SDK.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference">
      <summary>Determines where the tip window is placed relative to the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_ABOVE">
      <summary>Tip window is positioned above the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_BELOW">
      <summary>Tip window is positioned below the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_DOCKED">
      <summary>Not implemented. This value defaults to TPP_ABOVE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_LEFT">
      <summary>Tip window is positioned to the left of the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_RIGHT">
      <summary>Tip window is positioned to the right of the context stream.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA">
      <summary>Sets the size and position of a tip window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA.dwPosition">
      <summary>Position of the tip window relative to the context stream. For a list of <paramref name="dwPosition" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA.size">
      <summary>Dimensions of the tip window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses">
      <summary>Defines success codes for language services to return for tool tips.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses.TIP_S_ONLYIFNOMARKER">
      <summary>Indicates that any error or success associated with a code marker takes precedence over any tool tip error or success.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags">
      <summary>Specifies tip window options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags.UTW_CONTENTCHANGED">
      <summary>Data displayed in window has changed (size will be re-queried).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags.UTW_CONTEXTCHANGED">
      <summary>Context stream is different.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags.UTW_DISMISS">
      <summary>Tip window should be dismissed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.UndoErrors">
      <summary>General definitions for undo errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UndoErrors.UNDO_E_CLIENTABORT">
      <summary>Undo action terminated with client abort.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags">
      <summary>Specifies completion set flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_CUSTOMCOMMIT">
      <summary>Indicates that the language service handles how an item selected from the completion box is entered into the text editor. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)" /> to commit completions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_CUSTOMMATCHING">
      <summary>Indicates that the language service handles custom completion matching of text typed by the user. Use IVsCompletionSet::<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)" /> to manage selections. If you do not specify CSF_CUSTOMMATCHING, then the view handles matching text to the available options in the completion set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_HAVEDESCRIPTIONS">
      <summary>Provides a tip for items in the completion box. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDescriptionText(System.Int32,System.String@)" /> to provide text for at least some of the entries.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_INITIALEXTENTKNOWN">
      <summary>Indicates that the language service knows where on a line it wants to display items, and where the word boundaries are. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)" /> to determine the initial word extent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_NOCASEMATCHING">
      <summary>Do not apply case sensitive matching.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_NOCASEUNIQUENESS">
      <summary>Do not apply case or character matching to determine uniqueness (for word completion). For example, "WEAR" could be matched to "year" using this setting, if "year" was the closest character match.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.GBM_SELECT">
      <summary>The returned index should be selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.GBM_UNIQUE">
      <summary>The returned index is the only appropriate match.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_COMPLETEWORD">
      <summary>Attempt word completion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_EXTENTCHANGED">
      <summary>Extent changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_FLAGSCHANGED">
      <summary>Flags have changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_NAMESCHANGED">
      <summary>Names or name count has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES">
      <summary>Supplies settings for all text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fAutoDelimiterHighlight">
      <summary>Determines whether automatic delimiter highlighting is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fDragDropEditing">
      <summary>Determines whether drag/drop editing is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fDragDropMove">
      <summary>Determines whether drag/drop moves are allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fGoToAnchorAfterEscape">
      <summary>Determines whether the user is sent to an anchor after pressing the ESC key.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fOvertype">
      <summary>Determines whether insert or overtype is enabled. This value is not persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fSelectionMargin">
      <summary>Determines whether the selection margin is displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fUndoCaretMovements">
      <summary>Determines whether caret movements and text selections are included in undo list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fVisibleWhitespace">
      <summary>Determines whether spaces and tabs are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fWidgetMargin">
      <summary>Determines whether the widget margin is shown.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindow">
      <summary>Allows manipulation of a code window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass">
      <summary>Allows manipulation of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.#ctor">
      <summary>Creates a new instance of the code window class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.Close">
      <summary>Closes the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the buffer used by all views in the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetEditorCaption(Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS,System.String@)">
      <summary>Returns the editor caption to which editors can append custom text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnly">[in] Gets the read and write status of the text buffer. For a list of <paramref name="dwReadOnly" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS" /></param>
      <param name="pbstrEditorCaption">[out] Pointer to a BSTR that contains the caption text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetLastActiveView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the last active view of the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface that represents the last active view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetPrimaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the top (or primary) view of a split code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the primary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetSecondaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the bottom (or secondary) view of a split code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the secondary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetViewClassID(System.Guid@)">
      <summary>Returns the text view class to change or query.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pclsidView">[out] Pointer to the class identifier (CLSID) of the text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.SetBaseEditorCaption(System.String[])">
      <summary>Appends custom text to the editor caption.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBaseEditorCaption">[in] Pointer to the base editor caption string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Sets the text buffer for all views in the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface of the text buffer to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.SetViewClassID(System.Guid@)">
      <summary>Sets the text view class to change or query.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsidView">[in] Class identifier of the text view to change.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImages">
      <summary>Obtains default Buttonbar images.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass">
      <summary>Obtains default Buttonbar images.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass.GetButtonCount(System.Int32@)">
      <summary>Returns the number of buttons on a Buttonbar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcButtons">[out] Number of buttons.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass.GetImageList(System.IntPtr@)">
      <summary>Returns the Buttonbar image list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImageList">[out] Handle of the image list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDiffLayer">
      <summary>Coclass definition.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDiffLayerClass">
      <summary>Class definition.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDiffLayerClass.#ctor">
      <summary>Creates an instance of the class.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBar">
      <summary>Provides control of the drop-down bar at the top of a code window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass">
      <summary>Provides control of the drop-down bar at the top of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.#ctor">
      <summary>Create a new instance of a dropdown bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.Attach(System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient)">
      <summary>Creates the window and drop-down combination and sets up a link between the drop-down bar and its client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, it returns an error code.</returns>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="cCombos">[in] The Drop-down bar/Window combo.</param>
      <param name="pClient">[in] Pointer to the Drop-down bar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.Detach">
      <summary>Breaks the link between the drop-down bar and its client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.GetClient(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient@)">
      <summary>Returns the client associated with this drop-down bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, it returns an error code.</returns>
      <param name="ppClient">[out] Pointer to the client. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.GetCurrentSelection(System.Int32,System.Int32@)">
      <summary>Returns the entry that is currently selected in a given combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="piCurSel">[out] Currently selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.RefreshCombo(System.Int32,System.Int32)">
      <summary>Forces a repaint of a combo, specifying the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.SetCurrentSelection(System.Int32,System.Int32)">
      <summary>Sets the current selection in the given drop-down combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID">
      <summary>Sets options for text editor property containers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_FIRST">
      <summary>First VSEDITPROPID_ value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_FrameOpt_SuppressResizeWidget">
      <summary>BOOLEAN. Specifies whether frame has a resize widget in the bottom right corner of the window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_LAST">
      <summary>Last VSEDITPROPID_ value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_DebuggerLanguages">
      <summary>UNK. Query IUnknown for <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> for the associated debugger languages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_SupportCF_HTML">
      <summary>BOOLEAN. Specifies whether the language service supports the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_SupportCF_HTML" /> clipboard format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_SuppressMultipleCodeWindows">
      <summary>BOOLAN. Specifies whether the Window/NewWindow command is disabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewComposite_AllCodeWindowDefaults">
      <summary>BOOLEAN. Must be TRUE. Initial settings to code window defaults.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGeneral_ColorCategory">
      <summary>BSTR. Category from which to load color info.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGeneral_FontCategory">
      <summary>BSTR. Category from which to load font info.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_AutoScrollCaretOnTextEntry">
      <summary>BOOLEAN. Determines whether the caret scrolls based on the last line of the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_Overtype">
      <summary>BOOLEAN. Overtype or insert. NOT persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_SelectionMargin">
      <summary>BOOLEAN. Display selection margin. The selection margin is located between the widget margin and text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_VisibleWhitespace">
      <summary>BOOLEAN. Show spaces, tabs, and so on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewLangOpt_RawTextDisplay">
      <summary>BOOLEAN. Text is displayed in raw mode. No bi-directional layout, shaping, or combining.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewLangOpt_VirtualSpace">
      <summary>BOOLEAN. Specifies whether virtual space navigation or selection is active.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewLangOpt_WordWrap">
      <summary>BOOLEAN. Specifies whether word wrap is on.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsFinder">
      <summary>Finds a text image.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass">
      <summary>Finds a text image.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.AttachTextImage(System.Object)">
      <summary>Attaches a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextImage">[in] Object to attach. <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> or <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.Detach">
      <summary>Detaches a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.Find(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
      <summary>Finds a text image within a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFindHow">[in] Instructions for the search. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW" /> enumeration.</param>
      <param name="ptsMatch">[in] The span or extent of text to search.</param>
      <param name="pgrfResult">[out] Enumeration value indicating result of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetMatch(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Gets a text span match.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[out] Current match. Does not require <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetMatchedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Gets matched text spans.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSpans">[out] Bulk find list. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on Find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetState(System.Int32@,System.UInt32@,System.UInt32@)">
      <summary>Gets state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcFound">[out] Number of state values found.</param>
      <param name="pResult">[out] Enumeration value indicating result of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR" /> enum.</param>
      <param name="pState">[out] Enumeration value indicating state of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE" /> enum</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetTaggedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Returns tagged text spans.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppTags">[out] Regex tagged expressions. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.Init(System.UInt32,System.String,System.Int32,System.UInt32@)">
      <summary>Sets the find string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Flag containing find options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enum.</param>
      <param name="pszFindPattern">[in] Pattern to search for.</param>
      <param name="fReinit">[in] true for a new pattern.</param>
      <param name="pResult">[out] Enumeration value indicating result of the operation. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.SetPosition(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextAddress)">
      <summary>Sets search position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fp">[in] Search position. Values re taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS" /> enum.</param>
      <param name="ta">[in] The text address.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.SetScope(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet)">
      <summary>Restricts search to the span set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpanScope">[in] Scope of the search. Specified as an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayer">
      <summary>Adds or enumerates hidden text sessions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass">
      <summary>Adds or enumerates hidden text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.AddHiddenRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions[])">
      <summary>Adds a new hidden region to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdateFlags">[in] Specifies whether the hidden region is added to the Undo/Redo stack. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" /></param>
      <param name="cRegions">[in] Number of hidden regions to add to the text buffer.</param>
      <param name="rgHidReg">[in, size_is (<paramref name="cRegions" />)] Caller-allocated array of outlining regions to add. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" />.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that can be used to enumerate the hidden regions in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.EnumHiddenRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)">
      <summary>Returns a list of the current hidden regions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFindFlags">[in] Options for finding hidden regions. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS" />.</param>
      <param name="dwCookie">[in] Specifies the client-defined hidden region type to find. Specify a value that matches the client-defined identifier specified during the creation of the new hidden region (that is, the <paramref name="dwClient" /> member in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure).</param>
      <param name="ptsRange">[in] Specifies the range of text over which to enumerate the hidden regions.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that is used to enumerate hidden regions of specified type over the specified range in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.Terminate">
      <summary>Ends the hidden text session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.UnadviseClient">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle">
      <summary>Defines indent styles.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle.vsIndentStyleDefault">
      <summary>Default indent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle.vsIndentStyleNone">
      <summary>No indent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle.vsIndentStyleSmart">
      <summary>Smart indent.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserData">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass.GetData(System.Guid@,System.Object@)">
      <summary>Returns user data from a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="pvtData">[out] Pointer to a VARIANT containing the user data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass.SetData(System.Guid@,System.Object)">
      <summary>Set user data to a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="vtData">[in] Data to be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindow">
      <summary>Provides a method tip window for an item in a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass">
      <summary>Provides a method tip window for an item in a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.Dismiss">
      <summary>The window is being dismissed by the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position, <paramref name="piPos." /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Returns the preferred sizes for the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out]The bounding rectangle of the tip window in screen coordinates.</param>
      <param name="pSizeData">[out]Size and position of the tip window. For a list of <paramref name="pSizeData" /> values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip  window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in]Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.SetMethodData(Microsoft.VisualStudio.TextManager.Interop.IVsMethodData)">
      <summary>Sets method data to display in the method tip window and releases previous method data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMethodData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData" /> interface, which is used to set method and parameter information for the method tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information not provided. Do not use this method.</summary>
      <returns>Do not use.</returns>
      <param name="hwnd">Do not use.</param>
      <param name="iMsg">Do not use.</param>
      <param name="wParam">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSplitRoot">
      <summary>Represents the root of the split pane.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass">
      <summary>Represents the root of the split pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.GetPane(Microsoft.VisualStudio.TextManager.Interop.PANETYPE,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)">
      <summary>Gets the split pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="PANETYPE">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.PANETYPE" /> that specifies which pane to get.</param>
      <param name="ppPane">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.GetRootSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Gets the root splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppPane">[out] The splitter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.GetWindowHandle(System.IntPtr@)">
      <summary>Gets the window handle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phwnd">[out] The window handle.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayer">
      <summary>Handles the addition of and communication with synthetic text sessions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass">
      <summary>Handles the addition of and communication with synthetic text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.AddSyntheticRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions[])">
      <summary>Adds synthetic text sessions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdateFlags">[in] Update flags. For values of <paramref name="dwUpdateFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS" /> enum.</param>
      <param name="cRegions">[in] Number of regions to add.</param>
      <param name="rgSynthReg">[in] array of <paramref name="cRegions" /> structs defining the new regions.</param>
      <param name="ppEnum">[out] May be null; if non-null, returns an enum of the new regions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.EnumSyntheticRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions@)">
      <summary>Returns a static snapshot list of synthetic regions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFindFlags">[in] Indicates how to find the region. For values of <paramref name="dwFindFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS" /> enum.</param>
      <param name="dwCookie">[in] Additional search parameter; can be used to search for a specific client DWORD.</param>
      <param name="ptsRange">[in] Search parameter for finding text.</param>
      <param name="ppEnum">[out] The resulting enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.Terminate">
      <summary>Tells the session to sever its link (and drop its COM reference) to the client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.UnadviseClient">
      <summary>Tells the session to sever its link, and drop its COM reference, to the client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer">
      <summary>Acts as the base interface for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object and provides general information about the text buffer's properties. Provides read and write access to the text buffer using two-dimensional coordinates.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass">
      <summary>Acts as the base interface for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object and provides general information about the text buffer's properties. Provides read and write access to the text buffer using two-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.AdviseTextLinesEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents,System.UInt32@)">
      <summary>Method information not provided. Do not use this method.</summary>
      <returns>Do not use.</returns>
      <param name="pSink">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CanReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Tests whether a given editing operation such as copy or cut can succeed.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CopyLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Puts the specified span of text into a caller-allocated buffer (an array).</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszBuf">[in] Pointer to a caller-allocated buffer.</param>
      <param name="pcchBuf">[in, out] Pointer to a count of Unicode characters — not bytes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CreateEditPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates an <see cref="T:EnvDTE.EditPoint" /> object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Line number of the <see cref="T:EnvDTE.EditPoint" /> object in the text buffer.</param>
      <param name="iIndex">[in] Character index of the <see cref="T:EnvDTE.EditPoint" /> object within the line.</param>
      <param name="ppEditPoint">[out] Pointer to the IDispatch interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CreateLineMarker(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker[])">
      <summary>Creates a marker of a given type over the specified region.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iMarkerType">[in] Type of marker to create.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pClient">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface. Implement this interface to advise the text buffer that you want to receive notification of marker events.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker). If this parameter is null, then the marker is owned by the text buffer. An example of a buffer-owned marker is a temporary bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CreateTextPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates a <see cref="T:EnvDTE.TextPoint" /> object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Specified line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="iIndex">[in] Specified index position within the line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="ppTextPoint">[out] Pointer to the <see cref="T:EnvDTE.TextPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.EnumMarkers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers@)">
      <summary>Enumerates a specific set of text line markers, based on the criteria specified.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iMarkerType">[in] This parameter is ignored if a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES" /> is specified for the <paramref name="dwFlags" /> parameter. Otherwise, this parameter indicates the marker type to find.</param>
      <param name="dwFlags">[in] Enumeration options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" />.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.FindMarkerByLineIndex(System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker@)">
      <summary>Locates a marker of a given type based on a line index.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iMarkerType">[in] Specifies the type of marker to find.</param>
      <param name="iStartingLine">[in] Starting line.</param>
      <param name="iStartingIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="dwFlags">[in] Specifies the direction to search for the marker. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS" />.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Buffer line to access. This is a zero-based value.</param>
      <param name="pLineData">[in,out] The filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in, optional] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> to fill the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the line range that you specify. If you want syntax coloring and marker attributes to return in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure (<paramref name="pLineData" />), then you need to pass in this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] The line about which information is requested. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSubset" /> is specified for <paramref name="dwFlags" />.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[in,out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in,out] Pointer to a valid <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns the specified span of text in a BSTR.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="pbstrBuf">[out] Text to insert, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Returns text marker data for the specified line range within the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iTopLine">[in] Top line of the marker data.</param>
      <param name="iBottomLine">[in] Bottom line of the marker data.</param>
      <param name="pMarkerData">[out] Pointer to filled <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the range indicated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Method information not provided. Do not use this method.</summary>
      <returns>Do not use.</returns>
      <param name="pSpanIn">Do not use.</param>
      <param name="pSpanOut">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetSize(System.Int32@)">
      <summary>Gets the buffer size.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_LockBuffer">
      <summary>Locks the text buffer for the purpose of access control.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLinesReserved1(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],System.Int32)">
      <summary>Method information not provided. Do not use this method.</summary>
      <returns>Do not use.</returns>
      <param name="iLine">Do not use.</param>
      <param name="pLineData">Do not use.</param>
      <param name="fAttributes">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.LockBuffer">
      <summary>Locks the text buffer for the purpose of access control.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReleaseLineData(Microsoft.VisualStudio.TextManager.Interop.LINEDATA[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pLineData">[in] Pointer or reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReleaseMarkerData(Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Cleans up the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pMarkerData">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReloadLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Replaces text without deleting markers.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be les than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer or reference to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] The range of new text inserted. Describes a starting point and an ending point, in terms of a line and index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enum.</param>
      <param name="iStartLine">[in] Starting line</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert, if any.</param>
      <param name="iNewLen">[in] Number of characters to insert, if any.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>Reserved in the Vtable for future use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.UnadviseTextLinesEvents(System.UInt32)">
      <summary>Method information not provided. Do not use this method.</summary>
      <returns>Do not use.</returns>
      <param name="dwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextImage">
      <summary>Represents the image that is persisted and unpersisted. Represents the range of text that is viewable and editable by text editor views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass">
      <summary>Supports text string matching.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.AdviseTextImageEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents,System.UInt32@)">
      <summary>Registers the environment to receive notification of text image changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents" /> interface on the object requesting notification of text image events.</param>
      <param name="pCookie">[out] Pointer to an abstract handle for the referenced event sink. This value is required to unadvised the event sink using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnadviseTextImageEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetCharSize(System.Int32@)">
      <summary>Returns the number of characters in the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcch">[out] Pointer to a character count of the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetLine(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfGet">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] Integer containing the line number. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the environment and filled in by the GetLine method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetLineLength(System.Int32,System.Int32@)">
      <summary>Returns the length of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line number.</param>
      <param name="piLength">[out] Pointer to an integer containing the character count of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetLineSize(System.Int32@)">
      <summary>Returns the number of lines in the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcLines">[out] Pointer to a count of lines in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetOffsetOfTextAddress(Microsoft.VisualStudio.TextManager.Interop.TextAddress,System.Int32@)">
      <summary>Return the buffer address of a given text address.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ta">[in] Specifies the requested text address.</param>
      <param name="piOffset">[out] Pointer to an integer containing the offset from the start of the text image buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetSpanLength(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>Returns the number of characters in a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pcch">[out] Pointer to a character count of the text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.UInt16[])">
      <summary>Returns the text of a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Number of characters to return.</param>
      <param name="psz">[out] Pointer to a null terminated string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetTextAddressOfOffset(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextAddress[])">
      <summary>Returns the text address of a given buffer address.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iOffset">[in] Integer containing the offset from the start of the text image buffer.</param>
      <param name="pta">[out] Pointer to the text address.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetTextBSTR(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Returns the text of a text span as a BSTR</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pbstrText">[out] Pointer to a BSTR containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.LockImage(System.UInt32)">
      <summary>Notifies that the text image is in use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.ReleaseLine(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.Replace(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Notification of a text span replacement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Double word containing flags. For future use. Set to zero.</param>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Count of characters in <paramref name="pchText" />.</param>
      <param name="pchText">[in] Pointer to a text string.</param>
      <param name="ptsChanged">[out] Specifies the modified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.UnadviseTextImageEvents(System.UInt32)">
      <summary>Cancels the environment's registration to receive notifications of text image changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="Cookie">[in] Abstract handle for the referenced event sink.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.UnlockImage(System.UInt32)">
      <summary>Notifies that the text image is not in use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorage">
      <summary>Represents the image that is persisted and unpersisted. Represents the range of text that is viewable and editable by text editor views. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage" /> and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass">
      <summary>Represents the image that is persisted and unpersisted. Represents the range of text that is viewable and editable by text editor views. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage" /> and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_Alloc(System.Int32)">
      <summary>Allocates space of specified size for persistent disk image storage.</summary>
      <returns>Returns a pointer to the allocated text image space.</returns>
      <param name="iSize">[in] The size of the space to be allocated</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_CloseFullTextScan">
      <summary>Closes the full text scan of the image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_Free(System.IntPtr)">
      <summary>Frees space used by the persistent disk image.</summary>
      <param name="p">[in] Pointer to the image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_FullTextRead(System.String@,System.Int32@)">
      <summary>Reads the full text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszText">[out] The text image.</param>
      <param name="piLength">[out] The length of the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_GetLength">
      <summary>Gets the length of the text image.</summary>
      <returns>Returns the number of Unicode characters in the image.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_LoadText(System.String,System.Int32,System.UInt32)">
      <summary>Loads the specified text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] The text image.</param>
      <param name="iLength">[in] The length of the text image.</param>
      <param name="dwFlags">[in] Flags indicating options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_OpenFullTextScan">
      <summary>Open a full scan of the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_Realloc(System.IntPtr@,System.Int32)">
      <summary>Reallocates space for the specified text image.</summary>
      <returns>Returns a pointer to the reallocated text image space.</returns>
      <param name="p">[in, out] The specified text image.</param>
      <param name="iSize">[in] The size of the specified text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Attach(System.Object)">
      <summary>Attaches a text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_CopyText(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Copy the specified text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Line containing the start of text to be copied.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be &lt;= length of line.</param>
      <param name="iBufMax">[in] Size of <paramref name="pzeDest" /> destination buffer.</param>
      <param name="pszDest">[in] Destination buffer.</param>
      <param name="pcCharsCopied">[out] Number of characters copied.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Detach">
      <summary>Detach the storage buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Find(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Find the specified text in the indicated span. Flags indicating search options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to locate.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iFlags">[in] Flags indicating search options.</param>
      <param name="piLine">[out] Line containing the start of the located text.</param>
      <param name="piCol">[out] Column of the start of the located text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetCharsInSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>Gets the number of characters in the specified span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpanToMeasure">[in] The span within which to count the characters.</param>
      <param name="piChars">[out] The number of characters in the span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLanguageServiceID(System.Guid@)">
      <summary>Gets the GUID of the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] The GUID of the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLength">
      <summary>Gets the length of the storage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Gets the length of the specified line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Index of line of interest.</param>
      <param name="piLength">[out] Length of line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLineCount">
      <summary>Gets the storage line count.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Gets the line data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags indicating line properties.</param>
      <param name="iLine">[in] The line for which to get data.</param>
      <param name="iStartIndex">[in] The start index in the line.</param>
      <param name="iEndIndex">[in] The end index in the line.</param>
      <param name="pLineData">[out] The obtained line data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Gets the line index of a position in the storage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] The position of interest.</param>
      <param name="piLine">[out] The line number of the position.</param>
      <param name="piIndex">[out] The index of the position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Gets the line index of a position in the storage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] The line number of the position.</param>
      <param name="iIndex">[out] The index of the position.</param>
      <param name="piPosition">[out] The position of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_RefreshColorization(System.Int32,System.Int32,System.Int32@)">
      <summary>Refresh the colorization of the specified set of lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] The top line in the set.</param>
      <param name="iBotLine">[in] The bottom line in the set.</param>
      <param name="piLastAffectedLine">[out] The last line affected by the colorization refresh.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases previously obtained line data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] The line data to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Replace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Replace/change the text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCI">[in] Information about the change/replace request.</param>
      <param name="ptsOut">[out] The changed text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_SetLanguageServiceID(System.Guid@)">
      <summary>Sets the language service for the storage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="guidLangService">[in] The GUID of the language service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextManager">
      <summary>Provides general services for anyone wanting information about the active text views. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass">
      <summary>Provides general services for anyone wanting information about the active text views. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.#ctor">
      <summary>Create a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.AdjustFileChangeIgnoreCount(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32)">
      <summary>Increases or decreases the ignore count for file changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which to set the ignore count.</param>
      <param name="fIgnore">[in] If true, then the ignore count is increased by a value of one. If false, then the ignore count is decreased by a value of one for the referenced buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.AttemptToCheckOutBufferFromScc(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pBufData">Do not use.</param>
      <param name="pfCheckoutSucceeded">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.AttemptToCheckOutBufferFromScc2(System.String,System.Int32@,System.Int32@)">
      <summary>Attempts to check out a file from source code control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Filename to check out.</param>
      <param name="pfCheckoutSucceeded">[out] Returns true if buffer checkout succeeded.</param>
      <param name="piStatusFlags">[out]Additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. If you pass in a value of null for this parameter, then a <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag is not returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.CreateSelectionAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction@)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pBuffer">Do not use.</param>
      <param name="ppAction">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Enumerate text buffers. Not yet implemented.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the IVsEnumBuffers interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumIndependentViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews@)">
      <summary>Enumerates independent views.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews" /> interface to enumerate the number of independent views.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumLanguageServices(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Enumerates the registered language services ids.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews@)">
      <summary>Enumerates views that are provided with the core editor and are associated with a particular text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which views should be returned. Pass in a value of null to return all views for all buffers.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetActiveView(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the active or previously active view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
      <param name="pBuffer">[in] Pass null for <paramref name="pBuffer" /> to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetBufferSccStatus(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pBufData">Do not use.</param>
      <param name="pbNonEditable">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetBufferSccStatus2(System.String,System.Int32@,System.Int32@)">
      <summary>Returns information on whether a buffer is under source code control and, if so, whether the file is checked in.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Filename of interest.</param>
      <param name="pbNonEditable">[out] If true, then the file can not be modified (for example, if the file is under source control and checked in). If false, then the file can be edited.)</param>
      <param name="piStatusFlags">[out] Returns additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. Pass in a value of null for this parameter if you do not want the return value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetMarkerTypeCount(System.Int32@)">
      <summary>Returns the number of registered marker types within all buffers associated with the core text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerTypeCount">[out] Pointer to a count of the marker types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetMarkerTypeInterface(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType@)">
      <summary>Maps a numeric marker type ID to an interface that can be used to probe for specific information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerTypeID">[in] The marker type ID, such as from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)" />.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" /> interface, which has been referenced with AddReference.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetRegisteredMarkerTypeID(System.Guid@,System.Int32@)">
      <summary>Returns a registered marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidMarker">[in] GUID identifying the caller's implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" />, which provides information about the new category of markers.</param>
      <param name="piMarkerTypeID">[out] Number of the marker type in the marker type collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetShortcutManager(Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager@)">
      <summary>Returns the shortcut manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppShortcutMgr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager" /> interface, which is used to manage shortcuts in the task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[out] Pointer to the view preferences. For more information about <paramref name="pViewPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />.</param>
      <param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about <paramref name="pFramePrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />.</param>
      <param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about <paramref name="pLangPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />.</param>
      <param name="pColorPrefs">[in, out] Pointer to the font color preferences. For more information about <paramref name="pColorPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.IgnoreNextFileChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Notifies that the next file change is to be ignored.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.MapFilenameToLanguageSID(System.String,System.Guid@)">
      <summary>Given a file name, determines the registered language service, if one exists, that understands it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File name associated with the language service.</param>
      <param name="pguidLangSID">[out] Pointer to the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.NavigateToLineAndColumn(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iStartRow">[in] Starting line for the selection to locate.</param>
      <param name="iStartIndex">[in] Starting index for the selection to locate.</param>
      <param name="iEndRow">[in] Ending line for the selection to locate.</param>
      <param name="iEndIndex">[in] Ending index for the selection to locate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.NavigateToPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and puts the selection on the specified linear position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iPos">[in] Linear position in buffer on which to put the caret.</param>
      <param name="iLen">[in] Length of selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.RegisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a text buffer with the text manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface to register.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.RegisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a view from a source other than the core editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.RegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pView">Do not use.</param>
      <param name="pBuffer">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SetFileChangeAdvise(System.String,System.Int32)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pszFileName">Do not use.</param>
      <param name="fStart">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Sets user preferences.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />. Can be null if view preferences are not being set.</param>
      <param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />. Can be null if frame preferences are not being set.</param>
      <param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />. Can be null if language preferences are not being set.</param>
      <param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SuspendFileChangeAdvise(System.String,System.Int32)">
      <summary>Suspends file change notifications for a given file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File on which to suspend notification of changes made.</param>
      <param name="fSuspend">[in] true if change notification is suspended on the specified file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.UnregisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that is being unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.UnregisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters an externally-created view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.UnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pView">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextPackage">
      <summary>Provides general services for anyone wanting information about the active text views. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass">
      <summary>Provides general services for anyone wanting information about the active text views. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.AdjustFileChangeIgnoreCount(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32)">
      <summary>Increases or decreases the ignore count for file changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which to set the ignore count.</param>
      <param name="fIgnore">[in] If true, then the ignore count is increased by a value of one. If false, then the ignore count is decreased by a value of one for the referenced buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.AttemptToCheckOutBufferFromScc(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pBufData">Do not use.</param>
      <param name="pfCheckoutSucceeded">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.AttemptToCheckOutBufferFromScc2(System.String,System.Int32@,System.Int32@)">
      <summary>Attempts to check out a file from source code control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Filename to check out.</param>
      <param name="pfCheckoutSucceeded">[out] Returns true if buffer checkout succeeded.</param>
      <param name="piStatusFlags">[out]Additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. If you pass in a value of null for this parameter, then a <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag is not returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.CreateSelectionAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction@)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pBuffer">Do not use.</param>
      <param name="ppAction">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Enumerates text buffers. Not yet implemented.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the IVsEnumBuffers interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumIndependentViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews@)">
      <summary>Enumerates independent view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews" /> interface to enumerate the number of independent views.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumLanguageServices(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Enumerates the registered language service ids.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews@)">
      <summary>Enumerates views that are provided with the core editor and are associated with a particular text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which views should be returned. Pass in a value of null to return all views for all buffers.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetActiveView(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the active or previously active view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
      <param name="pBuffer">[in] Pass null for <paramref name="pBuffer" /> to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetBufferSccStatus(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pBufData">Do not use.</param>
      <param name="pbNonEditable">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetBufferSccStatus2(System.String,System.Int32@,System.Int32@)">
      <summary>Returns information on whether a buffer is under source code control and, if so, whether the file is checked in.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File name of interest.</param>
      <param name="pbNonEditable">[out] If true, then the file can not be modified (for example, if the file is under source control and checked in). If false, then the file can be edited.)</param>
      <param name="piStatusFlags">[out] Returns additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. Pass in a value of null for this parameter if you do not want the return value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetMarkerTypeCount(System.Int32@)">
      <summary>Returns the number of registered marker types within all buffers associated with the core text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerTypeCount">Returns the number of registered marker types within all buffers associated with the core text editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetMarkerTypeInterface(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType@)">
      <summary>Maps a numeric marker type ID to an interface that can be used to probe for specific information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerTypeID">[in] The marker type ID, such as from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)" />.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" /> interface, which has been referenced with AddReference.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetRegisteredMarkerTypeID(System.Guid@,System.Int32@)">
      <summary>Returns a registered marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidMarker">[in] GUID identifying the caller's implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" />, which provides information about the new category of markers.</param>
      <param name="piMarkerTypeID">[out] Number of the marker type in the marker type collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetShortcutManager(Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager@)">
      <summary>Returns the shortcut manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppShortcutMgr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager" /> interface, which is used to manage shortcuts in the task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[out] Pointer to the view preferences. For more information about <paramref name="pViewPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />.</param>
      <param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about <paramref name="pFramePrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />.</param>
      <param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about <paramref name="pLangPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />.</param>
      <param name="pColorPrefs">[in, out] Pointer to the font color preferences. For more information about <paramref name="pColorPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.IgnoreNextFileChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.MapFilenameToLanguageSID(System.String,System.Guid@)">
      <summary>Given a file name, determines the registered language service, if one exists, that understands it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File name associated with the language service.</param>
      <param name="pguidLangSID">[out] Pointer to the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.NavigateToLineAndColumn(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iStartRow">[in] Starting line for the selection to locate.</param>
      <param name="iStartIndex">[in] Starting index for the selection to locate.</param>
      <param name="iEndRow">[in] Ending line for the selection to locate.</param>
      <param name="iEndIndex">[in] Ending index for the selection to locate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.NavigateToPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and puts the selection on the specified linear position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iPos">[in] Linear position in buffer on which to put the caret.</param>
      <param name="iLen">[in] Length of selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.RegisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a text buffer with the text manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface to register.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.RegisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a view from a source other than the core editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.RegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pView">Do not use.</param>
      <param name="pBuffer">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SetFileChangeAdvise(System.String,System.Int32)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pszFileName">Do not use.</param>
      <param name="fStart">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Sets user preferences.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />. Can be null if view preferences are not being set.</param>
      <param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />. Can be null if frame preferences are not being set.</param>
      <param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />. Can be null if language preferences are not being set.</param>
      <param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SuspendFileChangeAdvise(System.String,System.Int32)">
      <summary>Suspends file change notifications for a given file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File on which to suspend notification of changes made.</param>
      <param name="fSuspend">[in] true if change notification is suspended on the specified file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.UnregisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that is being unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.UnregisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters an externally-created view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.UnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pView">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSet">
      <summary>Utility for text string matching. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass">
      <summary>Utility for text string matching. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.Add(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="cEl">Do not use.</param>
      <param name="pSpan">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.AddFromEnum(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="pEnum">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.AttachTextImage(System.Object)">
      <summary>Passes a text image to the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pText">[in] Pointer to a text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.Detach">
      <summary>Releases a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.GetAt(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns a requested text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iEl">[in] Integer containing the text span element number.</param>
      <param name="pSpan">[out] Pointer to a text span object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.GetCount(System.Int32@)">
      <summary>Returns the number of text spans.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcel">[out] Specifies the number of text spans in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.RemoveAll">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.ResumeTracking">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.Sort(System.UInt32)">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
      <param name="SortOptions">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.SuspendTracking">
      <summary>Method information not provided. Do not use.</summary>
      <returns>Do not use.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindow">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.Dismiss">
      <summary>Dismisses the tip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position (<paramref name="piPos" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Gets the size preferences for the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out] The bounding rectangle of the tip window, in screen coordinates.</param>
      <param name="pSizeData">[out] Size and position of the tip window. For a list of <paramref name="pSizeData" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.SetTextTipData(Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData)">
      <summary>Sets the text tip.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMethodData">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Processes Windows messages for the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The window handle.</param>
      <param name="iMsg">[in] The message ID.</param>
      <param name="wParam">[in] Information about the message.</param>
      <param name="lParam">[in] Information needed by the message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextView">
      <summary>Manages the text view of an editor window. Contains methods to manage the text view. The view is essentially the editor window shown in the UI. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass">
      <summary>Manages the text view of an editor window. Contains methods to manage the text view. The view is essentially the editor window shown in the UI. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.AddCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
      <summary>Adds a command filter to the existing chain of command filters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNewCmdTarg">[in] Pointer to the new command filter (IOleCommandTarget) to add to the command filter chain.</param>
      <param name="ppNextCmdTarg">[out] Pointer to a command filter used to handle commands not dealt with by the <paramref name="pNewCmdTarg" /> command filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.CenterColumns(System.Int32,System.Int32,System.Int32)">
      <summary>Places the specified column of text in the center of the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the first line to center.</param>
      <param name="iLeftCol">[in] Integer containing the index of the starting column to center. Viewcol coordinates may include virtual space.</param>
      <param name="iColCount">[in] Integer containing the total number of columns to center within the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.CenterLines(System.Int32,System.Int32)">
      <summary>Places the specified lines of text in the center of the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] First line to place in the center of the view.</param>
      <param name="iCount">[in] Total number of lines to place in the center of the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.ClearSelection(System.Int32)">
      <summary>Clears the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMoveToAnchor">[in] If true, the cursor is placed at the anchor after the current selection is cleared. If false, then the cursor is not moved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.CloseView">
      <summary>Closes and unregisters a view with the view manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.EnsureSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Ensures that text is in view, both vertically and horizontally.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="span">[in] Specifies the span of text to center.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the current contents of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface representing the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetCaretPos(System.Int32@,System.Int32@)">
      <summary>Returns the line and column index of the cursor position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to an integer containing the line, if the method succeeds.</param>
      <param name="piColumn">[out] Pointer to an integer containing the column, if the method succeeds. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetLineAndColumn(System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a text stream position to a line and column index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Integer containing the position in the text stream.</param>
      <param name="piLine">[out] Pointer containing the line index corresponding to the stream position.</param>
      <param name="piIndex">[out] Pointer containing the column index corresponding to the stream position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetLineHeight(System.Int32@)">
      <summary>Returns the pixel height of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineHeight">[out, retval] Integer containing the line height, in pixels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetNearestPosition(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a line and column index to a text stream position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates might include virtual space.</param>
      <param name="piPos">[out] Pointer to an integer containing the position in the text stream.</param>
      <param name="piVirtualSpaces">[out] Pointer to an integer containing the number of virtual spaces.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetPointOfLineColumn(System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.POINT[])">
      <summary>Returns the coordinates for the upper left corner of a particular line and column.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates may include virtual space.</param>
      <param name="ppt">[out, retval] Structure defining the x- and y- coordinates of the upper left corner of the line. For more information, see POINT in the Platform SDK.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetScrollInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="piMinUnit">[out] Minimum scroll bar unit.</param>
      <param name="piMaxUnit">[out] Maximum scroll bar unit.</param>
      <param name="piVisibleUnits">[out] Additional number of visible units in the scroll bar.</param>
      <param name="piFirstVisibleUnit">[out] First visible unit in the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectedText(System.String@)">
      <summary>Returns a copy of the selected text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] If the method succeeds, specifies a pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelection(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the text span corresponding to the current selection, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piAnchorLine">[out] Anchor line position for the selection. Based on user selection, this value is not necessarily the upper line in the selection.</param>
      <param name="piAnchorCol">[out] Anchor column position for the selection. Based on user selection, this value is not necessarily the upper, left column position in the selection. Viewcol coordinates may include virtual space.</param>
      <param name="piEndLine">[out] End line position for the selection. Based on user selection, this value is not necessarily the lower line in the selection.</param>
      <param name="piEndCol">[out] End column position for the selection. Based on user selection, this value is not necessarily the lower, right column position in the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns a copy of the selected text in <see cref="T:System.Windows.Forms.IDataObject" /> interface format.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIDataObject">[out] Pointer to an <see cref="T:System.Windows.Forms.IDataObject" /> object containing the selected text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectionMode">
      <summary>Returns the current selection mode.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSelMode" /> enum value SM_STREAM or SM_BOX.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectionSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the text span associated with a selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] The span information</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetTextStream(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns a specified stream of text in a string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] Top line index defining the text stream.</param>
      <param name="iTopCol">[in]Top line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="iBottomLine">[in] Bottom line index defining the text stream.</param>
      <param name="iBottomCol">[in] Bottom line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="pbstrText">[out] Pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetWindowHandle">
      <summary>Returns the window handle for this view.</summary>
      <returns>Returns the window handle for this view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current word extent.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line index for the lines that contains the word.</param>
      <param name="iCol">[in] Column index for the word.</param>
      <param name="dwFlags">[in] Flags specifying how the word extent is determined. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pSpan">[out] Span of text identifying the word extent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Highlights the matching brace in a language construct.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Parameter is not used.</param>
      <param name="cSpans">[in] Number of matching pairs to highlight within the text span.</param>
      <param name="rgBaseSpans">[in, size_is(cSpans)] Span of text to highlight within.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])">
      <summary>Creates the view and allows clients to specify one or more <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags" /> options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to a text buffer object to attach the view to.</param>
      <param name="hwndParent">[in] Specifies a handle to the parent window.</param>
      <param name="InitFlags">[in] Specifies view options. For a list of <paramref name="InitFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags" />.</param>
      <param name="pInitView">[in] Pointer to the view you want to initialize.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.PositionCaretForEditing(System.Int32,System.Int32)">
      <summary>Puts the caret in a position suitable for editing a function.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line to position the caret (cursor) on.</param>
      <param name="cIndentLevels">[in] Count of indent levels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.RemoveCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Removes a command filter from the chain of command filters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCmdTarg">[in] Pointer to a command filter to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.ReplaceTextOnLine(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
      <summary>Replaces a line of text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line.</param>
      <param name="iStartCol">[in] Integer containing the starting column.</param>
      <param name="iCharsToReplace">[in] Integer containing the characters to replace.</param>
      <param name="pszNewText">[in] Pointer the new text being passed in.</param>
      <param name="iNewLen">[in] Length of the buffer (number of characters) being passed in.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.RestrictViewRange(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient)">
      <summary>Reduces the view’s range of visible/editable lines to a subset of the buffer’s lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMinLine">[in] The minimum line number.</param>
      <param name="iMaxLine">[in] The maximum line number.</param>
      <param name="pClient">[in] The view range client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SendExplicitFocus">
      <summary>Sends explicit focus to the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Associates a text buffer with the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the text buffer to associate with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetCaretPos(System.Int32,System.Int32)">
      <summary>Sets the coordinates of the end point of a selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line containing the caret position.</param>
      <param name="iColumn">[in] Column identifying the caret position. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetScrollPosition(System.Int32,System.Int32)">
      <summary>Sets the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="iFirstVisibleUnit">[in] First visible unit for the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Selects specified text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAnchorLine">[in] Anchor line position for the selection.</param>
      <param name="iAnchorCol">[in] Anchor column position for the selection. Viewcol coordinates may include virtual space.</param>
      <param name="iEndLine">[in] End line position for the selection.</param>
      <param name="iEndCol">[in] End column position for the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetSelectionMode(Microsoft.VisualStudio.TextManager.Interop.TextSelMode)">
      <summary>Sets the selection mode.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSelMode">[in] Integer containing the selection mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetTopLine(System.Int32)">
      <summary>Sets the top line in the view to the baseline.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBaseLine">[in] Indicates the line that should be set as the baseline.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <summary>Used for word completion control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCompSet">[in] Pointer to a completion set object.</param>
      <param name="dwFlags">[in] Flags specifying completion status options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <summary>Updates the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTipWindow">[in] Pointer to a tip window object.</param>
      <param name="dwFlags">[in] Tip window options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.UpdateViewFrameCaption">
      <summary>Forces the view to update its frame window caption, such as "[Read only]".</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackage">
      <summary>Implements the linked undo stack feature. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass">
      <summary>Implements the linked undo stack feature. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.AbortLinkedUndo">
      <summary>Aborts a linked undo transaction.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.CloseLinkedUndo">
      <summary>Successfully closes a linked undo transaction.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.CountOpenTransactions(System.Int32@)">
      <summary>Returns the nesting level of the linked undo transactions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">Pointer to a count object. The count object indicates the levels of nesting.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.IsAborted(System.Int32@)">
      <summary>Determines if the linked undo transaction is aborted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfAborted">Pointer to a flag, true indicating aborted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.IsStrict(System.Int32@)">
      <summary>Determines if the linked undo transaction is strict.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfStrict">Pointer to a flag, true indicating strict.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.OpenLinkedUndo(System.UInt32,System.String)">
      <summary>Opens a linked undo transaction parent unit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Value taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags" /> enumeration. <paramref name="mdtDefault" /> specifies the transaction to be nonstrict, which is default behavior. The other possible enum value is <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtStrict" /> that specifies the undo linking behavior as strict.</param>
      <param name="pszDescription">[in] Localized string that describes this action; appears in the undo/redo dropdown menus. This value may not be null.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnit">
      <summary>Determines if the undo unit applies to UI items only. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoUnit" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass">
      <summary>Determines if the undo unit applies to UI items only. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoUnit" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass.fChangeData">
      <summary>Indicates whether the undo unit applies to UI only and does not change the document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUserData">
      <summary>Allows a caller to use a GUID to set or get user data (properties). See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass">
      <summary>Allows a caller to use a GUID to set or get user data (properties). See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass.GetData(System.Guid@,System.Object@)">
      <summary>Returns user data from a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="pvtData">[out] Pointer to a VARIANT containing the user data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass.SetData(System.Guid@,System.Object)">
      <summary>Sets user data to a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="vtData">[in] Data to be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS">
      <summary>Specifies options for determining the extent of a word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_CURRENT">
      <summary>Finds a word or token containing a specified position, if any such word or token exists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_FINDEXPRESSION">
      <summary>Find simple expressions, like *pFoo.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_FINDTOKEN">
      <summary>Finds words and tokens. See Remarks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_FINDWORD">
      <summary>Finds words only. See Remarks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_MOVETYPE_MASK">
      <summary>Flag to mask WORDEXT_PREVIOUS and WORDEXT_NEXT.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_NEAREST">
      <summary>Finds the word or token nearest to a specified position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_NEXT">
      <summary>Finds the nearest word or token whose first character is greater than a specified position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_PREVIOUS">
      <summary>Finds the nearest word or token whose last character is less than a specified position.</summary>
    </member>
  </members>
</doc>