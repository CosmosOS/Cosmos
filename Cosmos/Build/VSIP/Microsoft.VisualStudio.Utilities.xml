<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Utilities</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlag">
      <summary>A feature flag that consists of a name and the enabled state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.#ctor(System.String,System.Boolean)">
      <summary>Initializes an instance of FeatureFlag with the given name and state. FeatureFlag objects are immutable.</summary>
      <param name="name">The name. A string of the form ^(\w+\.)+\w+$, following a pattern of [AreaPath].[Name].</param>
      <param name="isEnabled">True if the feature should be enabled, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.IsEnabled">
      <summary>Determines whether the feature should be enabled.</summary>
      <returns>True if the feature is enabled, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.Name">
      <summary>Gets or sets the name.</summary>
      <returns>A string of the form ^(\w+\.)+\w+$, following a pattern of [AreaPath].[Name].</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlags"></member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.#ctor(Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore,Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore)"></member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.GetFlags">
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.IsFeatureEnabled(System.String,System.Boolean)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlags">
      <summary>A service that can be used to determine whether a feature should be enabled or disabled. It can also be used to enumerate the current state of feature flags. This service is free-threaded.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlags.GetFlags">
      <summary>Gets all the feature flags for this user/appid combination. The values of the flags returned are the currently set values and may differ from the defaults. This will return only the set of registered flags.</summary>
      <returns>An enumerable collection of <see cref="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlag" /> objects.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlags.IsFeatureEnabled(System.String,System.Boolean)">
      <summary>Determines whether a feature is enabled. If the flag cannot be located, or if there is an error processing the request the default value is returned.</summary>
      <returns>The current state of the feature flag, or the <paramref name="defaultValue" /> if there is an error processing the request.</returns>
      <param name="name">A string of the form ^(\w+\.)+\w+$, following a pattern of [AreaPath].[Name].</param>
      <param name="defaultValue">The value returned if there is an error processing the request or if the flag cannot be located.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore">
      <summary>An abstraction of the repository for feature flags. The collection semantics are modeled after IVsSettingsStore, and have the following characteristics:Collections can contain properties and sub collections.Sub collection paths are described with strings like file system directory paths. The path contains names of all the parent collections.Similarly, the separator used between the names of the parent collections is the \ (back-slash) character. An example of a sub collection path is: Root Collection\Internal Collection\Leaf Collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetBoolValue(System.String,System.String)">
      <summary>Gets a boolean value stored under the <paramref name="collectionPath" /> with the given <paramref name="name" />. If the <paramref name="collectionPath" /> or the <paramref name="name" /> does not exist, then null is returned.</summary>
      <returns>True if the value of the name under the collection path is true, false if it is false, or null if the value doesn't exist.</returns>
      <param name="collectionPath">The full path, separated by back-slash characters to the collection/subcollection to be queried.</param>
      <param name="name">The name of the value to read.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetSubCollections(System.String)">
      <summary>Gets all subcollections directly under the <paramref name="collectionPath" />; in other words, returns the children but not the grandchildren of <paramref name="collectionPath" />. Calling this method with a <paramref name="collectionPath" /> of Root Collection against a collection that contains Root Collection\Internal Collection\Leaf Collection returns Internal Collection.</summary>
      <returns>The immediate subcollections rooted at the <paramref name="collectionPath" />.</returns>
      <param name="collectionPath">The full path, separated by back-slash characters to the collection/subcollection to be queried.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore">
      <summary>An abstraction of a writable repository for feature flags. The collection semantics are modeled after IVsSettingsStore and have the following characteristics:Collections can contain properties and sub collections. Sub collection paths are described with the strings like file system directory paths. The path contains the names of all the parent collections.Similarly, the separator used between the names of the parent collections is the \ (back-slash) character. Example of a sub collection path is: Root Collection\Internal Collection\Leaf Collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore.DeleteProperty(System.String,System.String)">
      <summary>Deletes the given property from the collection. This method succeeds silently if the property doesn't exist.</summary>
      <param name="collectionPath">The full path, separated by back-slash characters, to the collection/subcollection to be used.</param>
      <param name="name">The name of the property to be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore.SetBool(System.String,System.String,System.Boolean)">
      <summary>Updates the value of the property to the given boolean value. If the previous data type of the property is not a Boolean, this method overwrites it. If the property doesn't exist, it creates one. If the collection doesn't exist, it is created.</summary>
      <param name="collectionPath">"&gt;The full path, separated by back-slash characters, to the collection/subcollection to be written to.</param>
      <param name="name">The name of the property to be written or created.</param>
      <param name="enabled">The value to set the new/updated property to</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.Boxes">
      <summary>Defines common boxed values.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.BooleanFalse">
      <summary>Value of false.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.BooleanTrue">
      <summary>Value of true.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.Boxes.Box(System.Boolean)">
      <summary>Gets the box value specified.</summary>
      <returns>Returns true if the value is true; otherwise returns false.</returns>
      <param name="value">The value to return box value for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.Boxes.Box(System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.Boxes.Box(System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.Boxes.Box(System.Nullable{System.Boolean})">
      <summary>Gets the box value specified.</summary>
      <returns>Returns the value if not null; otherwise returns null.</returns>
      <param name="nullableValue">Value to get box value for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.Boxes.Box(System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.Boxes.Box(System.UInt64)"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.DoubleZero"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.Int32One"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.Int32Zero"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.UInt32One"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.UInt32Zero"></member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.Boxes.UInt64Zero"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.BrushToColorConverter">
      <summary>Converts a brush to a color.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BrushToColorConverter.#ctor">
      <summary>Creates a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.BrushToColorConverter.Convert(System.Windows.Media.Brush,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified brush to a color.</summary>
      <returns>Returns the color of the brush.</returns>
      <param name="value">The value of the brush.</param>
      <param name="parameter">Parameter used by the brush.</param>
      <param name="culture">Culture of the brush.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand">
      <summary>A lightweight version of DelegateCommand modeled after Prism.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action{System.Object})">
      <summary>Initializes a new instance of the DelegateCommand class.</summary>
      <param name="execute">The delegate to call when executing the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
      <summary>Initializes a new instance of the DelegateCommand class.</summary>
      <param name="execute">The delegate to call when executing the command.</param>
      <param name="canExecute">The delegate to call when querying the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.CanExecute(System.Object)">
      <summary>Determines whether the command can be executed in the current state.</summary>
      <returns>Returns true if the command can execute; false otherwise.</returns>
      <param name="parameter">The parameter to be passed to the execute method.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.DelegateCommand.CanExecuteChanged"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.Execute(System.Object)">
      <summary>Executes the command.</summary>
      <param name="parameter">The parameter that is passed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.RaiseCanExecuteChanged">
      <summary>Event called when the current command's ability to execute may have changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.DisposableObject">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.#ctor">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Dispose(System.Boolean)">
      <summary> Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Standard virtual overload for <see cref="T:System.IDisposable" /> pattern.</summary>
      <param name="disposing">If true, this is a call to <see cref="M:System.IDisposable.Dispose" />. If false, it means this method has been called from the finalizer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.DisposeManagedResources">
      <summary>Allows derived classes to provide custom dispose handling for managed resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.DisposeNativeResources">
      <summary>Allows derived classes to provide custom dispose handling for native resources.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.DisposableObject.Disposing">
      <summary>Raised when the event is being disposed, that is, while it is still accessible.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Finalize">
      <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.PlatformUI.DisposableObject.IsDisposed">
      <summary>Returns whether the object has been disposed once, which protects against double disposal.</summary>
      <returns>true if the object has already been disposed.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.ThrowIfDisposed">
      <summary>Throws an <see cref="T:System.ObjectDisposedException" /> if this object has been disposed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ExtensionMethods">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AcquireWin32Focus(System.Windows.DependencyObject,System.IntPtr@)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AddPropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler)">
      <summary>Adds a handler that is called when <paramref name="property" /> changes on <paramref name="instance" />.</summary>
      <param name="instance">The instance whose property change will be handled.</param>
      <param name="property">The property whose change will be handled.</param>
      <param name="handler">The handler.</param>
      <typeparam name="T">The type of object being bound.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AddPropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler,System.Type)">
      <summary>Adds a handler that is called when <paramref name="property" /> changes on <paramref name="instance" />.</summary>
      <param name="instance">The instance whose property change will be handled.</param>
      <param name="property">The property whose change will be handled.</param>
      <param name="handler">The handler.</param>
      <param name="targetType">The type of the object on which <paramref name="property" /> is set.</param>
      <typeparam name="T">The type of object being bound.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.CopyTo(System.IO.Stream,System.IO.Stream)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``1(System.Windows.Media.Visual)">
      <summary>Finds the first ancestor of a given type in the logical or visual tree.</summary>
      <returns>The first ancestor of type T in the parent chain of <paramref name="obj" />, or null if no ancestor is found</returns>
      <param name="obj">The object at which to begin searching.</param>
      <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``2(``1,System.Func{``1,``1})">
      <typeparam name="TAncestorType"></typeparam>
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestorOrSelf``1(System.Windows.Media.Visual)">
      <summary>Finds the first ancestor of a given type in the logical or visual tree, or the object itself if it matches in type.</summary>
      <returns>The object itself, if it matches in type, else the first ancestor of type <paramref name="T" /> in the parent chain of <paramref name="obj" />, or <paramref name="null" /> if no ancestor is found.</returns>
      <param name="obj">The object at which to begin searching.</param>
      <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestorOrSelf``2(``1,System.Func{``1,``1})">
      <typeparam name="TAncestorType"></typeparam>
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestorOrSelf``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindCommonAncestor(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
      <param name="obj1">The first object.</param>
      <param name="obj2">The second object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindCommonAncestor``1(``0,``0,System.Func{``0,``0})">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendant``1(System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
      <returns>The first descendant that satisfies the predicate, or null if no descendant is found.</returns>
      <param name="obj">The object at which to begin searching.</param>
      <typeparam name="T">The type of descendant to find.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendant(System.Windows.DependencyObject,System.Predicate{System.Windows.DependencyObject})">
      <summary>Microsoft internal use only.</summary>
      <returns>The first descendant that satisfies the predicate, or null if no descendant is found.</returns>
      <param name="obj">The object at which to begin searching.</param>
      <param name="predicate">The predicate that selects the descendant object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendantReverse``1(System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
      <returns>The last descendant of type T in the children of obj, or null if            no descendant is found.</returns>
      <param name="obj">The object at which to begin searching.</param>
      <typeparam name="T">The type of descendant to find.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendants``1(System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendantsReverse``1(System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetDoubleAttribute(System.Xml.XmlReader,System.String,System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetGuidAttribute(System.Xml.XmlReader,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetIntAttribute(System.Xml.XmlReader,System.String,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetValueIfCreated``1(System.Lazy{``0})">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetVisualOrLogicalParent(System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
      <param name="sourceElement">The object to begin searching from.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsAncestorOf``1(``0,``0,System.Func{``0,``0})">
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsClipped(System.Windows.UIElement)">
      <summary>Determines whether the element's text is clipped by a parent ScrollViewer (the element can still be scrolled to view the clipped text)</summary>
      <returns>True if the text is clipped, otherwise false.</returns>
      <param name="element">The element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsConnectedToPresentationSource(System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsCritical(System.Exception)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsLogicalAncestorOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Microsoft internal use only.</summary>
      <param name="element">The ancestor element.</param>
      <param name="other">The descendent element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsNearlyEqual(System.Double,System.Double)">
      <summary>Microsoft internal use only.</summary>
      <param name="value1">First double to compare.</param>
      <param name="value2">Second double to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsSignificantlyGreaterThan(System.Double,System.Double)">
      <summary>Determines whether the first value is significantly greater than the second value.</summary>
      <returns>True if value1 is significantly less than value2, false otherwise.</returns>
      <param name="value1">Value to be compared.</param>
      <param name="value2">Other double to be compared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsSignificantlyLessThan(System.Double,System.Double)">
      <summary>Determines whether the first value is significantly less than the second value.</summary>
      <returns>True if value1 is significantly less than value2, false otherwise.</returns>
      <param name="value1">Value to be compared</param>
      <param name="value2">Other double to be compared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsTextTrimmed(System.Windows.Controls.TextBlock)">
      <summary>Microsoft internal use only.</summary>
      <returns>True if the text of the TextBlock is trimmed.</returns>
      <param name="textBlock">The text block.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsTopmost(System.IntPtr)">
      <summary>Microsoft internal use only.</summary>
      <param name="hWnd">The HWND to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsTrimmed(System.Windows.UIElement)">
      <summary>Microsoft internal use only.</summary>
      <returns>True if the control is a TextBlock whose text is trimmed (and ellipses are displayed).</returns>
      <param name="element">The element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Microsoft internal use only.</summary>
      <param name="eventHandler">The event handler.</param>
      <param name="source">The source of the event.</param>
      <param name="args">The event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.CancelEventHandler,System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>Microsoft internal use only.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
      <param name="args">The event's argument parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Microsoft internal use only.</summary>
      <param name="eventHandler">The event handler.</param>
      <param name="source">The source of the event.</param>
      <param name="args">The event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangingEventHandler,System.Object,System.ComponentModel.PropertyChangingEventArgs)">
      <summary>Microsoft internal use only.</summary>
      <param name="eventHandler">The event handler.</param>
      <param name="source">The event source.</param>
      <param name="args">The event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangingEventHandler,System.Object,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler,System.Object)">
      <summary>Microsoft internal use only.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler,System.Object,System.EventArgs)">
      <summary>Microsoft internal use only.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
      <param name="args">The event's argument parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler{System.Windows.DependencyPropertyChangedEventArgs},System.Object,System.Windows.DependencyPropertyChangedEventArgs)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
      <summary>Microsoft internal use only.</summary>
      <param name="eventHandler">The event.</param>
      <param name="source">The event's source parameter.</param>
      <param name="args">The event's argument parameter.</param>
      <typeparam name="TEventArgs">The EventArgs-derived event argument.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEventAsync``1(System.Delegate,System.Object,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RemovePropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler)">
      <summary>Microsoft internal use only.</summary>
      <param name="instance">The instance whose property change will no longer be handled.</param>
      <param name="property">The property whose change will no longer be handled.</param>
      <param name="handler">The method to be removed</param>
      <typeparam name="T">The type of object being bound.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RemovePropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler,System.Type)">
      <summary>Microsoft internal use only.</summary>
      <param name="instance">The instance whose property change will no longer be handled.</param>
      <param name="property">The property whose change will no longer be handled</param>
      <param name="handler">The method to be removed.</param>
      <param name="targetType">The type of the object where property is set.</param>
      <typeparam name="T">The type of object being bound.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ThrowIfNullOrEmpty(System.String,System.String)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToArgb(System.Windows.Media.Color)">
      <summary>Microsoft internal use only.</summary>
      <returns>The ARGB value of the color.</returns>
      <param name="color">The color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToColorFromArgb(System.UInt32)">
      <summary>Microsoft internal use only.</summary>
      <returns>The color.</returns>
      <param name="colorValue">The argb value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToColorFromRgba(System.UInt32)">
      <summary>Microsoft internal use only.</summary>
      <returns>The color.</returns>
      <param name="colorValue">The RGBA value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToDimensionString(System.Windows.Size)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToLowercaseString(System.Nullable{System.Windows.Media.Color})"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToLowercaseString(System.Windows.Media.Color)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToRgba(System.Windows.Media.Color)">
      <summary>Microsoft internal use only.</summary>
      <returns>The RGBA value.</returns>
      <param name="color">The color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.TraverseVisualTree``1(System.Windows.DependencyObject,System.Action{``0})">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.TraverseVisualTreeReverse``1(System.Windows.DependencyObject,System.Action{``0})">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ImageScalingMode">
      <summary>The scaling mode to use for Windows Forms/Win32 images.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.Bicubic">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.Bilinear">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.BorderOnly">
      <summary>Keep the actual image unscaled, add a border around the image.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.Default">
      <summary>Let the shell pick what looks best depending on the current DPI zoom factor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.HighQualityBicubic">
      <summary>Smooth results, without distortions, but fuzzy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.HighQualityBilinear">
      <summary>Smooth results, without distortions, but fuzzy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.MixedNearestNeighborHighQualityBicubic">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.NearestNeighbor">
      <summary>Sharp results, but pixelated, and possibly distorted unless multiple of 100% scaling.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil">
      <summary>Contains utilities for making layout comparisons.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Double,System.Double)">
      <summary>Determines whether the absolute value of the difference between the specified values is less than the double value 0.00000153. </summary>
      <returns>Returns true if the difference between the values is less than 0.00000153; otherwise returns false.</returns>
      <param name="value1">The first value for comparison.</param>
      <param name="value2">The second value for comparison.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Windows.Point,System.Windows.Point)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Windows.Rect,System.Windows.Rect)">
      <summary>Determines whether the absolute values of the differences between the left positions, top positions, heights and widths of the specified rectangles are less than the double value 0.00000153.</summary>
      <returns>Returns true if the differences between the values are less than 0.00000153; otherwise returns false.</returns>
      <param name="rect1">The first rectangle for comparison.</param>
      <param name="rect2">The second rectangle for comparison.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Windows.Size,System.Windows.Size)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.GreaterThan(System.Double,System.Double)">
      <summary>Determines whether the first specified value is greater than the second specified value and the values are not within 0.00000153 of each other.</summary>
      <returns>Returns true if the first value is greater than the second value and the values are not within 0.00000153 of each other; otherwise returns false.</returns>
      <param name="value1">The first value for comparison.</param>
      <param name="value2">The second value for comparison.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.GreaterThanOrClose(System.Double,System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.IsNonreal(System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.LessThan(System.Double,System.Double)">
      <summary>Determines whether the first specified value is less than the second specified value and the values are not within 0.00000153 of each other.</summary>
      <returns>Returns true if the first value is less than the second value and the values are not within 0.00000153 of each other; otherwise returns false.</returns>
      <param name="value1">The first value for comparison.</param>
      <param name="value2">The second value for comparison.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.LessThanOrClose(System.Double,System.Double)"></member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`10">
      <summary>Converts multiple values from one type to another.</summary>
      <typeparam name="T1">The first type.</typeparam>
      <typeparam name="T2">The second type.</typeparam>
      <typeparam name="T3">The third type.</typeparam>
      <typeparam name="T4">The fourth type.</typeparam>
      <typeparam name="T5">The fifth type.</typeparam>
      <typeparam name="T6">The sixth type.</typeparam>
      <typeparam name="T7">The seventh type.</typeparam>
      <typeparam name="T8">The eighth type.</typeparam>
      <typeparam name="T9">The ninth type.</typeparam>
      <typeparam name="TTarget">The target type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`10.#ctor">
      <summary>Initializes a new instance of MultiValueConverter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`10.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The values.</param>
      <param name="targetType">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`10.Convert(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="value3">The third value.</param>
      <param name="value4">The fourth value.</param>
      <param name="value5">The fifth value.</param>
      <param name="value6">The sixth value.</param>
      <param name="value7">The seventh value.</param>
      <param name="value8">The eighth value.</param>
      <param name="value9">The ninth value.</param>
      <param name="parameter">Parameters.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`10.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The values.</param>
      <param name="targetTypes">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`10.ConvertBack(`9,`0@,`1@,`2@,`3@,`4@,`5@,`6@,`7@,`8@,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <param name="value">The first value.</param>
      <param name="value1">The second value.</param>
      <param name="value2">The third value.</param>
      <param name="value3">The fourth value.</param>
      <param name="value4">The fifth value.</param>
      <param name="value5">The sixth value.</param>
      <param name="value6">The seventh value.</param>
      <param name="value7">The eighth value.</param>
      <param name="value8">The ninth value.</param>
      <param name="value9">The first value.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`11">
      <summary>Converts multiple values from one type to another.</summary>
      <typeparam name="T1">The first type.</typeparam>
      <typeparam name="T2">The second type.</typeparam>
      <typeparam name="T3">The third type.</typeparam>
      <typeparam name="T4">The fourth type.</typeparam>
      <typeparam name="T5">The fifth type.</typeparam>
      <typeparam name="T6">The sixth type.</typeparam>
      <typeparam name="T7">The seventh type.</typeparam>
      <typeparam name="T8">The eighth type.</typeparam>
      <typeparam name="T9">The ninth type.</typeparam>
      <typeparam name="T10">The tenth type.</typeparam>
      <typeparam name="TTarget">The target type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`11.#ctor">
      <summary>Initializes a new instance of MultiValueConverter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`11.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The values.</param>
      <param name="targetType">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`11.Convert(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="value3">The third value.</param>
      <param name="value4">The fourth value.</param>
      <param name="value5">The fifth value.</param>
      <param name="value6">The sixth value.</param>
      <param name="value7">The seventh value.</param>
      <param name="value8">The eighth value.</param>
      <param name="value9">The ninth value.</param>
      <param name="value10">The tenth value.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`11.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`11.ConvertBack(`10,`0@,`1@,`2@,`3@,`4@,`5@,`6@,`7@,`8@,`9@,System.Object,System.Globalization.CultureInfo)">
      <param name="value">The first value.</param>
      <param name="value1">The second value.</param>
      <param name="value2">The third value.</param>
      <param name="value3">The fourth value.</param>
      <param name="value4">The fifth value.</param>
      <param name="value5">The sixth value.</param>
      <param name="value6">The seventh value.</param>
      <param name="value7">The eighth value.</param>
      <param name="value8">The ninth value.</param>
      <param name="value9">The tenth value.</param>
      <param name="value10">The first value.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.#ctor">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.Convert(`0,`1,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`3.ConvertBack(`2,`0@,`1@,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.#ctor">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.Convert(`0,`1,`2,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`4.ConvertBack(`3,`0@,`1@,`2@,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.#ctor">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.Convert(`0,`1,`2,`3,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`5.ConvertBack(`4,`0@,`1@,`2@,`3@,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
      <typeparam name="T5"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.#ctor">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.Convert(`0,`1,`2,`3,`4,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`6.ConvertBack(`5,`0@,`1@,`2@,`3@,`4@,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`7">
      <summary>Converts multiple values from one type to another.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
      <typeparam name="T5"></typeparam>
      <typeparam name="T6"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`7.#ctor">
      <summary>Initializes a new instance of MultiValueConverter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`7.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The values.</param>
      <param name="targetType">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`7.Convert(`0,`1,`2,`3,`4,`5,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="value3">The third value.</param>
      <param name="value4">The fourth value.</param>
      <param name="value5">The fifth value.</param>
      <param name="value6">The sixth value.</param>
      <param name="parameter">Parameters.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`7.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`7.ConvertBack(`6,`0@,`1@,`2@,`3@,`4@,`5@,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <param name="value">The first value.</param>
      <param name="value1">The second value.</param>
      <param name="value2">The third value.</param>
      <param name="value3">The fourth value.</param>
      <param name="value4">The fifth value.</param>
      <param name="value5">The sixth value.</param>
      <param name="value6">The first value.</param>
      <param name="parameter">Parameters.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`8">
      <summary>Converts multiple values from one type to another.</summary>
      <typeparam name="T1">The first type.</typeparam>
      <typeparam name="T2">The second type.</typeparam>
      <typeparam name="T3">The third type.</typeparam>
      <typeparam name="T4">The fourth type.</typeparam>
      <typeparam name="T5">The fifth type.</typeparam>
      <typeparam name="T6">The sixth type.</typeparam>
      <typeparam name="T7">The seventh type.</typeparam>
      <typeparam name="TTarget">The target type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`8.#ctor">
      <summary>Initializes a new instance of MultiValueConverter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`8.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The values.</param>
      <param name="targetType">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`8.Convert(`0,`1,`2,`3,`4,`5,`6,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="value3">The third value.</param>
      <param name="value4">The fourth value.</param>
      <param name="value5">The fifth value.</param>
      <param name="value6">The sixth value.</param>
      <param name="value7">The seventh value.</param>
      <param name="parameter">Parameters.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`8.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`8.ConvertBack(`7,`0@,`1@,`2@,`3@,`4@,`5@,`6@,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <param name="value">The first value.</param>
      <param name="value1">The second value.</param>
      <param name="value2">The third value.</param>
      <param name="value3">The fourth value.</param>
      <param name="value4">The fifth value.</param>
      <param name="value5">The sixth value.</param>
      <param name="value6">The seventh value.</param>
      <param name="value7">The first value.</param>
      <param name="parameter">Parameters.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`9">
      <summary>Converts multiple values from one type to another.</summary>
      <typeparam name="T1">The first type.</typeparam>
      <typeparam name="T2">The second type.</typeparam>
      <typeparam name="T3">The third type.</typeparam>
      <typeparam name="T4">The fourth type.</typeparam>
      <typeparam name="T5">The fifth type.</typeparam>
      <typeparam name="T6">The sixth type.</typeparam>
      <typeparam name="T7">The seventh type.</typeparam>
      <typeparam name="T8">The eighth type.</typeparam>
      <typeparam name="TTarget">The target type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`9.#ctor">
      <summary>Initializes a new instance of MultiValueConverter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`9.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The values.</param>
      <param name="targetType">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`9.Convert(`0,`1,`2,`3,`4,`5,`6,`7,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="value3">The third value.</param>
      <param name="value4">The fourth value.</param>
      <param name="value5">The fifth value.</param>
      <param name="value6">The sixth value.</param>
      <param name="value7">The seventh value.</param>
      <param name="value8">The eighth value.</param>
      <param name="parameter">Parameters.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`9.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverter`9.ConvertBack(`8,`0@,`1@,`2@,`3@,`4@,`5@,`6@,`7@,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <param name="value">The first value.</param>
      <param name="value1">The second value.</param>
      <param name="value2">The third value.</param>
      <param name="value3">The fourth value.</param>
      <param name="value4">The fifth value.</param>
      <param name="value5">The sixth value.</param>
      <param name="value6">The seventh value.</param>
      <param name="value7">The eighth value.</param>
      <param name="value8">The first value.</param>
      <param name="parameter">Parameters.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1">
      <summary>Converts multiple values from one type to another.</summary>
      <typeparam name="TTarget">The target type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.#ctor">
      <summary>Initializes a new instance of MultiValueConverter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The values.</param>
      <param name="targetType">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the values back to the original.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The values.</param>
      <param name="targetTypes">The target type.</param>
      <param name="parameter">The parameter.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.MakeConverterFunctionNotDefinedException(System.String)">
      <summary>An exception thrown when the converter function isn’t defined.</summary>
      <returns>Returns <see cref="T:System.Exception" />.</returns>
      <param name="functionName">The name of the function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.ValidateConvertBackParameters(System.Object,System.Type[])">
      <summary>Validates the parameters passed to IMultiValueConverter.ConvertBack.</summary>
      <param name="value">The value to convert back.</param>
      <param name="targetTypes">The types to convert back to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.ValidateConvertParameters(System.Object[],System.Type)">
      <summary>Validates the parameters passed to IMultiValueConverter.Convert.</summary>
      <returns>True if the conversion can continue, false if it cannot.</returns>
      <param name="values">The values to convert.</param>
      <param name="targetType">The type to convert to.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ObservableObject">
      <summary>An object that is observable, that is, it can issue a notification when a property has changed. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.#ctor">
      <summary>Instantiates a new instance of the ObservableObject.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.NotifyPropertyChanged(System.String)">
      <summary>The method that is called when a property has changed.</summary>
      <param name="propertyName">The CallerMemberName attribute that is applied to the optional propertyName parameter causes the property name of the caller to be substituted as an argument.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.PlatformUI.ObservableObject.PropertyChanged">
      <summary>The event that is raised when a property has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty(System.IntPtr@,System.IntPtr,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty(System.UIntPtr@,System.UIntPtr,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty``1(``0@,``0,System.Action,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty``1(``0@,``0,System.Action{``0,``0},System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty``1(``0@,``0,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.PathUtil">
      <summary>Provides path utilities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.ArePathsEqual(System.String,System.String)">
      <summary>Determines whether two paths are equal. This method does not treat Path.DirectorySeparatorChar and Path.AltDirectorySeparatorChar as equivalent.</summary>
      <returns> True if two paths are equal, false if they are not. </returns>
      <param name="path1">First path to compare</param>
      <param name="path2">Second path to compare</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.ContainsReparsePoint(System.String,System.String)">
      <summary>Determines whether any level in the given path is a Junction, up to &lt;<paramref name="pathRoot" />. <paramref name="pathRoot" /> itself will not be included in the determination.</summary>
      <returns>True if any directory between <paramref name="path" /> and <paramref name="pathRoot" /> is a Junction, false otherwise.</returns>
      <param name="path">Path to a directory</param>
      <param name="pathRoot">Path to a parent directory of <paramref name="path" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.GetCommonPathPrefix(System.String,System.String)">
      <summary>Returns the longest leading string that is common to <paramref name="path1" /> and <paramref name="path2" />.Case is not considered in the comparison.</summary>
      <returns>The longest common prefix, or the empty string if there is no common path.</returns>
      <param name="path1">The first path.</param>
      <param name="path2">The second path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsDescendant(System.String,System.String)">
      <summary>Determines whether a child path is a descendant of a parent directory. This is a purely textual computation indicating that <paramref name="child" /> could be a descendant of <paramref name="parent" />; there is no file system interaction to determine whether <paramref name="child" /> actually is a descendant of <paramref name="parent" />.</summary>
      <returns>True if <paramref name="child" /> is descendant, false if not.</returns>
      <param name="parent">The parent path.</param>
      <param name="child">The child fileh.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsDirectorySeparator(System.Char)">
      <summary>Determines whether a character is a directory separator.</summary>
      <returns>True if <paramref name="c" /> is a directory separator, false if not.</returns>
      <param name="c">The character to test</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsImplicitDirectory(System.String)">
      <summary>Determines whether the given directory is one of the implicit directories contained in all directories (i.e. "." or "..").</summary>
      <returns>True if <paramref name="directory" /> is an implicit directory, false if not.</returns>
      <param name="directory">The directory to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsNormalized(System.String)">
      <summary>Determines whether the given path is in normalized form.</summary>
      <returns>True if the path is normalized, otherwise false.</returns>
      <param name="path">The path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsNormalizedPath(System.String)">
      <summary>Determines whether the given path is in normalized form.</summary>
      <returns>True if the path is in normalized form, otherwise false.</returns>
      <param name="path">The path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsReparsePoint(System.String)">
      <summary>Determines whether the given path is a Junction.</summary>
      <returns>True if <paramref name="path" /> is a Junction, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsRoot(System.String)">
      <summary>Determines whether the given path represents a root directory.</summary>
      <returns>True if <paramref name="path" /> is a root, false if it is not. </returns>
      <param name="path">First path to compare</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.Normalize(System.String)">
      <summary>Returns a normalized form of the given path.</summary>
      <returns>Normalized from <paramref name="path" />.</returns>
      <param name="path">Path to normalize.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.NormalizePath(System.String)">
      <summary>Returns a normalized form of the given path.</summary>
      <returns>The normalized form of the path.</returns>
      <param name="path">The path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.SafeGetExtension(System.String)">
      <summary>Return the extension of the specified path string.</summary>
      <returns>The extension, or the empty string if the extension could be not obtained.</returns>
      <param name="path">The path from which to get the extension</param>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.ValueConverter`2">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.#ctor">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)">
      <summary>Microsoft internal use only.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.PlatformUI.WeakCollection`1">
      <summary>Microsoft internal use only.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.#ctor">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Add(`0)">
      <summary>Microsoft internal use only. Adds a <see cref="T:System.WeakReference" /> to the item to the collection.</summary>
      <param name="item">The item to add to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Clear">
      <summary>Microsoft internal use only. Clears all items from the list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.GetAliveItemsCount">
      <summary>Gets the number of strong references remaining in the collection.</summary>
      <returns>Returns the number of strong references.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Remove(`0)">
      <summary>Microsoft internal use only. Removes an item from the underlying collection, if it exists.</summary>
      <returns>Returns true if the item was found and removed; otherwise returns false.</returns>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Microsoft internal use only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.ToList">
      <summary>Gets a list containing strong references to the items in this collection.</summary>
      <returns>Returns a list containing strong references to the items in this collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.AsyncEventHandler">
      <summary>An asynchronous event handler.</summary>
      <returns>A task whose completion signals handling is finished.</returns>
      <param name="sender">The sender of the event.</param>
      <param name="args">The arguments</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.CollectionChangedAsyncEventHandler">
      <summary>Handles changes to an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" /> that returns a<see cref="T:System.Threading.Tasks.Task" /> so it can be asynchronous.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="sender">The sender.</param>
      <param name="e">The event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.GetValueResult">
      <summary>Represents the result of getting a value from the settings store.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.Corrupt">
      <summary>The stored value could not be deserialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.IncompatibleType">
      <summary>The deserialized value could not be converted to the specified type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.Missing">
      <summary>The value is not present in the store.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.ObsoleteFormat">
      <summary>The stored value is in a old serialization format that is no longer supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.Success">
      <summary>The value was retrieved and converted to the specified type successfully.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.UnknownError">
      <summary>An unexpected error occurred.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.IAsyncStringStorage">
      <summary>Stores and retrieves strings. Used as an abstraction over the settings service in the hub and unit-tests.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.ClearAsync">
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.DeleteIfExistsAsync(System.String)">
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.GetAllSinceVersionAsync(System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.GetAsync(System.String)"></member>
    <member name="E:Microsoft.VisualStudio.Settings.IAsyncStringStorage.PropertyChangedAsync"></member>
    <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.SetAsync(Microsoft.VisualStudio.Settings.NamedVersionedString)"></member>
    <member name="E:Microsoft.VisualStudio.Settings.IAsyncStringStorage.StoreUpdated">
      <summary>Indicates that the store has been updated, but it is not known which  specific values have changed. Clients maintaining cached copies of data should refetch in this case.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.IdleStateChangedEventArgs">
      <summary>Arguments for the IdleStateChanged event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IdleStateChangedEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the event args.</summary>
      <param name="isIdle">True if the setting store state is idle, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.IdleStateChangedEventArgs.IsIdle">
      <summary>Determines whether or not the setting store state is idle.</summary>
      <returns>True if the setting store state is idle, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.IListMerger">
      <summary>Handles merging operations for setting collections.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IListMerger.ThreeWayMerge``2(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger)">
      <typeparam name="T"></typeparam>
      <typeparam name="U"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ISettingNameTranslator">
      <summary>Translates between private names and shared names. This allows an application to isolate its settings from other apps by inserting a prefix or suffix.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingNameTranslator.GetPrivateNameFromSharedName(System.String)">
      <summary>Gets the private name.</summary>
      <returns>The private name.</returns>
      <param name="sharedName">The shared name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingNameTranslator.GetSharedNameFromPrivateName(System.String)">
      <summary>Gets the shared name.</summary>
      <returns>The shared name.</returns>
      <param name="privateName">The private name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ISettingsList">
      <summary>A collection of settings. The collection is ordered but the server is order-agnostic. Items can be added only at the front but removed from anywhere. The collection is preserved by the server in the order it was created.Keys are treated as case insensitive.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.AddToFrontAsync(System.String,System.Object,System.Object)">
      <summary>Adds a new element to the front of the list. If there is already an element with the same key in the list, that one is deleted.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="key">The key.</param>
      <param name="value">An object which will be serialized and persisted as the new value.</param>
      <param name="state">A caller-specified object that will be exposed on change events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.ClearAsync(System.Object)">
      <summary>Removes all elements from the list.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="state">A caller-specified object that will be exposed on change events.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Settings.ISettingsList.CollectionChangedAsync"></member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.GetValueOrDefault``1(System.String,``0)">
      <summary>Returns the value corresponding to the given key. Returns <paramref name="defaultValue" /> if the value is missing or not parseable as <paramref name="T" />.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="key">The key.</param>
      <param name="defaultValue">The default value.</param>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.ISettingsList.Keys">
      <summary>Gets a snapshot (not a "live" collection) of the keys in the list.</summary>
      <returns>The keys.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.RefreshContentFromStoreAsync">
      <summary>Refreshes the content of the store, in case the underlying store has gotten out of sync with the in-memory list representation. This can happen if another instance modifies the store, read the store content again and merge it with the in-memory list.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.RemoveAsync(System.String,System.Object)">
      <summary>Removes a specific element from the list, or does nothing if the element is not found.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="key">The key.</param>
      <param name="state">A caller-specified object that will be exposed on change events.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ISettingsManager">
      <summary>Stores and retrieves settings as well as handling synchronization between applications and machines.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.GetOrCreateList(System.String,System.Boolean)">
      <summary>Retrieves an existing list or creates a new one if one with the specified name doesn't exist.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" />.</returns>
      <param name="name">The name of the setting.</param>
      <param name="isMachineLocal">True if the setting is machine-local, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.GetSubset(System.String)">
      <summary>Gets a collection representing all settings whose names match the specified pattern (either an exact match or a prefix match, depending on whether the pattern ends in '*'). Both the exact match and the prefix match are case-insensitive.</summary>
      <returns>The settings subset.</returns>
      <param name="namePattern">The full name of a setting or a prefix ending in '*'.  The comparison is case-insensitive.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.GetValueOrDefault``1(System.String,``0)">
      <summary>Gets the value of a property, or the default if the value is not set.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Settings.ISettingsSubset" />.</returns>
      <param name="name">The name of the setting.</param>
      <param name="defaultValue">The default value.</param>
      <typeparam name="T">The type of the setting.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.NamesStartingWith(System.String)">
      <summary>Returns the names of all settings currently stored whose names begin with the given prefix (case insensitive).</summary>
      <returns>The names.</returns>
      <param name="prefix">The prefix</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.SetOnlineStore(Microsoft.VisualStudio.Settings.IAsyncStringStorage)">
      <summary>A temporary internal helper method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.SetSharedStore(Microsoft.VisualStudio.Settings.IAsyncStringStorage)">
      <summary>A temporary internal helper method that will be removed after Visual Studio 2015 Preview.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.SetValueAsync(System.String,System.Object,System.Boolean)">
      <summary>Sets the value of a property.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="name">The name of the setting.</param>
      <param name="value">An object which will be serialized and persisted as the new value.</param>
      <param name="isMachineLocal">True if the value is machine-local, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.TryGetValue``1(System.String,``0@)">
      <summary>Attempts to reads a value from the store and returns the result of the operation.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Settings.GetValueResult" />.</returns>
      <param name="name">The name of the setting.</param>
      <param name="value">The value.</param>
      <typeparam name="T">The type of the setting.</typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ISettingsManagerHost">
      <summary>Functionality provided by the application that creates an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" /> viaSettingsManagerFactory.CreateInstance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.AppInitCompletionTask">
      <summary>Optional task indicating the host is finished starting. The settings manager will defer resource-intensive tasks until after this task completes.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Settings.ISettingsManagerHost.HostShuttingDown">
      <summary>Raised when the host is about to shut down, to give the settings manager an opportunity to release resources, finish or cancel async tasks, etc. The host should wait until the async event handler is complete (e.g. using the<see cref="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEventAsync``1(System.Delegate,System.Object,``0)" /> extension method) before continuing.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Settings.ISettingsManagerHost.IdleStateChanged">
      <summary>Raised when the host application goes idle or becomes active again, to enable reduced resource usage during the idle period.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerHost.IsSharedOrRoamedSetting(System.String)">
      <summary>Determines whether a setting is private vs. shared/roamed.</summary>
      <returns>False if the setting is private, else true.</returns>
      <param name="settingName">The name of the setting to test.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.Logger">
      <summary>Gets a logger for error telemetry.</summary>
      <returns>The logger.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.NameTranslator">
      <summary>Gets an optional translator between private and shared setting names.</summary>
      <returns>The translator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.PrivateStorage">
      <summary>Gets the backing store for private settings.</summary>
      <returns>The storage object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerHost.RetrieveHubService">
      <summary>Provides the hub service for the settings manager to communicate with the VS hub for sharing and roaming settings.</summary>
      <returns>An object of type <see cref="T:Microsoft.VisualStudio.Shell.VsHub.IVsHubService" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ISettingsSubset">
      <summary>A subset of settings (either a single setting or all settings matching a wildcard pattern) for which one can subscribe to change events.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Settings.ISettingsSubset.SettingChangedAsync">
      <summary>Raised when a setting has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.IStringStorage">
      <summary>Stores and retrieves strings. Used as an abstraction over the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.ClearAsync">
      <summary>Deletes all stored values.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.DeleteIfExistsAsync(System.String)">
      <summary>Deletes a stored value.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="name">The case-insensitive name of the setting.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.Get(System.String)">
      <summary>Returns the value and machine-local flag for the named item, or null if the item doesn't exist.</summary>
      <returns>The flag.</returns>
      <param name="name">The case-insensitive name of the setting</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.NamesStartingWith(System.String)">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Settings.IStringStorage.PropertyChangedAsync">
      <summary>Raised when a setting value is created, changes, or is deleted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.SetAsync(System.String,Microsoft.VisualStudio.Settings.StringWithMachineLocalFlag)">
      <summary>Stores a value and machine-local flag under a specified name.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="name">The case-insensitive name of the setting.</param>
      <param name="value">The value</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.ListMerger">
      <summary>Handles merging operations for setting collections.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ListMerger.#ctor">
      <summary>Initializes a new instance of ListMerger.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ListMerger.Microsoft#VisualStudio#Settings#IListMerger#ThreeWayMerge``2(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger)">
      <typeparam name="T"></typeparam>
      <typeparam name="U"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.ListMerger.ThreeWayMerge``2(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger)">
      <typeparam name="T"></typeparam>
      <typeparam name="U"></typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.NamedVersionedString">
      <summary>A setting value serialized as a string along with an associated name, version, and machine-local flag.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.NamedVersionedString.#ctor(System.String,System.String,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of NamedVersionedString.</summary>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
      <param name="machineLocal">True if the setting is machine-local, otherwise false.</param>
      <param name="revision">The revision number.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.NamedVersionedString.Name">
      <summary>Gets the name of the string.</summary>
      <returns>The name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.PropertyChangedAsyncEventHandler">
      <summary>n event handler similar to <see cref="T:System.ComponentModel.PropertyChangedHandler" /> that returns a <see cref="T:System.Threading.Tasks.Task" /> so the handler can be asynchronous.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="sender">The sender.</param>
      <param name="args">The event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SetAsyncResult"></member>
    <member name="M:Microsoft.VisualStudio.Settings.SetAsyncResult.#ctor(Microsoft.VisualStudio.Settings.SetAsyncResultCode,System.Int32)"></member>
    <member name="P:Microsoft.VisualStudio.Settings.SetAsyncResult.NewRevision">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.SetAsyncResult.ResultCode">
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Settings.SetAsyncResultCode" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SetAsyncResultCode"></member>
    <member name="F:Microsoft.VisualStudio.Settings.SetAsyncResultCode.Conflict">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SetAsyncResultCode.None">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SetAsyncResultCode.Success">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SetAsyncResultCode.Unknown">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingNameTooLongException"></member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingNameTooLongException.#ctor(System.Int32,System.Int32)"></member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingNameTooLongException.ActualSize"></member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingNameTooLongException.MaximumSize"></member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs">
      <summary>Event arguments describing a change to an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Adding(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Object)">
      <summary>Returns a SettingsListChangedEventArgs that describes the addition of a single item to a list.</summary>
      <returns>The event arguments.</returns>
      <param name="item">The item.</param>
      <param name="state">The state. The state. Null by default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Clearing(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object)">
      <summary>Returns a SettingsListChangedEventArgs that describes the removal of all items from a list.</summary>
      <returns>The event arguments.</returns>
      <param name="itemsRemoved">The set of items removed</param>
      <param name="state">The state. The state. Null by default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemAdded">
      <summary>Gets the item that was added.</summary>
      <returns>The item that was added.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemsRemoved">
      <summary>The items that were removed.</summary>
      <returns>Gets the items that were removed.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Operation">
      <summary>Gets the kind of operation.</summary>
      <returns>The kind of operation.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Removing(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object)">
      <summary>Returns a SettingsListChangedEventArgs that describes the removal of multiple itemsfrom a list.</summary>
      <returns>The event arguments.</returns>
      <param name="items">The items.</param>
      <param name="state">The state. Null by default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Removing(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Object)">
      <summary>Returns a SettingsListChangedEventArgs that describes the removal of a single item from a list.</summary>
      <returns>The event arguments.</returns>
      <param name="item">The item.</param>
      <param name="state">The state. Null by default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Replacing(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Object)">
      <summary>Returns a SettingsListChangedEventArgs that describes the replacement of a single item from a list.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs" />.</returns>
      <param name="item">The original item.</param>
      <param name="replacement">The replacement.</param>
      <param name="state">The state. Null by default.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.State">
      <summary>Gets the state.</summary>
      <returns>The state.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsListOperation">
      <summary>The kind of operation performed on an ISettingsList.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.AddItem">
      <summary>An operation that adds an item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.Clear">
      <summary>An operation that clears the list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.RemoveItem">
      <summary>An operation that removes a single item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.RemoveMultipleItems">
      <summary>An operation that removes multiple items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.ReplaceItem">
      <summary>An item has been replaced by a different item.  The old item is specified by <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemsRemoved" /> and its replacement by <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemAdded" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingsManagerFactory">
      <summary>A factory object that constructs an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingsManagerFactory.CreateInstance(Microsoft.VisualStudio.Settings.ISettingsManagerHost)">
      <summary>Provides a settings manager for this application.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" />.</returns>
      <param name="host">The host of the settings manager.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.SettingTooLargeException">
      <summary>This exception is thrown (from <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" />, <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" />, etc.) when a setting value is given whose serialized representation exceeds the size limit on the roaming settings server (currently 1MB).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.SettingTooLargeException.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the SettingTooLargeException.</summary>
      <param name="actualSize">The actual size.</param>
      <param name="maxSize">The maximum size.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingTooLargeException.ActualSize">
      <summary>Gets the actual size of the setting.</summary>
      <returns>The actual size of the setting..</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.SettingTooLargeException.MaximumSize">
      <summary>Gets the maximum size of the setting.</summary>
      <returns>The maximum size of the setting..</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.StoreUpdatedEventHandler">
      <summary>A handler for events raised by <see cref="E:Microsoft.VisualStudio.Settings.IAsyncStringStorage.StoreUpdated" /> that returns a Task so it can be asynchronous.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="sender">The sender.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.StringWithMachineLocalFlag">
      <summary>A setting value serialized as a string that contains a flag indicating whether the value contains machine-local content.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.StringWithMachineLocalFlag.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of StringWithMachineLocalFlag.</summary>
      <param name="value">The value.</param>
      <param name="machineLocal">True if the content is machine-local, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.StringWithMachineLocalFlag.MachineLocal">
      <summary>Determines whether the content is machine-local.</summary>
      <returns>True of the content is machine-local, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.StringWithMachineLocalFlag.Value">
      <summary>Gets the value.</summary>
      <returns>The value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.VersionedString">
      <summary>A setting value serialized as a string along with an associated version and machine-local flag.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.VersionedString.#ctor(System.String,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of VersionedString.</summary>
      <param name="value">The value.</param>
      <param name="machineLocal">True if the content is machine-local, otherwise false.</param>
      <param name="revision">The revision number.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.VersionedString.Revision">
      <summary>Gets the revision number.</summary>
      <returns>The revision number.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger">
      <summary>Telemetry logging for the settings manager, provided by the host application.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger.LogFailure(Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext)">
      <summary>Logs failure.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger.LogFailure(Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext,System.Exception)">
      <summary>Logs information about an operation failure associated with a specific exception.</summary>
      <param name="result">The result.</param>
      <param name="ex">The exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger.LogSuccess(Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext)">
      <summary>Logs information about a successful operation.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingAction">
      <summary>A setting-related action that can be logged via telemetry.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.AddNewItemToFrontOfList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.ClearList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.ClearPrivateStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.DeleteValueFromPrivateStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.DeserializeValue">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.DownloadSharedSettingsToPrivateStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.EnumeratePrivateStoreContents">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.GetAllSinceVersionAsync">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.GetItemFromList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.GetOrCreateList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.GetValueFromLocalStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.GetValueFromOnlineStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.GetValueFromPrivateStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.HandleSettingChangeEvent">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.IdleStateChange">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.MoveItemToFrontOfList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.ReadSettingRegistration">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.RefreshListContentFromStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.RemoveItemFromList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.RemoveMultipleItemsFromList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.SerializeValue">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.SetValueIfUnchangedInPrivateStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.SetValueInLocalStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.SetValueInOnlineStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.SetValueInPrivateStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.ThreeWayMergeList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.TruncateList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.UpdatePrivateStoreFromSharedStore">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.UpdatePrivateStoreFromSharedStoreAsync">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingAction.UpdateSharedStoreFromPrivateStore">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext">
      <summary>The context of a setting-related action for logging via telemetry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.#ctor(Microsoft.VisualStudio.Settings.Telemetry.SettingScenario,Microsoft.VisualStudio.Settings.Telemetry.SettingAction,Microsoft.VisualStudio.Settings.Telemetry.SettingType,System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of SettingLogContext with the specified values.</summary>
      <param name="scenario">The scenario.</param>
      <param name="action">The action.</param>
      <param name="settingType">The type of the setting.</param>
      <param name="settingName">The name of the setting.</param>
      <param name="settingValueSize">The type of the setting value.</param>
      <param name="resultDetail">The result detail.</param>
      <param name="step">The step.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.Action">
      <summary>Gets the setting action.</summary>
      <returns>The action.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.ResultDetail">
      <summary>Gets or sets the result detail.</summary>
      <returns>The result detail.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.Scenario">
      <summary>Gets the scenario.</summary>
      <returns>The scenario.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.SettingName">
      <summary>Gets the name of the setting.</summary>
      <returns>The name of the setting.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.SettingType">
      <summary>Gets the setting type.</summary>
      <returns>The setting type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.SettingValueSize">
      <summary>Gets the size of the setting’s value.</summary>
      <returns>The size.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.SettingValueType">
      <summary>Gets the type of the setting value.</summary>
      <returns>The type of the setting value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.Step">
      <summary>Gets the step.</summary>
      <returns>The step.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario">
      <summary>A high-level scenario type for a setting-related action logged via telemetry.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario.Get">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario.HandleSettingChange">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario.Initialization">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario.List">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario.Serialization">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario.Set">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingType">
      <summary>The scope of the setting involved in a setting-related action logged via telemetry.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingType.LocalOrOnlineSetting">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingType.LocalSetting">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingType.OnlineSetting">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingType.PrivateSetting">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Settings.Telemetry.SettingType.Unknown">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.Accelerator">
      <summary>Utility methods for dealing with keyboard accelerators.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.AccessKeySpecifierFromObject(System.Object)">
      <summary>Converts the input object into an access key specifier.  Objects of type char or single-character strings can be converted.  If an object of a different type is passed in, &amp;amp; is returned.</summary>
      <returns>Access key specifier from <paramref name="accessKeySpecifier" />.</returns>
      <param name="accessKeySpecifier">Object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.StripAccelerators(System.String)">
      <summary>Strips non-escaped accelerator markers ('&amp;amp;') from the given string using the same algorithm used by MsoPwchStripWtz (bugs and all), to wit:Strip odd '&amp;amp;' chars from the string.  As per DrawText, consecutive pairs of '&amp;amp;'s will leave a real '&amp;amp;' character, and all odd '&amp;amp;'s are removed even though only the last may be underlined.If an '&amp;amp;' occurs inside of parentheses then the parentheses and the character following the '&amp;amp;' are also stripped out. This is useful to remove accelerator strings of format (&amp;amp;N) which are appended to label in some FE language versions.NOTE: We do not check for language to do this i.e. we assume that there isn't any realistic label in other languages with (&amp;amp;N) stuck in.</summary>
      <returns>
        <paramref name="input" /> stripped of accelerators.</returns>
      <param name="input">String to strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.StripAccelerators(System.String,System.Char)">
      <summary>Strips non-escaped accelerator markers from the given string using the same algorithm used by MsoPwchStripWtz (bugs and all), to wit:Strip odd chars that match <paramref name="accessSpecifier" />  from the string. As per DrawText, consecutive pairs of characters matching <paramref name="accessSpecifier" /> will leave a single character matching <paramref name="accessSpecifier" />, and all odd characters matching <paramref name="accessSpecifier" /> are removed even though only the last may be underlined.If a character matching <paramref name="accessSpecifier" /> occurs inside of parentheses then the parentheses and the character following the <paramref name="accessSpecifier" /> matching character are also stripped out. This is useful to remove accelerator strings of format (%accessSpecifier%N) which are appended to label in some FE language versions.NOTE: We do not check for language to do this i.e. we assume that there isn't any realistic label in other languages with (%accessSpecifier%N) stuck in.</summary>
      <returns>
        <paramref name="input" /> stripped of accelerators.</returns>
      <param name="input">String to strip.</param>
      <param name="accessSpecifier">Specifies the character to treat as an access key specifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.StripAccelerators(System.String,System.Object)">
      <summary>Returns the <paramref name="input" /> string with the specified access key specifier stripped.</summary>
      <returns>
        <paramref name="input" /> stripped of accelerators.</returns>
      <param name="input">String to strip of access key specifiers.</param>
      <param name="accessKeySpecifier">Character to strip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.BitRotator">
      <summary>Provides helper methods for rotating bits right or left.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Byte,System.Int32)">
      <summary>Rotates the bits of an unsigned byte value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Int16,System.Int32)">
      <summary>Rotates the bits of a signed short value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Int32,System.Int32)">
      <summary>Rotates the bits of a signed int value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Int64,System.Int32)">
      <summary>Rotates the bits of a signed long value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.SByte,System.Int32)">
      <summary>Rotates the bits of a signed byte value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.UInt16,System.Int32)">
      <summary>Rotates the bits of an unsigned short value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.UInt32,System.Int32)">
      <summary>Rotates the bits of an unsigned int value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.UInt64,System.Int32)">
      <summary>Rotates the bits of an unsigned long value to the left.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Byte,System.Int32)">
      <summary>Rotates the bits of an unsigned byte value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Int16,System.Int32)">
      <summary>Rotates the bits of a signed short value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Int32,System.Int32)">
      <summary>Rotates the bits of a signed int value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Int64,System.Int32)">
      <summary>Rotates the bits of a signed long value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.SByte,System.Int32)">
      <summary>Rotates the bits of a signed byte value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.UInt16,System.Int32)">
      <summary>Rotates the bits of an unsigned short value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.UInt32,System.Int32)">
      <summary>Rotates the bits of an unsigned int value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.UInt64,System.Int32)">
      <summary>Rotates the bits of an unsigned long value to the right.</summary>
      <returns>The rotated value.</returns>
      <param name="value">The value to rotate.</param>
      <param name="count">The number of positions to rotate.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.FileStreamStorage`1">
      <summary>A generic implementation of stream storage in the file system. Stores files in a directory. The files it recognizes and accepts for creation can be all files in the directory or only files with a specific extension.</summary>
      <typeparam name="TKey">The type of the stream key.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.#ctor(Microsoft.VisualStudio.Utilities.IStreamStorageKeyFactory{`0},System.String,System.String)">
      <summary>Initializes a new instance of FileStreamStorage.</summary>
      <param name="keyFactory">The storage key factory.</param>
      <param name="storagePath">The storage path.</param>
      <param name="fileExtension">By default, AllExtensions.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.AllExtensions">
      <summary>Represents all file extensions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Contains(`0)">
      <summary>Determines whether the storage contains a stream with the given key.</summary>
      <returns>True if the storage contains a stream with the key, otherwise false.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Create(`0)">
      <summary>Opens a new stream for writing, adding it to storage.</summary>
      <returns>The stream.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Delete(`0)">
      <summary>Deletes from storage the Stream identified by the given key.</summary>
      <returns>True if the deletion was successful, otherwise false.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.DisposeManagedResources"></member>
    <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.EnableRaisingEvents"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.GetEnumerator">
      <summary>Gets an enumerator for keys in storage.</summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.GetStreamSize(`0,System.Int64@,System.Int64@)">
      <summary>Gets the number of bytes actually used by an existing Stream in the storage.</summary>
      <param name="key">The key.</param>
      <param name="actualSize">[out] The size.</param>
      <param name="reservedSize">[out] The reserved size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.GetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind)">
      <summary>Gets the timestamp for an existing Stream in the storage.</summary>
      <returns>The timestamp.</returns>
      <param name="key">The key to the existing stream.</param>
      <param name="kind">The kind of timestamp to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Item(`0)">
      <summary>Open an existing stream in storage for reading.</summary>
      <returns>The stream.</returns>
      <param name="key">The key corresponding to the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Open(`0,Microsoft.VisualStudio.Utilities.StreamAccess)">
      <summary>Open an existing stream in storage.</summary>
      <returns>The stream for <paramref name="key" />, or null if it doesn't exist.</returns>
      <param name="key">The key for the stream.</param>
      <param name="streamAccess">The desired access for the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.SetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind,System.DateTime)">
      <summary>Sets the timestamp for an existing stream in the storage.</summary>
      <param name="key">The key to the existing stream.</param>
      <param name="kind">The kind of timestamp to set.</param>
      <param name="timestamp">The timestamp to set on the stream</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StorageFileExtension">
      <summary>Gets or sets the extension for contained files. If set to AllExtensions, the storage will recognize all files in the storage directory.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StoragePath">
      <summary>Gets or sets the directory that will contain the stored files.</summary>
      <returns>The directory that will contain the stored files.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StreamChanged">
      <summary>Raised when a stream is changed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StreamCreated">
      <summary>aised when a stream is created.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StreamDeleted">
      <summary>Raised when a stream is deleted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator for keys in storage.</summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.GZip">
      <summary>Provides methods for compressing/decompressing a byte array using the GZip algorithm.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.GZip.Compress(System.Byte[])">
      <summary>Compresses a byte array using the GZip algorithm.</summary>
      <returns>Compressed byte array.</returns>
      <param name="data">The array to compress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.GZip.Decompress(System.Byte[],System.Int32)">
      <summary>Decompresses a byte array that was compressed using the GZip algorithm.        /// &lt;/summary&gt;        /// &lt;param name="data"&gt;.&lt;/param&gt;        /// &lt;param name="bufferSize"&gt; &lt;/param&gt;        /// &lt;returns&gt; &lt;/returns&gt;</summary>
      <returns>Decompressed byte array.</returns>
      <param name="data">The array to decompress.</param>
      <param name="bufferSize">The size of the intermediate buffer used to decompress data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.Int16Size">
      <summary>Represents a size using Int16 values for Width/Height, meaning it occupies 4 bytes instead of the 16 bytes required for System.Windows.Size (which uses doubles for Width/Height).This is useful in situations where an integral range of [0-32767] for Width/Height is sufficient and the space occupied by the structure is of concern.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.#ctor(System.Int16,System.Int16)">
      <summary>Constructs an Int16Size structure with an initial width and height.</summary>
      <param name="width">The initial width of the Int16Size.</param>
      <param name="height">The initial height of the Int16Size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.#ctor(System.Int32,System.Int32)">
      <summary>Constructs an Int16Size structure with an initial width and height.</summary>
      <param name="width">The initial width of the Int16Size.</param>
      <param name="height">The initial height of the Int16Size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.#ctor(System.Windows.Size)">
      <summary>Constructs an Int16Size structure from a <see cref="T:System.Windows.Size" /> structure</summary>
      <param name="size">The Size from which the Int16Size is to be initialized.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Area">
      <summary>Gets the area of the Int16Size.</summary>
      <returns>The area of the Int16Size.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Empty">
      <summary>Gets an Int16Size whose IsEmpty property is true.</summary>
      <returns>An Int16Size whose IsEmpty property is true.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.Equals(Microsoft.VisualStudio.Utilities.Int16Size)">
      <summary>Determines whether this Int16Size equals another Int16Size.</summary>
      <returns>True if the height and width of both Int16Size objects are the same, otherwise false..</returns>
      <param name="other">The other Int16Size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.Equals(System.Object)">
      <summary>Determines whether this Int16Size equals the specified Int16Size.</summary>
      <returns>True if the height and width of both Int16Size objects are the same, otherwise false.</returns>
      <param name="other">The other Int16Size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.GetHashCode">
      <summary>Gets the hash code for the object.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Height">
      <summary>Gets or sets the height of the Int16Size.</summary>
      <returns>The height of the Int16Size.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.IsEmpty">
      <summary>Indicates whether the Int16Size is empty.</summary>
      <returns>True if the Int16Size is empty, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.op_Equality(Microsoft.VisualStudio.Utilities.Int16Size,Microsoft.VisualStudio.Utilities.Int16Size)">
      <summary>Determines whether the first Int16Size equals the second Int16Size.</summary>
      <returns>True of both Int16Size objects are equal, otherwise false.</returns>
      <param name="size1">First Int16Size.</param>
      <param name="size2">The second Int16Size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.op_Inequality(Microsoft.VisualStudio.Utilities.Int16Size,Microsoft.VisualStudio.Utilities.Int16Size)">
      <summary>Determines whether two Int16Size objects are not equal.</summary>
      <returns>True if both Int16Size objects are not equal, otherwise false.</returns>
      <param name="size1">The first Int16Size.</param>
      <param name="size2">The second Int16Size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.ToDimensionString">
      <summary>Returns a string as {width}x{height}.</summary>
      <returns>The dimension string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.ToString">
      <summary>Gets the string form of Int16Size.</summary>
      <returns>The string form of Int16Size.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.ToString(System.String,System.IFormatProvider)">
      <summary>Returns the string form of the Int16Size, using the specified format and format provider.</summary>
      <returns>Returns “Empty” for an empty Int16Size, otherwise a formatted string.</returns>
      <param name="format">The format.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.ToWindowsSize">
      <summary>Converts the Int16Size to a <see cref="T:System.Windows.Size" />.</summary>
      <returns>The <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Width">
      <summary>Gets or sets the width of the Int16Size</summary>
      <returns>The width of the Int16Size.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1">
      <summary>Interface to an ordered storage of Streams. Each stream is identified by a key and is located at a given position (represented as an index) in storage.</summary>
      <typeparam name="TKey">The type of the key that identifies a Stream in storage.</typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.Count">
      <summary>Gets the count of Streams in storage.</summary>
      <returns>The count of Streams in storage.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.CreateAt(System.Int32,`0)">
      <summary>Opens a new Stream for writing at the given index, adding it to storage.</summary>
      <returns>A new Stream for writing. It is the responsibility of the caller to dispose the Stream.</returns>
      <param name="index">The index of the new stream.</param>
      <param name="key">The key of the new stream to be added to storage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.DeleteAt(System.Int32)">
      <summary>Deleted the Stream from storage at the given index.</summary>
      <returns>True if deleting was successful, false otherwise.</returns>
      <param name="index">The index of the stream to delete from storage.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.Item(System.Int32)">
      <summary>Opens an existing Stream in storage for reading at the given index.</summary>
      <returns>An open stream for reading. It is the responsibility of the caller to dispose the Stream. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.Reset(System.Collections.Generic.IEnumerable{`0})">
      <summary>Resets the storage with the given enumeration of keys. New keys are enumerated and compared against existing keys in storage. The new keys enumeration determines the position of existing keys in storage: that is, if they exist in both storage and <paramref name="newKeys" />, they will be moved to the position in the <paramref name="newKeys" /> enumeration. Existing keys in storage that do not exist in the <paramref name="newKeys" /> enumeration will be removed from storage. Keys that exist in the <paramref name="newKeys" /> enumeration but do not exist in storage will be added to storage, and an empty Stream will be created for them.</summary>
      <param name="newKeys">The new keys.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.IStreamStorage`1">
      <summary>A Stream storage. Each Stream in storage is identified by a key.</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Contains(`0)">
      <summary>Indicates whether storage contains a Stream with the given key.</summary>
      <returns>True if the Stream with the given key was found, false otherwise.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Create(`0)">
      <returns>Returns <see cref="T:System.IO.Stream" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Delete(`0)">
      <summary>Deletes the Stream identified by the given key from storage.</summary>
      <returns>True if the stream was successfully deleted, false otherwise.</returns>
      <param name="key">The key of the stream to delete from storage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.GetStreamSize(`0,System.Int64@,System.Int64@)">
      <summary>Gets the number of bytes used by an existing Stream in the storage.</summary>
      <param name="key">Key to the existing stream.</param>
      <param name="actualSize">Number of used bytes.</param>
      <param name="reservedSize">Number of reserved bytes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.GetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind)">
      <summary>Gets the timestamp for an existing Stream in the storage.</summary>
      <returns>The timestamp.</returns>
      <param name="key">The key of the existing stream.</param>
      <param name="kind">The kind of timestamp to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Item(`0)">
      <summary>Opens an existing Stream in storage for reading.</summary>
      <returns>An open stream for reading. It is the responsibility of the caller to dispose the Stream.</returns>
      <param name="key">The key of the existing stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Open(`0,Microsoft.VisualStudio.Utilities.StreamAccess)">
      <summary>Opens an existing Stream in storage for reading.</summary>
      <returns>An open stream for reading. It is the responsibility of the caller to dispose the Stream.</returns>
      <param name="key">The key of the existing stream.</param>
      <param name="access">Requested access for the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.SetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind,System.DateTime)">
      <summary>Sets the timestamp for an existing Stream in the storage.</summary>
      <param name="key">The key of the existing stream.</param>
      <param name="kind">The kind of timestamp to set.</param>
      <param name="timestamp">The timestamp to set on the stream.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1">
      <summary>Defines events to notify of changes to streams in an IStreamStorage. If an implementing class can support change notifications, it should also implement IStreamStorageEvents.</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.EnableRaisingEvents"></member>
    <member name="E:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.StreamChanged">
      <summary>Raised when a stream is changed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.StreamCreated">
      <summary>Raised when a stream is created.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.StreamDeleted">
      <summary>Raised when a stream is deleted.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.IStreamStorageKeyFactory`1">
      <summary>Represents an IStreamStorage key object factory that takes as parameter a stream name.</summary>
      <typeparam name="T">The type.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorageKeyFactory`1.CreateKey(System.String)">
      <summary>Creates the key for the s</summary>
      <returns>The type.</returns>
      <param name="streamName">The name of the stream</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ITracer">
      <summary>Provides an event tracer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Indent(System.Int32)">
      <summary>Increases the indent level by <paramref name="count" />.</summary>
      <returns>An object whose lifetime controls the indentation increase. When it is disposed, IndentLevel is decreased by &lt;<paramref name="count" />.</returns>
      <param name="count">The number of levels by which ndentLevel is increased.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.ITracer.IndentLevel">
      <summary>Gets the indentation level of the tracer.</summary>
      <returns>The indentation level of the tracer.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.ITracer.Level">
      <summary>Gets or sets the verbosity level of the tracer.</summary>
      <returns>The verbosity level of the tracer.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.ShouldTrace(System.Diagnostics.TraceEventType)">
      <summary>Determines whether trace listeners should be called, based on the trace event type.</summary>
      <returns>True if the trace listeners should be called; otherwise, false.</returns>
      <param name="eventType">The type of event to test.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.ITracer.Source">
      <summary>Gets the TraceSource for the tracer</summary>
      <returns>The TraceSource for the tracer.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Trace(System.Diagnostics.TraceEventType,System.String)">
      <summary>Traces an event of the specified type with the specified message.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object)">
      <summary>Traces an event of the specified type with the specified message and arguments.</summary>
      <param name="eventType">The event type.</param>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object,System.Object)">
      <summary>Traces an event of the specified type with the specified message and arguments.</summary>
      <param name="eventType">The event type.</param>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])">
      <summary>Traces an event of the specified type with the specified message and arguments.</summary>
      <param name="eventType">The event type.</param>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceError(System.String)">
      <summary>Traces an Error event with the specified message.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceError(System.String,System.Object)">
      <summary>Traces an Error event with the specified message and argument.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceError(System.String,System.Object,System.Object)">
      <summary>Traces an Error event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceError(System.String,System.Object[])">
      <summary>Traces an Error event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceException(System.Exception,System.Diagnostics.TraceEventType)">
      <summary>Traces an exception.</summary>
      <param name="ex">The exception to trace.</param>
      <param name="eventType">The type of event to trace.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceInformation(System.String)">
      <summary>Traces an information event with the specified message.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceInformation(System.String,System.Object)">
      <summary>Traces an information event with the specified message and argument.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceInformation(System.String,System.Object,System.Object)">
      <summary>Traces an information event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceInformation(System.String,System.Object[])">
      <summary>Traces an information event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceVerbose(System.String)">
      <summary>Traces a verbose event with the specified message.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceVerbose(System.String,System.Object)">
      <summary>Traces a verbose event with the specified message and argument.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceVerbose(System.String,System.Object,System.Object)">
      <summary>Traces a verbose event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceVerbose(System.String,System.Object[])">
      <summary>Traces a verbose event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceWarning(System.String)">
      <summary>Traces a warning event with the specified message.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceWarning(System.String,System.Object)">
      <summary>Traces a warning event with the specified message and argument.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceWarning(System.String,System.Object,System.Object)">
      <summary>Traces a warning event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceWarning(System.String,System.Object[])">
      <summary>Traces a warning event with the specified message and arguments.</summary>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.OneOrMany`1">
      <summary>A collection of <paramref name="T" /> that is optimized for minimal space in the case of a single element.</summary>
      <typeparam name="T">The elemental type, which must be a reference type. Note: null may not be used as a value in the collection.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.Add(`0)">
      <summary>Adds a new value to the collection.</summary>
      <param name="value">The value to add.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.OneOrMany`1.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.GetEnumerator">
      <summary>Gets the enumerator for the collection.</summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.OneOrMany`1.Item(System.Int32)">
      <summary>Gets the element at the specified index in the collection.</summary>
      <returns>The item at position <paramref name="index" /> in the collection.</returns>
      <param name="index">The zero-based index of the item requested.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is negative or past than the end of the collection.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index from the collection.</summary>
      <param name="index">The zero-based index of the item to be removed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is negative or past than the end of the collection.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.OneOrMany`1.Enumerator">
      <summary>A struct-based enumerator. Just enough is implemented to satisfy the foreach pattern. Note that the enumerator is not invalidated by updates to the underlying collection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.OneOrMany`1.Enumerator.Current">
      <summary>Gets the current element.</summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next position.</summary>
      <returns>False if the end of the collection has been reached.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ReusableArray`1">
      <summary>Stores a reusable array. The size of the array can be either the requested size exactly or at least the requested size, depending on the value of the requiresExactSize parameter.</summary>
      <typeparam name="T">The type of array to construct.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableArray`1.#ctor(System.Boolean,System.Int32)">
      <summary>Creates a new reusable array.</summary>
      <param name="requiresExactSize">True if the array returned must have an exactly-matching length, false if the array can have a longer length than the length requested.</param>
      <param name="maximumCacheArrayLength">The maximum length that should be cached when returning arrays to the resource store.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableArray`1.Allocate(System.Int32)">
      <summary>Allocates the specified amount of space.</summary>
      <returns>The number of objects requested.</returns>
      <param name="constructorParameter">The number of objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableArray`1.CanReuse(`0[],System.Int32)">
      <summary>Determines whether the array can be reused.</summary>
      <returns>True if the array can be reused, otherwise false..</returns>
      <param name="value">The allocated array.</param>
      <param name="parameter">The requested size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableArray`1.Cleanup(`0[])">
      <summary>Determines whether the length of the array is less than or equal to the maximum cache size.</summary>
      <returns>True if the length of the array is less than or equal to the maximum cache size, otherwise false..</returns>
      <param name="value">The array.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ReusableMemoryStream">
      <summary>Stores a reusable MemoryStream. The MemoryStream will only be stored for reuse if its Capacity does not exceed the maximumStreamCapacity used when constructing the ReusableMemoryStream.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableMemoryStream.#ctor(System.Int32)">
      <summary>Constructs a new ReusableMemoryStream.</summary>
      <param name="maximumStreamCapacity">The maximum capacity for the MemoryStream to be stored for reuse.  Streams exceeding the capacity will be not be stored for reuse.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableMemoryStream.Allocate(System.Int32)">
      <summary>Allocates memory for the number of streams in <paramref name="constructorParameter" />.</summary>
      <returns>The stream</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableMemoryStream.Cleanup(System.IO.MemoryStream)">
      <summary>Sets the stream length to 0. </summary>
      <returns>True if cleanup was successful, otherwise false</returns>
      <param name="value">The stream.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceHolder`1">
      <summary>Holds a reference to a shared resource allocated by a ReusableResourceStoreBase and releases the resource back to the ReusableResourceStoreBase upon dispose.</summary>
      <typeparam name="TResource">The type of resource stored in the holder.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceHolder`1.Dispose">
      <summary>Disposes of the resource, releasing it back to the ReusableResourceStore it came from.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.ReusableResourceHolder`1.Resource">
      <summary>Gets the resource stored by this resource holder. After this object is disposed, returns null.</summary>
      <returns>The resource stored by this resource holder or null after this object is disposed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1">
      <summary>tores a resource that requires no constructor parameters for instantiation.  See ReusableResourceStoreBase for more information.</summary>
      <typeparam name="TResource">The type of the resource.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1.Acquire">
      <summary>Acquires a cached instance of the resource, or allocates a new instance if none are currently available.</summary>
      <returns>A disposable object that should be disposed when usage of the resource is complete.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1.Allocate">
      <summary>Allocates a new instance of the resource when one is not available in the cache.</summary>
      <returns>The resource.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1.CanReuse(`0)">
      <summary>Determines whether an already-cached resource value is safe to reuse when Acquire is called.</summary>
      <returns>True if the object is in a reusable state, otherwise false.</returns>
      <param name="value">The cached value that is about to be reused during Acquire().</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2">
      <summary>Stores a resource that requires a single constructor parameter for instantiation.  See ReusableResourceStoreBase for more information.</summary>
      <typeparam name="TResource">The type of the resource.</typeparam>
      <typeparam name="TConstructorParameter">The type of the constructor parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2.#ctor">
      <summary>Initializes a new instance of ReusableResourceStore.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2.Acquire(`1)">
      <summary>Acquires a cached instance of the resource, or allocates a new instance if none are currently available. This is a disposable object that should be disposed when usage of the resource is complete.</summary>
      <returns>A disposable object that should be disposed when usage of the resource is complete.</returns>
      <param name="constructorParameter">The type of the constructor parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2.Allocate(`1)">
      <summary>Allocates a new instance of the resource when one is not available in the cache.</summary>
      <returns>The resource.</returns>
      <param name="constructorParameter">The type of the constructor parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2.CanReuse(`0,`1)">
      <summary>Validates that an already-cached resource value is safe to reuse when Acquire is called.</summary>
      <returns>True if the object is in a reusable state, otherwise false.</returns>
      <param name="value">The cached value that is about to be reused during Acquire().</param>
      <param name="parameter">The parameter that should be used to construct a new value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1">
      <summary>Provides a base class for storing a frequently-used object that can be reused instead of reallocated, such as StringBuilders or small arrays.</summary>
      <typeparam name="TResource">The type of object stored.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1.#ctor">
      <summary>Initializes a new instance of ReusableResourceStoreBase.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1.AcquireCore">
      <summary>Gets access to the resource stored by this object, and removes the resource so that subsequent callers cannot be handed the same resource at the same time.</summary>
      <returns>A currently-stored instance of the resource, or null if there are no instances currently available in the store.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1.Cleanup(`0)">
      <summary>Immediately before releasing an object, performs cleanup on that object. This might be necessary to clean up state stored in the object to prevent leaking memory.</summary>
      <returns>True if the object was able to be cleaned up and is ready for reuse, otherwise false.</returns>
      <param name="value">The value to clean up.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.ReusableStringBuilder">
      <summary>Represents a reusable StringBuilder. The StringBuilder is cleared after each cleanup to remove content from the previous usage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableStringBuilder.#ctor(System.Int32)">
      <summary>Initializes a new instance of ReusableStringBuilder with the specified cache capacity.</summary>
      <param name="maximumCacheCapacity">The maximum cache capacity.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.ReusableStringBuilder.AcquireDefault(System.Int32)">
      <summary>Gets the default ReusableStringBuilder.</summary>
      <returns>the default ReusableStringBuilder.</returns>
      <param name="capacity">The capacity.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.SerializationExtensions">
      <summary>Provides a set of extension methods for serialization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadDrawingSize(System.IO.BinaryReader)">
      <summary>Reads a <see cref="T:System.Drawing.Size" /> struct from <paramref name="reader" />.</summary>
      <returns>The size.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadGuid(System.IO.BinaryReader)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadInt16Size(System.IO.BinaryReader)">
      <summary>Reads a Int16Size struct from <paramref name="reader" />.</summary>
      <returns>The size.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableBoolean(System.IO.BinaryReader)">
      <summary>Reads a bool? from <paramref name="reader" />.</summary>
      <returns>The nullable Boolean.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableChar(System.IO.BinaryReader)">
      <summary>Reads a char? from <paramref name="reader" />.</summary>
      <returns>The nullable char.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableDouble(System.IO.BinaryReader)">
      <summary>Reads a double? from <paramref name="reader" />.</summary>
      <returns>The nullable double.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableInt16(System.IO.BinaryReader)">
      <summary>Reads a short? from <paramref name="reader" />.</summary>
      <returns>The nullable short.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableInt32(System.IO.BinaryReader)">
      <summary>Reads a int? from <paramref name="reader" />.</summary>
      <returns>The nullable int.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableInt64(System.IO.BinaryReader)">
      <summary>Reads a long? from <paramref name="reader" />.</summary>
      <returns>The nullable long.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableSingle(System.IO.BinaryReader)">
      <summary>Reads a float? from <paramref name="reader" />.</summary>
      <returns>The nullable float.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableUInt16(System.IO.BinaryReader)">
      <summary>Reads a ushort? from <paramref name="reader" />.</summary>
      <returns>The nullable unsigned short.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableUInt32(System.IO.BinaryReader)">
      <summary>Reads a uint? from <paramref name="reader" />.</summary>
      <returns>The nullable unsigned int.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableUInt64(System.IO.BinaryReader)">
      <summary>Reads a ulong? from <paramref name="reader" />.</summary>
      <returns>The nullable unsigned long.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadWindowsSize(System.IO.BinaryReader)">
      <summary>Reads a <see cref="T:System.Windows.Size" /> struct from <paramref name="reader" />.</summary>
      <returns>The window size.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,Microsoft.VisualStudio.Utilities.Int16Size)">
      <summary>Writes an Int16Size to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="size">The size to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Drawing.Size)">
      <summary>Writes a <see cref="T:System.Drawing.Size" /> to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="size">The size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Guid)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Boolean})">
      <summary>Writes a bool? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Char})">
      <summary>Writes a char? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Double})">
      <summary>Writes a double? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int16})">
      <summary>Writes a short? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int32})">
      <summary>Writes a int? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int64})">
      <summary>Writes a long? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Single})">
      <summary>Writes a float? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt16})">
      <summary>Writes a ushort? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt32})">
      <summary>Writes a uint? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt64})">
      <summary>Writes a ulong? to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Windows.Size)">
      <summary>Writes a <see cref="T:System.Windows.Size" /> to <paramref name="writer" />.</summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.StreamAccess">
      <summary>Specifies the type of access.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.StreamAccess.Read">
      <summary>Read access.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.StreamAccess.ReadWrite">
      <summary>Read-write access.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.StreamAccess.Write">
      <summary>Write access.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.StreamAccessException">
      <summary>Represents an error that occurred when trying to access a Stream in storage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamAccessException.#ctor(System.Object)">
      <summary>Initializes a new instance of StreamAccessException with the specified key.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamAccessException.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of StreamAccessException with the specified key and message.</summary>
      <param name="key">The key.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamAccessException.#ctor(System.Object,System.String,System.Exception)">
      <summary>Initializes a new instance of StreamAccessException with the specified key, message, and internal exception.</summary>
      <param name="key">The key.</param>
      <param name="message">The message.</param>
      <param name="internalEx">The internal exception.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.StreamException">
      <summary>Represents errors that occur when accessing Stream storage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamException.#ctor(System.Object)">
      <summary>Initializes a new instance of StreamException with the specified key.</summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamException.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of StreamException with the specified key and message.</summary>
      <param name="key">The key.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamException.#ctor(System.Object,System.String,System.Exception)">
      <summary>Initializes a new instance of StreamException with the specified key, message, and internal exception.</summary>
      <param name="key">The key.</param>
      <param name="message">The message.</param>
      <param name="internalEx">The internal exception.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.StreamException.Key">
      <summary>Gets the key.</summary>
      <returns>The key..</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamException.ToString">
      <summary>Converts the exception to a string.</summary>
      <returns>The string..</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.StreamNotFoundException">
      <summary>Represents the error that occurs when a Stream is not found in storage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamNotFoundException.#ctor(System.Object)">
      <summary>Initializes a new instance of StreamNotFoundException.</summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamNotFoundException.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of StreamNotFoundException with the specified key and message.</summary>
      <param name="key">The key.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamNotFoundException.#ctor(System.Object,System.String,System.Exception)">
      <summary>Initializes a new instance of StreamNotFoundException with the specified key, message, and internal exception.</summary>
      <param name="key">The key.</param>
      <param name="message">The message.</param>
      <param name="internalEx">The internal exception.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1">
      <summary>Monitors the size of an IStreamStorage via its IStreamStorageEvents interface. If the  number of streams or the collective size of streams in the storage exceed  given target thresholds, streams are deleted from the storage until the number/size of streams falls below the target thresholds.</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.#ctor(Microsoft.VisualStudio.Utilities.IStreamStorage{`0},System.Int32,System.Int64,System.Boolean,System.Collections.Generic.IEqualityComparer{`0})"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.DisposeManagedResources">
      <summary>Disposes managed resources for this object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.EnableMonitoring"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.ValidateLimits(System.Int32,System.Int64)"></member>
    <member name="T:Microsoft.VisualStudio.Utilities.TimestampKind">
      <summary>Describes the kind of timestamp.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.TimestampKind.Creation">
      <summary>Describes a timestamp the represents the creation time of an object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.TimestampKind.LastAccess">
      <summary>Describes a timestamp the represents the last access time of an object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.TimestampKind.LastWrite">
      <summary>Describes a timestamp the represents the last write time of an object.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.Tracer">
      <summary>Traces different kinds of events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.#ctor(System.String)">
      <summary>Initializes a new instance of Tracer with the specified name.</summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Indent(System.Int32)">
      <summary>Increases the indent level by <paramref name="count" />.</summary>
      <returns>An object whose lifetime controls the indentation increase.  When it is disposed, IndentLevel is decreased by <paramref name="count" />.</returns>
      <param name="count">The number of levels by which &lt;see IndentLevel is increased.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Tracer.IndentLevel">
      <summary>Gets the indentation level of the tracer.</summary>
      <returns>The indentation level of the tracer.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.Tracer.IndentString">
      <summary>The indent string.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Tracer.Level">
      <summary>Gets or sets the verbosity level of the tracer.</summary>
      <returns>The verbosity level of the tracer.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.Tracer.MaxIndent">
      <summary>The maximum indentation level.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.Tracer.Null">
      <summary>The null tracer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.ShouldTrace(System.Diagnostics.TraceEventType)">
      <summary>Determines whether trace listeners should be called, based on the trace event type.</summary>
      <returns>True if the trace listeners should be called; otherwise, false.</returns>
      <param name="eventType">The type of event to test.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Tracer.Source">
      <summary>Gets or sets the TraceSource for the tracer.</summary>
      <returns>The source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.ToString">
      <summary>Converts the tracer to a string.</summary>
      <returns>The string..</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Trace(System.Diagnostics.TraceEventType,System.String)">
      <summary>Traces an event.</summary>
      <param name="eventType">The type of event.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object)">
      <summary>Traces an event.</summary>
      <param name="eventType">The type of event.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object,System.Object)">
      <summary>Traces an event.</summary>
      <param name="eventType">The type of event.</param>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])">
      <summary>Traces an event.</summary>
      <param name="eventType">The type of event.</param>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceError(System.String)">
      <summary>Traces an error event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceError(System.String,System.Object)">
      <summary>Traces an error event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceError(System.String,System.Object,System.Object)">
      <summary>Traces an error event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceError(System.String,System.Object[])">
      <summary>Traces an error event.</summary>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceException(System.Exception,System.Diagnostics.TraceEventType)">
      <summary>Traces an exception.</summary>
      <param name="ex">The exception.</param>
      <param name="eventType">The type of event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceInformation(System.String)">
      <summary>Traces an information event.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceInformation(System.String,System.Object)">
      <summary>Traces an information event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceInformation(System.String,System.Object,System.Object)">
      <summary>Traces an information event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceInformation(System.String,System.Object[])">
      <summary>Traces an information event.</summary>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceVerbose(System.String)">
      <summary>Traces a verbose event.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceVerbose(System.String,System.Object)">
      <summary>Traces a verbose event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceVerbose(System.String,System.Object,System.Object)">
      <summary>Traces a verbose event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceVerbose(System.String,System.Object[])">
      <summary>Traces a verbose event.</summary>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceWarning(System.String)">
      <summary>Traces a warning event.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceWarning(System.String,System.Object)">
      <summary>Traces a warning event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceWarning(System.String,System.Object,System.Object)">
      <summary>Traces a warning event.</summary>
      <param name="message">The message.</param>
      <param name="arg0">The first argument.</param>
      <param name="arg1">The second argument.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceWarning(System.String,System.Object[])">
      <summary>Traces a warning event.</summary>
      <param name="message">The message.</param>
      <param name="args">The set of arguments.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryReader">
      <summary>A BinaryReader that reads a versioned byte stream.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of VersionedBinaryReader.</summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of VersionedBinaryReader.</summary>
      <param name="stream">The stream.</param>
      <param name="encoding">The encoding.</param>
      <param name="leaveOpen">True to leave the stream open, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadVersioned(System.Int32,Microsoft.VisualStudio.Utilities.VersionedBinaryReader.MultiVersionReadCallback)">
      <summary>Reads from the base stream, with version checking.</summary>
      <param name="expectedVersion">The expected version of the stream. If the actual version doesn't match the expected version, the stream position is advanced beyond the content but &lt;paramref name="callback"/&gt;is not invoked.</param>
      <param name="callback">The delegate that will read the body of the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadVersioned(System.Int32,Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadCallback,System.Boolean)">
      <summary>Reads from the base stream, with version checking.</summary>
      <param name="expectedVersion">The expected version of the stream. If the actual version doesn't match the expected version, the stream position is advanced beyond the content but <paramref name="callback" /> is not invoked.</param>
      <param name="callback">The delegate that will read the body of the stream.</param>
      <param name="throwOnUnexpectedVersion">True to throw an exception on encountering an unexpected version.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.MultiVersionReadCallback">
      <summary>Delegate that will read the body of the stream. It explicitly handles the case where <paramref name="actualVersion" /> does not equal <paramref name="expectedVersion" />.</summary>
      <param name="reader">The reader.</param>
      <param name="expectedVersion">The expected version.</param>
      <param name="actualVersion">The actual version.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadCallback">
      <summary>Delegate that will read the body of the stream.</summary>
      <param name="reader">The VersionedBinaryReader.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter">
      <summary>A BinaryWriter that writes a versioned byte stream.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of VersionedBinaryWriter.</summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of VersionedBinaryWriter.</summary>
      <param name="stream">The stream.</param>
      <param name="encoding">The encoding.</param>
      <param name="leaveOpen">True to leave the stream open, otherwise false.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.HeaderLength">
      <summary>The length in bytes of the version header written to the VersionedBinaryWriter's stream.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.WriteVersioned(System.Int32,Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.WriteCallback)">
      <summary>Writes versioning header to a stream, the calls a delegate to write the rest of the data.</summary>
      <param name="version">The version number to write.</param>
      <param name="callback">The delegate that will write the body of the stream.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.WriteCallback">
      <summary>A delegate that will write the body of the stream.</summary>
      <param name="writer">The VersionedBinaryWriter.</param>
      <param name="version">The version of the stream. It is for reference only; the delegate does not have to write it to the stream.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper">
      <summary>A helper class for scaling coordinates and images according to current DPI scaling set in Windows for the screen. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.#ctor(System.Double)">
      <summary>Initializes a new instance of DpiHelper.</summary>
      <param name="logicalDpi">The logical DPI.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.BitmapScalingMode">
      <summary>The BitmapScalingMode.</summary>
      <returns>Returns <see cref="F:System.Windows.Media.BitmapScalingMode.Unspecified" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <summary>Creates and returns a new bitmap strip from the logical <see cref="T:System.Drawing.Bitmap" /> scaled for the device units. When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi. This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap, because the resultant bitmap strip size may be different from just upscaling as bitmap N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale). This may happen depending on the image width because dpiscale is a double not an int.</summary>
      <returns>The bitmap.</returns>
      <param name="logicalBitmapStrip">The image strip to scale from logical units to device units.</param>
      <param name="logicalImageSize">The size in logical unit of each image in the strip.</param>
      <param name="scalingMode">The scaling mode to use when scaling the images in the strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <summary>Creates and returns a new bitmap strip from the logical <see cref="T:System.Drawing.Bitmap" /> scaled for the device units. When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi. This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap, because the resultant bitmap strip size may be different from just upscaling as bitmap N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale). This may happen depending on the image width because dpiscale is a double not an int.</summary>
      <returns>The bitmap.</returns>
      <param name="logicalBitmapStrip">The image strip to scale from logical units to device units.</param>
      <param name="logicalImageSize">The size in logical unit of each image in the strip.</param>
      <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
      <param name="scalingMode">The scaling mode to use when scaling the images in the strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Icon,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <summary>Creates and returns a new icon scaled for the device units. When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.</summary>
      <returns>The icon.</returns>
      <param name="logicalIcon">The icon.</param>
      <param name="scalingMode">The scaling mode to use when scaling the images in the strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <summary>Creates and returns a new bitmap or metafile from the logical <see cref="T:System.Drawing.Image" /> scaled for the device units. When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.</summary>
      <returns>The image.</returns>
      <param name="logicalImage">The image to scale from logical units to device units.</param>
      <param name="scalingMode">The scaling mode to use when scaling the images in the strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <summary>Creates and returns a new ImageList scaled for the device units. When displayed on the device, the scaled ImageList will have same size as the original ImageList would have when displayed at 96dpi.</summary>
      <returns>The ImageList.</returns>
      <param name="logicalImage">The imagelist to scale from logical units to device units.</param>
      <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
      <param name="scalingMode">The scaling mode to use when scaling the images in the strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <summary>Creates and returns a new ImageList scaled for the device units. When displayed on the device, the scaled ImageList will have same size as the original ImageList would have when displayed at 96dpi.</summary>
      <returns>The ImageList.</returns>
      <param name="logicalImageList">The ImageList to scale from logical units to device units</param>
      <param name="scalingMode">The scaling mode to use when scaling the images in the strip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <summary>Creates and returns a new ImageList scaled for the device units. When displayed on the device, the scaled ImageList will have same size as the original imagelist would have when displayed at 96dpi.</summary>
      <returns>The ImageList.</returns>
      <param name="logicalImageList">The ImageList to scale from logical units to device units</param>
      <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
      <param name="scalingMode">The scaling mode to use when scaling the images in the strip.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.Default">
      <summary>eturns a DpiHelper class suitable for scaling images designed for 100% DPI zoom levels (96dpi). </summary>
      <returns>The default DpiHelper.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DefaultLogicalDpi">
      <summary>The default logical DPI.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceDpiX">
      <summary>Gets the screen's (device) current horizontal DPI.</summary>
      <returns>The screen's (device) current horizontal DPI.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceDpiY">
      <summary>The screen's (device) current vertical DPI.</summary>
      <returns>The screen's (device) current vertical DPI.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Point)">
      <summary>Returns a new Point with the input's coordinates converted from device units to logical units.</summary>
      <returns>The point in logical coordinates.</returns>
      <param name="devicePoint">The point in device coordinates.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Rect)">
      <summary>Returns a new Rect with the input's coordinates converted from device units to logical units.</summary>
      <returns>The rect in logical coordinates.</returns>
      <param name="deviceRect">The rect in device coordinates.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Size)">
      <summary>Returns a new Size with the input's dimensions converted from device units to logical units.</summary>
      <returns>The size in logical units.</returns>
      <param name="deviceSize">The size in device units.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Thickness)">
      <summary>Returns a new Thickness with the input's dimensions converted from device units to logical units.</summary>
      <returns>The thickness in logical units.</returns>
      <param name="deviceThickness">The thickness in device units.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsScalingFactorX">
      <summary>Converts to the horizontal logical units scaling factor.</summary>
      <returns>The scaling factor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsScalingFactorY">
      <summary>Converts to the vertical logical units scaling factor.</summary>
      <returns>The scaling factor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Double)">
      <summary>Transforms a horizontal coordinate from device to logical units.</summary>
      <returns>The horizontal value in logical units.</returns>
      <param name="value">The horizontal value in device units.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Int32)">
      <summary>Transforms a horizontal integer coordinate from device to logical units.</summary>
      <returns>The horizontal value in logical units.</returns>
      <param name="value">The horizontal value in device units.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Single)">
      <returns>The horizontal value in logical units.</returns>
      <param name="value">The horizontal value in device units.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Double)">
      <summary>Transforms a vertical coordinate from device to logical units.</summary>
      <returns>The vertical value in logical units.</returns>
      <param name="value">The horizontal value in logical units.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Int32)">
      <summary>Transforms a vertical coordinate from device to logical units.</summary>
      <returns>The vertical value in logical units.</returns>
      <param name="value">The horizontal value in logical units.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Single)">
      <summary>Transforms a vertical coordinate from device to logical units.</summary>
      <returns>The vertical value in logical units.</returns>
      <param name="value">The horizontal value in logical units.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DpiScalePercentX">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DpiScalePercentY">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetBitmapScalingModeOverride(System.Int32,System.Windows.Media.BitmapScalingMode)">
      <summary>Gets the bitmap scaling mode override.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.BitmapScalingMode" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceActualSize(System.Windows.FrameworkElement)">
      <summary>Gets the FrameworkElement's Size in device units.</summary>
      <returns>The actual Size in device units.</returns>
      <param name="element">The FrameworkElement to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceHeight(System.Windows.Window)">
      <summary>Gets the window's height in device units.</summary>
      <returns>The height in device units.</returns>
      <param name="window">The window to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceLeft(System.Windows.Window)">
      <summary>Gets the window's left coordinate in device units.</summary>
      <returns>The left coordinate in device units.</returns>
      <param name="window">The window to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceRect(System.Windows.Window)">
      <summary>Gets the window's rectangle in device units.</summary>
      <returns>The rectangle in device units.</returns>
      <param name="window">The window to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceTop(System.Windows.Window)">
      <summary>Gets the window's top in device units.</summary>
      <returns>The window's top in device units.</returns>
      <param name="window">The window to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceWidth(System.Windows.Window)">
      <summary>Gets the window's width in device units.</summary>
      <returns>The window's width in device units.</returns>
      <param name="window">The window to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetHelper(System.Int32)">
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetImageScalingModeOverride(System.Int32,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
      <returns>Returns <see cref="T:Microsoft.VisualStudio.PlatformUI.ImageScalingMode" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetUsePreScaledImagesOverride(System.Int32,System.Boolean)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.ImageScalingMode">
      <summary>Gets the ImageScalingMode algorithm to be used for resizing images in WinForms/Win32. This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like General\ImageScalingXXX = (ImageScalingMode)value, with XXX the zoom factor in percents, e.g. ImageScaling150, etc.</summary>
      <returns>The ImageScalingMode algorithm.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.IsScalingRequired">
      <summary>Determines whether scaling is required when converting between logical-device units</summary>
      <returns>True if scaling is required, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalDpiX">
      <summary>Gets the helper's logical horizontal DPI.</summary>
      <returns>The helper's logical horizontal DPI.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalDpiY">
      <summary>Gets the helper's vertical horizontal DPI.</summary>
      <returns>The helper's logical vertical DPI.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Icon@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Point)">
      <returns>Returns <see cref="T:System.Drawing.Point" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.PointF)">
      <returns>Returns <see cref="T:System.Drawing.PointF" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Rectangle)">
      <returns>Returns <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.RectangleF)">
      <returns>Returns <see cref="T:System.Drawing.RectangleF" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Size)">
      <returns>Returns <see cref="T:System.Drawing.Size" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.SizeF)">
      <returns>Returns <see cref="T:System.Drawing.SizeF" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Point)">
      <returns>Returns <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Rect)">
      <returns>Returns <see cref="T:System.Windows.Rect" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Size)">
      <returns>Returns <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Thickness)">
      <returns>Returns <see cref="T:System.Windows.Thickness" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsScalingFactorX">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsScalingFactorY">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Double)">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Single)">
      <returns>Returns <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Double)">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Int32)">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Single)">
      <returns>Returns <see cref="T:System.Single" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.PreScaledImageLayoutTransformScaleX">
      <summary>Gets the horizontal scale value that should be used with a LayoutTransform/ScaleTransform to scale back an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results.</summary>
      <returns>The horizontal scale value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.PreScaledImageLayoutTransformScaleY">
      <summary>Gets the vertical scale value that should be used with a LayoutTransform/ScaleTransform to scale back an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results.</summary>
      <returns>The vertical scale value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.RoundToDeviceUnitsX(System.Double)">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.RoundToDeviceUnitsY(System.Double)">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.ScaleLogicalImageForDeviceSize(System.Windows.Media.ImageSource,System.Windows.Size,System.Windows.Media.BitmapScalingMode)">
      <returns>Returns <see cref="T:System.Windows.Media.ImageSource" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceHeight(System.Windows.Window@,System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceLeft(System.Windows.Window@,System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceTop(System.Windows.Window@,System.Double)"></member>
    <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceWidth(System.Windows.Window@,System.Double)"></member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.TransformFromDevice">
      <returns>Returns <see cref="T:System.Windows.Media.MatrixTransform" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.TransformToDevice">
      <returns>Returns <see cref="T:System.Windows.Media.MatrixTransform" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.UsePreScaledImages">
      <summary>Determines whether images should be pre-scaled at zoom levels higher than 200%, using NearestNeighbor up to the largest multiple of 100%</summary>
      <returns>True if images should be pre-scaled, otherwise false.</returns>
    </member>
  </members>
</doc>