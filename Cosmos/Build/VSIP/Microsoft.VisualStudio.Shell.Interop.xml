<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.Interop</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS">
      <summary>Editor Factory Notify flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ClonedFromTemplate">
      <summary>AddNewItem operation. File passed was cloned from a template file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ItemAdded">
      <summary>AddItem operation. File passed was added as an existing file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ItemAddedAsCopyOf">
      <summary>AddItem operation. File added as a "Copy of file" (copy/paste to same folder scenario).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ItemAddedFromSaveAs">
      <summary>AddItem operation. File passed was added as a result of a Save As operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCFONTFLAGS">
      <summary>The FCFONTFLAGS enumeration is used to specify font display properties that are not provided by the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" /> enumeration for a font used by a given Display Item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCFONTFLAGS.FCFF_TRACK_PLAINTEXT_BOLD">
      <summary>Specifies that the "bold" attribute of this Display Item is tracking (will be the same as) the "bold" attribute of the "plain text" item (see the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_PLAINTEXT" /> member of <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS" />).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS">
      <summary>The FCITEMFLAGS enumeration is used to specify non-display attributes for a font used by a given Display Item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWBGCHANGE">
      <summary>Enables the Background Color drop-down box that allows the user to change the background color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWBOLDCHANGE">
      <summary>Enables the Bold checkbox that allows the user to change the bold attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWCUSTOMCOLORS">
      <summary>Enables the Custom buttons that allows the user to create and select customized colors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWFGCHANGE">
      <summary>Enables the Foreground Color drop-down box that allows the user to change the foreground color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ISMARKER">
      <summary>Specifies that the item is a marker type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_PLAINTEXT">
      <summary>Indicates that the Display Items is to be treated as "plain text." This means that the color used to display the item will track the environment wide font and color settings for plain text color.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY">
      <summary>The FCPRIORITY enumeration is used to group categories within the list of categories provided by the Fonts and Colors page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY.FCP_CLIENTS">
      <summary>Specifies the base priority for all other categories.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY.FCP_EDITOR">
      <summary>Specifies the base priority of Text Editor and Printer categories.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY.FCP_ENVIRONMENT">
      <summary>Specifies the base priority of general environment categories, such as Dialogs and Tool Windows.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS">
      <summary>The FCSTORAGEFLAGS enumeration's values are used by a VSPackage managing fonts and color to indicate the mode used by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.OpenCategory(System.Guid@,System.UInt32)" /> to open a category's registry key.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_LOADDEFAULTS">
      <summary>Settings that have not been saved to the registry are loaded directly from the VSPackage providing font and color defaults. If it is not set, only settings that have been changed from their defaults will be retrievable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_NOAUTOCOLORS">
      <summary>Color values returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.GetItem(System.String,Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo[])" /> will be real RGB values. If a color had been specified as a COLORREF_AUTO value, it will now be converted to an RGB value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_PROPAGATECHANGES">
      <summary>Registry updates will generate an event which can be handled by VSPackages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_READONLY">
      <summary>Registry will be opened for read only access. If this flag is omitted, when calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.OpenCategory(System.Guid@,System.UInt32)" /> to open a category without stored font and color information, the method will create entries of for the information.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS">
      <summary>The FONTCOLORFLAGS enumeration is used to indicate to the Visual Studio Environment how to handle the changes made through the Fonts and Colors properties page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_AUTOFONT">
      <summary>Instructs the Fonts and Colors page to display an item called Automatic in the Fontdropdown box which corresponds to the current "icon" system font setting in Windows. Automatic will be the default setting for the category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_MUSTRESTART">
      <summary>Instructs Visual Studio to warn that the IDE must be restarted for changes to take effect.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_ONLYNEWINSTANCES">
      <summary>Generates a warning that changes will take effect only for new of the UI component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_ONLYTTFONTS">
      <summary>Restricted the Font dropdown box of the Fonts and Colors property page to presenting TrueType fonts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_SAVEALL">
      <summary>If set the Visual Studio environment will save all customizable Display Item attributes if even on has been modified (normally, only attributes that have changed from their defaults are saved).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE">
      <summary>Specifies close options when closing a window frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE.FRAMECLOSE_NoSave">
      <summary>Do not save the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE.FRAMECLOSE_PromptSave">
      <summary>Prompt for document save.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE.FRAMECLOSE_SaveIfDirty">
      <summary>Save the document if it is dirty.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW">
      <summary>Specifies the state of a window frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_AutoHideSlideBegin">
      <summary>Autohidden window is about to slide into view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_DestroyMultInst">
      <summary>Multi-instance tool window destroyed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_Hidden">
      <summary>Obsolete; use WinHidden.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_TabActivated">
      <summary>A tabbed window is activated (made visible).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_TabDeactivated">
      <summary>A tabbed window is deactivated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinClosed">
      <summary>Window is closed and persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinHidden">
      <summary>Window (tabbed or otherwise) is hidden.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinMaximized">
      <summary>Window is maximized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinMinimized">
      <summary>Window is minimized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinRestored">
      <summary>Window is restored to normal state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinShown">
      <summary>A nontabbed window is made visible.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID">
      <summary>Specifies Special Project Files that can be created or queried for with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_AppConfig">
      <summary>Get AppConfig files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_FIRST">
      <summary>Indicates the first PSFFIELDID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_LAST">
      <summary>Indicates the last PSFFIELDID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_Licenses">
      <summary>Get Licenses.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS">
      <summary>Specifies how <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)" /> is to handle Project Special Files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS.PSFF_CreateIfNotExist">
      <summary>Create the file if it doesn't exist.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS.PSFF_FullPath">
      <summary>Filename includes the full path.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS">
      <summary>Specifies toolbox item options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_CANTREMOVE">
      <summary>User cannot remove item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_DELETEBITMAP">
      <summary>Toolbox deletes bitmap.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_DONTPERSIST">
      <summary>Item is not persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_IMAGEINDEX">
      <summary>The two elements <paramref name="iImageIndex" /> and <paramref name="iImageWidth" />, from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" /> structure, are valid.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS">
      <summary>Controls characteristics of a UI hierarchy window. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_ActAsProjectTypeWin">
      <summary>Determines whether the UI hierarchy window tracks the environment's selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_DoNotSortRootNodes">
      <summary>Default is alpha sort on caption enabled toolbars in UIHierarchyWindow tool window. Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ToolbarHost" /> to access the window's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" /> implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_ForceSingleSelect">
      <summary>Forces selection of a single node in a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_HandlesCmdsAsActiveHierarchy">
      <summary>This is for windows that handle commands when they are the active hierarchy even if their hierarchy doesn't have focus (like Project/Add Item).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_InitWithHiddenParentRoot">
      <summary>Creates a hidden root hierarchy that is the parent of your top-level nodes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_InitWithHiddenRootHierarchy">
      <summary>Indicates that the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> pointer passed in with the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" /> is actually a special hidden root hierarchy</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_LinesAtRoot">
      <summary>Style set on the tree view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_NoStateIcon">
      <summary>Specifies whether your hierarchy window shows state icons. A treeview can have two icon channels, of which the state icon is the leftmost icon channel. For example, in the project window the state icon may show the source control in/out state of the item, while the normal icon shows the normal glyph for that type of file. If do not want your hierarchy window to show any state icons, then specify this flag in a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_PropagateAltHierarchyItem">
      <summary>If specified, when <see cref="T:EnvDTE.UIHierarchy" /> selects a node, <see cref="T:EnvDTE.UIHierarchy" /> creates alternate hierarchies.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_RouteCmdidDelete">
      <summary>Controls the handling of the delete command within the hierarchy window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SortChildNodes">
      <summary>Specifies whether non-root nodes in your hierarchy window should be sorted, or left in the order in which the hierarchy enumerates them to the hierarchy window (<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FirstChild" /> and <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NextSibling" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SupportToolWindowToolbars">
      <summary>To control features pertaining to a tool window's toolbar, call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetProperty(System.Int32,System.Object@)" /> and specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ToolbarHost" />. This allows you to access the tool window's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" /> implementation and add a toolbar. This approach is only valid if the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" /> method is called and a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SupportToolWindowToolbars" /> is specified for the <paramref name="grfUIHWF" /> parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_UseSolutionAsHiddenRootHierarchy">
      <summary>Indicates that the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> pointer passed in with the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" /> is actually a special hidden root hierarchy.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS">
      <summary>Sets selection behavior in the hierarchy window when a new hierarchy is added.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS.ADDHIEROPT_DontSelectNewHierarchy">
      <summary>Adds the new hierarchy without changing the current selection.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS">
      <summary>Controls the characteristics of items added to a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AddExistingItems">
      <summary>Uses the Add Existing Item dialog box (mutually exclusive with VSADDITEM_AddNewItems).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AddNewItems">
      <summary>Uses the Add New Item dialog box (mutually exclusive with VSADDITEM_AddExistingItems).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowHiddenTreeView">
      <summary>Allows tree view to be hidden if only one template node is present.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowMultiSelect">
      <summary>Allows multiple selections in the existing tab. This flag is included for future expansion and not yet implemented. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowOnlyFileSysLocs">
      <summary>Allows only local file system locations in the Add Existing Item dialog. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowSingleTreeRoot">
      <summary>Allows the tree view to have only one root node (default is to use subnodes).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter">
      <summary>Allows <paramref name="pbstrFilter" />[out] parameter to be returned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ExpandSingleTreeRoot">
      <summary>Asks the tree view to expand a single root node (default is to not expand it).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_HideNameField">
      <summary>Disables the item name field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_NewDirectoryForItem">
      <summary>Item is placed in new directory (location field tracks name field).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_NoOpenButtonDropDown">
      <summary>Doesn't show drop-down menu under Open button on dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ProjectHandlesLinks">
      <summary>Project adds items as links—enables Link menu item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowDontShowAgain">
      <summary>Shows the Don't show again check box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowLocationField">
      <summary>Shows the location field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowProjectTypesOnly">
      <summary>Shows only project types in the dialog box; does not show items associated with projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_SuggestTemplateName">
      <summary>Suggests template name for item.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS">
      <summary>Determines whether to add a new virtual project to the Project window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_AddToProjectWindow">
      <summary>Add the virtual project to the Solution Explorer window hierarchy. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromBuild">
      <summary>Exclude the virtual project from the build. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromCfgUI">
      <summary>Exclude the virtual project from the configuration UI. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromDebugLaunch">
      <summary>Exclude the virtual project from debugging. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromDeploy">
      <summary>Exclude the virtual project from deployment of the project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromEnumOutputs">
      <summary>Exclude the virtual project from enumeration output groups. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromSCC">
      <summary>Exclude items within the virtual project from source code control. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS">
      <summary>Sets a viewer to be one of the system defaults.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS.ASP_MakeDefault">
      <summary>Make this viewer a default. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS.ASP_UnsetOldDefaults">
      <summary>Unset all other default viewers. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS">
      <summary>Provides settings for project configurations. Currently, these flags are unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS.CFGFLAG_CfgsAreNotBrowsable">
      <summary>This flag is currently unused. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS.CFGFLAG_CfgsUseIndependentPages">
      <summary>This flag is currently unused. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID">
      <summary>Identifies configuration properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_FIRST">
      <summary>Indicates the first VSCFGPROPID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_IntrinsicExtenderCATID">
      <summary>Establishes the basis for automation extenders to make the configuration automation assignment extensible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_LAST">
      <summary>Indicates the last VSCFGPROPID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_Reserved1">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_Reserved2">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsCfgAdd">
      <summary>If true, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.AddCfgsOfCfgName(System.String,System.String,System.Int32)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsCfgDelete">
      <summary>If true, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.DeleteCfgsOfCfgName(System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsCfgRename">
      <summary>If true, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.RenameCfgsOfCfgName(System.String,System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsPlatformAdd">
      <summary>If true, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.AddCfgsOfPlatformName(System.String,System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsPlatformDelete">
      <summary>If true, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.DeleteCfgsOfPlatformName(System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsPrivateCfgs">
      <summary>Reserved. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS">
      <summary>Controls whether the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.FindCommonSelectedHierarchy(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@)" /> can return the solution as the common hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS.COMHIEROPT_AllowHiddenRoot">
      <summary>Okay to return Solution node hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS.COMHIEROPT_RootHierarchyOnly">
      <summary>Return project nodes only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS">
      <summary>Specifies attributes for an AddReference dialog box that the user can use to add components to the specified project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideBrowseButton">
      <summary>Doesn't show the Browse button on the dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideCOMClassicTab">
      <summary>Doesn't show the COM Classic tab provided by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideCOMPlusTab">
      <summary>Doesn't show the COM+ tab provided by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideSolutionTab">
      <summary>Doesn't show the Solution tab provided by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_IgnoreMachineName">
      <summary>Doesn't use <paramref name="lpszMachineName" />—enumerates local machine.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_MultiSelectMode">
      <summary>Allows selection of multiple components.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_ShowOnlySpecifiedTab">
      <summary>Shows only the tab specified by <paramref name="rguidShowOnlyThisTab" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN">
      <summary>Controls how a new document window is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fAltDocData">
      <summary>Used for editing sub-pieces of a larger document in individual document windows. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fCreateNewWindow">
      <summary>Allows an additional window to be created for Window.NewWindow support.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fDockable">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_RDTFLAGS_MASK">
      <summary>Mask for running document table flags. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS">
      <summary>Controls how a new editor is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_CLONEFILE">
      <summary>Mutually exclusive with<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_OPENFILE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_OPENASNEW">
      <summary>Editor factory should perform necessary fixups.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_OPENFILE">
      <summary>Mutually exclusive with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_CLONEFILE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_SILENT">
      <summary>Editor factory should create editor silently.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS">
      <summary>Controls how a project is created or opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_CLONEFILE">
      <summary>Create a new project based on an existing project template already on disk.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_NONLOCALSTORE">
      <summary>Project uses nonlocal storage and different save mechanism.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_NOTINSLNEXPLR">
      <summary>Project is not shown as a normal project in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_OPENDIRECTORY">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_OPENFILE">
      <summary>Project already exists on disk. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_OVERWRITE">
      <summary>If there is a project of the same name on disk already, then overwrite this project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_SILENT">
      <summary>Use when you do not want to report any failure, as in the case of automation. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS">
      <summary>Controls how a new solution is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_DELAYNOTIFY">
      <summary>Delays OnAfterOpenSolution notification until after creation of first project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_OVERWRITE">
      <summary>Overwrites existing solution if one exists with the specified name at the specified location.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_SILENT">
      <summary>Creates the solution silently; does not query the user at all.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_TEMPORARY">
      <summary>Creates a temporary solution—solution items cannot be added until it is saved.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN">
      <summary>Controls how a new tool window is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fActivateWithDocument">
      <summary>Activate tool window when a document is opened. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fActivateWithProject">
      <summary>Activate tool window when a project is opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fForceCreate">
      <summary>Tool window is created at Visual Studio startup.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fHasBorder">
      <summary>Tool window has a border.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fInitNew">
      <summary>Initialize a new tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fMultiInstance">
      <summary>Tool window can be created multiple times. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fToolbarHost">
      <summary>Tool window can host a toolbar. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_RESERVED_MASK">
      <summary>Reserved bits.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER">
      <summary>Specifies flags for creating a Web browser with the methods of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_AddToMRU">
      <summary>Add to most recently used list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_AllowAutosearch">
      <summary>Enable autosearch in browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_AutoShow">
      <summary> Show the browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_ForceNew">
      <summary>Force create.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_FrameDock">
      <summary>Dock the new browser frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_FrameFloat">
      <summary>Float the now browser frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_FrameMdiChild">
      <summary>Default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NavOptionMask">
      <summary>Hide specified navigation controls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NoHistory">
      <summary>Do not keep browse history. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NoReadCache">
      <summary>Do not cache read pages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NoWriteToCache">
      <summary>Do not write to the cache.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionCustomDocProps">
      <summary>Use custom document properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionDisableDockable">
      <summary> Do not enable browser to be dockable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionDisableFind">
      <summary>Disable the Find menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionDisableStatusBar">
      <summary>Disable the Status bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionNoDocProps">
      <summary>Disable document properties options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionShowDocProps">
      <summary> Show document properties options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionsMask">
      <summary>Use Options mask.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_ReuseExisting">
      <summary>Reuse an existing browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartCustom">
      <summary>Open the browser at a custom page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartHome">
      <summary>Open the browser at the home page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartSearch">
      <summary>Open the browser at the search page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartURLMask">
      <summary>Lets start URLs conform to a mask.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS">
      <summary>Specifies flags that control how the debugger is started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_DetachOnStop">
      <summary>Detaches instead of terminating when debugging stopped.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_LocalDeploy">
      <summary>Passed to M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.DebugLaunch(System.UInt32)   to allow optimizations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_NoDebug">
      <summary>Launches without attaching a debugger.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_Selected">
      <summary>Launches selected project instead of startup project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_Silent">
      <summary>Start the debugger without prompting the user</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_StopDebuggingOnEnd">
      <summary>When this process ends, debugging is stopped.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_WaitForAttachComplete">
      <summary>When <see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_LaunchByWebServer" />, waits for the attachment to finish before continuing to launch other targets.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION">
      <summary>Specifies how an item is deleted from a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_DeleteFromStorage">
      <summary>Physically deletes item. This is valid if <paramref name="itemid" /> parameter is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_RemoveFromProject">
      <summary>Does not physically delete item. This is invalid if <paramref name="itemid" /> parameter is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS">
      <summary>VSDIR flags for items and projects to indicate desired AddProject/AddItem dialog state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_BlankSolution">
      <summary>Creates a "blank" (empty) solution—doesn't create a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DisableBrowseButton">
      <summary>Disables the Browse button for this project/item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DisableLocationField">
      <summary>Disables the location field for this project/item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DisableNameField">
      <summary>Disables the name field for this project/item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DontAddDefExtension">
      <summary>Doesn't append a default extension to the name provided for the item (invalid for project).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DontInitNameField">
      <summary>Doesn't initialize the name field for this project/item with a valid name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_NonLocalTemplate">
      <summary>Uses "nonlocal" UI behavior and saves mechanisms.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT">
      <summary>Determines whether a document is part of a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT.DOCINPROJ_DocInExtFilesProject">
      <summary>Document resides as a file external to the project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT.DOCINPROJ_DocInProject">
      <summary>Document is in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT.DOCINPROJ_DocNotInProject">
      <summary>Document is not in the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT">
      <summary>Specifies the deployment services in a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT.VSDPLSVCSINPROJECT_MTS">
      <summary>Microsoft Transaction Server (MTS) deployment project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT.VSDPLSVCSINPROJECT_SERVER">
      <summary> Server deployment project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT.VSDPLSVCSINPROJECT_WEB">
      <summary> Web deployment project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN">
      <summary>Controls how an editor document window is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN.ECDW_CDWFLAGS_MASK">
      <summary>Legal values taken from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN.ECDW_UserCanceled">
      <summary>User has canceled CreateEditorInstance operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSEHI">
      <summary>Specifies Enum Hierarchy Items to return via <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_AllowSideEffects">
      <summary>Recurse into nodes that return true for <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HasEnumerationSideEffects" /> (requires VSEHI_NEST) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_Branch">
      <summary>Returns branch nodes (expandable).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_DataConn">
      <summary>Obsolete. Use VSEHI_AllowSideEffects instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_Leaf">
      <summary>Returns leaf nodes (nonexpandable).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_Nest">
      <summary>Visits nested hierarchies.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_OmitHier">
      <summary>Doesn't fill <paramref name="pHier" /> member of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> (incompatible with VSEHI_Nest).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS">
      <summary>Specifies which projects to enumerate within a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_ALLINSOLUTION">
      <summary>All normal projects referenced in the solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_ALLPROJECTS">
      <summary>All projects including normal projects directly referenced in the solution file as well as all virtual projects including nested (a.k.a. sub) projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_ALLVIRTUAL">
      <summary>All 'virtual' projects of any kind.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_LOADEDINSOLUTION">
      <summary>Normal projects referenced in the solution file and currently loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_MATCHTYPE">
      <summary>All normal projects referenced in the solution file projects with project type GUID matching parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_UNLOADEDINSOLUTION">
      <summary>Normal projects referenced in the solution file and currently not loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_VIRTUALNONVISIBLEPROJECT">
      <summary>"Virtual" projects are not visible as top-level projects in Solution Explorer. NOTE: these are projects that are not directly referenced in the solution file and are usually displayed as nested (a.k.a. sub) projects in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_VIRTUALVISIBLEPROJECT">
      <summary>"Virtual" projects are visible as top-level projects in Solution Explorer.  </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN">
      <summary>Finds a tool window within the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN.FTW_fFindFirst">
      <summary>Finds first <paramref name="multiinst" /> tool window (ignores <paramref name="dwToolWinId" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN.FTW_fForceCreate">
      <summary>Forces a tool window to be created. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN.FTW_fFrameOnly">
      <summary>Gets the frame; no affect if there's an object behind it.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID">
      <summary>Specifies property identifiers for window frames, document frames, and tool window frames.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData">
      <summary>UNK. If this window edits a piece of a larger document, then <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> is the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object for the piece of the document that is being edited in the window, whereas the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_RDTDocData" /> is the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object for all of the document registered in the RDT. <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> objects are not registered in the RDT. Document Windows that have <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> objects are created by using <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fAltDocData" /> flag. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_BitmapIndex">
      <summary>I4. Index into strip if bitmap handle is a strip.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_BitmapResource">
      <summary>I4. Resource number of bitmaps in satellite dll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_Caption">
      <summary>BSTR. Full window caption.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_CmdUIGuid">
      <summary>GUID used to control visibility of toolbars and AutoVisible tool windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_CreateDocWinFlags">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> flags passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_CreateToolWinFlags">
      <summary>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN" /> flags passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocCookie">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable" /> (RDT) key.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocData">
      <summary>UNK. Returns <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> if available. Otherwise, returns RDTDocData. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocView">
      <summary>UNK. Object that fills the client area of the window. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_EditorCaption">
      <summary>BSTR. Portion of caption that is defined by editor implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ExtWindowObject">
      <summary>UNK. Environment's "Window" automation IDispatch object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_FIRST">
      <summary>Indicates the first property ID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_FrameMode">
      <summary>I4. Docked, float, and so on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_GuidAutoActivate">
      <summary>OBSOLETE. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_guidEditorType">
      <summary>GUID. Uniquely identifies which <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" /> created the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_GuidPersistenceSlot">
      <summary>GUID. Uniquely identifies a tool window type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_HideToolwinContainer">
      <summary>I2. Makes the tool window's container hidden when and saves the data file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_Hierarchy">
      <summary>UNK. Owns <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_InheritKeyBindings">
      <summary>GUID. Most often used by a window to inherit the key bindings of the <see cref="T:EnvDTE.TextEditor" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_IsWindowTabbed">
      <summary>I2. Tabbed state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ItemID">
      <summary>I4. VSITEMID of document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_LAST">
      <summary>Indicates the last <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_MultiInstanceToolNum">
      <summary>I4. ID of a multi-instance tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_NIL">
      <summary>NIL. -1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_OwnerCaption">
      <summary>BSTR. Portion of caption defined by owning <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_pszMkDocument">
      <summary>BSTR. <paramref name="pszMkDocument" /> passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_pszPhysicalView">
      <summary>BSTR. Identifies the type of window created by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" /> (for example "Form").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_RDTDocData">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> registered in the RDT for the document in this frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ShortCaption">
      <summary>BSTR. Partial window caption.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_SPFrame">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> which is site object for <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocView" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_SPProjContext">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> provided by the owning <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ToolbarHost">
      <summary>UNK. IVsToolbarHost used to add toolbars to window. Property is only valid if <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fToolbarHost" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SupportToolWindowToolbars" /> is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_Type">
      <summary>I4. Frame type - document or tool. For all frame windows, 1== Document Frame, 2 == Tool Frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_UserContext">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ViewHelper">
      <summary>UNK. Additional interfaces for control (for all frame windows).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_WindowHelpCmdText">
      <summary>BSTR. Command text for <paramref name="cmdidWindowHelp." /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_WindowHelpKeyword">
      <summary>BSTR. Keyword for <paramref name="cmdidWindowHelp." /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_WindowState">
      <summary>I4. Normal, Minimized, or Maximized</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS">
      <summary>Denotes that user specified files will not be loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS.GPFF_SKIPUNLOADEDPROJECTS">
      <summary>Skips the projects that will not be loaded (by user preference).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSGSIFLAGS">
      <summary>Provides information about selection items and the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSGSIFLAGS.GSI_fOmitHierPtrs">
      <summary>Indicates that the <paramref name="pHier" /> field of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> structure should not be filled in (and therefore not AddRef()'d). This is useful in a case where a selection is within one hierarchy, as this value does not need to be filled. The <paramref name="pHier" /> was already obtained through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentSelection(System.IntPtr@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@,System.IntPtr@)" /> or through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)" />.  </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE">
      <summary>Controls the display state or appearance of a hierarchy item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_Bold">
      <summary>Hierarchy item is bold. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_CutHighlight">
      <summary>Hierarchy item has cut highlighting, which is a dim, grayed out appearance indicating a pending cut operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_Expanded">
      <summary>Folder node is expanded. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_FIRST">
      <summary>First item in the hierarchy. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_LAST">
      <summary>Last item in the hierarchy. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_Selected">
      <summary>Hierarchy item is selected. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID">
      <summary>Specifies property settings for a hierarchy. Extended by <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_AllowEditInRunMode">
      <summary>BOOL. [optional] If this is false or <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />, the compiler disables modifications during run mode. (This is the most common expected behavior.) true enables edits.  This property enables VSA scenarios.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_AltHierarchy">
      <summary>UNK. [optional] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsTrackSelectionEx" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_AltItemid">
      <summary>I4. [optional] Returns an itemid for <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsTrackSelectionEx" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_BrowseObject">
      <summary>DISP. [optional] Returns an IDispatch for property browsing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_CanBuildFromMemory">
      <summary>BOOL. [optional] If true, do not prompt to save before building.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Caption">
      <summary>BSTR. Required so the the environment (project window) can display UI.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_CmdUIGuid">
      <summary>GUID for command bars (for root only).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ConfigurationProvider">
      <summary>OBSOLETE. Use <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGetCfgProvider" /> instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DefaultEnableBuildProjectCfg">
      <summary>BOOL. [optional] By default, specifies whether "Build" should be initially selected in the solution cfg. Typically, "Build" is selected if the project supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DefaultEnableDeployProjectCfg">
      <summary>BOOL. [optional] By default, specifies whether "Deploy" should be initially selected in the solution cfg. Typically, "Deploy" is selected by if the project supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DefaultNamespace">
      <summary>BSTR. [optional] String that represents the item's folder-based namespace: rootnamespace.folder.subfolder.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DesignerFunctionVisibility">
      <summary>I4. [optional] Value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_FUNCTIONVISIBILITY" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DesignerVariableNaming">
      <summary>I4. [optional] Value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_VARIABLENAMING" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_EditLabel">
      <summary>BSTR. [optional] String displayed for the in-place editing node caption.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Expandable">
      <summary>BOOL. Specifies whether the environment should display the "open-this-folder" plus sign.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ExpandByDefault">
      <summary>BOOL. Specifies whether the environment should expand this item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Expanded">
      <summary>BOOL. Specifies whether the node is currently expanded in the UIHierarchyWindow. Starts as false.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ExtObject">
      <summary>DISP. [optional] For ITEMID_ROOT, this is the ext.object of the project (Project).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ExtSelectedItem">
      <summary>DISP. [optional] Returns a custom <see cref="T:EnvDTE.SelectedItem" /> object for the given itemid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FIRST">
      <summary>INT_PTR. Specifies the first property ID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FirstChild">
      <summary>Itemid of first child node. (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if no children.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FirstVisibleChild">
      <summary>INT_PTR. [optional] Similar to FirstChild but only walks items to be displayed in UIHierarchyWindow. Required if the hierarchy supports multiple (subsetted or supersetted) views of its contents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HandlesOwnReload">
      <summary>BOOL. [optional] Project handles unload/reload itself. (Otherwise, the environment handles it.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HasEnumerationSideEffects">
      <summary>BOOL. [optional] If true, then this hierarchy is not enumerated for FindInFiles and similar hierarchy enumerations. (Useful if enumerating is unacceptably slow or could cause a login dialog box to appear.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IconHandle">
      <summary>I4. Handle to an icon; UIHierarchyWindow will not call DestroyIcon on it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IconImgList">
      <summary>I4. Handle to an imagelist. (Only for itemid==<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IconIndex">
      <summary>I4. If Expandable=true, then IconIndex+1 is used for the open icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ImplantHierarchy">
      <summary>UNK. [optional] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> implant for this hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsFindInFilesForegroundOnly">
      <summary>BOOL. [optional] If true, FindInFiles runs in the main thread.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsHiddenItem">
      <summary>BOOL. [optional] Specifies that an item is not displayed in current UIHierarchyWindow view. Required if the hierarchy supports multiple (subsetted) views of its contents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNewUnsavedItem">
      <summary>BOOL. [optional] If true, this is a new, unsaved item (as obtained from File.New.File) and therefore, the moniker is a temporary name and the caption should be used in the UI instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNonLocalStorage">
      <summary>BOOL. [optional] Specifies whether project storage is local. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat" /> is used for saving the project whether it is a local "file" or not.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNonMemberItem">
      <summary>BOOL. [optional] Specifies that the item is not considered a member of the hierarchy. Required if the hierarchy supports (supersetted) views of its contents—that is, if ShowAllFiles displays files in directories that are not members of the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNonSearchable">
      <summary>BOOL. [optional] Specifies that the item is not subject to search-and-replace through Find/Replace in Files. Should be true for the project file itself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ItemDocCookie">
      <summary>INT_PTR. [optional] The document cookie (an abstract value) of the hierarchy item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ItemSubType">
      <summary>BSTR. [optional] Non-localize string that represents the subtype of the item. It is up to each package to agree on the meaning of this string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_LAST">
      <summary>INT_PTR. Specifies the last property ID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Name">
      <summary>BSTR. Name for project (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />) or item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NextSibling">
      <summary>INT_PTR. Itemid of next sibling node. (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if no more siblings.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NextVisibleSibling">
      <summary>INT_PTR. [optional] Similar to NextSibling but only walks items to be displayed in UIHierarchyWindow. Required if the hierarchy supports multiple (subsetted or supersetted) views of its contents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NIL">
      <summary>NIL. -1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OpenFolderIconHandle">
      <summary>I4. [optional] Handle of an icon for an open folder. UIHierarchyWindow will not call DestroyIcon on it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OpenFolderIconIndex">
      <summary>I4. [optional] Index for OpenFolder icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OverlayIconIndex">
      <summary>I4. [optional] Use the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON" /> enumeration. Overlay for the item's main icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OwnerKey">
      <summary>BSTR. [optional] Owner key string that identifies the GUID of the owning project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Parent">
      <summary>I4. Itemid of the parent node. (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if no parent.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ParentHierarchy">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> that owns this hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ParentHierarchyItemid">
      <summary>INT_PTR. The itemid of this hierarchy in its parent hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_PreferredLanguageSID">
      <summary>GUID. [optional] Preferred SID of the (text editor) language service for the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectDir">
      <summary>BSTR. [optional] Full path of the project directory (for <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> only).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectIDGuid">
      <summary>GUID. [optional] Identifies a project across solutions. Generated and set when the project is created. Retrieved when the project is opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectName">
      <summary>[obsolete] Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Name" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectType">
      <summary>[obsolete] Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_TypeName" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ReloadableProjectFile">
      <summary>[obsolete] Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HandlesOwnReload" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Root">
      <summary>[obsolete] Itemid of Root must be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_SaveName">
      <summary>BSTR. File name specified on the FileSave menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_SelContainer">
      <summary>UNK. [optional] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> for use with property browsing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ShowOnlyItemCaption">
      <summary>BOOL. [optional] If true, only the caption is shown in the UI instead of the full moniker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ShowProjInSolutionPage">
      <summary>BOOL. [optional] Used to filter the project when Visual Basic or C# calls the component picker for add-reference. Returns VARIANT_TRUE to show that the project is in the list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_SortPriority">
      <summary>I4. [optional] Sort priority in UIHierarchyWindow. By default, standard projects have priority zero.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_StartupServices">
      <summary>UNK. [optional] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices" />* to add services to be started on next project load (for <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> only).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_StateIconIndex">
      <summary>I4. State icon index. Use <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_StorageType">
      <summary>BSTR. [optional] Non-localize string that represents storage type. Same as the string that's used in the VSDIR file to differentiate between different location MRU lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_TypeGuid">
      <summary>GUID to identify the type of node/hierarchy; searches on GUID_ItemType.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_TypeName">
      <summary>BSTR. Displays a name to identify the type of node/hierarchy. (Used in the title bar.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_UserContext">
      <summary>UNK. [optional] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> for the project or item.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS">
      <summary>Controls what action or actions to perform on an open document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen">
      <summary>Prompts if owned by different <paramref name="pHier" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_IgnoreLogicalView">
      <summary>Ignore if in the logical view. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS">
      <summary>Controls the initialization of an editor instance.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_CREATEDOCWIN_MASK">
      <summary>Masks RDT flags and Create Doc Window flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_CREATENEWDOCWIN_MASK">
      <summary>Masks RDT flags and Create New Doc Window flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_DoNotLoadDocData">
      <summary>Do not load document data into this editor instance. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_RDTFLAGS_MASK">
      <summary>Masks Running Document Table flags. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS">
      <summary>Specifies initialization parameters for an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS.LT_ALLOWEDITLABELS">
      <summary>Label editing is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS.LT_ALLOWMULTISELECT">
      <summary>Multi-item selection is allowed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS">
      <summary>Determines whether an OPT file being loaded is associated with a Visual Studio .dsw file or an .sln file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS.LUO_OPENEDDSW">
      <summary>Loads MSDev .DSW file as a solution.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT">
      <summary>Specifies initialization parameters for the Menu Editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_ACCELSUPPORT">
      <summary>Supports Accl.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_BOLDSUPPORT">
      <summary>Supports bold formatting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_BOTTOMDOCKED">
      <summary>This menu should dock on the bottom, and pop-up windows should cascade upward.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_BREAKSUPPORT">
      <summary>Supports the break and barbreak flags on menu items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_COMMANDIDSUPPORT">
      <summary>Means no Control names. Like VC.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_CONTEXTMENU">
      <summary>Supports a context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_EDITIDSNOTEDITNAMES">
      <summary>Menu item "Edit Names" is displayed as "Edit ID's."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_NAMELIMIT">
      <summary>Use the MEINIT <paramref name="dwNameLimit" /> field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_NOPROPERTIESSUPPORT">
      <summary>Does not support the Properties command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_NOUNDOSUPPORT">
      <summary>Does not store undo information, even if passed an undo manager.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_RADIOCHECKSUPPORT">
      <summary>Supports radio check boxes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_RIGHTJUSTIFYSUPPORT">
      <summary>Supports the right justification of menu bar items (moves all to the right of the bar).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_TEXTLIMIT">
      <summary>Uses the MEINIT <paramref name="dwTextLimit" /> field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_TOPLEVELSEPSUPPORT">
      <summary>Enables separators on the top-level menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_VIEWCODESUPPORT">
      <summary>Supports the ViewCode command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_VISIBLESUPPORT">
      <summary>Supports visible controls.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID">
      <summary>Specifies Menu Editor property IDs. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_ACCEL">
      <summary>Accelerator (shortcut key)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_BARBREAK">
      <summary>Divider bar</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_BOLD">
      <summary>Bold caption</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_BREAK">
      <summary>Dividing space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_CAPTION">
      <summary>Caption</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_CHECKED">
      <summary>Checked item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_ENABLED">
      <summary>Enabled item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_EXTRAPROPS">
      <summary>Shows that a menu can be expanded to show additional items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_FIRST">
      <summary>Indicates first VSMEPROPID_</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_LAST">
      <summary>Indicates last VSMEPROPID_</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_NAME">
      <summary>Name</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_RADIOCHECK">
      <summary>Radio check box</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_RIGHTJUSTIFY">
      <summary>Right justified text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_VISIBLE">
      <summary>Visible item</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE">
      <summary>Specifies the state of operations in progress. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.GetUIState(System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_ACCELEDIT">
      <summary>Accelerator edit is in progress.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_ACCELLIST">
      <summary>Accelerator listing is in progress.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_IDLE">
      <summary>Menu editor is idle.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_LABELEDIT">
      <summary>Label edit is in progress.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS">
      <summary>Specifies criteria for the environment's Object Search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_EXPANDREFS">
      <summary>Expands nodes in Find Symbol Results Window (applies only if <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_NOSHOWUI" /> is not set).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_NONE">
      <summary>No parameters specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_NOSHOWUI">
      <summary>Shows Find Symbol Results window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_SHOWUI">
      <summary>Synonym for none.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_USECURRENTOPTS">
      <summary>Uses current Find Symbol options (as opposed to those passed-in).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS">
      <summary>Determines the best standard editor to open and whether to use a dialog box in the process. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_ChooseBestStdEditor">
      <summary>The environment scans the Editors/{guidEditorType}/Extensions sub-key in the Registry to determine which editor can open the file and has the highest priority for doing so.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_OpenAsNewFile">
      <summary>Open as a new file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_RDTFLAGS_MASK">
      <summary>Mask that runs the document tables flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_UseOpenWithDialog">
      <summary>Use a dialog box to determine which editor to use. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS">
      <summary>Specifies actions to take when opening a specific editor. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS.OSPE_CDWFLAGS_MASK">
      <summary>Masks Create Document Window flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> enumeration for these values. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS.OSPE_OpenAsNewFile">
      <summary>Set to true to open a document as a new file. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS.OSPE_RDTFLAGS_MASK">
      <summary>Masks Running Document Table flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration for these values.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS">
      <summary>Opens the standard preview application with a dialog box and launches a new browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchNewBrowser">
      <summary>Launches a new browser window. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchSingleBrowser">
      <summary>Do not launch multiple browsers, even if multiple browsers have been selected as the default operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchSystemBrowser">
      <summary>Launch the default windows' browsers. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_NoUrlConversion">
      <summary>By default, preview will convert URL to UTF8 and canonicalize it before passing to external browser. No URL conversion is done for internal web browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_SkipInternalIfModal">
      <summary>Valid only with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchSingleBrowser" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_UsePreviewWithDialog">
      <summary>Choose Previewer with a dialog box. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE">
      <summary>Sets the state of a document outline.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE.OUTLINE_DETACHED">
      <summary>Outline is detached from document window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE.OUTLINE_VISIBLE">
      <summary>Outline is visible when not detached.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS">
      <summary>Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.ResetDefaults(System.UInt32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS.PKGRF_ADDSTDPREVIEWER">
      <summary>Package to add additional previewers to list for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardPreviewer(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION,System.UInt32)" />(<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_UsePreviewWithDialog" />,...).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS.PKGRF_TOOLBOXITEMS">
      <summary>Package to add its default items to toolbox.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS.PKGRF_TOOLBOXSETUP">
      <summary>Package to add additional default items to toolbox.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROJRESFLAGS">
      <summary>Specifies action to take with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectResources.GetResourceItem(System.UInt32,System.String,System.UInt32,System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJRESFLAGS.PRF_CreateIfNotExist">
      <summary>Create the resource if it doesn't exist.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID">
      <summary>Identifies property settings for a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_CountOfProjectsBeingLoaded">
      <summary>I4: Count of projects in file being opened (valid only during open).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_FileDefaultCodePage">
      <summary>I4: Codepage for saving files (CP_ACP/CP_WINUNICODE).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_FIRST">
      <summary>Specifies first VSPROPID_.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionDirty">
      <summary>BOOLEAN: true if solution file is dirty.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionOpen">
      <summary>BOOLEAN: true if a solution file is open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionOpening">
      <summary>BOOLEAN: true if a solution file is being opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionSaveAsRequired">
      <summary>BOOLEAN: true if saving the solution will require a Save As dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_LAST">
      <summary>Specifies last VSPROPID_.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_OpenProjectFilter">
      <summary>BSTR: Filter/extension list used in Open Project dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_ProjectCount">
      <summary>I4: Count of projects open in solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_RegisteredProjExtns">
      <summary>BSTR: Semicolon-separated list of all project extensions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionBaseName">
      <summary>BSTR: (Get/Set) base name of solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionDirectory">
      <summary>BSTR: Directory where solution file is saved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionFileName">
      <summary>BSTR; Full path to solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionFileNameBeingLoaded">
      <summary>BSTR: Full path to file being opened (valid only during open).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionNodeCaption">
      <summary>BSTR: Caption for solution node in Project Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionPropertyPages">
      <summary>BSTR: A semicolon-delimited list of clsids of solution-level property pages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_UserOptionsFileName">
      <summary>BSTR: Full path to user options file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID">
      <summary>Provides properties to set project-specific editor information in the OpenWith dialog box. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_FIRST">
      <summary>Indicates the first <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_LAST">
      <summary>This must be the same as the first property defined.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_NIL">
      <summary>NIL; -1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_ProjectDefaultEditorName">
      <summary>BSTR. Optional. The project can return a name for the editor (to be used instead of "Project default editor".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_UseGlobalEditorByDefault">
      <summary>BOOL. Optional. If you set this property, then a &lt;project default editor&gt; entry is added to the OpenWith dialog box. If true, then the global editor is used by default. If false, then a project-specific editor is used by default. The project is expected to persist on a per-user/per-machine/per file-type (file extension) basis whether the global standard editor or the project-specific editor should be used. The project then uses this information to know whether to call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenSpecificEditor(System.UInt32,System.String,System.Guid@,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> when a project item is opened.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION">
      <summary>Specifies the text image disposition action for CloseItemTextImage calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION.VSPTIP_Close">
      <summary>Finished using the item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION.VSPTIP_Modified">
      <summary>Finished using the item and it was modified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION.VSPTIP_ToOpen">
      <summary>The item is about to be opened through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProject(System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE">
      <summary>Specifies the open mode for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectTextImageProvider.OpenItemTextImage(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.VsTextImage@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE.VSPTIP_ReadOnly">
      <summary>Opens as read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE.VSPTIP_ReadWrite">
      <summary>Opens as editable.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB">
      <summary>Returns information about a document in the running document table (RDT). </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_AltHierarchyItemID">
      <summary>This attribute event is fired by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)" /> method. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_DocDataIsDirty">
      <summary>Flag indicates that the data of the document in the RDT has changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_DocDataIsNotDirty">
      <summary>Flag indicates that the data of the document in the RDT has not changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_DocDataReloaded">
      <summary>This attribute event is fired by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)" /> method. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_Hierarchy">
      <summary>Hierarchical position of the document in the RDT. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_ItemID">
      <summary>Item identifier of the document in the RDT. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_MkDocument">
      <summary>Full path to the document in the RDT. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_NOTIFYDOCCHANGEDMASK">
      <summary>A mask for the flags passed to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)" /> method.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS">
      <summary>Specifies save options for a document in the running document table (RDT). </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_ActivateDocOnErr">
      <summary>Activates the editor window of a document if it generates an error on save.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_DocClose">
      <summary>Indicates that the save is a result of a document close.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_ForceSave">
      <summary>Forces a save even if not dirty.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_PromptSave">
      <summary>Prompts user to save the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_Reserved">
      <summary>Reserved flag, do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_SaveIfDirty">
      <summary>Saves only if changes have been made. (This is the default.) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_SaveNoChildren">
      <summary>Saves only the root of the hierarchy passed in; does not include its children.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_SaveOnlyChildren">
      <summary>Saves only children of the hierarchy passed in; does not include the hierarchy itself.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREGDOCLOCKHOLDER">
      <summary>Specifies a weak lock in calls to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterDocumentLockHolder(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,System.UInt32@)" /> method. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREGDOCLOCKHOLDER.RDLH_WeakLockHolder">
      <summary>Specifies a weak document lock holder.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS">
      <summary>Specifies how to resolve a path search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_MatchByProjectPath">
      <summary>Matches by project path instead of MkDocument.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_SkipEnumProjectItems">
      <summary>Skips enumerating items of all projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_SkipGlobalResolvers">
      <summary>Skips asking globally registered implementors of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRelativePathResolver" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_UseAllSearchStrategies">
      <summary>Uses all strategies to resolve the relative path.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS">
      <summary>Provides options for removing a virtual project from the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS.REMOVEVP_DontCloseHierarchy">
      <summary>Upon removing a virtual project from the solution, leave the hierarchy open. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS.REMOVEVP_DontSaveHierarchy">
      <summary>Upon removing a virtual project from the solution, do not attempt to save the hierarchy. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS">
      <summary>Specifies close options for a solution (.sln) file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS.SLNCLOSEOPT_DeleteProject">
      <summary>If set, project is to be deleted from storage; no MRU entry is needed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS.SLNCLOSEOPT_SLNSAVEOPT_MASK">
      <summary>Placeholder for the options in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS" /> enumeration. Both save and close options are passed in together. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS.SLNCLOSEOPT_UnloadProject">
      <summary>If not set, the project is removed from the solution.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS">
      <summary>Specifies open options for a solution (.sln) file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS.SLNOPENOPT_AddToCurrent">
      <summary>Solution file is merged into currently open solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS.SLNOPENOPT_DontConvertSLN">
      <summary>A solution file from a previous product is not opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS.SLNOPENOPT_Silent">
      <summary>Solution file is opened silently (no user feedback).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS">
      <summary>Specifies save options for a solution (.sln) file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_DocClose">
      <summary>Result of closing a document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_ForceSave">
      <summary>Forces save even if the file has not been changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_NoSave">
      <summary>Inclusive OR of all "skip" flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_PromptSave">
      <summary>Prompt user whether to save the .sln file. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SaveIfDirty">
      <summary>Save only if the .sln file has been changed. This is the default. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipDocs">
      <summary>Skip all documents that have been changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipProj">
      <summary>Skips the project file. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipSolution">
      <summary>Skips the solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipUserOptFile">
      <summary>Skips the user option file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS">
      <summary>Specifies options for opening existing project items within a specific editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS.VSSPECIFICEDITOR_DoOpen">
      <summary>Project should open item(s)—meaningful only for AddItem, implied for OpenItem.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS.VSSPECIFICEDITOR_UseEditor">
      <summary>Project should open item(s) via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenSpecificEditor(System.UInt32,System.String,System.Guid@,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> using editor type and physical view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS.VSSPECIFICEDITOR_UseView">
      <summary>Project should open item(s) via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> using logical view only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID">
      <summary>Specifies shell property settings for the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_AddExistItemFilter">
      <summary>BSTR. Add existing item filter list string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_AnimationsOn">
      <summary>BOOL. true if environment animations are on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_AppDataDir">
      <summary>BSTR. Application data directory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_DetectFileChanges">
      <summary>BOOL. true if editors are supposed to watch for file changes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_FindInFilesFilter">
      <summary>BSTR. Find in files filter list string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_FIRST">
      <summary>Flag indicating the first property identifier in this group of identifiers. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_hinstComplexScript">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_hinstMSO">
      <summary>4. hinst of mso*.dll. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_hmsoinstMSO">
      <summary>I4. HMSOINST of mso*.dll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_InstallDirectory">
      <summary>BSTR. Directory where visual studio executable was installed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsComplexScriptAvail">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInCommandLineMode">
      <summary>BOOL. true if environment is running as a command line tool. Do not display any UI in this case. false if the environment is to display ordinary UI. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInOfficeMode">
      <summary>BOOL true if environment is in Office mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInteractive">
      <summary>Obsolete. Do not use. Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInCommandLineMode" /> instead. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_LAST">
      <summary>Flag indicating the last property identifier in this group of identifiers. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_MDIState">
      <summary>BOOL VARIANT_TRUE if IDE in MDI state, else VARIANT_FALSE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ObjectMgrTypesImgList">
      <summary>I4. Handle to environment's image list for symbol types (class, interface, method, etc). Do not free because the environment frees it during final shutdown. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_OpenFileFilter">
      <summary>BSTR. Open file filter list string. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_OpenFromCurrDocDir">
      <summary>BOOL true if OpenFile operation starts in current document's directory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_PreBuildRunPreview">
      <summary>I4 One of PBRP_ values (PBRP_SaveChanges/PBRP_DontSaveChanges/PBRP_PromptForSave)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_PreBuildRunPreviewSaveOpts">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS" /> to pass to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.SaveDocuments(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32)" /> when <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_PreBuildRunPreview" /> does not equal PBRP_DontSaveChanges. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ProcessingPendingMessageFilterMsg">
      <summary>BOOL. true if Processing Pending MessageFilter message. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_RecordState">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRECORDSTATE" /> enumeration type specifying macro recording state of the environment. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ReloadChangedFiles">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRELOADOPTION" />. Tells editors how to respond to externally modified documents. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_SCCGlyphsImgList">
      <summary>I4. Handle to environment's image list for source code control glyphs, which are indexed by <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" />. Do not free because the environment frees it during final shutdown. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ShowMiscFilesProject">
      <summary>BOOL. true if the environment is to make the Miscellaneous Files project visible in Solution Explorer. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ShowOutputPaneOnBuildBegin">
      <summary>BOOL. true if the environment is to show the output pane when you start to build a project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ShowTasklistOnBuildEnd">
      <summary>BOOL. true if the environment is to show the task list when the build is complete. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_StartupDir">
      <summary>BSTR directory where running executable started up.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_SuppressMessageFilterBusyDialog">
      <summary>BOOL. If true the "Component Busy/Retry/Switch" dialog is suppressed. This element is used by Visual Studio for Applications for break mode. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ViewSourceMode">
      <summary>BOOL. Set to true if the environment is to be in <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ViewSourceMode" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_VirtualRegistryRoot">
      <summary>BSTR registry key name (must be appended to HKLM or HKCU).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_VisualStudioProjDir">
      <summary>BSTR. The full path location of the Visual Studio Projects directory. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_Zombie">
      <summary>BOOL. true if the environment is in an inactive state. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS">
      <summary>OBSOLETE. The VSSWATCHRENDERFLAGS enumeration is a member of the VSSWATCHRENDER structure, a parameter of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.RenderCell(Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER[],System.Int32@)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_DEFAULT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_DISABLED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_FOCUS">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_SELECTED">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS">
      <summary>Translate accelerator flags for IVsFilterKeys::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterKeys.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[],System.UInt32,System.Guid@,System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS.VSTAF_Default">
      <summary>Perform the default actions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS.VSTAF_NoFireCommand">
      <summary>Do not execute the command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSUPGRADEPROJFLAGS">
      <summary>Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgrade.UpgradeProject(System.UInt32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSUPGRADEPROJFLAGS.UPF_SILENTMIGRATE">
      <summary>The user has already been prompted for solution migration, so do not prompt again. This flag will not be passed if the project is opened without an associated solution file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSURLZONE"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSURLZONE.URLZONE_VSAPP">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID">
      <summary>View propertiy ID's for calls to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowView" /> methods. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_BitmapGuidPackage">
      <summary>GUID of the package that is providing the bitmap.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_BitmapIndex">
      <summary>I4: Index into strip if bitmap handle is a strip.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_BitmapResource">
      <summary>I4: Resource number of bitmap in satellite dll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_FIRST">
      <summary>Indicates the first VSVPROPID_.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_NIL">
      <summary>NIL; -1</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL">
      <summary>Specifies the type of a custom Web page. Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCustomURL(System.UInt32,System.String@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL.VSWBCU_Credits">
      <summary>A custom Web page for credits.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL.VSWBCU_Home">
      <summary>A custom Web page for a home page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL.VSWBCU_Search">
      <summary>A custom Web page for searches.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX">
      <summary>Specifies the type of document information for a Web page. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.GetDocumentInfo(System.UInt32,System.Object@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocBusyStatus">
      <summary>The document’s current busy status.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocDispatch">
      <summary>The object reference of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocLastCtxMenuPos">
      <summary>The document’s last context menu position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocName">
      <summary>The document’s name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocReadyState">
      <summary>The document’s current ready state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocSize">
      <summary>The size of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocStatusText">
      <summary>The document’s status text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocType">
      <summary>The type of document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocURL">
      <summary>The document’s URL.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS">
      <summary>Navigation flags for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.Navigate(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_AddToMRU">
      <summary>Add the document to the most recently used list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_ForceNew">
      <summary>Open the document in a new window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_VsURLOnly">
      <summary>Navigate only to a Visual Studio internal URL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_WebURLOnly">
      <summary>Navigate only to a Web URL.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS">
      <summary>Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURLEx(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String,System.UInt32,System.Int32,System.Int32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS.VSWBP_FrameDock">
      <summary>Frame is to be docked.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS.VSWBP_FrameFloat">
      <summary>Frame is to float.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS.VSWBP_FrameMdiChild">
      <summary>Default.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE">
      <summary>Indicates refresh action to take with calls to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Refresh(System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE.VSWBR_Completely">
      <summary>Refresh the browser completely.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE.VSWBR_IfExpired">
      <summary>Refresh the browser if the page has expired.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE.VSWBR_Normal">
      <summary>Take normal action.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._EDITORREGFLAGS">
      <summary>Flags for registering an invisible editor with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditorManager.RegisterInvisibleEditor(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory,Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._EDITORREGFLAGS.RIEF_ENABLECACHING">
      <summary>Indicates that the invisible editor is to keep the file loaded whenever possible.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS">
      <summary>Determines whether stream or box selection mode is being used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_ClearOutputWindow">
      <summary>Clears the specified pane of the output window before spawning the tool.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PauseAfterExecution">
      <summary>Waits for key press to close the process spawned in the external command window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToOutputWindow">
      <summary>Sends all output to the output pane. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList">
      <summary>Parses each line of output into the task list. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS">
      <summary>Specifies options for adding a component to a browse container.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS.LARO_ALREADYADDED">
      <summary>[out] Library should return this flag to indicate that the specified component is already added.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS.LARO_NONE">
      <summary>No options specified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS.LARO_THRUFILEOPS">
      <summary>[in] Tells library that the component is being added through File Open.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS">
      <summary>Specifies attributes for a Library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_EXPANDABLE">
      <summary>Library supports <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetLibList(Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_GLOBAL">
      <summary>Specifies that the library is a Globals list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_HIDEINLIBPICKER">
      <summary>Don't show library or its liblist in the Add Reference dialog box. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_PROJECT">
      <summary>Specifies that the library is a Projects list.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES">
      <summary>Specifies the capabilities of an object list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWDELETE">
      <summary>Items in the object list support renaming through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CanDelete(System.UInt32,System.Int32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoDelete(System.UInt32,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWDRAGDROP">
      <summary>Items in the object list support drag and drop operations through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.QueryDragDrop(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoDragDrop(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32@)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWRENAME">
      <summary>Items in the object list support renaming through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CanRename(System.UInt32,System.String,System.Int32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoRename(System.UInt32,System.String,System.UInt32)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWSCCOPS">
      <summary>Unused. Use the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_STATEIMAGEMASK" /> in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetDisplayData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA[])" />call to communicate the source code control state of the list item. Source code control commands are routed through the standard <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> and ItemID mechanism. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASBROWSEOBJ">
      <summary>Items in the object list support property browse objects through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetBrowseObject(System.UInt32,System.Object@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASCOMMANDS">
      <summary>Items in the object list support their own context menu through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetContextMenu(System.UInt32,System.Guid@,System.Int32@,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASDESCPANE">
      <summary>Items in the object list support description pane text through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.FillDescription(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASSOURCECONTEXT">
      <summary>Items in the object list support <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetSourceContext(System.UInt32,System.IntPtr,System.UInt32@)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CountSourceItems(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.UInt32@)" />, and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetMultipleSourceItems(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_NONE">
      <summary>The object list has no special capabilities. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS">
      <summary>Specifies the controls to implement for an object list search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_DONTUPDATELIST">
      <summary>Don't update the symbol list. For find symbol only </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_IGNORESUBSET">
      <summary>Ignore subsets in the search. For class view requests only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_NONE">
      <summary>No flags are specified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_PROJECTONLY">
      <summary>Search only the project. For class view requests only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_RESOURCEVIEW">
      <summary>Search in resource view. For symbol search only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_TRUENESTING">
      <summary>Search true nested items. For class view requests only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_USESEARCHFILTER">
      <summary>Use a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA" /> parameter to limit information selection. For symbol search only. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE">
      <summary>Specifies the ListType of an object list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_CLASSES">
      <summary>Specifies that the list contain classes. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_CONTAINEDBY">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_CONTAINMENT">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_DEFEREXPANSION">
      <summary>Special list type to indicate non-preferred expansion mechanism.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_DEFINITIONS">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_HIERARCHY">
      <summary>Special list type to support the grouped base and derived classes list in Class View. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_INHERITEDINTERFACES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_INTERFACEUSEDBYCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_MEMBERS">
      <summary>Specifies that the list contain members. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_NAMESPACES">
      <summary>Specifies that the list contain name spaces. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_NESTEDCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_PACKAGE">
      <summary>Old name for LLT_PHYSICALCONTAINERS. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_PHYSICALCONTAINERS">
      <summary>Specifies that the list contain physical containers. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_REFERENCES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_USEDBYCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_USESCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT">
      <summary>Specifies the ActiveProject attribute of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT.LCAP_MUSTBEACTIVE">
      <summary>Specifies that the project must be the active project to be displayed in the object list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT.LCAP_SHOWALWAYS">
      <summary>Specifies that the project always displays in the object list. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS">
      <summary>Specifies the ClassAccess mode of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_FRIEND">
      <summary>Library item is a Friend. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PACKAGE">
      <summary>Library item is a Package. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PRIVATE">
      <summary>Library item is Private. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PROTECTED">
      <summary>Library item is Protected. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PUBLIC">
      <summary>Library item is Public. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_SEALED">
      <summary>Library item is Sealed. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE">
      <summary>Specifies the ClassType of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_CLASS">
      <summary>Library item is a Class. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_DELEGATE">
      <summary>Library item is a Delegate. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_ENUM">
      <summary>Library item is an Enumeration. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_ERROR">
      <summary>Error condition. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_EXCEPTION">
      <summary>Library item is an Exception. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_GLOBAL">
      <summary>Library item is a Global. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_INTERFACE">
      <summary>Library item is an Interface. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_INTRINSIC">
      <summary>Library item is an Intrinsic. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_MAP">
      <summary>Library item is a Map. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_MODULE">
      <summary>Library item is a Module.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_NSPC">
      <summary>Classtype is unspecified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_STRUCT">
      <summary>Library item is a Struct. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_TYPEDEF">
      <summary>Library item is a Typedef. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_UNION">
      <summary>Library item is a Union. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS">
      <summary>Specifies the MemberAccess mode of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_FRIEND">
      <summary>Member access is Friend. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PACKAGE">
      <summary>Member access is Package. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PRIVATE">
      <summary>Member access is Private. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PROTECTED">
      <summary>Member access is Protected. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PUBLIC">
      <summary>Member access is Public. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_SEALED">
      <summary>Member access is Sealed. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE">
      <summary>Specifies the MemberType of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_CONSTANT">
      <summary>Library item is a constant. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_DECLARATION">
      <summary>Library item is a declaration. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_ENUMITEM">
      <summary>Library item is an enumeration. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_ERROR">
      <summary>An error occurred. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_EVENT">
      <summary>Library item is an event. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_FIELD">
      <summary>Library item is a field. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_FUNCTION">
      <summary>Library item is a function. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_MACRO">
      <summary>Library item is a macro. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_MAPITEM">
      <summary>Library item is a map item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_METHOD">
      <summary>Library item is a method. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_OPERATOR">
      <summary>Library item is an operator. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_PROPERTY">
      <summary>Library item is a property. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_TYPEDEF">
      <summary>Library item is a Typedef. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_VARIABLE">
      <summary>Library item is a variable. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE">
      <summary>Specifies the ModifierType of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_FINAL">
      <summary>Library item is final. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_NONVIRTUAL">
      <summary>Library item is non-virtual. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_PUREVIRTUAL">
      <summary>Library item is pure virtual. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_STATIC">
      <summary>Library item is static. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_VIRTUAL">
      <summary>Library item is virtual.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE">
      <summary>Specifies the node type of a tree list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_FOLDER">
      <summary>Node is a folder list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_HIERARCHY">
      <summary>Node is a hierarchy list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_PROJECT">
      <summary>Node is a project list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_SYMBOL">
      <summary>Node is a symbol list. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY">
      <summary>Specifies the visibility of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY.LCV_HIDDEN">
      <summary>Library item is hidden.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY.LCV_VISIBLE">
      <summary>Library item is visible.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE">
      <summary>Specifies the limits of how keywords are searched for context help (in which <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" />s are searched).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_All">
      <summary>Uses all keywords (default).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_Last">
      <summary>The last keyword limitation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_NoAmbient">
      <summary>Uses all keywords except Ambient.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_SelOnly">
      <summary>Only uses keywords from the topmost active context bag.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS">
      <summary>Specifies help system commands for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_Default">
      <summary>Used by All functions. Same as using NULL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_Localize">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromIdentifier(System.String,System.UInt32,System.UInt32)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_NoErrorMessages">
      <summary>Used by All functions. Sets this to display error messages yourself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_OutsideCollectionSpace">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromIdentifier(System.String,System.UInt32,System.UInt32)" />. Do not show context id in collection's window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_UseBrowser">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_UseHelp">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSCIPPROPID">
      <summary>Specifies the context item provider ID in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.GetProperty(System.Int32,System.Object@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.SetProperty(System.Int32,System.Object)" /> calls. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSCIPPROPID.VSCIPPROPID_Customize">
      <summary>Returns <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextCustomize" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSCIPPROPID.VSCIPPROPID_LookupType">
      <summary>Set to zero to use keyword; one to use PAL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSCIPPROPID.VSCIPPROPID_NIL">
      <summary>NIL; -1</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS">
      <summary>Provides attribute information about a file that has been changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS.VSFILECHG_Add">
      <summary>Any file or directory name change in the watched directory or sub-tree causes a change notification wait operation to be returned. Changes include renaming, creating, or deleting a filename. (This is equivalent to FILE_NOTIFY_CHANGE_FILE_NAME | FILE_NOTIFY_CHANGE_DIR_NAME.) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS.VSFILECHG_Attr">
      <summary>Any attribute change in the watched directory or sub-tree causes a change notification wait operation to return. (This is equivalent to FILE_NOTIFY_CHANGE_ATTRIBUTES.) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS.VSFILECHG_Del">
      <summary>Any file deletion in the watched directory or sub-tree causes a change notification wait operation to be returned. (This is equivalent to FILE_NOTIFY_CHANGE_DELETE.) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS.VSFILECHG_Size">
      <summary>Any file-size change in the watched directory or sub-tree causes a change notification wait operation to return. The operating system detects a change in file size only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed. (This is equivalent to FILE_NOTIFY_CHANGE_SIZE.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS.VSFILECHG_Time">
      <summary>Any change to the last write-time of files in the watched directory or sub-tree causes a change notification wait operation to return. The operating system detects a change to the last write-time only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed. (This is equivalent to FILE_NOTIFY_CHANGE_LAST_WRITE.) </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VsHelpErrors">
      <summary>Specifies errors returned in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.Reserved(Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND,Microsoft.VisualStudio.Shell.Interop.VsHelpErrors)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VsHelpErrors.VSHELP_E_COLLECTIONDOESNOTEXIST">
      <summary>The collection name read from the registry does not exist on disk.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VsHelpErrors.VSHELP_E_COLLECTIONNOTREGISTERED">
      <summary>MSDN has not been registered.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VsHelpErrors.VSHELP_E_HTMLHELP_UNKNOWN">
      <summary>HTML Help generated an unknown error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VsHelpErrors.VSHELP_E_PREFERREDCOLLECTION">
      <summary>The preferred collection is incorrectly registered. Select a new preferred collection or reinstall.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VsHelpErrors.VSHELP_E_REGISTRATION">
      <summary>The MSDN collection has been improperly registered.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSOBJCFFLAGS">
      <summary>Specifies single or multi-select clipboard flag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJCFFLAGS.CFF_MULTISELECT">
      <summary>Object is part of a multi-select operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJCFFLAGS.CFF_NONE">
      <summary>Object is not part of a multi-select operation. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSOBJCLIPFORMATOPTIONS">
      <summary>Specifies a composite clipboard format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJCLIPFORMATOPTIONS.CFO_COMPOSITEFMT">
      <summary>Clipboard format is a composite format. <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetExtendedClipboardVariant(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT[],System.Object@)" /> must be called to render this format. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJCLIPFORMATOPTIONS.CFO_INVALIDCF">
      <summary>For object manager use only. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJCLIPFORMATOPTIONS.CFO_NONE">
      <summary>Clipboard format is not a composite format. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSOBJDESCOPTIONS">
      <summary>Specifies object browser description text options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJDESCOPTIONS.ODO_NONE">
      <summary>No options specified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJDESCOPTIONS.ODO_TOOLTIPDESC">
      <summary>Specifies that the description text be tool tip text. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJDESCOPTIONS.ODO_USEFULLNAME">
      <summary>Specifies that the object's fully qualified name be used. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNERCACHEDDATAKINDS">
      <summary>Specifies the kind of cached data in calls to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.ClearCachedData(System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNERCACHEDDATAKINDS.LOCDK_NONE">
      <summary>No data is cached.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNERCACHEDDATAKINDS.LOCDK_SELECTEDNAVINFO">
      <summary>Selected navigation information is cached.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNEROTPIONS">
      <summary>Specifies list owner options in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.GetOptions(System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNEROTPIONS.LOO_NONE">
      <summary>No options are specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNEROTPIONS.LOO_SUPPORTSEXTENDEDTEXT">
      <summary>Supports extended text (fully-qualified name) for an object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNEROTPIONS.LOO_UPDATESDISPLAYDATA">
      <summary>Display data of an object can be updated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS">
      <summary>Specifies rename and delete operation flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS.OPF_FIRSTITEM">
      <summary>Object is the first item of a multi-selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS.OPF_LASTITEM">
      <summary>Object is the last item of a multi-selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS.OPF_MULTISELECT">
      <summary>Object is part of a multi-selection. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS.OPF_NONE">
      <summary>No flags are specified. .</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS">
      <summary>Specifies attributes for a search request.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS.VSOBSO_CASESENSITIVE">
      <summary>Specifies that search should be case sensitive.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS.VSOBSO_LOOKINREFS">
      <summary>Specifies that references should be requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS.VSOBSO_NONE">
      <summary>Indicates no options are specified.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS">
      <summary>Specifies options for a document in the running document table (RDT).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_CanBuildFromMemory">
      <summary>Indicates that a save of the document is not forced on a build. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_CantSave">
      <summary>Combination of <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontSave" /> and <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontSaveAs" /> flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_CaseSensitive">
      <summary>When comparing <paramref name="MkDocument" /> strings, perform a case-sensitive comparison of the strings.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DOCMASK">
      <summary>Mask of the flags from <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontSaveAs" /> through <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontAddToMRU" />. Allow <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> flags in doc mask. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontAddToMRU">
      <summary>Do not add to the list of most recently used files. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontAutoOpen">
      <summary>Indicates that the document is not persisted in the list of documents that can be opened when the solution is re-opened. Such a document would not be opened using an editor factory, but might be opened using a wizard or special programmatic code. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontSave">
      <summary>Any document marked with this value is not included in the list of documents shown in the SaveChanges dialog box. The Save Changes dialog box is displayed when the user selects Exit from the File menu. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontSaveAs">
      <summary>Indicates that the SaveAs command should not be made available for this document. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_EditLock">
      <summary>Places an edit lock on the document </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_LOCKMASK">
      <summary>Mask of the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_NoLock" />, <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_ReadLock" />, <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_EditLock" />, and <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_RequestUnlock" /> flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_NoLock">
      <summary>Indicates that no lock is placed on the document. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_NonCreatable">
      <summary>Indicates that the document is created through some special programmatic means. For example, using a wizard. If you specify the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_NonCreatable" /> flag, then the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_DontAutoOpen" /> flag automatically applies to your document. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_PlaceHolderDoc">
      <summary>Used in the implementation of miscellaneous files. Prevents the Miscellaneous Files project from calling  the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method on the document added to the project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_ProjSlnDocument">
      <summary>Set automatically by the environment when a solution or project is opened. Used to flag solution and project files in the running document table. Clients are required to set this flag in the case of nested projects. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_ReadLock">
      <summary>Places a read lock on the document. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_RequestUnlock">
      <summary>Requests an unlock of the document. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_SAVEMASK">
      <summary>Mask of the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_Unlock_NoSave" />, <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_Unlock_SaveIfDirty" />, and <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_Unlock_PromptSave" /> flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_Unlock_NoSave">
      <summary>Used by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnlockDocument(System.UInt32,System.UInt32)" />. Release the edit lock and do not save. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_Unlock_PromptSave">
      <summary>Used by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnlockDocument(System.UInt32,System.UInt32)" /> method. Release the edit lock and prompt the user to save the file. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_Unlock_SaveIfDirty">
      <summary>Used by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnlockDocument(System.UInt32,System.UInt32)" /> method. Release the edit lock and save the file if it is dirty. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_VirtualDocument">
      <summary>Exclude this document from being considered in the documents collection for the automation model. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA">
      <summary>Specifies whether to ignore a subsequent file change.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA.RDD_IgnoreNextFileChange">
      <summary>Ignore the next file change. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA.RDD_RemoveUndoStack">
      <summary>Clears the undo stack. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap">
      <summary>Specifies options for a bitmap image associated with a task item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap.BMP_COMMENT">
      <summary>A blue "/*", used to represent comments in the task list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap.BMP_COMPILE">
      <summary>Used to represent compiler errors in the task list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap.BMP_SHORTCUT">
      <summary>A small curved arrow, used to represent shortcuts in the task list. Shortcuts are generated by the user right-clicking the editor window, and choosing Add Task List shortcut from the pop-up menu. Users should be encouraged to use shortcuts rather than bookmarks to mark positions in the editor window. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap.BMP_SQUIGGLE">
      <summary>A vertical red wavy line used to represent Code Sense errors in the task list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap.BMP_USER">
      <summary>Profile of a human head, used to represent user-defined tasks in the task list. The top of the task list, above its first item, is set up to allow users to easily add their own tasks to the task list. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._vstaskpriority">
      <summary>Specifies the bitmap used to indicate the priority level of a task item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskpriority.TP_HIGH">
      <summary>Red exclamation mark, indicating high priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskpriority.TP_LOW">
      <summary>Blue exclamation mark, indicating low priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._vstaskpriority.TP_NORMAL">
      <summary>No bitmap, indicating normal priority.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK">
      <summary>Specifies the fields of interest in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK.TDM_FORCESELECT">
      <summary>For internal use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK.TDM_IMAGE">
      <summary>Specifies that the item's standard image is requested through the <paramref name="Image" /> and <paramref name="hImageList" /> fields in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK.TDM_SELECTEDIMAGE">
      <summary>Specifies that the item's selected image is requested through the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.SelectedImage" /> and <paramref name="hImageList" /> fields in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK.TDM_STATE">
      <summary>Specifies that the item's state information is requested through the Statefield in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure. You need only return those state bit fields that are set in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.StateMask" />. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE">
      <summary>Specifies the bit fields of interest in the State member of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_BOLD">
      <summary>Set to indicate that item text is bold. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_CUT">
      <summary>Set to indicate that the item is selected for a cut-paste operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_DISPLAYLINK">
      <summary>Draws item text in same color as IE link, underlines, and changes cursor on mouse-over. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_DROPHILITED">
      <summary>Set to indicate that the item is highlighted as a drag-drop target. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_EXPANDED">
      <summary>Used for notification only. Do not set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_FORCESELECT">
      <summary>For internal use. Do not set. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_GRAYTEXT">
      <summary>Set to indicate that item text is grayed out. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_OVERLAYMASK">
      <summary>For internal use. Do not set. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_SELECTED">
      <summary>For internal use. Do not set. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_STATEIMAGEMASK">
      <summary>Set to indicate that an image file handle is specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_TEXTTYPEMASK">
      <summary>For internal use. Do not set. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_USERMASK">
      <summary>Same as <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_STATEIMAGEMASK" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS">
      <summary>Specifies attributes of a tree List.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOCOLORS">
      <summary>Indicates that foreground and background color are standard. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOEFFECTS">
      <summary>Indicates that all list items are to be drawn without special effects. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOEVERYTHING">
      <summary>Indicate a combination of all NO fields. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOEXPANSION">
      <summary>None of the children of this node are expandable. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOINSERTDELETE">
      <summary>Set to indicate that this list does not allow insertion and deletion. When set, the tree view will not attempt to insert or delete items. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOREALIGN">
      <summary>Indicates that the list is static. The tree view will not attempt a list realignment. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NORELOCATE">
      <summary>If set, indicates that calls to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.LocateExpandedList(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList,System.UInt32@)" /> are not necessary and a ReAlign command will close all children.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOSTATECHANGE">
      <summary>When set, the tree view will not call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.ToggleState(System.UInt32,System.UInt32@)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_NOUPDATES">
      <summary>Indicates that the list is static and will not change. When set, the code browsing tool will not call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.UpdateCounter(System.UInt32@,System.UInt32@)" /> to check for updates. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_OWNERDRAWALL">
      <summary>Indicates that the user can draw the glyph and text portion of all lists except hierarchies. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS.TF_OWNERDRAWTEXT">
      <summary>Indicates that the user can draw the text portion of all items. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK">
      <summary>Specifies how a tree list has changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK.TCT_ITEMADDED">
      <summary>An item has been added to the tree list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK.TCT_ITEMDELETED">
      <summary>An item has been deleted from the tree list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK.TCT_ITEMNAMECHANGED">
      <summary>The TTO_DEFAULT value returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetText(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS,System.String@)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK.TCT_ITEMPROPSCHANGED">
      <summary>A tree list item's property changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK.TCT_NOCHANGE">
      <summary>There has not been a change to the tree list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK.TCT_TOOMANYCHANGES">
      <summary>There have been too many changes to the tree list. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH">
      <summary>Specifies which elements of a tree list to refresh. This is for future use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH.TSCR_CHILDREN">
      <summary>Refreshes children of toggled item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH.TSCR_CURRENT">
      <summary>Refreshes toggled item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH.TSCR_ENTIRE">
      <summary>Refreshes entire tree.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH.TSCR_NONE">
      <summary>No refresh required.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH.TSCR_PARENTS">
      <summary>Refreshes parents of toggled item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH.TSCR_PARENTSCHILDREN">
      <summary>Refreshes children of all parents.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo">
      <summary>Use to specify all the attributes of Display Items to the Visual Studio environment. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bAutoBackgroundValid">
      <summary>Indicates whether <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.crAutoBackground" /> contains a valid color value. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bAutoForegroundValid">
      <summary>Indicates whether <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.crAutoForeground" /> contains a valid color value. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bDescriptionValid">
      <summary>Indicates the <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bstrDescription" /> contains a valid description string </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bFlagsValid">
      <summary>Indicates whether <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.fFlags" /> contains valid font flags from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bLineStyleValid">
      <summary>Indicates whether <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.eLineStyle" /> contains a valid line style. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bLocalizedNameValid">
      <summary>Indicates whether <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bstrLocalizedName" /> contains a valid localized name string. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bMarkerVisualStyleValid">
      <summary>Indicates whether <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.dwMarkerVisualStyle" /> contains a valid marker style. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bNameValid">
      <summary>Indicates whether <see cref="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bstrName" /> contains a valid (non-localized) name string. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bstrDescription">
      <summary>String that contains a brief description of the item displayed as a ToolTip. (This feature is currently disabled). </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bstrLocalizedName">
      <summary>String that contains the localized name of the item displayed to the user. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.bstrName">
      <summary>String that contains the non-localized name of the item used internally by the VSPackage to compare and merge. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.crAutoBackground">
      <summary>Specifies the automatic background color for an item. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.crAutoForeground">
      <summary>Specifies the automatic foreground color for an item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.dwMarkerVisualStyle">
      <summary>Specifies the visual style of the marker </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.eLineStyle">
      <summary>Specifies the line style for marker items. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.fFlags">
      <summary>Specifies attributes of an item. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo.Info">
      <summary>Specifies the foreground color, background color, and font flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo" /> structure. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE">
      <summary>Specifies the type of attribute values in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeStatusVal(System.String,Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE,System.Int32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeValue(System.Int32,Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE,System.String@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE.VSHAL_Display">
      <summary>The display attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE.VSHAL_Real">
      <summary>The actual attribute.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.CANDIDATEFORM">
      <summary>Contains position information for the candidate window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.CANDIDATEFORM.dwIndex">
      <summary>Candidate list identifier. dwIndex can be zero for the first list, 1 for the second, and so on. The maximum index is 31.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.CANDIDATEFORM.dwStyle">
      <summary>Position style.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.CANDIDATEFORM.ptCurrentPos">
      <summary>Coordinates of the upper-left corner of the candidate window or the caret position, depending on the value of <paramref name="dwStyle" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.CANDIDATEFORM.rcArea">
      <summary>Coordinates of the upper-left and lower-right corners of the exclusion area.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo">
      <summary>Provides information to a VSPackage about specific user-settable colorable item attributes of a Display Items that may have been modified by the user. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo.bBackgroundValid">
      <summary>BOOLEAN value indicating the background color is valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo.bFontFlagsValid">
      <summary>BOOLEAN value indicating the font flags are valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo.bForegroundValid">
      <summary>BOOLEAN value indicating the foreground color is valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo.crBackground">
      <summary>DWORD specifying the background color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo.crForeground">
      <summary>DWORD specifying the foreground color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo.dwFontFlags">
      <summary>DWORD specifying the font flags</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.COMMANDWINDOWMODE">
      <summary>Specifies the command mode for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.SetMode(Microsoft.VisualStudio.Shell.Interop.COMMANDWINDOWMODE)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMMANDWINDOWMODE.CWM_COMMAND">
      <summary>Command mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMMANDWINDOWMODE.CWM_IMMEDIATE">
      <summary>Immediate mode.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.CompEnum">
      <summary>Specifies the type of component categories that are passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory2" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.CompEnum.CompEnumType_AssemblyPaths">
      <summary>Specifies lEnumType to be a semicolon-delimited list of directories in which Visual Studio will look for .NET references.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.CompEnum.CompEnumType_COM2">
      <summary>Specifies lEnumType to be a COM component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.CompEnum.CompEnumType_COMPlus">
      <summary>Specifies lEnumType to be a Visual Studio interop assembly.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.COMREFERENCE">
      <summary>Contains information about (represents) a COM object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCE.guidTypeLib">
      <summary>Contains the GUID of the COM object's TypeLib.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCE.wVerMajor">
      <summary>WORD containing the COM objects major version number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCE.wVerMinor">
      <summary>WORD containing the COM objects minor version number.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO">
      <summary>The COMREFERENCEINFO structure stores information about a COM object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO.bstrDescription">
      <summary>BSTR containing the friendly name of the TypeLib.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO.bstrPath">
      <summary>BSTR containing the full path to typelib file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO.dwLibFlags">
      <summary>DWORD containing typelib flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO.guidTypeLib">
      <summary>Contains the typelib's GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO.lcidTypelib">
      <summary>Contains the lcid of typelib.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO.wVerMajor">
      <summary>WORD ontaining the typelib's major version number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.COMREFERENCEINFO.wVerMinor">
      <summary>WORD containing the typelib's minor version number.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.Constants">
      <summary>Miscellaneous collection of constants defined in various idl's.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.ACT_DEFAULT">
      <summary>Use the default document object activation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.ACT_SHOW">
      <summary>Display the document object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.CONTROLTYPELIB">
      <summary>A type library of an ActiveX control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_ACTIVEPROJECT">
      <summary>The value of the LC_ACTIVEPROJECT category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_CLASSACCESS">
      <summary>The value of the LC_CLASSACCESS category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_CLASSTYPE">
      <summary>The value of the LC_CLASSTYPE category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_MEMBERACCESS">
      <summary>The value of the LC_MEMBERACCESS category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_MEMBERTYPE">
      <summary>The value of the LC_MEMBERTYPE category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_MODIFIERTYPE">
      <summary>The value of the LC_MODIFIERTYPE category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_NODETYPE">
      <summary>The value of the LC_NODETYPE category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.COUNT_LIBCAT_VISIBILITY">
      <summary>The value of the LC_VISIBILITY category.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.EPF_ALL">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.EPF_LOADED">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.EPF_UNLOADED">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.EPF_VIRTUAL">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL">
      <summary>All objects are returned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED">
      <summary>Only the selected objects are returned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.HELPINFO_WHATS_THIS_MODE_ON">
      <summary>The “What’s This” help mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.LTVGN_FIRSTSEL">
      <summary>Retrieves the first selected item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.LTVGN_NEXTSEL">
      <summary>Retrieves the next selected item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.LTVGN_PREVIOUSSEL">
      <summary>Retrieves the previous selected item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.ME_FIRST_MENU_ITEM">
      <summary>The menu editor’s first menu item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.ME_UNKNOWN_MENU_ITEM">
      <summary>An unknown menu item in the menu editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.OFN_ALLOWONLYFILESYSLOCS">
      <summary>Only allow saving a file to the local file system.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PCL_AUTO_COMMANDS">
      <summary>Indicates there are auto completion items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.Priority_VsNewProjectPseudoFolder">
      <summary>Indicates priority for a “Visual Studio” pseudo-folder.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Appearance">
      <summary>The Appearance category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Behavior">
      <summary>The Behavior category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Data">
      <summary>The Data category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_DDE">
      <summary>The DDE category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Font">
      <summary>The Font category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_List">
      <summary>The List category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Misc">
      <summary>The Misc category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Nil">
      <summary>No category is displayed.in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Position">
      <summary>The Position category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Scale">
      <summary>The Scale category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.PROPCAT_Text">
      <summary>The Text category in the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.RIEF_OPENASMISCFILE">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SBAI_Build">
      <summary>Animation when building the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SBAI_Deploy">
      <summary>Animation when deploying the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SBAI_Find">
      <summary>Animation when searching.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SBAI_General">
      <summary>Standard animation icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SBAI_Print">
      <summary>Animation when printing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SBAI_Save">
      <summary>Animation when saving files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SBAI_Synch">
      <summary>Animation when synchronizing files over the network.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_DocumentFrame">
      <summary>Visual Studio tracks this selection automatically so it cannot be set via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)" />, but the value may be observed by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_LastWindowFrame">
      <summary>The value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_WindowFrame" /> before it received its current value. It is guaranteed to be different from SEID_WindowFrame unless both are empty.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_MAX">
      <summary>The last select element ID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_PropertyBrowserSID">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown" /> of the active <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_ResultList">
      <summary>IID_IUnknown of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> for list navigation commands.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_StartupProject">
      <summary>IID_IUnknown of the active StartupProject.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_UndoManager">
      <summary>IID_IUnknown of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_UserContext">
      <summary>An event that indicates selection only by document windows that do not push selection context to the property browser. The alternative case is VSFPROPID_UserContext.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_WindowFrame">
      <summary>Visual Studio tracks this selection automatically so it cannot be set via OnElementValueChanged, but the value may be observed by calling GetCurrentElementValue.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.SELOBJS_ACTIVATE_WINDOW">
      <summary>The objects are to be selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.TL_CATEGORY_BMP_HEIGHT">
      <summary>Height of the custom bitmaps provided in an image list for a task list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.TL_CATEGORY_BMP_WIDTH">
      <summary>Width of the custom bitmaps provided in an image list for a task list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.UIHWCMDID_CancelLabelEdit">
      <summary>Notifies the hierarchy that a label edit was cancelled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.UIHWCMDID_CommitLabelEdit">
      <summary>Notifies the hierarchy of a successful ending of the label editing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.UIHWCMDID_DoubleClick">
      <summary>Notifies the hierarchy that a mouse double click occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.UIHWCMDID_EnterKey">
      <summary>Notifies the hierarchy that the keyboard Enter key was pressed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.UIHWCMDID_RightClick">
      <summary>Notifies the hierarchy that the right mouse button was clicked.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.UIHWCMDID_StartLabelEdit">
      <summary>Notifies the hierarchy of the start of label editing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VS_SPLASH_BMP_HEIGHT">
      <summary>The recommended height for splash screen bitmaps.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VS_SPLASH_BMP_WIDTH">
      <summary>The recommended width for splash screen bitmaps.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VSCFGPROPID_SupportsCfgEditing">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VSCFGPROPID_SupportsPlatformEditing">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VSCOOKIE_NIL">
      <summary>A Visual Studio-specific constant that indicates that a cookie has not been set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VSDOCCOOKIE_NIL">
      <summary>A Visual Studio-specific constant that indicates that a document cookie has not been set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VSOBJFLAGS_OBJBROWSER">
      <summary>No flags are specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VSOBJFLAGS_RESOURCEVIEW">
      <summary>Search in resource view. For symbol search only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.Constants.VSPROPID_ExtraSolutionPropertyPages">
      <summary>Obsolete.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE">
      <summary>Sets the desired mode of the debugger.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DBGMODE.DBGMODE_Break">
      <summary>Stopped.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DBGMODE.DBGMODE_Design">
      <summary>Design mode; no code execution allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DBGMODE.DBGMODE_Enc">
      <summary>High order bit indicates Edit and Continue mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DBGMODE.DBGMODE_EncMask">
      <summary>Mask to filter DBGMODE_Enc.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DBGMODE.DBGMODE_Run">
      <summary>Attached to application and running.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION">
      <summary>The DEBUG_LAUNCH_OPERATION enumeration is a member of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo" /> structure, a parameter of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.LaunchDebugTargets(System.UInt32,System.IntPtr)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_AlreadyRunning">
      <summary>Attaches to a process. The <paramref name="bstrExe" /> element of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo" /> struct is the process name, or a null character followed by a string indicating the hexadecimal process id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess">
      <summary>Launches the process. The <paramref name="bstrExe" /> element of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo" /> struct is the full path to the exe, <paramref name="bstrArg" /> are the arguments to pass to CreateProcess, <paramref name="clsidCustom" /> specifies the single debug engine to use (null for default), or <paramref name="dwClsidCount" /> and <paramref name="pclsidList" /> specify the debug engines to use</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_Custom">
      <summary>OBSOLETE. Use DLO_CreateProcess.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_LaunchByWebServer">
      <summary>Use special HTTP verb to debug.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType">
      <summary>Specifies the discovery node type in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IReferenceInfo.GetNodeType(Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType[])" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType.DiscoveryReferenceInfo">
      <summary>The result contains discovery reference information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType.SchemaReferenceInfo">
      <summary>The result contains schema reference information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType.ServiceReferenceInfo">
      <summary>The result contains service reference information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType.UnrecognizedReference">
      <summary>The result contains an unrecognized reference type.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS">
      <summary>Controls the state or the appearance of items within a hierarchy, or the hierarchy itself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_AddCutHighlightItem">
      <summary>Provides Cut highlight feedback to an additional item, without removing the Cut highlighting from other items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_AddSelectItem">
      <summary>Adds an item to a multiple selection. This is equivalent to pressing the CTRL key and selecting an item with the mouse.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_BoldItem">
      <summary>Bolds the selected item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_CollapseFolder">
      <summary>Collapses a single folder.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_CutHighlightItem">
      <summary>Hierarchy item has Cut highlighting, which is a dim, grayed-out appearance indicating a pending Cut operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_EditItemLabel">
      <summary>Sets Edit mode for the item label. Use to programmatically set Edit mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_ExpandFolder">
      <summary>Expands a single folder.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_ExpandFolderRecursively">
      <summary>Expands a folder and all of its child folders, recursively.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_ExpandParentsToShowItem">
      <summary>Expands parent folders to show the item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_ExtendSelectItem">
      <summary>Extends the selection into a multiple selection. This is equivalent to pressing the SHIFT key and selecting multiple items with the mouse.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_SelectItem">
      <summary>Selects a single item. This is equivalent to selecting the item with the mouse and removing the selection feedback from any previously selected items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_UnBoldItem">
      <summary>Removes bold font from an item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_UnCutHighlightItem">
      <summary>Cut highlighting is removed from a hierarchy item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS.EXPF_UnSelectItem">
      <summary>Deselects an item.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.FontInfo">
      <summary>Provides a basic definition of any font used by a category of Display Items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.FontInfo.bCharSetValid">
      <summary>A setting of true indicates that the character set is valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.FontInfo.bFaceNameValid">
      <summary>A setting of true indicates that the face name is valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.FontInfo.bPointSizeValid">
      <summary>A setting of true indicates that the point size is valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.FontInfo.bstrFaceName">
      <summary>String containing the name of the font.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.FontInfo.iCharSet">
      <summary>Integer containing the character set, (e.g., RUSSIAN_CHARSET).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.FontInfo.wPointSize">
      <summary>Specifies the point size of the font.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IActiveDesigner">
      <summary>Manages an ActiveX designer used as an editor. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IActiveDesigner.GetExtensibilityObject(System.Object@)">
      <summary>Retrieves the extensibility object (DTE) for the ActiveX designer in use as an editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppvObjOut">[out]. Address of pointer to the IDispatch interface of the extensibility object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IActiveDesigner.GetRuntimeClassID(System.Guid@)">
      <summary>Retrieves the class identifier (CLSID) for the runtime portion of the ActiveX designer. Designers generally have separate runtime and design time components.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pclsid">[out] Pointer to the CLSID of the runtime portion of the designer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IActiveDesigner.GetRuntimeMiscStatusFlags(System.UInt32@)">
      <summary>Updates an object containing designer runtime flags information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwMiscFlags">[out] Pointer to a DWORD value containing a bit combination of runtime status flags. For more information, see <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLEMISC" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IActiveDesigner.QueryPersistenceInterface(System.Guid@)">
      <summary>Tests whether or not the designer supports a given persistence interface such as <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPersistStream" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.Success indicates that the designer supports the persistence interface.</returns>
      <param name="riidPersist">[in] The IID of the persistence interface. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IActiveDesigner.SaveRuntimeState(System.Guid@,System.Guid@,System.IntPtr)">
      <summary>Saves the runtime state of the designer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riidPersist">[in] The IID of the persistence interface to use.</param>
      <param name="riidObjStgMed">[in] The IID of the interface responsible for the storage.</param>
      <param name="pObjStgMed">[in] Pointer to the storage managed by the interface <paramref name="riidObjStgMed" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ICategorizeProperties">
      <summary>Provides category names and maps categories to properties for display in the Properties window. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ICategorizeProperties.GetCategoryName(System.Int32,System.UInt32,System.String@)">
      <summary>Returns a BSTR containing the category name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="PROPCAT">[in] Specifies the property category.</param>
      <param name="pbstrName">[out] Pointer to a string containing the category name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ICategorizeProperties.MapPropertyToCategory(System.Int32,System.Int32@)">
      <summary>Returns the property category value for the specified property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">[in] Specifies the dispatch ID of the property to be displayed.</param>
      <param name="ppropcat">[out] Specifies a pointer to the property category.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate">
      <summary>Provides a method to display the default event handler code for a given displayed object. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate.DisplayDefaultEventHandler(System.String)">
      <summary>Displays the default event handler.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrObjectName">[in] Pointer to a string that contains the default event handler. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate2">
      <summary>Displays the event handler code of a given displayed object. This interface extends <see cref="T:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate" /> by providing an additional method to display code for specific events of a displayed object. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate2.DisplayDefaultEventHandler(System.String)">
      <summary>Displays the code for the default event handler. Inherited from <see cref="T:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrObjectName">[in] Pointer to a string containing the name of the object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate2.DisplayEventHandler(System.String,System.String)">
      <summary>Displays the code for a specific event handler.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrObjectName">[in] Pointer to a string containing the name of the object.</param>
      <param name="lpstrEventName">[in] Pointer to a string containing the name of the event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack">
      <summary>Specifies the interface to use when a Web service discovery finishes. Typically used to notify the shell after an asynchronous search. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack.NotifyDiscoverComplete(System.Int32,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult)">
      <summary>Establish the interface to use when a Web service discovery finishes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cookie">[in] Cookie to use to uniquely identify the callback in any later operations.</param>
      <param name="pIDiscoveryResult">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult">
      <summary>Downloads the results of an XML Web service discovery session. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.AddWebReference(System.Object,System.String)">
      <summary>Call this method to download the files cached by the latest discovery session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkWebReferenceFolder">[in] Specifies the reference folder of the project automation item.</param>
      <param name="bstrDestinationPath">[in] String containing the destination path of the folder where the files are to be stored.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.AddWebReferenceTo(System.Object,System.String,System.String)">
      <summary>Adds a reference to an XML Web service that already has a discomap file and was not necessarily discovered.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkWebReferenceFolder">[in] Specifies the reference folder of the project automation item.</param>
      <param name="bstrDestinationPath">[in] Specifies the destination path of the folder where the files are to be stored.</param>
      <param name="bstrDiscomapFilename">[in] Specifies the path for the discomap file location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.GetDiscoverySession(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession@)">
      <summary>Returns a pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="discoverySession">[out] Pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.GetDocumentXml(System.String,System.String@)">
      <summary>Retrieves the XML of the document specified by the URL in the parameter list. This URL can point to SDL, XSD, disco or other file types.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="url">[in] Specifies the URL of the document.</param>
      <param name="pbstrXML">[out] Pointer to a string containing the XML of the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.GetRawXml(System.String@)">
      <summary>Returns the XML of the document specified in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession.DiscoverUrl(System.String,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult@)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrXML">[out] Pointer to a string containing the XML.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.GetReferenceCount(System.Int32@)">
      <summary>Returns the reference count for the XML Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Pointer to a reference count object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.GetReferenceInfo(System.Int32,Microsoft.VisualStudio.Shell.Interop.IReferenceInfo@)">
      <summary>Returns a pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IReferenceInfo" /> that contains information on the XML Web service reference-file types.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIndex">[in] Pointer to an index object.</param>
      <param name="ppIReferenceInfo">[out] Pointer to a pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IReferenceInfo" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.GetUrl(System.String@)">
      <summary>Returns the URL of the XML Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrURL">[out] Pointer to a string containing the URL.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession">
      <summary>Called by <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg2" /> to discover XML Web services. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession.CancelDiscoverUrl(System.Int32)">
      <summary>Use this method to cancel the discovery process. The process will be ignored, but the thread itself will not be destroyed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cookie">[in] Specifies a cookie that identifies the discovery result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession.DiscoverUrl(System.String,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult@)">
      <summary>Returns a pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrURL">[in] Pointer to a string containing the URL of the file to be discovered.</param>
      <param name="pIDiscoveryResult">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession.DiscoverUrlAsync(System.String,Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack,System.Int32@)">
      <summary>Returns the discovery result after the file is downloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="url">[in] Specifies the URL for the discovery session.</param>
      <param name="pDiscoverUrlCallBack">[in] Pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack" /> Interface. This interface returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> when the discovery is complete.</param>
      <param name="cookie">[out] Specifies a cookie that identifies the discovery result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession.GetDiscoverError(System.Int32)">
      <summary>Retrieves the exception if <see cref="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack.NotifyDiscoverComplete(System.Int32,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult)" /> method takes in <paramref name="cookie" /> = null.</summary>
      <returns>Two return values are possible:<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />: No error info available. The error info was erased. To prevent this from happening, call GetDiscoveryError in your <see cref="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack.NotifyDiscoverComplete(System.Int32,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult)" /> code.Other: This method will throw the exception caught in discovery, so HRESULT won't be <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
      <param name="cookie">[in] Identifies the URL of the file that is being discovered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession.UpdateWebReference(System.Object,System.String,System.String)">
      <summary>Discovers an XML Web service and then adds a reference to it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkWebReferenceFolder">[in] Project Item of the folder containing web reference.</param>
      <param name="bstrUrl">[in] URL of the file being discovered.</param>
      <param name="bstrDestinationPath">[in] Destination path to updates to the web reference.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IDocumentSite">
      <summary>Maintains information and supplies methods for the parent object of the document. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite.ActivateObject(System.UInt32)">
      <summary>Activates the document object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Bit flags using one of two values: ACT_DEFAULT to use the default activation; ACT_SHOW to display the object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite.GetCompiler(System.Guid@,System.IntPtr@)">
      <summary>Returns the requested interface of the compiler for the document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iid">[in] Requested interface (REFIID).</param>
      <param name="ppvObj">[out] The desired interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the document site. Typically returns the value set by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSite">[out] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the document site.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite.IsObjectShowable">
      <summary>Indicates whether or not the object is showable.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the object can be shown.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the document site.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSite">[in] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface to use for the document site.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IDocumentSite2">
      <summary>Maintains information and supplies methods for the parent object of the document. This interface extends and inherits from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDocumentSite" />. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite2.ActivateObject(System.UInt32)">
      <summary>Activates the document object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Bit flags using one of two values: ACT_DEFAULT to use the default activation; ACT_SHOW to display the object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite2.GetCompiler(System.Guid@,System.IntPtr@)">
      <summary>Returns the requested interface of the compiler for the document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iid">[in] Requested interface (REFIID).</param>
      <param name="ppvObj">[out] The desired interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite2.GetObject(System.Object@)">
      <summary>Returns the IDispatch interface of the object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppDisp">[out] The IDispatch interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite2.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the document site. Typically returns the value set by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSite">[out] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the document site.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite2.IsObjectShowable">
      <summary>Indicates whether or not the object is showable.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the object can be shown.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDocumentSite2.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the document site.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSite">[in] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface to use for the document site.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IDropSource">
      <summary>Provides visual feedback and information about the source used in a drag drop operation. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDropSource.GiveFeedback(System.UInt32)">
      <returns>Do not use.</returns>
      <param name="dwEffect">[in] do not use</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IDropSource.QueryContinueDrag(System.Int32,System.UInt32)">
      <returns>Do not use.</returns>
      <param name="fEscapePressed">[in] do not use</param>
      <param name="grfKeyState">[in] do not use</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnlistingInProject">
      <summary>The SCC package is in the process of enlisting in a solution or a project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumComponents">
      <summary>Enumerates the components in a component picker.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComponents.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumComponents@)">
      <summary>Clones the current enumeration component.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIEnumComponents">[out] Returns the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumComponents" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComponents.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA[],System.UInt32@)">
      <summary>Retrieves a specified number of items in an enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of component elements being requested.</param>
      <param name="rgelt">[out] Array of size <paramref name="celt" /> or larger for the return of components in the enumeration sequence.</param>
      <param name="pceltFetched">[out] Pointer to the number of elements supplied in <paramref name="rgelt" />. The caller can pass in null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComponents.Reset">
      <summary>Resets an enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComponents.Skip(System.UInt32)">
      <summary>Skips a specified number of components in an enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of components in the enumeration sequence to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumComReferences">
      <summary>Enumerator for COM references. Used in the Add Reference dialog of the IDE. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComReferences.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumComReferences@)">
      <summary>Clones this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumComReferences" /> interface by creating another instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Reference to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumComReferences" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComReferences.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.COMREFERENCE[],System.UInt32@)">
      <summary>Retrieves the next group of COM references.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of COM references to return, or zero to indicate a request for all of the objects.</param>
      <param name="rgRefs">[out] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.COMREFERENCE" /> objects. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of COM references retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComReferences.Reset">
      <summary>Return the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumComReferences.Skip(System.UInt32)">
      <summary>Skip over a specified number of COM references.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of COM references to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies">
      <summary>Enumerator for projects in the solution. You can get an instance of the interface using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectEnum(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution2" /> interfaces. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies@)">
      <summary>Clones this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies" /> interface by creating another instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Reference to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],System.UInt32@)">
      <summary>Retrieves the next group of hierarchy interfaces (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of hierarchies to return, or zero to indicate a request for all of the objects.</param>
      <param name="rgelt">[out] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> objects. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of hierarchy interfaces retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies.Reset">
      <summary>Return the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies.Skip(System.UInt32)">
      <summary>Skip over a specified number of hierarchy interfaces.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of interfaces to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems">
      <summary>Implemented by the environment to numerate hierarchy items.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems@)">
      <summary>Clone an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] The item to clone.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION[],System.UInt32@)">
      <summary>Moves to the next item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of items to advance.</param>
      <param name="rgelt">[in] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> array containing the selected item.</param>
      <param name="pceltFetched">[in] The number of elements selected</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems.Reset">
      <summary>Resets the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems.Skip(System.UInt32)">
      <summary>Skips an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of items to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumPackages">
      <summary>Enumerator for the currently loaded VSPackages. You can get an instance of the interface through the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.GetPackageEnum(Microsoft.VisualStudio.Shell.Interop.IEnumPackages@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsShell" /> interface. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumPackages.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumPackages@)">
      <summary>Clones this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumPackages" /> interface by creating another instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Reference to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumPackages" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumPackages.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsPackage[],System.UInt32@)">
      <summary>Retrieves the next group of package interfaces (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" />).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of package interfaces to return, or zero to indicate a request for all of the objects.</param>
      <param name="rgelt">[out] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> objects. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of package interfaces retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumPackages.Reset">
      <summary>Returns the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumPackages.Skip(System.UInt32)">
      <summary>Skip over a specified number of hierarchy interfaces.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of interfaces to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices">
      <summary>Enumerates the services needed by a project on startup. You can get an instance of the interface using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices.GetStartupServiceEnum(Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices@)">
      <summary>Clones this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices" /> interface by creating another instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Reference to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices.Next(System.UInt32,System.Guid[],System.UInt32@)">
      <summary>Retrieves the next group of project startup services interfaces.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. When the end of the enumeration is reached, the method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> and sets <paramref name="pceltFetched" /> to 0. If the method fails, it returns an error code.</returns>
      <param name="celt">[in] Number of interfaces to return. Zero indicates that <paramref name="pceltFetched" /> will be set to the number of remaining elements without filling the <paramref name="rgelt" /> array (which may be NULL) with any values.</param>
      <param name="rgelt">[out] An array of interface objects. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of interfaces retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices.Reset">
      <summary>Returns the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices.Skip(System.UInt32)">
      <summary>Skip over a specified number of interfaces.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of interfaces to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments">
      <summary>Represents a list of Running Document Table (RDT) cookies that in turn each represent an open document. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments@)">
      <summary>Creates a copy of this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments" /> object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Returns a new <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments.Next(System.UInt32,System.UInt32[],System.UInt32@)">
      <summary>Returns a specified number of document cookies from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there were fewer than the specified number of cookies remaining; otherwise, returns an error code.</returns>
      <param name="celt">[in] The number of cookies to obtain.</param>
      <param name="rgelt">[in, out] An array to be filled in with the requested cookies. The size of this array must be at least <paramref name="celt" /> members.</param>
      <param name="pceltFetched">[out] Returns the number of cookies actually fetched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments.Reset">
      <summary>Resets the enumeration sequence to the beginning</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments.Skip(System.UInt32)">
      <summary>Skip over the specified number of document cookies in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the specified number of cookies is greater than the remaining number of cookies; otherwise, returns an error code.</returns>
      <param name="celt">[in] The number of cookies to skip over.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems">
      <summary>Enumerator for items in the Toolbox. You can get an instance of the interface through the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.EnumItems(System.String,Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems@)" /> methods of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2" /> interfaces. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems@)">
      <summary>Clones this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems" /> interface by creating another instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Reference to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems.Next(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IDataObject[],System.UInt32@)">
      <summary>Retrieves the next group of data object interfaces (<see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />) representing toolbox items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of interfaces to return, or zero to indicate a request for all of the objects.</param>
      <param name="rgelt">[out] An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interfaces representing toolbox items. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of interfaces retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems.Reset">
      <summary>Returns the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems.Skip(System.UInt32)">
      <summary>Skip over a specified number of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interfaces representing toolbox items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of interfaces to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs">
      <summary>Enumerator for the tabs in the Toolbox. You can get an instance of the interface using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.EnumTabs(Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2" /> interfaces.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs@)">
      <summary>Clones this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs" /> interface by creating another instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Reference to the cloned interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs.Next(System.UInt32,System.String[],System.UInt32@)">
      <summary>Retrieves the next group of toolbox tabs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of toolbox tabs to return. If this value is zero, nothing is returned.</param>
      <param name="rgelt">[out] An array of strings. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of toolbox tabs retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs.Reset">
      <summary>Returns the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs.Skip(System.UInt32)">
      <summary>Skip over a specified number of toolbox tabs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of toolbox tabs to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames">
      <summary>Enumerator for a collection of windows such as the open document windows. You can get an instance of the interface using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetDocumentWindowEnum(Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetToolWindowEnum(Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)" /> methods of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell" /> interface. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)">
      <summary>Clones this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames" /> interface by creating another instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Reference to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame[],System.UInt32@)">
      <summary>Retrieves the next group of window frame interfaces (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of window frame interfaces to return, or zero to indicate a request for all of the objects.</param>
      <param name="rgelt">[out] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> objects. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of interfaces retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames.Reset">
      <summary>Returns the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames.Skip(System.UInt32)">
      <summary>Skip over a specified number of window frame interfaces.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of interfaces to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IExtendedObject">
      <summary>Gives access to the inner object of an extended object. An example of an extended object is an object inside a container where the container provides additional properties for the object, such as Top or Left for position on a form. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IExtendedObject.GetInnerObject(System.Guid@,System.IntPtr@)">
      <summary>Retrieves the inner object corresponding to a GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iid">[in] The GUID of the desired inner object.</param>
      <param name="ppvObject">[out] Reference to the inner object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IExtendedTypeLib">
      <summary>Creates and manages a type library for an extended object. An example of an extended object is an object inside a container where the container provides additional properties for the object, such as Top or Left for position on a form. The compound object can be treated as a single, extended object with the extended type library. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IExtendedTypeLib.AddRefExtendedTypeLib(System.String,System.String,System.Type,System.UInt32,System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.ITypeLib@)">
      <summary>Creates an extended type library and returns a reference counted (AddRef) interface to it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrCtrlLibFileName">[in] Pointer to a string containing the type library file name. This is the type library being extended.You can get the name of a type library from its GUID and other information using QueryPathOfRegTypeLib.</param>
      <param name="lpstrLibNamePrepend">[in] Pointer to a string to prepend to the file name of the extended type library.</param>
      <param name="ptinfoExtender">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> used as the extender.</param>
      <param name="dwReserved">[in] Value not used. Use zero (0).</param>
      <param name="dwFlags">[in] Value not used. Use zero (0).</param>
      <param name="lpstrDirectoryName">[in] Pointer to a string containing the complete path to write out the extended type library. Use NULL if not saving the library.</param>
      <param name="pptLib">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeLib" /> of the extended (combined) type library.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IExtendedTypeLib.AddRefExtendedTypeLibOfClsid(System.Guid@,System.String,System.Type,System.UInt32,System.UInt32,System.String,System.Type@)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> interface for an extended type and returns a reference counted (AddRef) interface to it. Uses the CLSID of the type being extended.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rclsidControl">[in] CLSID of the type being extended.</param>
      <param name="lpstrLibNamePrepend">[in] Pointer to a string to prepend to the file name of the extended type library.</param>
      <param name="ptinfoExtender">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> used as the extender.</param>
      <param name="dwReserved">[in] Value not used. Use zero (0).</param>
      <param name="dwFlags">[in] Value not used. Use zero (0).</param>
      <param name="lpstrDirectoryName">[in] Pointer to a string containing the complete path to write out the extended type library. Use NULL if not saving the library.</param>
      <param name="pptinfo">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> of the extended type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IExtendedTypeLib.CreateExtendedTypeLib(System.String,System.String,System.Type,System.UInt32,System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.ITypeLib@)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeLib" /> interface for an extended type. The interface is not reference counted. The client must handle reference counting.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrCtrlLibFileName">[in] Pointer to a string containing the type library file name. This is the type library being extended.You can get the name of a type library from its GUID and other information using QueryPathOfRegTypeLib.</param>
      <param name="lpstrLibNamePrepend">[in] Pointer to a string to prepend to the file name of the extended type library.</param>
      <param name="ptinfoExtender">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> used as the extender.</param>
      <param name="dwReserved">[in] Value not used. Use zero (0).</param>
      <param name="dwFlags">[in] Value not used. Use zero (0).</param>
      <param name="lpstrDirectoryName">[in] Pointer to a string containing the complete path to write out the extended type library. Use NULL if not saving the library.</param>
      <param name="pptLib">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeLib" /> of the extended (combined) type library.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IExtendedTypeLib.SetExtenderInfo(System.String,System.Type,System.UInt32)">
      <summary>Sets the information for the extending type in the extended type library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrDirectoryName">[in] Pointer to a string containing the complete path to write out the extended type library. Use NULL if not saving the library.</param>
      <param name="ptinfoExtender">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> for the extending object.</param>
      <param name="dwReserved">[in] Not used. Use zero (0) or NULL.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IHelp">
      <summary>Manages the retrieval and display of online help information. You can get an instance of the interface from the SHelp (SID_SHelp) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IHelp.GetHelpFile(System.String@)">
      <summary>Gets the name and path of the help file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstr">[out] String containing the name of the help file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IHelp.GetHelpInfo(System.UInt32@)">
      <summary>Gets information about the context of the help request.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwHelpInfo">[out] A set of bit flags. Most commonly used to indicate whether or not "What's This" Help mode is active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IHelp.ShowHelp(System.String,System.UInt32,System.UInt32)">
      <summary>Displays a Help topic.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szHelp">[in] String containing the name and path of the Help file.</param>
      <param name="fuCommand">[in] The context ID of the topic to display.</param>
      <param name="dwHelpContext">[in] Bit flags indicating how to display the topic. For more information, see the Help constants, such as HELP_CONTEXTPOPUP, in the winuser.h file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ILicensedClassManager">
      <summary>Tells Visual Studio which classes a package needs through a list of license keys. You can get an instance of the interface through the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SLicensedClassManager" /> (SID_SLicensedClassManager) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILicensedClassManager.OnChangeInRequiredClasses(Microsoft.VisualStudio.Shell.Interop.IRequireClasses)">
      <summary>Outgoing interface for notification of changes in the list of required classes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pirc">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IRequireClasses" /> interface that provides a list of the required classes.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry">
      <summary>Establishes a locally-registered COM object relative to the local Visual Studio registry hive. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)">
      <summary>Creates an instance of a class listed in the local registry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This is the CLSID associated with the data and code that is used to create the object.</param>
      <param name="punkOuter">[in] Pointer to the controlling instance of IUnknown of the aggregate that uses the newly created object. A value of null indicates that the object is not being created as part of an aggregate. If non-null, this is a pointer to the aggregate object's IUnknown interface (the controlling IUnknown).</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="dwFlags">[in] Flags controlling the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specifies a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="ppvObj">[out] Address of pointer variable that receives the interface pointer requested in <paramref name="riid" />. Upon successful return, <paramref name="ppvObj" /> contains the requested interface pointer. Upon failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry.GetClassObjectOfClsid(System.Guid@,System.UInt32,System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Returns the class object associated with a CLSID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This is the CLSID associated with the data and code that is used to create the object.</param>
      <param name="dwFlags">[in] Flags controlling the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specifies a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="lpReserved">[in] Reserved.</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="ppvClassObject">[in] Address of pointer variable that receives the interface pointer requested in <paramref name="riid" />. Upon successful return, <paramref name="ppvObj" /> contains the requested interface pointer. Upon failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry.GetTypeLibOfClsid(System.Guid,Microsoft.VisualStudio.OLE.Interop.ITypeLib@)">
      <summary>Not implemented. Do not use.</summary>
      <param name="clsid">Do not use.</param>
      <param name="pptLib">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2">
      <summary>Establishes a locally-registered COM object relative to the local Visual Studio registry hive.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)">
      <summary>Creates an instance of a class listed in the local registry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This is the CLSID associated with the data and code that is used to create the object.</param>
      <param name="punkOuter">[in] Pointer to the controlling instance of IUnknown of the aggregate that uses the newly created object. A value of null indicates that the object is not being created as part of an aggregate. If non-null, this is a pointer to the aggregate object's IUnknown interface (the controlling IUnknown).</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="dwFlags">[in] Flags controlling the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specify a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="ppvObj">[out] Address of pointer variable that receives the interface pointer requested in <paramref name="riid" />. Upon successful return, <paramref name="ppvObj" /> contains the requested interface pointer. Upon failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.GetClassObjectOfClsid(System.Guid@,System.UInt32,System.IntPtr,System.Guid@,System.IntPtr)">
      <summary>Returns the class object associated with a CLSID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This is the CLSID associated with the data and code that is used to create the object.</param>
      <param name="dwFlags">[in] Flags controlling the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specify a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="lpReserved">[in] Reserved.</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="ppvClassObject">[in] Address of pointer variable that receives the interface pointer requested in <paramref name="riid" />. Upon successful return, <paramref name="ppvObj" /> contains the requested interface pointer. Upon failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.GetLocalRegistryRoot(System.String@)">
      <summary>Returns the local registry root.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRoot">[out] Pointer to a string containing the local registry root.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.GetTypeLibOfClsid(System.Guid,Microsoft.VisualStudio.OLE.Interop.ITypeLib@)">
      <summary>Not implemented. Do not use.</summary>
      <param name="clsid">Do not use.</param>
      <param name="pptLib">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3">
      <summary>Establishes a local registry relative to the Visual Studio registry hive. This interface extends <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2" />. You can get an instance of the interface through the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SLocalRegistry" /> (SID_SLocalRegistry) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)">
      <summary>Creates an instance of a class that is listed in the local registry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This CLSID is associated with the data and code that is used to create the object.</param>
      <param name="punkOuter">[in] Pointer to the controlling instance of IUnknown of the aggregate that uses the newly created object. A value of null indicates that the object is not created as part of an aggregate. If non-null, this is a pointer to the IUnknown interface of the aggregate object (the controlling IUnknown).</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="dwFlags">[in] Flags that control the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specify a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="ppvObj">[out] Address of the pointer variable that receives the interface pointer that is requested in <paramref name="riid" />. On successful return, <paramref name="ppvObj" /> contains the requested interface pointer. On failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.CreateManagedInstance(System.String,System.String,System.String,System.Guid@,System.IntPtr@)">
      <summary>Creates an instance of a managed class and returns a requested interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="codeBase">[in] String that contains a URL that is the location of the assembly. Optional: use null if you do not use a URL. For more information, see <see cref="P:System.Reflection.AssemblyName.CodeBase" />.</param>
      <param name="assemblyName">[in] String that contains the simple, unencrypted name of the assembly.</param>
      <param name="typeName">[in] String that contains the name of the type to create.</param>
      <param name="riid">[in] Interface to use to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="ppvObj">[out] Pointer to the interface that is requested in <paramref name="riid" />. On successful return, <paramref name="ppvObj" /> contains the requested interface pointer. On failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetClassObjectOfClsid(System.Guid@,System.UInt32,System.IntPtr,System.Guid@,System.IntPtr)">
      <summary>Returns the class object that is associated with a CLSID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier (CLSID) of the requested object. This CLSID is associated with the data and code that is used to create the object.</param>
      <param name="dwFlags">[in] Flags that control the instance creation from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CLSCTX" /> enumeration. Specify a value of <see cref="F:Microsoft.VisualStudio.OLE.Interop.CLSCTX.CLSCTX_INPROC_SERVER" />.</param>
      <param name="lpReserved">[in] Reserved.</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="ppvClassObject">[in] Address of pointer variable that receives the interface pointer that is requested in <paramref name="riid" />. On successful return, <paramref name="ppvObj" /> contains the requested interface pointer. On failure, <paramref name="ppvObj" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetClassObjectOfManagedClass(System.String,System.String,System.String,System.Guid@,System.IntPtr@)">
      <summary>Returns an interface that is implemented by a particular managed object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="codeBase">[in] String that contains a URL that is the location of the assembly. Optional: use null if you do not use a URL. For more information, see <see cref="P:System.Reflection.AssemblyName.CodeBase" />.</param>
      <param name="assemblyName">[in] String that contains the simple, unencrypted name of the assembly.</param>
      <param name="typeName">[in] String that contains the name of the type to create.</param>
      <param name="riid">[in] Interface to be used to communicate with the object. For example, IID_IClassFactory.</param>
      <param name="ppvClassObject">[out] Pointer to the interface that is requested in <paramref name="riid" />. On successful return, <paramref name="ppvClassObject" /> contains the requested interface pointer. On failure, <paramref name="ppvClassObject" /> contains null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetLocalRegistryRoot(System.String@)">
      <summary>Returns the local registry root.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRoot">[out] Pointer to a string that contains the local registry root.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetTypeLibOfClsid(System.Guid,Microsoft.VisualStudio.OLE.Interop.ITypeLib@)">
      <summary>Not implemented. Do not use.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants." />E_NOTIMPL in all cases.</returns>
      <param name="clsid">Do not use.</param>
      <param name="pptLib">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager">
      <summary>The IOleComponentUIManager interface gives in-place VSPackage objects access to a variety of user interface functionality supplied by the environment such as message display, context menus, and the status bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.Deleted1">
      <summary>Reserved for future use. Do not use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.Deleted2">
      <summary>Reserved for future use. Do not use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.OnUIEvent(System.UInt32,System.Guid@,System.Guid@,System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Object@)">
      <summary>Informs the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager" /> service of a UI event.</summary>
      <param name="dwCompRole">[in] Role of the affected in-place VSPackage object. For valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="rclsidComp">[in] Class identifier (CLSID) of the in-place VSPackage object.</param>
      <param name="pguidUIEventGroup">[in] Uniquely identifies the UI events group of the in-place VSPackage object.</param>
      <param name="nUIEventId">[in] Identifies the event using a combination of the events group and event ID.</param>
      <param name="dwUIEventStatus">[in] Represents the status of the event. For valid <paramref name="dwUIEventStatus" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS" />.</param>
      <param name="dwEventFreq">[in] Indicates how often the event occurs. For valid <paramref name="dwEventFreq" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ" />.</param>
      <param name="prcEventRegion">[in] Screen coordinates of the region that might be affected by the event. The environment uses this information to avoid the region.</param>
      <param name="pvarEventArg">[in] Contains event-specific information if applicable. Typically, <paramref name="pvarEventArg" /> will be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.OnUIEventProgress(System.UInt32@,System.Int32,System.String,System.UInt32,System.UInt32)">
      <summary>Requests the display of a progress indicator during a long-term operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwCookie">[in] Identifies a progress indicator. Setting <paramref name="pdwCookie" /> to zero indicates that the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager" /> service should start a new progress indicator. If <paramref name="pdwCookie" /> is not set to zero, the service should display the current progress indicator.</param>
      <param name="fInProgress">[in] Set to true to start or continue display of a progress indicator and false to cancel the progress display.</param>
      <param name="pwszLabel">[in] Points to the label that explains the purpose of the progress indicator. If <paramref name="pswzLabel" /> is set to null on subsequent calls to update the progress of an on-going progress indicator, the previous value of the label is used.</param>
      <param name="nComplete">[in] Specifies the time that has already passed for the operation.</param>
      <param name="nTotal">[in] Specifies the total duration of the operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.SetStatus(System.String,System.UInt32)">
      <summary>Specifies the status text message for the environment's status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszStatusText">[in] Specifies the status text message to display.</param>
      <param name="dwReserved">[in] Placeholder parameter; this value is currently ignored.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.ShowContextMenu(System.UInt32,System.Guid@,System.Int32,Microsoft.VisualStudio.Shell.Interop.POINTS[],Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Requests the display of a context menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Role of the in-place VSPackage object requesting the context menu. For valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="rclsidActive">[in] Class identifier (CLSID) of the in-place VSPackage object requesting the context menu.</param>
      <param name="nMenuId">[in] Identifies the context menu to be displayed.</param>
      <param name="pos">[in] Identifies the screen position for the context menu.</param>
      <param name="pCmdTrgtActive">[in] Points to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface to handle the dispatching of active object commands while the context menu is displayed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.ShowHelp(System.UInt32,System.Guid@,Microsoft.VisualStudio.OLE.Interop.POINT,System.UInt32,System.String,System.UInt32)">
      <summary>Requests the display of Help information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Role of the VSPackage object requesting the Help display. For a list of valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="rclsidComp">[in] Class identifier (CLSID) of the VSPackage object requesting the Help display.</param>
      <param name="posMouse">[in] Identifies the position of the mouse.</param>
      <param name="dwHelpCmd">[in] Identifies the Help command to be invoked.</param>
      <param name="pszHelpFile">[in] Points to the path to the Help file to be displayed.</param>
      <param name="dwData">[in] Data specific to the VSPackage object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.ShowMessage(System.UInt32,System.Guid@,System.String,System.String,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,System.Int32,System.Int32@)">
      <summary>Requests the display of a modal message.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Role of the VSPackage object that is requesting the modal message display. For a list of valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="rclsidComp">[in] Class identifier (CLSID) of the VSPackage object requesting the message display.</param>
      <param name="pszTitle">[in] Pointer to the message text header or null if there is no header to display.</param>
      <param name="pszText">[in] Pointer to the main part of the message text or null if there is no text to display.</param>
      <param name="pszHelpFile">[in] Pointer to the path to a Help file.</param>
      <param name="dwHelpContextID">[in] Specifies the Help context identifier.</param>
      <param name="msgbtn">[in] Specifies the set of buttons to appear in the message box. This parameter is similar to the <paramref name="uType" /> parameter of the Win32 MessageBox function in that it uses similar values with similar semantics. For a list of valid <paramref name="msgbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON" />.Note   OLEMSGBUTTON_YESALLNOCANCEL is not supported and returns the same result as OLEMSGBUTTON_OK.</param>
      <param name="msgdefbtn">[in] Specifies the default button for the message box. For a list of valid <paramref name="msgdefbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON" />.</param>
      <param name="msgicon">[in] Specifies the icon and type of the message. For a list of valid <paramref name="msgicon" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON" />.</param>
      <param name="fSysAlert">[in] If true, this flag causes the MB_SYSTEMMODAL flag to be set when showing the message. If false, no system flag is set during the message display.</param>
      <param name="pnResult">[out] Specifies the result of the message display. If ShowMessage succeeds, <paramref name="pnResult" /> is set to one of the following menu item values returned by the dialog box:[1|1] Value[1|2] Description[2|1] IDABORT[2|2] Abort button was clicked.[3|1] IDCANCEL[3|2] Cancel button was clicked or the ESC key was pressed. If the message box does not have a Cancel button, pressing the ESC key has no effect. [4|1] IDIGNORE[4|2] Ignore button was clicked.[5|1] IDNO[5|2] No button was clicked.[6|1] IDOK[6|2] OK button was clicked.[7|1] IDRETRY[7|2] Retry button was clicked.[8|1] IDYES[8|2] Yes button was clicked.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent">
      <summary>Allows in-place VSPackage objects to operate as a fully integrated component of the environment by using the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager" /> service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.FDoIdle(System.UInt32)">
      <summary>Queries an in-place VSPackage about its need to perform idle time tasks.</summary>
      <returns>The method returns true if the in-place object needs more time to perform idle time tasks and false if no additional idle time is needed. </returns>
      <param name="grfidlef">[in] Specifies the type of idle time processing to be performed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.FQueryClose(System.Int32)">
      <summary>Queries an in-place VSPackage object to determine whether or not the object can terminate.</summary>
      <returns>FQueryClose returns true if the method succeeded or if saving is not required and false if the save failed or if saving is not possible.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.GetCntrContextMenu(System.UInt32,System.Guid@,System.Int32,Microsoft.VisualStudio.Shell.Interop.POINTS[],System.Guid@,Microsoft.VisualStudio.Shell.Interop.OLEMENUID[],System.UInt32@)">
      <summary>Allows an in-place VSPackage object assuming the role of main component to override the context menu requested by an object assuming the subcomponent or component control role.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwRoleActiveObj">[in] Specifies the role of the innermost UI active object that contributes the context menu. For a list of valid <paramref name="dwRoleActiveObj" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="rclsidActiveObj">[in] Class identifier (CLSID) of the innermost UI active object that contributes the context menu.</param>
      <param name="nMenuIdActiveObj">[in] Identifier of the menu to be contributed. A menu identifier is a combination of a CLSID and an <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMENUID" /> structure.</param>
      <param name="pos">[in] Position in screen coordinates for the context menu.</param>
      <param name="pclsidCntr">[out] Class identifier (CLSID) of the context menu to be contributed. If there is no menu to contribute, this parameter should be null.</param>
      <param name="menuid">[out] Identifier of the context menu to be contributed. The identifier is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMENUID" /> structure made up of a numeric menu identifier, a character buffer to hold the menu name, and a pointer to the menu. The menu may be specified either with a menu name string or with the ID of a built-in menu of the in-place object assuming the role of main component. The string should be a name of a menu that is known to the environment. If the string does not identify a valid menu name, then no context menu will be displayed. The environment can return a list of valid menu names through the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPerPropertyBrowsing" /> method.</param>
      <param name="pgrf">[out] Flags controlling how the menu should be used. For a list of valid <paramref name="pgrf" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMENU" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.GetCntrHelp(System.UInt32@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.POINT,System.UInt32,System.String,System.String@,System.UInt32,System.UInt32@)">
      <summary>Allows an in-place VSPackage object assuming the main component role to override the help topic requested by an object assuming the subcomponent or component control role.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwRole">[in][out] On input, pointer to the role of the in-place object requesting the help topic. On output, pointer to the role of the in-place object responsible for displaying the help topic. For a list of valid <paramref name="pdwRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="pclsid">[in][out] On input, pointer to the class identifier of the in-place object requesting the help topic. On output, pointer to the class identifier of the in-place object responsible for displaying the help topic.</param>
      <param name="posMouse">[in] Specifies the position of the mouse. Mouse position can be useful for user interface modes that display help for a user interface element instead of executing the command associated with that element.</param>
      <param name="dwHelpCmd">[in] Specifies the help topic to display.</param>
      <param name="pszHelpFileIn">[in] Pointer to a help file to display.</param>
      <param name="ppszHelpFileOut">[out] Pointer to the help file that was displayed.</param>
      <param name="dwDataIn">[in] Specifies help data to display.</param>
      <param name="pdwDataOut">[out] Pointer to the help data that was displayed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.GetCntrMessage(System.UInt32@,System.Guid@,System.String,System.String,System.String,System.String@,System.String@,System.String@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON[],Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON[],Microsoft.VisualStudio.Shell.Interop.OLEMSGICON[],System.Int32@)">
      <summary>Allows an in-place VSPackage object assuming the main component role to override a message belonging to an object assuming the subcomponent or component control role.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwRole">[in][out] On input, pointer to the role of the in-place object requesting the message display. On output, the <paramref name="pdwRole" /> parameter is the pointer to the role of the in-place object responsible for the message display. For a list of valid <paramref name="pdwRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="pclsid">[in] Specifies the class identifier (CLSID) of the in-place object requesting the message display.</param>
      <param name="pszTitleIn">[in] Points to the title of the message.</param>
      <param name="pszTextIn">[in] Points to the text of the message.</param>
      <param name="pszHelpFileIn">[in] Points to a help file containing the message.</param>
      <param name="ppszTitleOut">[out] Pointer to the title that was displayed.</param>
      <param name="ppszTextOut">[out] Pointer to the text that was displayed.</param>
      <param name="ppszHelpFileOut">[out] Pointer to the help file that was displayed.</param>
      <param name="pdwHelpContextID">[in][out] On input, pointer to the requested help context identifier. On output, the <paramref name="pdwHelpContextId" /> parameter is a pointer to the help context identifier used for the message display.</param>
      <param name="pmsgbtn">[in][out] On input, pointer to the type of buttons to be displayed with the message. On output, the <paramref name="pmsgbtn" /> parameter is a pointer to the type buttons actually displayed with the message. For a list of valid <paramref name="pmsgbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON" />.</param>
      <param name="pmsgdefbtn">[in][out] On input, pointer to the requested position of the default button in the message's button group. On output, the <paramref name="pmsgdefbtn" /> parameter is a pointer to the actual position of the default button. For a list of valid <paramref name="pmsgdefbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON" />.</param>
      <param name="pmsgicon">[in][out] On input, pointer to the type of message to be displayed. On output, the <paramref name="pmsgicon" /> parameter is a pointer to the type of message that was displayed. For a list of valid <paramref name="pmsgicon" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON" />.</param>
      <param name="pfSysAlert">[in][out] If true, this flag causes the MB_SYSTEMMODAL flag to be set when showing the message. If false, no system flag is set during the message display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.OnEnterState(System.UInt32,System.Int32)">
      <summary>Informs an in-place VSPackage object that the environment has entered or left a state.</summary>
      <param name="dwStateId">[in] Identifies the new or prior state. For a list of valid <paramref name="dwStateId" /> values, see <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLECSTATE" />.</param>
      <param name="fEnter">[in] Flag that is set to true to indicate that the environment is entering the state specified by <paramref name="dwStateId" /> and false to indicate that it is exiting the state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.OnWindowActivate(System.UInt32,System.Int32)">
      <summary>Informs an in-place VSPackage object of important window activation events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwWindowType">[in] Specifies the type of window that is being activated. For a list of valid <paramref name="dwWindowType" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEACTIVATE" />.</param>
      <param name="fActivate">[in] Flag that is set to true if the window is activating and false if it is deactivating.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.TranslateCntrAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Requests that an in-place VSPackage object translate a command accelerator.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMsg">[in] Pointer to the keyboard message to be handled as a command accelerator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.UseComponentUIManager(System.UInt32,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager,Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentSite)">
      <summary>Informs an in-place object of its role in the environment, providing pointers to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentSite" /> interfaces.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Specifies the role that the in-place object is to assume in the environment. The default role is <see cref="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_COMPONENTCONTROL" />. For a list of all valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="pgrfCompFlags">[in] Flags specified by the in-place object to control interactions with the environment. For a list of <paramref name="pgrfCompFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLECOMPFLAG" />.</param>
      <param name="pCompUIMgr">[in] Pointer to the environment's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager" /> interface.</param>
      <param name="pIPCompSite">[in] Pointer to the environment's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentSite" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentSite">
      <summary>The IOleInPlaceComponentSite interface is currently not supported. When supported, it will be implemented by the container of an in-place VSPackage object to control the UI mode of the object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentSite.SetUIMode(System.UInt32)">
      <summary>Changes the UI mode of an in-place VSPackage object. This method is currently not supported.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUIMode">[in] Identifier for the UI mode of the in-place object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager">
      <summary>Enables the menus, toolbars, and commands of existing VSPackage objects to be integrated into and managed by the environment's <see cref="T:Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager" /> service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.FContinueIdle">
      <summary>Queries the environment to determine if an in-place active object can continue idle time processing.</summary>
      <returns>If idle processing can continue, the method returns true. If idle processing must terminate, it returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.FOnUIComponentExitState(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Queries the environment to determine if an in-place VSPackage object remains in a particular state.</summary>
      <returns>If the in-place object in question is still in the state represented by <paramref name="dwStateId" />, it returns true. If the in-place object is no longer in the state, it returns false.</returns>
      <param name="dwCompRole">[in] Role of the in-place object in question. For valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />. </param>
      <param name="dwStateId">[in] Identifier representing the state in question. For a list of valid <paramref name="dwStateId" /> values, see <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLECSTATE" />. </param>
      <param name="dwReserved">[in] Reserved for future use. Must be set to 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.FUIComponentInState(System.UInt32)">
      <summary>Queries the environment to determine if a particular state is still in effect.</summary>
      <param name="dwStateId">[in] Identifier of the state in question. For a list of valid <paramref name="dwStateId" /> values, see <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLECSTATE" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.OnUIComponentEnterState(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Informs the environment that an in-place VSPackage object has entered a new state.</summary>
      <param name="dwCompRole">[in] Role of the in-place object that has entered the new state. For a list of valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />. </param>
      <param name="dwStateId">[in] Identifier representing the new state. For a list of valid <paramref name="dwStateId" /> values, see <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLECSTATE" />. </param>
      <param name="dwReserved">[in] Reserved for future use. Must be set to 0. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.SetActiveUI(System.UInt32,System.Guid@,System.UInt32,System.Int32[])">
      <summary>Allows a UI active VSPackage object to change the menus, toolbars, or commands that are displayed on its behalf by the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Role of the in-place object requesting the user interface change. For a list of valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="rclsid">[in] Class identifier (CLSID) of the in-place object requesting the change.</param>
      <param name="cCmdGrpId">[in] Count of the toolbars identified by <paramref name="rgnCmdGrpId" />.</param>
      <param name="rgnCmdGrpId">[in] Array of identifiers of toolbars to be displayed in the update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.UIActivateForMe(System.UInt32,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IOleInPlaceActiveObject,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.UInt32,System.Int32[])">
      <summary>Requests that the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager" /> service participate in the activation or deactivation of an in-place VSPackage object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Role of the in-place VSPackage object that is either activating or deactivating. For valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="rclsidActive">[in] Class identifier (CLSID) of the in-place VSPackage object that is either activating or deactivating.</param>
      <param name="pIPActObj">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleInPlaceActiveObject" /> interface of the innermost active object. The <paramref name="pIPActObj" /> parameter must be null when the in-place object is deactivating and a valid interface pointer when it is activating.</param>
      <param name="pCmdTrgtActive">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface to handle the dispatching of active in-place object commands. The <paramref name="pCmdTrgtActive" /> parameter must be null when the in-place object is deactivating and a valid interface pointer when it is activating.</param>
      <param name="cCmdGrpId">[in] Count of custom toolbar identifiers in the <paramref name="rgnCmdGrpId" /> parameter.</param>
      <param name="rgnCmdGrpId">[in] Array of identifiers for the custom toolbar to be displayed by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager" /> service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.UpdateUI(System.UInt32,System.Int32,System.UInt32)">
      <summary>Informs the environment that the state of an in-place VSPackage object's visible user interface has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Role of the affected in-place object. For a list of valid <paramref name="dwCompRole" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE" />.</param>
      <param name="fImmediateUpdate">[in] Flag indicating whether or not an immediate synchronous update should occur. If set to true, the update is synchronous. If set to false, the update occurs at idle time.</param>
      <param name="dwReserved">[in] Reserved for future use. Must be set to 0.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat">
      <summary>Obtains file format information about items that require saving, and enables the programmatic loading or saving of an object in a format specified by the user. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetClassID(System.Guid@)">
      <param name="pClassID">[out] Points to the location of the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely represents an object class that defines the code that can manipulate the object's data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetCurFile(System.String@,System.UInt32@)">
      <summary>Returns the path to an object's current working file, or, if there is not a current working file, the object's default file name prompt.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszFilename">[out] Pointer to the file name. If the object has a valid file name, the file name is returned as the <paramref name="ppszFilename" /> out parameter. If the object is in the untitled state, null is returned as the <paramref name="ppszFilename" /> out parameter.Note   This result differs from that of the standard <see cref="M:Microsoft.VisualStudio.OLE.Interop.IPersistFile.GetCurFile(System.String@)" /> method, which returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> and a "Save As" prompt string.</param>
      <param name="pnFormatIndex">[out] Value that indicates the current format of the file. This value is interpreted as a zero-based index into the list of formats, as returned by a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetFormatList(System.String@)" />. An index value of zero indicates the first format, 1 the second format, and so on. If the object supports only a single format, it returns zero. Subsequently, it returns a single element in its format list through a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetFormatList(System.String@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetFormatList(System.String@)">
      <summary>Provides the caller with the information necessary to open the standard common Save As dialog box (using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetSaveFileNameViaDlg(Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW[])" /> function) on behalf of the object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszFormatList">[out] Pointer to a string that contains pairs of format filter strings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.InitNew(System.UInt32)">
      <summary>Instructs the object to initialize itself in the untitled state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nFormatIndex">[in] Index value that indicates the current format of the file. The <paramref name="nFormatIndex" /> parameter controls the beginning format of the file. The caller should pass DEF_FORMAT_INDEX if the object is to choose its default format. If this parameter is non-zero, then it is interpreted as the index into the list of formats, as returned by a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetFormatList(System.String@)" />. An index value of 0 indicates the first format, 1 the second format, and so on.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.IsDirty(System.Int32@)">
      <summary>Determines whether an object has changed since being saved to its current file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfIsDirty">[out] true if the document content changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.Load(System.String,System.UInt32,System.Int32)">
      <summary>Opens a specified file and initializes an object from the file contents.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Pointer to the name of the file to load, which, for an existing file, should always include the full path.</param>
      <param name="grfMode">[in] File format mode. If zero, the object uses the usual defaults as if the user had opened the file.</param>
      <param name="fReadOnly">[in] true indicates that the file should be opened as read-only.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.Save(System.String,System.Int32,System.UInt32)">
      <summary>Saves a copy of the object into the specified file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Pointer to the file name. The <paramref name="pszFilename" /> parameter can be null; it instructs the object to save using its current file. If the object is in the untitled state and null is passed as the <paramref name="pszFilename" />, the object returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" />. You must specify a valid file name parameter in this situation.</param>
      <param name="fRemember">[in] Boolean value that indicates whether the <paramref name="pszFileName" /> parameter is to be used as the current working file. If true, <paramref name="pszFileName" /> becomes the current file and the object should clear its dirty flag after the save. If false, this save operation is a Save a Copy As operation. In this case, the current file is unchanged and the object does not clear its dirty flag. If <paramref name="pszFileName" /> is null, the implementation ignores the <paramref name="fRemember" /> flag.</param>
      <param name="nFormatIndex">[in] Value that indicates the format in which the file will be saved. The caller passes DEF_FORMAT_INDEX if the object is to choose its default (current) format. If set to non-zero, the value is interpreted as the index into the list of formats, as returned by a call to the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetFormatList(System.String@)" />. An index value of 0 indicates the first format, 1 the second format, and so on.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.SaveCompleted(System.String)">
      <summary>Notifies the object that it has concluded the Save transaction and that the object can write to its file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Pointer to the file name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IProfferService">
      <summary>Enables a VSPackage to offer new services through the Visual Studio environment that are not implemented natively by the environment. In effect, it provides the mechanism through which VSPackages can contribute to the environment. The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IProfferService" /> interface is part of <see cref="T:Microsoft.VisualStudio.Shell.Interop.SProfferService" />. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferService.ProfferService(System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.UInt32@)">
      <summary>Allows the caller to proffer a new service to the set of services presently proffered by the environment, either natively or by other installed VSPackages.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidService">[in] A GUID that identifies the service being proffered.</param>
      <param name="psp">[in] Pointer to the <see cref="T:System.IServiceProvider" /> interface that provides the environment with the means to request the service.</param>
      <param name="pdwCookie">[out, retval] Cookie that identifies the service so that the caller can later revoke the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferService.RevokeService(System.UInt32)">
      <summary>Prevents third-party clients from accessing a specified service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Identifier of the specified service that is returned by a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IProfferService.ProfferService(System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.UInt32@)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IProfferTypeLib">
      <summary>Enables an ActiveX designer to provide a type library to its host. The designer provides the type library through the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SProfferTypeLib" /> (SID_SProfferTypeLib) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferTypeLib.ProfferTypeLib(System.Guid@,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Provides an ActiveX designer's type library to its host.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidTypeLib">[in] Type library GUID.</param>
      <param name="uVerMaj">[in] Major version number of the type library.</param>
      <param name="uVerMin">[in] Minor version number of the type library.</param>
      <param name="dwFlags">[in] Type library flags. Use CONTROLTYPELIB, defined in designer.h, for a type library of an ActiveX control.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IProvideDynamicClassInfo">
      <summary>Used by ActiveX designers to provide dynamic type information through an <see cref="T:Microsoft.VisualStudio.VsWizard.ITypeInfo" /> interface. A container can use the interface to get type information in response to type change events. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IProvideDynamicClassInfo.FreezeShape">
      <summary>Tells the control not to change its visual representation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IProvideDynamicClassInfo.GetClassInfo(System.Type@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> for an object.</summary>
      <param name="ppTI">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IProvideDynamicClassInfo.GetDynamicClassInfo(System.Type@,System.UInt32@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> for a class with dynamic, changeable type information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppTI">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.ITypeInfo" /> interface.</param>
      <param name="pdwCookie">[out] Pointer to a unique cookie. Can be used to identify the instance of the dynamic class when, for example, persisting the object and its type information.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IReferenceInfo">
      <summary>Provides information about a result from an XML Web service discovery session. Use the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.GetReferenceInfo(System.Int32,Microsoft.VisualStudio.Shell.Interop.IReferenceInfo@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" /> interface to get an instance of this interface. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IReferenceInfo.GetNodeType(Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType[])">
      <summary>Returns the type of node, the kind of information, for the discovery result.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pType">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType" /> enumeration value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IReferenceInfo.GetUrl(System.String@)">
      <summary>Gets the URL of the document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppbstrUrl">[out] Pointer to a string containing the URL of the discovered document.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IRequireClasses">
      <summary>Provides a list of class identifiers for use with the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILicensedClassManager" /> interface. The identifiers tell Visual Studio which classes a package requires. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IRequireClasses.CountRequiredClasses(System.UInt32@)">
      <summary>Gets the number of classes the package requires.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Pointer to the count of required classes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IRequireClasses.GetRequiredClasses(System.UInt32,System.Guid@)">
      <summary>Retrieves the CLSID of a requested required class.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Index of the class to retrieve.</param>
      <param name="pclsid">[out] The CLSID of the requested class.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ISccManagerLoaded">
      <summary>Defines when the SccManager is loaded. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ISchemaReferenceInfo">
      <summary>Returns the target namespace of an XML schema found as the result of a Web service discovery search. You can find the type of document with the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IReferenceInfo" /> interface and then use <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISchemaReferenceInfo" /> if appropriate. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ISchemaReferenceInfo.GetTargetNamespace(System.String@)">
      <summary>Retrieves the namespace of the discovered schema.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRef">[out] Pointer to a string containing schema's namespace.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer">
      <summary>Provides access to objects used to update the Properties window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.CountObjects(System.UInt32,System.UInt32@)">
      <summary>Returns either a count of the total number of objects available or a count of the objects in the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flag that specifies which type of count to return. If set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL" />, CountObjects returns the total number of objects. If set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED" />, CountObjects returns the number of selected objects.</param>
      <param name="pc">[out] Pointer to the requested object count.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.GetObjects(System.UInt32,System.UInt32,System.Object[])">
      <summary>Returns either the objects that are currently selected or the objects that are selectable.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flag that specifies the type of objects to return. If set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL" />, ISelectionContainer::GetObjects returns all selectable objects. If set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED" />, only the currently selected objects are returned.</param>
      <param name="cObjects">[in] Specifies the requested number of objects to be returned.</param>
      <param name="apUnkObjects">[in] Pointer to an array of pointers to be selected or selectable objects that support the IDispatch interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
      <summary>Returns one or more objects selected from a group of objects.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cSelect">[in] Specifies the number of selected items—the number of elements in the array of objects returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.GetObjects(System.UInt32,System.UInt32,System.Object[])" /> and saved in <paramref name="apUnkSelect" />.</param>
      <param name="apUnkSelect">[in][out] Pointer to the array of objects returned through <see cref="M:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.GetObjects(System.UInt32,System.UInt32,System.Object[])" />.</param>
      <param name="dwFlags">[in] Flags that modify the selection. If set to SELOBJS_ACTIVATEWINDOW, the caller is requesting that the window showing the selected objects should be activated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ITrackSelection">
      <summary>Notifies the environment of a change in the current selection container. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.ITrackSelection.OnSelectChange(Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)">
      <summary>Reports that the current selection container has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSC">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface to access Properties window data for the current selection.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IUIElement">
      <summary>Shows or hides a user interface element. Implemented by the element and used by the container. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIElement.Hide">
      <summary>Hides the user interface element.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIElement.IsVisible">
      <summary>Indicates whether or not the UI element is visible.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the element is visible.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIElement.Show">
      <summary>Shows the user interface element.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale">
      <summary>Provides access to the host's UI locale services to manage dialog box string localization. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale.GetDialogFont(Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT[])">
      <summary>Returns the dialog box font used for the host UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLOGFONT">[out] Pointer to the dialog box font. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale.GetUILocale(System.UInt32@)">
      <summary>Returns the UI locale identifier of the host.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> OK. If it fails, it returns an error code.</returns>
      <param name="plcid">[out, retval] Pointer to the unique identifier of the UI locale.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2">
      <summary>Provides access to the host's UI locale services to manage dialog box string localization. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.GetDialogFont(Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT[])">
      <summary>Returns the dialog box font used for the host UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLOGFONT">[out] Pointer to the dialog box font. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.GetUILibraryFileName(System.String,System.String,System.String@)">
      <summary>Returns a UI library (DLL) file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrPath">[in] Specifies the path to the DLL.</param>
      <param name="lpstrDllName">[in] Specifies DLL name.</param>
      <param name="pbstrOut">[out] Pointer to a string containing the out.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.GetUILocale(System.UInt32@)">
      <summary>Returns the UI locale identifier of the host.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="plcid">[out, retval] Pointer to the unique identifier of the UI locale.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.LoadDialog(System.UInt32,System.UInt32,System.IntPtr@)">
      <summary>Loads a dialog box template.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hMod">[in] Handle to the module that will create the dialog box.</param>
      <param name="dwDlgResId">[in] Identifier of the dialog box template.</param>
      <param name="ppDlgTemplate">[out] Pointer to the dialog box template to load.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.LoadUILibrary(System.String,System.String,System.UInt32,System.UInt32@)">
      <summary>Retrieves an HINSTANCE of the satellite DLL from which to obtain the localized strings.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpstrPath">[in] Path to the satellite DLL to load.</param>
      <param name="lpstrDllName">[in] Name of the satellite DLL to load.</param>
      <param name="dwExFlags">[in] DWORD values that determine how to load the DLL.</param>
      <param name="phinstOut">[out, retval] Pointer to the HINSTANCE from which the string can be obtained.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.MungeDialogFont(System.UInt32,System.Byte[],System.IntPtr@)">
      <summary>Indicates the dialog box template to use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwSize">[in] Dialog box font size.</param>
      <param name="pDlgTemplate">[in, size_is(dwSize)] Font size passed in with <paramref name="dwSize" />.</param>
      <param name="ppDlgTemplateOut">[out] Pointer to the processed dialog box template.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg">
      <summary>Provides access to the environment's Add Project Item dialog box for the purpose of adding new items to the project. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)">
      <summary>Displays the Add Item dialog box on behalf of the calling project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Item identifier of the folder in the project to which items should be added. This is useful only for directory-based projects. Non-directory-based projects pass <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. The Add Item dialog box does not use the parameter except to pass it back to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method.</param>
      <param name="rguidProject">[in] Identifier for the project's type. Register this parameter under the Projects subkey of the Microsoft Visual Studio registry key. The dialog box uses the following information under that key:The ItemTemplateDir value, which contains the path to the directory containing item templates for this project type.The Filters key, which is used to construct open filters for the Existing tab.Items and filters specific to this project type, which are displayed in the dialog box.</param>
      <param name="pProject">[in] Pointer to the specific <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> interface that the dialog box uses to generate default names for each item by calling the interface's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)" /> method and to cause items to be added to the project by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String)" /> method.</param>
      <param name="grfAddFlags">[in] Flag values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS" /> enumeration that modify the behavior of the dialog box.</param>
      <param name="lpszExpand">[in] Subfolder of the item template directory to select and to expand, if it has subfolders of its own. This parameter merely initializes the state of the tree and does not affect what the item template directory is.</param>
      <param name="lpszSelect">[in] Item within the <paramref name="pszExpand" /> folder to be selected. The project uses this parameter to implement a sticky behavior for the selected item. This parameter overrides the default behavior for the dialog box, which is to select the first item in the folder.</param>
      <param name="pbstrLocation">[in, out] Pointer to the location field (initial/final value). This parameter is used only if you specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowLocationField" />. To specify a sticky behavior for the location field, which is the recommended behavior, remember the last location field value and pass it back in when you open the dialog box again.</param>
      <param name="pbstrFilter">[in, out] Initializes and returns the final value of the filter string (on the Existing tab). Specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter" /> to return a value for the filter string. To specify sticky behavior for the filter field, which is the recommended behavior, remember the last filter field value and pass it back in when you open the dialog box again.</param>
      <param name="pfDontShowAgain">[out] Determines whether the user selected or cleared the Do not show this dialog again option. This parameter is used only if you specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowDontShowAgain" />. To implement the option, which is the recommended behavior, call directly the last selected item template's own <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method. Typically, a project will maintain a separate DontShowAgain option for each item type, such as Form, Module, and Class.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2">
      <summary>Provides access to the environment's Add Project Item dialog box for the purpose of adding new items to the project. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddExistingProjectItems(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.Guid@,System.String,System.Guid@,System.UInt32,System.String[])">
      <summary>Adds existing project items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Item identifier of the folder in the project to which items should be added.</param>
      <param name="rguidProject">[in] Unique identifier of the project.</param>
      <param name="pProject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> interface on which Add Item will be called.</param>
      <param name="grfEditorFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration.</param>
      <param name="rguidEditorType">[in] Editor type with which to open (if supported).</param>
      <param name="pszPhysicalView">[in] Physical view with which to open (if supported).</param>
      <param name="rguidLogicalView">[in] Logical view with which to open (if supported).</param>
      <param name="cFilesToAdd">[in] Number of files to add.</param>
      <param name="rgpszFilesToAdd">[in, size_is(cFilesToAdd)] Array of files whose actual number is <paramref name="cFilesToAdd" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddNewProjectItem(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.Guid@,System.String,System.Guid@,System.String,System.String@)">
      <summary>Adds a new project item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Item identifier of the folder in the project to which items should be added.</param>
      <param name="rguidProject">[in] Unique identifier of the project.</param>
      <param name="pProject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> interface on which the Add Item will be called.</param>
      <param name="grfEditorFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration.</param>
      <param name="rguidEditorType">[in] Editor type with which to open (if supported).</param>
      <param name="pszPhysicalView">[in] Physical view with which to open (if supported).</param>
      <param name="rguidLogicalView">[in] Logical view with which to open (if supported).</param>
      <param name="pszItemName">[in] Template file name.</param>
      <param name="pbstrFileToAdd">[in, out] File name to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)">
      <summary>Displays the Add Item dialog box on behalf of the calling project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Item identifier of the folder in the project to which items should be added. This is useful only for directory-based projects. Non-directory-based projects pass VSITEMID_ROOT. The Add Item dialog box does not use the parameter except to pass it back to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method.</param>
      <param name="rguidProject">[in] Identifier for the project's type. Register this parameter under the Projects subkey of the Microsoft Visual Studio registry key. The dialog box uses the following information under that key:The ItemTemplateDir value, which contains the path to the directory containing item templates for this project type.The Filters key, which is used to construct open filters for the Existing tab.Items and filters specific to this project type, which are displayed in the dialog box.</param>
      <param name="pProject">[in] Pointer to the specific <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> interface that the dialog box uses to generate default names for each item by calling the interface's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)" /> method and to cause items to be added to the project by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method.</param>
      <param name="grfAddFlags">[in] Flag values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS" /> enumeration that modify the behavior of the dialog box.</param>
      <param name="lpszExpand">[in] Subfolder of the item template directory to select and to expand, if it has subfolders of its own. This parameter merely initializes the state of the tree and does not affect what the item template directory is.</param>
      <param name="lpszSelect">[in] Item within the <paramref name="pszExpand" /> folder to be selected. The project uses this parameter to implement a sticky behavior for the selected item. This parameter overrides the default behavior for the dialog box, which is to select the first item in the folder.</param>
      <param name="pbstrLocation">[in, out] Pointer to the location field (initial/final value). This parameter is used only if you specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowLocationField" />. To specify a sticky behavior for the location field, which is the recommended behavior, remember the last location field value and pass it back in when you open the dialog box again.</param>
      <param name="pbstrFilter">[in, out] Initializes and returns the final value of the filter string (on the Existing tab). Specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter" /> to return a value for the filter string. To specify sticky behavior for the filter field, which is the recommended behavior, remember the last filter field value and pass it back in when you open the dialog box again.</param>
      <param name="pfDontShowAgain">[out] Determines whether the user selected or cleared the Do not show this dialog again option. This parameter is used only if you specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowDontShowAgain" />. To implement the option, which is the recommended behavior, call directly the last selected item template's own <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method. Typically, a project will maintain a separate DontShowAgain option for each item type, such as Form, Module, and Class.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlgTitled(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String,System.String@,System.String@,System.Int32@)">
      <summary>Allows adding or changing a caption on the Add Project Item dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Item identifier of the folder in the project to which items should be added. This is only useful for directory-based projects. Non-directory-based projects pass VSITEMID_ROOT. The Add Item dialog box does not use the parameter except to pass it back to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" />.</param>
      <param name="rguidProject">[in] Identifier for the project type. This identifier should be registered under the Projects subkey of the Microsoft Visual Studio registry key. The dialog box uses the following information under that key:ItemTemplateDir value, which should contain the path to the directory containing item templates for this project type.Filters key, which is used to construct open filters for the Existing tab.The dialog box displays items and filters specific to this project type.</param>
      <param name="pProject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> interface the dialog uses to generate default names for each item by calling the interface's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)" /> method and to cause items to be added to the project by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method.</param>
      <param name="grfAddFlags">[in] Flag values that modify the behavior of the dialog box. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS" /> enumeration.</param>
      <param name="lpszDlgTitle">[in] Dialog box caption.</param>
      <param name="lpszExpand">[in] Subfolder of the item template directory to select (and expand, if it has subfolders of its own). This initializes the state of the tree and does not affect what the item template directory is.</param>
      <param name="lpszSelect">[in] Item within the <paramref name="pszExpand" /> folder to be selected. The project uses this parameter to implement a sticky behavior for the selected folder, in which item selection persists between sessions. This parameter overrides the default behavior for the dialog box, which is to select the first item in the folder.</param>
      <param name="pbstrLocation">[in, out] Pointer to the location field (initial/final value). This parameter is used only if you specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowLocationField" />. To have the project implement sticky behavior, which is the recommended behavior, for the location field, pass the last location field value back in when you open the dialog box again.</param>
      <param name="pbstrFilter">[in, out] Value of the filter string on the Existing tab. Specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter" /> instead of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter" /> is set. To have the project implement a sticky behavior for the filter field, which is the recommended behavior, pass the last filter field value back in when you open the dialog box again.</param>
      <param name="pfDontShowAgain">[out] Indicator of whether the user selected or cleared the Don't Show This Dialog Again option. This parameter is used only if you specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowDontShowAgain" />. To implement the option, which is the recommended behavior, call directly the last selected item template's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method. Typically, a project maintains a separate Don't Show Again option for each item type, such as Form, Module, and Class.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlgTitledEx(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.Int32@)">
      <summary>Provides additional functionality to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlgTitled(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String,System.String@,System.String@,System.Int32@)" /> method such as treeview, help, and default directory selection and expansion.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Item identifier of the folder in the project to which items should be added. This is useful only for directory-based projects. Non-directory-based projects pass VSITEMID_ROOT. The Add Item dialog box does not use the parameter except to pass it back to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" />.</param>
      <param name="rguidProject">[in] Identifier for the project type. This identifier should be registered under the Projects subkey of the Microsoft Visual Studio registry key. The dialog box uses the following information under that key:ItemTemplateDir value, which should contain the path to the directory containing item templates for this project type.Filters key, which is used to construct open filters for the Existing tab.The dialog box displays items and filters specific to this project type.</param>
      <param name="pProject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> interface the dialog box uses to generate default names for each item by calling the interface's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)" /> method and to cause items to be added to the project by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method.</param>
      <param name="grfAddFlags">[in] Flag values that modify the behavior of the dialog box. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS" /> enumeration.</param>
      <param name="lpszDlgTitle">[in] Dialog box caption.</param>
      <param name="lpszTreeViewTitle">[in] Treeview caption. null == "Categories".</param>
      <param name="lpszHelpTopic">[in] The name of the Help topic. null == "vs.add[new|existing] item.".</param>
      <param name="lpszExpand">[in] The directory to select or expand by default.</param>
      <param name="lpszSelect">[in] Item to select.</param>
      <param name="pbstrLocation">[in, out] Pointer to the location field (initial/final value). This parameter is used only if you specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowLocationField" />. To have the project implement sticky behavior, which is the recommended behavior, for the location field, pass the last location field value back in when you open the dialog box again.</param>
      <param name="pbstrFilter">[in, out] Value of the filter string on the Existing tab. Specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter" /> instead of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter" /> is set. To have the project implement a sticky behavior for the filter field, which is the recommended behavior, pass the last filter field value back in when you open the dialog box again.</param>
      <param name="pfDontShowAgain">[out] Indicator of whether the user selected or cleared the Don't Show This Dialog Again option. This parameter is used only if you specify <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowDontShowAgain" />. To implement the option, which is the recommended behavior, call directly the last selected item template's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])" /> method. Typically, a project maintains a separate Don't Show Again option for each item type, such as Form, Module, and Class.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg">
      <summary>Allows a VSPackage to include a web services dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg.AddWebReferenceDlg(System.String@,System.Int32@)">
      <summary>Displays the Add Web Reference dialog box, allowing the user to pick a Web reference URL.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrWebReferenceUrl">[out] Pointer to a string containing the Web reference URL.</param>
      <param name="pfCancelled">[out] Pointer to a flag, true indicating cancelled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg2">
      <summary>Allows a VSPackage to include a web services dialog box. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg2.AddWebReferenceDlg(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession,System.String@,System.String@,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult@,System.Int32@)">
      <summary>Similar to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg.AddWebReferenceDlg(System.String@,System.Int32@)" /> Method, but allows you to enter a default name for the Web Service, as well as use the Discovery Process to get a Discovery Session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDiscoverySession">[in] Session to use to add the Web service. Can be null.</param>
      <param name="pbstrWebReferenceUrl">[out] Pointer to a string containing the Web reference URL.</param>
      <param name="pbstrWebReferenceName">[out] Pointer to a string containing the Web reference name.</param>
      <param name="ppIDiscoveryResult">[out] pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" /> from which you can call the .<see cref="M:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult.AddWebReference(System.Object,System.String)" /> Method. You can pass null if you don't need this pointer.</param>
      <param name="pfCancelled">[out] Pointer to a flag, true indicating cancelled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine">
      <summary>This interface is used by a package to read command-line switches entered by the user. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine.GetOption(System.String,System.Int32@,System.String@)">
      <summary>Retrieves the command line switches.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOptionName">[in] Command line switch name.</param>
      <param name="pfPresent">[out] Flag indicating if user entered command line switch <paramref name="pszOptionName" />.</param>
      <param name="pbstrOptionValue">[out] BSTR containing text the user entered as a parameter of the command line switch.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum">
      <summary>Implemented by enumerators supporting asynchronous behavior.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum.AdviseAsyncEnumCallback(Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnumCallback,System.UInt32@)">
      <summary>Enables the client to receive events about changes to the asynchronous enumeration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsAsyncEnumCallback">[in] The object representing the entity to be called for the asynchronous enumeration events.</param>
      <param name="pdwCookie">[out] A cookie identifying the instance of the event callback specified in <paramref name="pIVsAsyncEnumCallback" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum.Stop(System.Int32)">
      <summary>Requests that the asynchronous enumeration be stopped.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSync">[in] Set to true if the enumeration should be stopped synchronously and false if it can be stopped asynchronously.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum.UnadviseAsyncEnumCallback(System.UInt32)">
      <summary>Indicates the client is no longer interested in receiving asynchronous enumeration events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] A unique value returned from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum.AdviseAsyncEnumCallback(Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnumCallback,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnumCallback">
      <summary>Interface describing the callback method for an asynchronous enumerator uses to indicate the next item is available. You set the callback using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum.AdviseAsyncEnumCallback(Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnumCallback,System.UInt32@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnum" /> interface. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncEnumCallback.OnDataAvailable(System.UInt32,System.Int32,System.UInt32,System.UInt32)">
      <summary>Event fired when data is available without blocking.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cElementsAvailable">[in] Number of elements available to the consumer.</param>
      <param name="fIsComplete">[in]  A Boolean parameter indicating completion (true) of the event.</param>
      <param name="ulProgressCurrent">[in] Progress counter of elements served.</param>
      <param name="ulProgressMax">[in] Maximum number of elements available.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBackForwardNavigation">
      <summary>Rarely used. Enables the window to navigate back and forward to saved navigation points. Use the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.AddNewBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object,System.Int32)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell" /> interface to add a navigation point. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBackForwardNavigation.IsEqual(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object,System.Int32@)">
      <summary>Determines if the current navigation point is the current location in the document. Returns true if this is the case.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFrame">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
      <param name="bstrData">[in] Optional. String to match to determine the identity of the current position and the navigation point.</param>
      <param name="punk">[in] Pointer to the IUnknown of the object providing the interface from which to retrieve the navigation points.</param>
      <param name="fReplaceSelf">[out] Boolean indicating whether (true) or not the current navigation point needs to replace itself.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBackForwardNavigation.NavigateTo(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object)">
      <summary>Moves the cursor to a specific point.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFrame">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
      <param name="bstrData">[in] Optional. String to match to determine the starting point for the navigation.</param>
      <param name="punk">[in] Pointer to the IUnknown interface from which to retrieve the navigation points.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBatchUpdate">
      <summary>Initiates the incorporation of all pending data updates in a text buffer or view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBatchUpdate.FlushPendingUpdates(System.UInt32)">
      <summary>Allows the text buffer to tell all views on it to incorporate all buffered updates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">Double word. Reserved for future use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents">
      <summary>Broadcasts messages to clients that registered to be notified of events within the environment. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Fires when a message is broadcast to the environment window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="msg">[in] Specifies the notification message.</param>
      <param name="wParam">[in] Word value parameter for the Windows message, as received by the environment.</param>
      <param name="lParam">[in] Long integer parameter for the Windows message, as received by the environment.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg">
      <summary>Manages a project configuration's build operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.AdviseBuildStatusCallback(Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback,System.UInt32@)">
      <summary>Registers the environment to receive notifications of build status events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsBuildStatusCallback">[in] Pointer to the environment's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback" /> interface.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle that represents the completed registration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="ppIVsProjectCfg">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.QueryStartBuild(System.UInt32,System.Int32[],System.Int32[])">
      <summary>Determines whether or not a project is able to start a build operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwOptions">[in] Options governing the build process. Currently, there are no defined options and <paramref name="dwOptions" /> is always zero.</param>
      <param name="pfSupported">[out, optional] Pointer to the flag that is set to true if the project supports building.</param>
      <param name="pfReady">[out, optional] Pointer to the flag that is set to true if the project is ready to start the build process. This flag is currently unused.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.QueryStartClean(System.UInt32,System.Int32[],System.Int32[])">
      <summary>Determines whether or not a project is able to delete all outputs from the previous build, a process known as a clean operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwOptions">[in] Options governing the clean operation. Currently, there are no defined options and <paramref name="dwOptions" /> is always zero.</param>
      <param name="pfSupported">[out, optional] Pointer to the flag that is set to true if the project supports the clean operation.</param>
      <param name="pfReady">[out, optional] Pointer to the flag that is set to true if the project is ready to start the clean operation. This flag is currently unused.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.QueryStartUpToDateCheck(System.UInt32,System.Int32[],System.Int32[])">
      <summary>Determines whether or not a project is able to check if the current build is up to date.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwOptions">[in] Options governing the up-to-date check. This parameter can contain values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags2" />. </param>
      <param name="pfSupported">[out, optional] Pointer to the flag that is set to true if the project supports checking if the current build is up to date.</param>
      <param name="pfReady">[out, optional] Pointer to the flag that is set to true if the project is ready to start the up-to-date check. This flag is currently unused.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.QueryStatus(System.Int32@)">
      <summary>Determines whether or not a build operation has completed successfully.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfBuildDone">[out] Pointer to the flag that is set to true if the build operation was successful and false if it was unsuccessful.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.StartBuild(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)">
      <summary>Requests that a project begin building.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsOutputWindowPane">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface that can be used to display status during the build operation.</param>
      <param name="dwOptions">[in] Options governing the build operation. The following options are valid:VS_BUILDABLEPROJECTCFGOPTS_REBUILDVS_BUILDABLEPROJECTCFGOPTS_BUILD_SELECTION_ONLYVS_BUILDABLEPROJECTCFGOPTS_BUILD_ACTIVE_DOCUMENT_ONLY</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.StartClean(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)">
      <summary>Requests that a project begin a clean operation, which is the process of deleting all of the outputs from the previous build.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsOutputWindowPane">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface that can be used to display status during the clean operation.</param>
      <param name="dwOptions">[in] Options governing the clean operation. Currently, <paramref name="dwOptions" /> is always zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.StartUpToDateCheck(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)">
      <summary>Requests that a project begin an up-to-date check to determine whether or not the current build is up to date.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsOutputWindowPane">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface that can be used to display status during the up-to-date check.</param>
      <param name="dwOptions">[in] Options governing the up-to-date check. This parameter can contain values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.Stop(System.Int32)">
      <summary>Requests that a project stop building.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSync">[in] Flag that is set to true if the build should be stopped synchronously and false if it can be stopped asynchronously.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.UnadviseBuildStatusCallback(System.UInt32)">
      <summary>Cancels the environment's registration to receive notifications of build status events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle that represents the representation to be cancelled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.Wait(System.UInt32,System.Int32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="dwMilliseconds">Do not use.</param>
      <param name="fTickWhenMessageQNotEmpty">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency">
      <summary>Allows a project to describe build dependencies. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency.get_CanonicalName(System.String@)">
      <summary>Returns the canonical name of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the canonical name of the dependency.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency.get_Description(System.String@)">
      <summary>Returns the description of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDescription">[out] Pointer to the description of the dependency. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency.get_HelpContext(System.UInt32@)">
      <summary>Returns a pointer to the Help context of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwHelpContext">[out] Pointer to the Help context.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency.get_HelpFile(System.String@)">
      <summary>Returns the name of the Help file of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrHelpFile">[out] Pointer to the name of the dependency's Help file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency.get_MustUpdateBefore(System.Int32@)">
      <summary>Determines if an update and/or project build must occur either before or after a project is built.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfMustUpdateBefore">[out] Pointer to a flag that is set to true if the project must be updated before it is built and false if an update and rebuild will be required of a referred project if this project is built.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency.get_ReferredProject(System.Object@)">
      <summary>Returns a pointer to a dependent project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIUnknownProject">[out] An IUnknown pointer for the project object to which this project refers.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency.get_Type(System.Guid@)">
      <summary>Returns the type of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidType">[out] Pointer to an identifier representing the type of the dependency. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback">
      <summary>Enables the environment to receive notifications about the status of a build operation. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback.BuildBegin(System.Int32@)">
      <summary>Notifies the environment that a build operation has begun.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfContinue">[in, out] Pointer to a flag that is set to true if the build process can continue and false if it should be terminated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback.BuildEnd(System.Int32)">
      <summary>Notifies the environment that a build operation has ended. <paramref name="fSuccess" /> indicates whether the build completed successfully.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSuccess">[in] true if the build operation completed successfully. After an up-to-date check, <paramref name="fSuccess" /> is set to true when the project configuration is up to date and false when the project configuration is not up to date.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback.Tick(System.Int32@)">
      <summary>Notifies the environment that a build operation is in progress.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfContinue">[in, out] Pointer to a flag that is set to true if the build operation can continue and false if it should be terminated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg">
      <summary>Provides information about a project's configuration. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfg.get_DisplayName(System.String@)">
      <summary>Returns a string that describes the configuration and can be displayed in the environment's UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] Pointer to the display name of the configuration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfg.get_IsDebugOnly(System.Int32@)">
      <summary>Obsolete. Do not use.</summary>
      <param name="pfIsDebugOnly">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfg.get_IsReleaseOnly(System.Int32@)">
      <summary>Obsolete. Do not use.</summary>
      <param name="pfIsReleaseOnly">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider">
      <summary>Allows projects to manage configuration information. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])">
      <summary>Returns the per-configuration objects for this object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>
      <param name="rgpcfg">[in, out, size_is(celt)] On input, pointer to an interface array or null. On output, this parameter points to an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg" /> interfaces belonging to the requested configuration objects.</param>
      <param name="pcActual">[out, optional] Pointer to the number of configuration objects actually returned or null, if this information is not necessary.</param>
      <param name="prgfFlags">[out, optional] Flags that specify settings for project configurations, or null if no additional flag settings are required. For valid <paramref name="prgrFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS" /></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2">
      <summary>Allows projects to manage configuration information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.AddCfgsOfCfgName(System.String,System.String,System.Int32)">
      <summary>Copies an existing configuration name or creates a new one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCfgName">[in] Pointer to the name of the new configuration.</param>
      <param name="pszCloneCfgName">[in] Pointer to the name of the configuration to copy, or null, indicating that AddCfgsOfCfgName should create a new configuration.</param>
      <param name="fPrivate">[in] Flag indicating whether or not the new configuration is private. If <paramref name="fPrivate" /> is set to true, the configuration is private. If set to false, the configuration is public. This flag can be ignored.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.AddCfgsOfPlatformName(System.String,System.String)">
      <summary>Copies an existing platform name or creates a new one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPlatformName">[in] Pointer to the name of the new platform.</param>
      <param name="pszClonePlatformName">[in] Pointer to the name of the platform to copy, or null, indicating that AddCfgsOfPlatformName should create a new platform.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)">
      <summary>Registers the caller for configuration event notification.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCPE">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents" /> interface to be called to provide notification of configuration events.</param>
      <param name="pdwCookie">[out] Pointer to a token representing the completed registration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.DeleteCfgsOfCfgName(System.String)">
      <summary>Deletes a specified configuration name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCfgName">[in] Pointer to the name of the configuration to be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.DeleteCfgsOfPlatformName(System.String)">
      <summary>Deletes a specified platform name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPlatformName">[in] Pointer to the name of the platform to be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.GetCfgNames(System.UInt32,System.String[],System.UInt32[])">
      <summary>Returns one or more configuration names.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Specifies the requested number of property names. If this number is unknown, <paramref name="celt" /> can be zero.</param>
      <param name="rgbstr">[in, out, size_is(celt)] On input, an allocated array to hold the number of configuration property names specified by <paramref name="celt" />. This parameter can also be null if the <paramref name="celt" /> parameter is zero. On output, <paramref name="rgbstr" /> contains configuration property names.</param>
      <param name="pcActual">[out, optional] Pointer to a count of the actual number of property names returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)">
      <summary>Returns the configuration object associated with a specified configuration property or platform name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCfgName">[in] Pointer to the name of the configuration to be returned.</param>
      <param name="pszPlatformName">[in] Pointer to the name of the platform for the configuration to be returned.</param>
      <param name="ppCfg">[out] Indirect pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg" /> interface of the requested configuration object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.GetCfgProviderProperty(System.Int32,System.Object@)">
      <summary>Returns a specified configuration property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Specifies the property identifier for the property to return. For valid <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID" />.</param>
      <param name="pvar">[out] Pointer to the returned property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])">
      <summary>Returns the per-configuration objects for this object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>
      <param name="rgpcfg">[in, out, size_is(celt)] On input, pointer to an interface array or null. On output, this parameter points to an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg" /> interfaces belonging to the requested configuration objects.</param>
      <param name="pcActual">[out, optional] Pointer to the number of configuration objects actually returned or null, if this information is not necessary.</param>
      <param name="prgfFlags">[out, optional] Flags that specify settings for project configurations, or null if no additional flag settings are required. For valid <paramref name="prgrFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])">
      <summary>Returns one or more platform names.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Specifies the requested number of platform names. If this number is unknown, <paramref name="celt" /> can be zero.</param>
      <param name="rgbstr">[in, out, size_is(celt)] On input, an allocated array to hold the number of platform names specified by <paramref name="celt" />. This parameter can also be null if the <paramref name="celt" /> parameter is zero. On output, <paramref name="rgbstr" /> contains platform names.</param>
      <param name="pcActual">[out, optional] Pointer to a count of the actual number of platform names returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])">
      <summary>Returns the set of platforms that are installed on the user's machine.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Specifies the requested number of supported platform names. If this number is unknown, <paramref name="celt" /> can be zero.</param>
      <param name="rgbstr">[in, out, size_is(celt)] On input, an allocated array to hold the number of names specified by <paramref name="celt." /> This parameter can also be null if the <paramref name="celt" /> parameter is zero. On output, <paramref name="rgbstr" /> contains the names of supported platforms.</param>
      <param name="pcActual">[out, optional] Pointer to a count of the actual number of platform names returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.RenameCfgsOfCfgName(System.String,System.String)">
      <summary>Assigns a new name to a configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOldName">[in] String containing the old name of the target configuration.</param>
      <param name="pszNewName">[in] String containing the new name of the target configuration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.UnadviseCfgProviderEvents(System.UInt32)">
      <summary>Cancels a registration for configuration event notification.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Token representing the registration to be cancelled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents">
      <summary>Provides notifications of configuration events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents.OnCfgNameAdded(System.String)">
      <summary>Notifies the environment when a configuration name has been added.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCfgName">[in] Pointer to the name of the new configuration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents.OnCfgNameDeleted(System.String)">
      <summary>Notifies the environment when a configuration name has been deleted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCfgName">[in] Pointer to the deleted configuration name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents.OnCfgNameRenamed(System.String,System.String)">
      <summary>Notifies the environment when a configuration name has been renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOldName">[in] Pointer to the original name of the configuration.</param>
      <param name="lszNewName">[in] Pointer to the new name of the configuration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents.OnPlatformNameAdded(System.String)">
      <summary>Notifies the environment when a platform name has been added.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPlatformName">[in] Pointer to the name of the new platform name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents.OnPlatformNameDeleted(System.String)">
      <summary>Notifies the environment when a platform name has been deleted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPlatformName">[in] Pointer to the deleted platform name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper">
      <summary>Implemented by the environment, called by projects to use as a helper implementing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)">
      <summary>Called to add listeners for configuration events to the array.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCPE">[in] Pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents" /> object.</param>
      <param name="pdwCookie">[out] Pointer to a token representing the completed registration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper.NotifyOnCfgNameAdded(System.String)">
      <summary>Fired to sink configuration name added events for all listeners in the array.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCfgName">[in] Configuration name to be added to the configuration list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper.NotifyOnCfgNameDeleted(System.String)">
      <summary>Fired to sink configuration name deleted events for all listeners in the array.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCfgName">[in] Configuration name to be deleted from the configuration list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper.NotifyOnCfgNameRenamed(System.String,System.String)">
      <summary>Fired to sink configuration name renamed events for all listeners in the array.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOldName">[in] Old configuration name removed from the configuration list.</param>
      <param name="lszNewName">[in] New configuration name added to the configuration list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper.NotifyOnPlatformNameAdded(System.String)">
      <summary>Fired to sink platform name added events for all listeners in the array.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPlatformName">[in] Platform name to be added to the configuration list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper.NotifyOnPlatformNameDeleted(System.String)">
      <summary>Fired to sink platform name deleted events for all listeners in the array.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPlatformName">[in] Platform name to be deleted from the configuration list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEventsHelper.UnadviseCfgProviderEvents(System.UInt32)">
      <summary>Called to remove listeners from the array of listeners for configuration events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Token representing the registration to be cancelled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsClassView">
      <summary>Allows navigation to an object in Class View.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsClassView.NavigateTo(Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO[],System.UInt32)">
      <summary>Asks the environment to navigate to a given object in Class View.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pObjInfo">[in] Specifies a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO" /> structure containing the fully qualified name of the object that is the target of the navigation.</param>
      <param name="dwReserved">[in] Reserved parameter. Must be zero.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping">
      <summary>Maps command names and GUIDs. Enables you to determine all commands and names. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsCmdNameMapping" /> (SID_SVsCmdNameMapping) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping.EnumMacroNames(Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS,Microsoft.VisualStudio.OLE.Interop.IEnumString@)">
      <summary>Returns an enumerator for the names of macros in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Bit flags specifying what form of the macro name to retrieve. Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS" /> enumeration.</param>
      <param name="ppEnumString">[out] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumString" /> interface to iterate through the strings returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping.EnumNames(Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS,Microsoft.VisualStudio.OLE.Interop.IEnumString@)">
      <summary>Returns an enumerator for the names in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Bit flags specifying what form of the macro name to retrieve. Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS" /> enumeration.</param>
      <param name="ppEnumString">[out] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumString" /> interface to iterate through the strings returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping.GetLastUpdated(System.UInt32@)">
      <summary>Returns the relative time the names in the project were last updated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwTickCount">[out] The tick count when the project names were last updated. The tick count is in milliseconds and comes from the system clock. For more information, see Environment.TickCount Property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping.MapGUIDIDToName(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS,System.String@)">
      <summary>Map the GUID and identifier of a command to its name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if it cannot find the matching name.</returns>
      <param name="pguidCmdGroup">[in] The GUID of the group the command belongs to.</param>
      <param name="dwCmdID">[in] The identifier of the command.</param>
      <param name="grfOptions">[in] Bit flags specifying what form of the name to retrieve. Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS" /> enumeration.</param>
      <param name="pbstrCmdName">[out] String containing the command name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping.MapNameToGUIDID(System.String,System.Guid@,System.UInt32@)">
      <summary>Maps the name of a command to the GUID of its group and its identifier.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCmdName">[in] String containing the name of the command.</param>
      <param name="pguidCmdGroup">[out] The GUID of the group the command belongs to.</param>
      <param name="pdwCmdID">[out] The command's identifier.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler">
      <summary>Internal interface. Do not use. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler.DlgInit(System.IntPtr)">
      <summary>Method on internal interface. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler.GetStdHelp(System.UInt32,System.Int32)">
      <summary>Method on internal interface. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wCmd">[in]</param>
      <param name="lContext">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler.VBDialogBoxParam(System.UInt32,System.UInt32,System.UInt32@,System.Int32)">
      <summary>Method on internal interface. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hinst">[in]</param>
      <param name="dwId">[in]</param>
      <param name="pFARPROC">[in]</param>
      <param name="lp">int</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler.VBDialogCover(System.UInt32@,System.UInt32@,System.IntPtr@)">
      <summary>Method on internal interface. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFARPROC">[in]</param>
      <param name="lpvoid">[in]</param>
      <param name="lphwndParent">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler.VsGetOpenFileName(System.UInt32@,System.Int32)">
      <summary>Method on internal interface. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOPENFILENAMEA">[in]</param>
      <param name="dwHelpTopic">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCommandArgInfo">
      <summary>Enables a <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)" /> implementation to query whether a command argument has been supplied.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandArgInfo.GetCommandArg(System.String@)">
      <summary>Returns the argument string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCmdArg">[out] The command argument string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandArgInfo.QueryCommandArgAvailable(System.Int32@)">
      <summary>Indicates whether a nonempty command argument was supplied for this command.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCmdArgAvailable">[out] Returns true if a nonempty command argument was supplied.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow">
      <summary>Enables the package to use the Command Window. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsCommandWindow" /> (SID_SVsCommandWindow) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.Create">
      <summary>Creates the tool window and the text buffer for the CommandWindow.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.EchoCommand(System.String)">
      <summary>Echoes the specified command to the command window the next time text is printed in the command window using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.Print(System.String)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szCommand">[in] String containing the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.ExecuteCommand(System.String)">
      <summary>Executes the specified command. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szCommand">[in] String containing the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.LogToFile(System.String,System.UInt32)">
      <summary>Starts logging command-window commands and output to the specified file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szLogFile">[in] Filename to use for the log.</param>
      <param name="grfFlags">[in] Bit flags indicating logging options. Use values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.LOGTOFILEOPTION" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.PrepareCommand(System.String,System.Guid@,System.UInt32@,System.IntPtr@,Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT[])">
      <summary>Performs all the steps to prepare to execute a command-line command. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szCommand">[in] String containing the command.</param>
      <param name="pguidCmdGroup">[out] Pointer to the GUID of the command's group.</param>
      <param name="pdwCmdID">[out]  Pointer to the identifier of the command.</param>
      <param name="ppvaCmdArg">[out] A pointer to a VARIANT array containing the command arguments.</param>
      <param name="pResult">[out] A pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT" /> structure containing additional error information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.Print(System.String)">
      <summary>Prints the specified text to the command window. The command window will be shown if it is not already visible.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szTextToPrint">[in] String containing the text to print.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.PrintNoShow(System.String)">
      <summary>Does the same thing as <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.Print(System.String)" /> but does not show or activate the command window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szTextToPrint">[in] A String containing the text to print. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.RunningCommandWindowCommand(System.Int32@)">
      <summary>Indicates whether or not a command invoked through the command window is currently executing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCmdWin">[out] Pointer to a Boolean. A true value indicates the command is executing.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.SetCurrentLanguageService(System.Guid@)">
      <summary>Sets the language service for the Command Window to use in the current debugging context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidLanguageService">[in] The GUID of the Language Service being used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.SetMode(Microsoft.VisualStudio.Shell.Interop.COMMANDWINDOWMODE)">
      <summary>Sets the command window to immediate mode or command mode.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="mode">[in] A value of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.COMMANDWINDOWMODE" /> setting the command window to immediate or command mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.Show">
      <summary>Makes the Command Window visible and gives it the focus. Also creates the window, if necessary.</summary>
      <returns>If the method succeeds, it returns F:Microsoft.VisualStudio.VSConstants.S_OK. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.StopLogging">
      <summary>Stops the logging started with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.LogToFile(System.String,System.UInt32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskInfo">
      <summary>Provides information about the comment task tokens used by the task list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskInfo.DefaultToken(Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken@)">
      <summary>Returns the default comment task token.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppToken">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken" /> interface of the default comment task token.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskInfo.EnumTokens(Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens@)">
      <summary>Returns an enumerator for all comment task tokens (including the default token).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskInfo.TokenCount(System.Int32@)">
      <summary>Returns the number of comment task tokens.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out, retval] Pointer to a long integer that represents the token count.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken">
      <summary>Represents one comment task token.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken.Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
      <summary>Returns the priority of a comment task token.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ptpPriority">[out, retval] Pointer to the task token priority, whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._vstaskpriority" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken.Text(System.String@)">
      <summary>Returns the text of a comment task token.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out, retval] Pointer to a BSTR containing the text of the comment task token.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory">
      <summary>Provides an enumerator for components, assembly paths, or a list of directories containing references. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SCompEnumService" /> (SID_SCompEnumService) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory.GetComponents(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IEnumComponents@)">
      <summary>Provides an enumerator for all of the components in a package.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrMachineName"> [in] Reserved, must be null.</param>
      <param name="lEnumType"> [in] Long integer containing the enumeration type. The value for this is from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.CompEnum" /> enumeration.</param>
      <param name="bForceRefresh"> [in] Reserved, must be false.</param>
      <param name="pEnumerator"> out] Pointer to an enumerator object. This returns the list of components. The list can be either COM-components, Visual Studio assemblies, or a list of directories in which Visual Studio looks for references. The type of components listed is determined by <paramref name="lEnumType" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory2">
      <summary>Provides an enumerator for components, assembly paths, or a list of directories containing references. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SCompEnumService" /> (SID_SCompEnumService) service. This interface extends <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory" /> by taking a semicolon-delimited list of paths. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory2.GetComponents(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IEnumComponents@)">
      <summary>Provides an enumerator for all of the components in a package.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrMachineName"> [in] Reserved, must be null.</param>
      <param name="lEnumType"> [in] Long integer containing the enumeration type. The value for this is from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.CompEnum" /> enumeration.</param>
      <param name="bForceRefresh"> [in] Reserved, must be false.</param>
      <param name="pEnumerator"> [out] Pointer to an enumerator object. This returns the list of components. The list can be either COM-components, Visual Studio assemblies, or a list of directories in which Visual Studio looks for references. The type of components listed is determined by <paramref name="lEnumType" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory2.GetComponentsOfPath(System.String,System.Int32,System.Int32,System.String,Microsoft.VisualStudio.Shell.Interop.IEnumComponents@)">
      <summary>Enumerates the components on the local machine.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrMachineName"> [in] Reserved, must be null.</param>
      <param name="lEnumType"> [in] Long integer containing the enumeration type. The value for this is from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.CompEnum" /> enumeration.</param>
      <param name="bForceRefresh"> [in] Reserved, must be false.</param>
      <param name="bstrPath"> [in] String containing the path to the components.</param>
      <param name="pEnumerator"> [out] Pointer to an enumerator object. This returns the list of components. The list can be either COM-components, Visual Studio assemblies, or a list of directories in which Visual Studio looks for references. The type of components listed is determined by <paramref name="lEnumType" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorData">
      <summary>Returns data about a component.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorData.GetData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA[])">
      <summary>Returns information about a component in a package.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pData"> [out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" /> structure containing information about the component.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg">
      <summary>Adds components to a project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg.ComponentSelectorDlg(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsComponentUser,System.String,System.String,System.Guid@,System.Guid@,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT[],System.String,System.String@)">
      <summary>Used by a package to provide a dialog with which the user can add components to the specified project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFlags">[in] VSCOMSEL_* flags. For more information on VSCOMSEL_, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS" />.</param>
      <param name="pUser">[in] Interface on which <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentUser.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])" /> will be called.</param>
      <param name="lpszDlgTitle">[in] dialog caption (null == "Component Selector").</param>
      <param name="lpszHelpTopic">[in] F1 help topic (null == "VS.ComponentPicker").</param>
      <param name="rguidShowOnlyThisTab">[in] tab to show exclusively.</param>
      <param name="rguidStartOnThisTab">[in] tab to show when the dialog starts up.</param>
      <param name="pszMachineName">[in] Pointer to a null terminated string containing the machine name. Enumerate COM components on this machine.</param>
      <param name="cTabInitializers">[in] Number of tab initialization structs in <paramref name="prgcstiTabInitializers" />.</param>
      <param name="prgcstiTabInitializers">[in] Specifies the tab initialization information.</param>
      <param name="pszBrowseFilters">[in] Pointer to a null terminated string containing the browse filters.</param>
      <param name="pbstrBrowseLocation">[in, out] On input, xxxx. On output, pointer to a string containing the browse location. List of filters to use in 'Browse...' dialog box. Directory (initial/return value) to start the 'Browse...' dialog box in.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorProvider">
      <summary>Implemented by VSPackages that provide pages to a component picker, such as the Add Reference dialog. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorProvider.GetComponentSelectorPage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[])">
      <summary>Used by a VSPackage to provide pages to a component picker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPage">[in] Specifies page GUID.</param>
      <param name="ppage">[in, out] On input, null. On output, pointer to the page.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentUser">
      <summary>Adds components to a specified project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComponentUser.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])">
      <summary>Used by the environment to add components specified by the user in the Component Selector dialog to the specified project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwAddCompOperation">[in] Double word containing the add component operation.</param>
      <param name="cComponents">[in] Count of components.</param>
      <param name="rgpcsdComponents">[in] Specifies <paramref name="rgpcsdComponents" />.</param>
      <param name="hwndPickerDlg">[in] Specifies <paramref name="hwndPickerDlg" />.</param>
      <param name="pResult">[out] Pointer to a result object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg">
      <summary>Enables a built configuration to be started and run by the debugger. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.DebugLaunch(System.UInt32)">
      <summary>Starts the debugger.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Flags that determine the conditions under which to start the debugger. For valid <paramref name="grfLaunch" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.EnumOutputs(Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="ppIVsEnumOutputs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_BuildableProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg@)">
      <summary>Provides access to a configuration's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> interface to use to manage the build process.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsBuildableProjectCfg">[out] Pointer to the configuration's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_CanonicalName(System.String@)">
      <summary>Returns a configuration's canonical name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the canonical name of the configuration such as Debug or Release.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_DisplayName(System.String@)">
      <summary>Returns a string that describes the configuration and can be displayed in the environment's UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] Pointer to the display name of the configuration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_IsDebugOnly(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsDebugOnly">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_IsPackaged(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsPackaged">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_IsReleaseOnly(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsReleaseOnly">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_IsSpecifyingOutputSupported(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsSpecifyingOutputSupported">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_Platform(System.Guid@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pguidPlatform">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_ProjectCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="ppIVsProjectCfgProvider">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_RootURL(System.String@)">
      <summary>Returns a configuration's root URL for its output items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRootURL">[out] Pointer to the root URL for the configuration's output items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_TargetCodePage(System.UInt32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puiTargetCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.get_UpdateSequenceNumber(Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER[])">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puliUSN">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.OpenOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutput@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="szOutputCanonicalName">Do not use.</param>
      <param name="ppIVsOutput">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.QueryDebugLaunch(System.UInt32,System.Int32@)">
      <summary>Determines whether the debugger can be launched, given the state of the launch flags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Flags that determine the conditions under which to launch the debugger. For valid <paramref name="grfLaunch" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" />.</param>
      <param name="pfCanLaunch">[out] Pointer to a flag that is set to true if the debugger can be launched and false otherwise.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProtocol">
      <summary>Allows clients to add to the debuggable protocol list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProtocol.AddDebuggableProtocol(System.String)">
      <summary>Adds a protocol to the debuggable protocol list. </summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if add is successful; returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the addition is unsuccessful.</returns>
      <param name="bstrProtocol">[in] The protocol to add to the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProtocol.IsProtocolDebuggable(System.String)">
      <summary>Indicates whether the specified protocol is debuggable. </summary>
      <returns>The method will return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the protocol is in the list. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the protocol is not in the list. If the <paramref name="bstrProtocol" /> parameter contains a full URL, the method will return S_OK if the URL starts with a protocol that is in the list.</returns>
      <param name="bstrProtocol">[in] The protocol to be checked. This parameter can be a full URL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProtocol.RemoveDebuggableProtocol(System.String)">
      <summary>Removes the indicated protocol from the debuggable protocol list.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if removal is successful; returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if removal is unsuccessful (for example, if the protocol is not in the list).</returns>
      <param name="bstrProtocol">[in] The protocol to be removed from the list</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger">
      <summary>Provides access to the current debugger so that the package can listen for debugger events. You can get an instance of this interface from the <see cref="M:Microsoft.VisualStudio.Package.LanguageService.GetIVsDebugger" /> method of the <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AdviseDebugEventCallback(System.Object)">
      <summary>Used by a client to receive notifications of debugger events. In general, use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AdviseDebuggerEvents(Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents,System.UInt32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.UnadviseDebuggerEvents(System.UInt32)" /> instead.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkDebuggerEvents">[in] Pointer to the IUnknown interface of an object that also implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AdviseDebuggerEvents(Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents,System.UInt32@)">
      <summary>Used by a client to get notification of debugger events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents" /> interface to receive event notices.</param>
      <param name="pdwCookie">[out] Cookie returned to identify this particular sink interface. Client needs to save the cookie and use it in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.UnadviseDebuggerEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AllowEditsWhileDebugging(System.Guid@)">
      <summary>Indicates whether or not the language service allows writing to files during debugging.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if writing allowed, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if not.</returns>
      <param name="guidLanguageService"> [in] The GUID of the language service, such as SID_SVisualBasicLangService.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.ExecCmdForTextPos(Microsoft.VisualStudio.Shell.Interop.VsTextPos[],System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Obsolete. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextPos">[in] Do not use.</param>
      <param name="pguidCmdGroup">[in] Do not use.</param>
      <param name="nCmdID">[in] Do not use.</param>
      <param name="nCmdexecopt">[in] Do not use.</param>
      <param name="pvaIn">[in] Do not use.</param>
      <param name="pvaOut">[in] Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.GetDataTipValue(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String,System.String@)">
      <summary>Retrieves debugger data tip text for a selected section of text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses2.TIP_S_NODEFAULTTIP" />. If it fails, it returns an error code.</returns>
      <param name="pTextBuf">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface to the text buffer. </param>
      <param name="pTS">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure describing the text location within the buffer. May be null when using the <paramref name="pszExpression" /> argument.</param>
      <param name="pszExpression">[in] Text of the expression for which to retrieve the data tip text. May be null when using the <paramref name="pTS" /> argument.</param>
      <param name="pbstrValue">[out] Pointer to a string containing the data tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.GetENCUpdate(System.Object@)">
      <summary>Retrieves the Edit and Continue (ENC) update for this program. A custom debug engine always returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppUpdate">[out] An internal interface to use to update this program.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.GetMode(Microsoft.VisualStudio.Shell.Interop.DBGMODE[])">
      <summary>Returns the current debugger mode, a value in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE" /> enumeration such as <see cref="F:Microsoft.VisualStudio.Shell.Interop.DBGMODE.DBGMODE_Break" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdbgmode">[out] Pointer to a value in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.InsertBreakpointByName(System.Guid@,System.String)">
      <summary>Inserts a breakpoint at a named location in the program, such as a function name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLanguage">[in] The GUID for the language service such as SID_SVisualBasicLangService.</param>
      <param name="pszCodeLocationText">[in] String containing the name of the location to set the breakpoint.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.IsBreakpointOnName(System.Guid@,System.String,System.Int32@)">
      <summary>Tests for a breakpoint set on a named location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLanguage">[in] ] The GUID for the language service such as SID_SVisualBasicLangService.</param>
      <param name="pszCodeLocationText">[in] String containing the name of the location to test for a breakpoint, such as a function name.</param>
      <param name="pfIsBreakpoint">[out] Set to true if the breakpoint is set; otherwise set to false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.LaunchDebugTargets(System.UInt32,System.IntPtr)">
      <summary>Launches or attaches to the specified processes under the control of the debugger.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cTargets">[in] Number of targets to launch (specifies the number of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo" /> structures pointed to by <paramref name="rgDebugTargetInfo" />).</param>
      <param name="rgDebugTargetInfo">[in, out] Array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo" /> structures describing the programs to launch or attach to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.ParseFileRedirection(System.String,System.String@,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary>Parses the command line contained in the argument string, and returns the arguments and handles to any redirected output.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszArgs">[in] A string containing the command line to parse.</param>
      <param name="pbstrArgsProcessed">[out] The command line with file directions stripped out.</param>
      <param name="phStdInput">[out] A HANDLE to the standard input file, taking account of redirection.</param>
      <param name="phStdOutput">[out] A HANDLE to the standard output file, taking account of redirection.</param>
      <param name="phStdError">[out] A HANDLE to the standard error file, taking account of redirection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.QueryStatusForTextPos(Microsoft.VisualStudio.Shell.Interop.VsTextPos[],System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Obsolete. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextPos">[in] Do not use.</param>
      <param name="pguidCmdGroup">[in] Do not use.</param>
      <param name="cCmds">[in] Do not use.</param>
      <param name="prgCmds">[in, out] Do not use.</param>
      <param name="pCmdText">[in, out] Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.RemoveBreakpointsByName(System.Guid@,System.String)">
      <summary>Removes a breakpoint at a named location in the program, such as a function name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLanguage">[in] The GUID for the language service such as SID_SVisualBasicLangService.</param>
      <param name="pszCodeLocationText">[in] String containing the name of the location to set the breakpoint.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.ToggleBreakpointByName(System.Guid@,System.String)">
      <summary>Toggle a breakpoint at a named location in the program, such as a function name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLanguage">[in] The GUID for the language service such as SID_SVisualBasicLangService.</param>
      <param name="pszCodeLocationText">[in] String containing the name of the location to toggle the breakpoint.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.UnadviseDebugEventCallback(System.Object)">
      <summary>Used by a client to stop receiving notifications of debugger events. In general, use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AdviseDebuggerEvents(Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents,System.UInt32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.UnadviseDebuggerEvents(System.UInt32)" /> instead.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkDebuggerEvents">[in] Pointer to the IUnknown interface of an object that also implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.UnadviseDebuggerEvents(System.UInt32)">
      <summary>Used by a client to stop receiving notifications of debugger events. Requires the cookie returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AdviseDebuggerEvents(Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents,System.UInt32@)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] The cookie returned by the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AdviseDebuggerEvents(Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents,System.UInt32@)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents">
      <summary>Provides notification when the debugger changes mode. The debugger operates in one of three modes: run, break, or design. The interface is an argument of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger.AdviseDebuggerEvents(Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents,System.UInt32@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger" /> interface. The interface is an event sink, a recipient of events, implemented by components wanting notification of changes in the debugger. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents.OnModeChange(Microsoft.VisualStudio.Shell.Interop.DBGMODE)">
      <summary>Specifies the function called when the debugging mode changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dbgmodeNew">[in] A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE" /> enumeration indicating the new debugger mode.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugLaunch">
      <summary>Launches the debugger. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsDebugLaunch" /> (SID_SVsDebugLaunch) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugLaunch.DebugLaunch(System.UInt32)">
      <summary>Launches the debugger.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Bit flags, representing launch options, formed using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugLaunch.QueryDebugLaunch(System.UInt32,System.Int32@)">
      <summary>Tests whether you can launch the debugger with the specified options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Bit flags, representing launch options, formed using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> enumeration.</param>
      <param name="pfCanLaunch">[out] Boolean. Set to true if you can launch the debugger.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDependency">
      <summary>Describes a project that is used by another project in build operations or deployment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDependency.get_CanonicalName(System.String@)">
      <summary>Returns the canonical name of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the canonical name of the dependency.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDependency.get_Description(System.String@)">
      <summary>Returns the description of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDescription">[out] Pointer to the description of the dependency.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDependency.get_HelpContext(System.UInt32@)">
      <summary>Returns a pointer to the Help context of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwHelpContext">[out] Pointer to the Help context.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDependency.get_HelpFile(System.String@)">
      <summary>Returns the name of the Help file of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrHelpFile">[out] Pointer to the name of the dependency's Help file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDependency.get_Type(System.Guid@)">
      <summary>Returns the type of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidType">[out] Pointer to an identifier representing the type of the dependency.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDependencyProvider">
      <summary>Provides access to a project configuration's dependencies.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDependencyProvider.EnumDependencies(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)">
      <summary>Provides access to a dependency enumerator.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsEnumDependencies">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies" /> interface of the dependency enumerator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDependencyProvider.OpenDependency(System.String,Microsoft.VisualStudio.Shell.Interop.IVsDependency@)">
      <summary>Provides access to a specified dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szDependencyCanonicalName">[in] Specifies the canonical name of the requested dependency.</param>
      <param name="ppIVsDependency">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDependency" /> interface of the requested dependency.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg">
      <summary>Allows a project to manage deployment operations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.AdviseDeployStatusCallback(Microsoft.VisualStudio.Shell.Interop.IVsDeployStatusCallback,System.UInt32@)">
      <summary>Registers the environment to receive notifications of deployment status events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsDeployStatusCallback">[in] Pointer to the environment's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployStatusCallback" /> interface.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle that represents the completed registration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.Commit(System.UInt32)">
      <summary>Alerts a project that a deployment operation was successful.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved and must be set to zero. Call if all deployments were successful.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.QueryStartDeploy(System.UInt32,System.Int32[],System.Int32[])">
      <summary>Determines whether or not a project is able to start a deployment operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwOptions">[in] Options governing the deployment process. Currently, there are no defined options and <paramref name="dwOptions" /> is always zero.</param>
      <param name="pfSupported">[out, optional] Flag that is set to true if the project supports deployment.</param>
      <param name="pfReady">[out, optional] Flag that is set to true if the project is ready to start the deployment process. This flag is currently unused.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.QueryStatusDeploy(System.Int32@)">
      <summary>Determines whether or not a deployment operation has completed successfully.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfDeployDone">[out] Flag that is set to true if the deployment operation was successful and false if it was not successful.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.Rollback(System.UInt32)">
      <summary>Alerts a deployment project that a deployment operation has failed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved and must be set to zero. Call if any deployments failed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.StartDeploy(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)">
      <summary>Requests that a project begin a deployment operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsOutputWindowPane">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface that can be used to display status during the deployment operation.</param>
      <param name="dwOptions">[in] Options governing the deployment operation. Currently, there are no defined options and <paramref name="dwOptions" /> is always zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.StopDeploy(System.Int32)">
      <summary>Requests that a project stop a deployment operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSync">[in] Flag that is set to true if deployment should be stopped synchronously and false if it can be stopped asynchronously.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.UnadviseDeployStatusCallback(System.UInt32)">
      <summary>Cancels the environment's registration to receive notifications of deployment status events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle that represents the representation to be cancelled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.WaitDeploy(System.UInt32,System.Int32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="dwMilliseconds">Do not use.</param>
      <param name="fTickWhenMessageQNotEmpty">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency">
      <summary>Provides access to an output group dependency.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency.get_DeployDependencyURL(System.String@)">
      <summary>Returns the URL of a dependency.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrURL">[out] Pointer to the location of the dependency (local, UNC, or web).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployStatusCallback">
      <summary>Enables the environment to receive notifications about the status of a deployment operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployStatusCallback.OnEndDeploy(System.Int32)">
      <summary>Notifies the environment that a deployment operation has ended.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSuccessful">[in] Flag that is set to true if the deployment operation completed successfully.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployStatusCallback.OnQueryContinueDeploy(System.Int32@)">
      <summary>Notifies the environment that a deployment operation is in progress.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfContinue">[in, out] Pointer to a flag that is set to true if the deployment operation can continue and false if it should be terminated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployStatusCallback.OnStartDeploy(System.Int32@)">
      <summary>Notifies the environment that a deployment operation has begun.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfContinue">[in, out] Pointer to a flag that is set to true if the deployment process can continue and false if it should be terminated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDiscoveryService">
      <summary>Creates a discovery session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDiscoveryService.CreateDiscoverySession(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession@)">
      <summary>Returns a pointer to a Discovery Session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSessionObject">[out] Pointer to a Discovery Session object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDocDataFileChangeControl">
      <summary>Determines whether changes to document data files made outside of the editor should be ignored.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDocDataFileChangeControl.IgnoreFileChanges(System.Int32)">
      <summary>Determines whether changes to DocData in files should be ignored.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fIgnore">[in] true indicates that the file changes should be ignored.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDocOutlineProvider">
      <summary>Provides information about a document outline.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDocOutlineProvider.GetOutline(System.IntPtr@,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
      <summary>Returns a document outline.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phwnd">[out] Pointer to a handle to the doc outline.</param>
      <param name="ppCmdTarget">[out] Pointer to the IOleCommandTarget interface of the requested doc outline.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDocOutlineProvider.GetOutlineCaption(Microsoft.VisualStudio.Shell.Interop.VSOUTLINECAPTION,System.String@)">
      <summary>Returns a document outline caption.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nCaptionType">[in] Caption type. Value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOUTLINECAPTION" /> enumeration.</param>
      <param name="pbstrCaption">[out] Pointer to a BSTR that contains the document outline caption.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDocOutlineProvider.OnOutlineStateChange(System.UInt32,System.UInt32)">
      <summary>Notifies the client when changes have been made to the document outline state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwMask">[in] Value taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE" /> enumeration.</param>
      <param name="dwState">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDocOutlineProvider.ReleaseOutline(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Releases a document outline.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the document outline.</param>
      <param name="pCmdTarget">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface of the document outline to release.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder">
      <summary>Allows a non-editor to add an edit lock to an item registered in the running document table.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder.CloseDocumentHolder(System.UInt32)">
      <summary>Called when the environment closes a document with an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder" /> entry in the running document table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwSaveOptions">[in] Save options for the document. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder.ShowDocumentHolder">
      <summary>Called by the environment before prompting the user to save the invisible document locked by the holder.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory">
      <summary>Creates instances of document view objects and of data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.Close">
      <summary>Releases all cached interface pointers and unregisters any event sinks.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)">
      <summary>Used by the editor factory architecture to create editors that support data/view separation.</summary>
      <returns>If the document has a format that cannot be opened in the editor, <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_UNSUPPORTEDFORMAT" /> is returned.If the document is open in an incompatible editor (or <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE" />), <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_INCOMPATIBLEDOCDATA" /> is returned.If the file could not be opened for any other reason, another HRESULT error code is returned.</returns>
      <param name="grfCreateDoc">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS" /> enumeration that defines the conditions under which to create the editor. Only open and silent flags are valid.</param>
      <param name="pszMkDocument">[in] String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file. This parameter can also be used to specify documents that are not files. For example, in a database-oriented project, this parameter could contain a string that refers to records in a table.</param>
      <param name="pszPhysicalView">[in] Name of the physical view. See Remarks for details.</param>
      <param name="pvHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="itemid">[in] Item identifier of this editor instance.</param>
      <param name="punkDocDataExisting">[in] Must be the <paramref name="punkDocData" /> object that is registered in the Running Document Table (RDT). This parameter is used to determine if a document buffer (DocData object) has already been created. When an editor factory is asked to create a secondary view, then this parameter will be non-null indicating that there is no document buffer. If the file is open, return VS_E_INCOMPATIBLEDOCDATA and the environment will ask the user to close it.</param>
      <param name="ppunkDocView">[out] Pointer to the IUnknown interface for the DocView object. Returns null if an external editor exists, otherwise returns the view of the document.</param>
      <param name="ppunkDocData">[out] Pointer to the IUnknown interface for the DocData object. Returns the buffer for the document.</param>
      <param name="pbstrEditorCaption">[out] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets, such as "[Form]". This value is passed as an input parameter to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method. If the file is [ReadOnly] the caption will be set during load of the file.</param>
      <param name="pguidCmdUI">[out] Returns the Command UI GUID. This GUID is active when this editor is activated. Any UI element that is visible in the editor has to use this GUID. This GUID is used in the .ctc file in the satellite DLL where it indicates which menus and toolbars should be displayed when the document is active.</param>
      <param name="pgrfCDW">[out, retval] enum of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN" />. These flags are passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.MapLogicalView(System.Guid@,System.String@)">
      <summary>Maps a logical view to a physical view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view.</param>
      <param name="pbstrPhysicalView">[out, retval] Pointer to the physical view to which the logical view is to be mapped.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes an editor in the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="psp">[in] Pointer to the <see cref="T:System.IServiceProvider" /> interface which can be used by the factory to obtain other interfaces.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactoryNotify">
      <summary>Provides notification methods for saving or renaming a file, or adding an item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactoryNotify.NotifyDependentItemSaved(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,System.UInt32,System.String)">
      <summary>Method called when a file is saved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for the saved item.</param>
      <param name="itemidParent">[in] The item ID (VSITEMID) of the file's parent object.</param>
      <param name="pszMkDocumentParent">[in] A pointer to a string containing the name of the parent document.</param>
      <param name="itemidDpendent">[in] The item ID (VSITEMID) of the file's dependent object.</param>
      <param name="pszMkDocumentDependent">[in] A pointer to a string containing the name of the dependent document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactoryNotify.NotifyItemAdded(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Method called when a new file (cloned from a template or existing file) is added to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfEFN">[in] An EFNFLAGS value indicating the file's origin and how to add it. Bit flags constructed with values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS" /> enumeration.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> of the project to add the item to.</param>
      <param name="itemid">[in] The item ID (VSITEMID) of the file being added.</param>
      <param name="pszMkDocument">[in] Pointer to a string containing the path and file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactoryNotify.NotifyItemRenamed(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,System.String)">
      <summary>Method called when a file is renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for the renamed item.</param>
      <param name="itemid">[in] The item ID (VSITEMID) of the file.</param>
      <param name="pszMkDocumentOld">[in] Pointer to a string containing the old name.</param>
      <param name="pszMkDocumentNew">[in] Pointer to a string containing the new name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens">
      <summary>Enumerates a collection of comment task tokens associated with the task list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens@)">
      <summary>Creates another enumerator that contains the same enumeration state as the current one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the cloned IVsEnumCommentTaskTokens interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken[],System.UInt32@)">
      <summary>Retrieves a specified number of comment task tokens in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of comment task tokens to retrieve.</param>
      <param name="rgelt">[out, size_is(celt), length_is(*pceltFetched)] The list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of comment task tokens supplied in <paramref name="rgelt" />. Returns null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumCommentTaskTokens.Skip(System.UInt32)">
      <summary>Skips a specified number of comment task tokens in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of comment task tokens in the enumeration to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies">
      <summary>Enumerates a set of dependencies.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)">
      <summary>Creates another enumerator that contains the same enumeration state as the current one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsEnumDependencies">[out] Pointer to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies" /> interface, a new enumerator that is set to the same state as the current <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies" /> interface. If the method is unsuccessful, the value of <paramref name="ppIVsEnumDependencies" /> is undefined.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDependency[],System.UInt32@)">
      <summary>Retrieves a specified number of dependencies in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cElements">[in] Number of elements being requested.</param>
      <param name="rgpIVsDependency">[in, out, size_is(cElements)] Pointer to an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDependency" /> interfaces belonging to the requested dependencies.</param>
      <param name="pcElementsFetched">[out, optional] Pointer to the number of elements supplied in <paramref name="rgpIVsDependency" />. Callers can pass in null if <paramref name="cElements" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies.Skip(System.UInt32)">
      <summary>Skips over a specified number of dependencies in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cElements">[in] Number of dependencies to be skipped.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumHierarchyItemsFactory">
      <summary>Creates instances of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems" />, an enumerator for items in the project hierarchy. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsEnumHierarchyItemsFactory" /> (SID_SVsEnumHierarchyItemsFactory) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumHierarchyItemsFactory.EnumHierarchyItems(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems@)">
      <summary>Provides an enumerator for items in a specified project hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierRoot">[in] Pointer to the IVsHierarchy interface defining the project hierarchy.</param>
      <param name="grfItems">[in] Bit flags determining which hierarchy items to include in the enumeration. Set by combining values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSEHI" /> enumeration. </param>
      <param name="itemidRoot">[in] The item ID. Usually <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</param>
      <param name="ppenum">[out] Pointer to the enumerator, a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems" /> instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs">
      <summary>Inumerates a set of build output items from a project's configuration. Enumerates a set of build output items from a project's configuration.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs@)">
      <summary>Creates another enumerator that contains the same enumeration state as the current one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsEnumOutputs">[out] Pointer to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs" /> interface, a new enumerator that is set to the same state as the current <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs" /> interface. If the method is unsuccessful, the value of <paramref name="ppIVsEnumOutputs" /> is undefined.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutput[],System.UInt32[])">
      <summary>Retrieves a specified number of output items in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cElements">[in] Number of elements being requested.</param>
      <param name="rgpIVsOutput">[in, out, size_is(cElements)] Pointer to an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutput" /> interfaces belonging to the requested output items.</param>
      <param name="pcElementsFetched">[out, optional] Pointer to the number of elements supplied in <paramref name="rgpIVsOutput" />. Caller can pass in null if <paramref name="cElements" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs.Skip(System.UInt32)">
      <summary>Skips over a specified number of output items in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cElements">[in] Number of output items to be skipped.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems">
      <summary>Enumerates the task items associated with task providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Creates an enumerator that contains the same state as the current enumerator.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskItem[],System.UInt32[])">
      <summary>Retrieves a specified number of task items in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of task items to retrieve.</param>
      <param name="rgelt">[out, size_is(celt), length_is(*pceltFetched)] The list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2" /> interfaces of the task items that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of tasks supplied in <paramref name="rgelt" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems.Reset">
      <summary>Sets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems.Skip(System.UInt32)">
      <summary>Skips a specified number of task items in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of tasks in the enumeration to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsExtensibleObject">
      <summary>Returns a VSPackage-specific automation object at specific points in the automation model.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExtensibleObject.GetAutomationObject(System.String,System.Object@)">
      <summary>Returns an automation object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPropName">[in] The environment passes a null when an automation consumer calls your automation object.</param>
      <param name="ppDisp">[out] Pointer to the <see cref="F:System.Data.OleDb.OleDbType.IDispatch" /> interface of the object to be returned.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager">
      <summary>Implemented by the environment to handle the Miscellaneous Files project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager.AddDocument(System.UInt32,System.String,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,System.String,System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Programmatically tells the Miscellaneous Files project to add a node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCDW">[in] Defines the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> flags, which determine how the document window is created.</param>
      <param name="pszMkDocument">[in] Path to the document. The environment uses this path to register the view in the Running Document Table (RDT).</param>
      <param name="punkDocView">[in] Pointer to the IUnknown interface for the document view object to be displayed within the document window.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of an object representing the document data object of the document that is being added in situations where there is view or data separation. For example, the core text editor has a text view object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextView" /> Object) and the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> Object). This parameter can be null. Passing null causes the environment to create an instance of a default implementation of the <paramref name="punkDocData" /> on the behalf of the caller.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor factory that created an instance of the document view and document data objects. This should be GUID_NULL if the document is not constructed using an editor factory (that is, an instance is created with private knowledge of a particular project).</param>
      <param name="pszPhysicalView">[in] String to identify the physical view type for the editor.</param>
      <param name="rguidCmdUI">[in] Specifies the GUID that indicates what set of menus should be merged into the main menu bar when this document is active. It is used for turning on visibility of commands and tool windows.</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the format: "ProjectName – ItemName."</param>
      <param name="pszEditorCaption">[in] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets (for example, [Read Only]). The initial value of this parameter is returned as an [out] parameter in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> Method.</param>
      <param name="pfDefaultPosition">[out] Can be null if the caller does not want the default position information for the window. true if the environment did not have any information saved about the last position of this tool window (that is, <paramref name="guidPersistenceSlot " />was not found), hence it was placed in some default location on the screen. false if this window was placed where the user last located and sized it.</param>
      <param name="ppWindowFrame">[out] Pointer to the frame containing this editor, which can be used to manipulate the location, size, caption, and other properties of the window. It can also be used to get the IUnknown interface pointer of the embedding (that is, the <paramref name="punkDocView" /> or the <paramref name="punkDocData" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager.GetExternalFilesProject(Microsoft.VisualStudio.Shell.Interop.IVsProject@)">
      <summary>Instantiates the Miscellaneous Files (External Files) project and returns a pointer to it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppProject">[out] Pointer to the Miscellaneous Files (External Files) project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager.IsVisible(System.Int32@)">
      <summary>Determines whether the Miscellaneous Files node is visible in Solution Explorer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfVisible">[out] Boolean. true if the node is visible, false if it is not.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager.TransferDocument(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Transfers a document to the Miscellaneous Files project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocumentOld">[in] Specifies the original path to the file to be transferred.</param>
      <param name="pszMkDocumentNew">[in] Specifies the new path to the file.</param>
      <param name="punkWindowFrame">[in] Specifies the pointer to the open window for the file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager2">
      <summary>Implemented by the environment to handle the Miscellaneous Files project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager2.AddDocument(System.UInt32,System.String,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,System.String,System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Programmatically tells the Miscellaneous Files project to add a node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCDW">[in] Defines the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> flags, which determine how the document window is created.</param>
      <param name="pszMkDocument">[in] Path to the document. The environment uses this path to register the view in the Running Document Table (RDT).</param>
      <param name="punkDocView">[in] Pointer to the IUnknown interface for the document view object to be displayed within the document window.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of an object representing the document data object of the document that is being added in situations where there is view or data separation. For example, the core text editor has a text view object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextView" /> Object) and the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> Object). This parameter can be null. Passing null causes the environment to create an instance of a default implementation of the <paramref name="punkDocData" /> on the behalf of the caller.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor factory that created an instance of the document view and document data objects. This should be GUID_NULL if the document is not constructed using an editor factory (that is, an instance is created with private knowledge of a particular project).</param>
      <param name="pszPhysicalView">[in] String to identify the physical view type for the editor.</param>
      <param name="rguidCmdUI">[in] Specifies the GUID that indicates what set of menus should be merged into the main menu bar when this document is active. It is used for turning on visibility of commands and tool windows.</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the format: "ProjectName – ItemName."</param>
      <param name="pszEditorCaption">[in] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets (for example, [Read Only]). The initial value of this parameter is returned as an [out] parameter in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> Method.</param>
      <param name="pfDefaultPosition">[out] Can be null if the caller does not want the default position information for the window. true if the environment did not have any information saved about the last position of this tool window (that is, <paramref name="guidPersistenceSlot" /> was not found), hence it was placed in some default location on the screen. false if this window was placed where the user last located and sized it.</param>
      <param name="ppWindowFrame">[out] Pointer to the frame containing this editor, which can be used to manipulate the location, size, caption, and other properties of the window. It can also be used to get the IUnknown interface pointer of the embedding (that is, the <paramref name="punkDocView" /> or the <paramref name="punkDocData" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager2.AddDocumentEx(System.UInt32,System.String,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,System.String,System.String,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.IntPtr,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Programmatically informs the Miscellaneous Files project to add a node, allows control over the icon for the node, and provides an opportunity for the editor to query for contextual services.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCDW">[in] Defines the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> flags, which determine how the document window is created.</param>
      <param name="pszMkDocument">[in] Path to the document. This path is used by the environment to register this view in the Running Document Table (RDT).</param>
      <param name="punkDocView">[in] Pointer to the IUnknown interface for the document view object to be displayed within this window.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of an object representing the document data object of this document in situations where there is view or data separation. For example, the core text editor has a text view object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextView" /> Object) and the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" />Object). This parameter can be null. Passing null causes the environment to create an instance of a default implementation of the <paramref name="punkDocData" /> on the caller's behalf.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor factory that created an instance of the document view and document dataobjects. This should be GUID_NULL if the document is not constructed using an editor factory (that is, an instance is created with private knowledge of a particular project).</param>
      <param name="pszPhysicalView">[in] String to identify the physical view type for the editor.</param>
      <param name="rguidCmdUI">[in] Specifies the GUID that indicates which set of menus should be merged into the main menu bar when this document is active. It is used for turning on visibility of commands and tool windows.</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the format: "ProjectName – ItemName."</param>
      <param name="pszEditorCaption">[in] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets (for example, [Read Only]). The initial value of this parameter is returned as an [out] parameter in the <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> Method.</param>
      <param name="pspContext">[out] Pointer to the <see cref="T:System.IServiceProvider" /> interface. Can be null. This is an additional service provider provided by the caller (the Miscellaneous Files project) making it possible for the caller to provide extra context (by means of services) to the embedded editor. Thus, when the embedded object makes a service request, the frame attempts to satisfy this request. If the service is not provided by the frame, <paramref name="pSP" /> is tried. If the service is not found there, then the environment's global service provider is queried.</param>
      <param name="hicon">[in] Specifies a handle to an icon. Allows you to specify the icon for the Miscellaneous Project node.</param>
      <param name="pfDefaultPosition">[out] Can be null if the caller does not desire the default position information for the window. true if the environment did not have any information saved about the last position of this tool window (that is, <paramref name="guidPersistenceSlot" /> was not found), hence it was placed in some default location on the screen. false if this window was placed where the user last located and sized it.</param>
      <param name="ppWindowFrame">[out] Pointer to the frame containing this editor, which can be used to manipulate the location, size, caption, and other properties of the window. It can also be used to get the IUnknown interface pointer of the embedding (that is, the <paramref name="punkDocView" />) or the <paramref name="punkDocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager2.GetExternalFilesProject(Microsoft.VisualStudio.Shell.Interop.IVsProject@)">
      <summary>Instantiates the Miscellaneous Files (External Files) project and returns a pointer to it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppProject">[out] Pointer to the Miscellaneous Files (External Files) project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager2.IsVisible(System.Int32@)">
      <summary>Determines whether the Miscellaneous Files node is visible in Solution Explorer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfVisible">[out] Boolean. true if the node is visible, false if it is not.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager2.TransferDocument(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Transfers a document to the Miscellaneous Files project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocumentOld">[in] Specifies the original path to the file to be transferred.</param>
      <param name="pszMkDocumentNew">[in] Specifies the new path to the file.</param>
      <param name="punkWindowFrame">[in] Specifies the pointer to the open window for the file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFavoritesProvider">
      <summary>Used by the environment when adding a URL to the favorites list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFavoritesProvider.Navigate(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> the IDE can use when adding to the favorites list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. `</returns>
      <param name="lpszURL">[in] Pointer to a string containing the URL.</param>
      <param name="dwFlags">[in] Reserved for future use.</param>
      <param name="ppFrame">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface that the IDE can use for creating a Web browser instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents">
      <summary>Notifies clients when selected files have been changed on disk.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents.DirectoryChanged(System.String)">
      <summary>Notifies clients of changes made to a directory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszDirectory">[in] Name of the directory that had a change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents.FilesChanged(System.UInt32,System.String[],System.UInt32[])">
      <summary>Notifies clients of changes made to one or more files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cChanges">[in] Number of files changed.</param>
      <param name="rgpszFile">[in, size_is(cChanges)] Array of file names.</param>
      <param name="rggrfChange">[in, size_is(cChanges)] Array of flags indicating the type of changes. See <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx">
      <summary>Allows changes to be made to a file or directory.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.AdviseDirChange(System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents,System.UInt32@)">
      <summary>Enables a client to receive notifications of changes to a directory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszDir">[in] String form of the moniker identifier of the directory in the project system.</param>
      <param name="fWatchSubDir">[in] If true, then events should also be fired for changes to sub directories. If false, then events should not be fired for changes to sub directories.</param>
      <param name="pFCE">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents" /> Interface on the object requesting notification of file change events.</param>
      <param name="pvsCookie">[out] Unique identifier for the file that is associated with the event sink.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.AdviseFileChange(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents,System.UInt32@)">
      <summary>Enables a client to receive notifications of changes to a file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file. This parameter can also be used to specify documents that are not files.</param>
      <param name="grfFilter">[in] Flags that indicate how the file has been changed. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS" />.</param>
      <param name="pFCE">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents" /> Interface on the object requesting notification of file change events.</param>
      <param name="pvsCookie">[out] Unique identifier for the file with which the event sink is associated. This value is used to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.UnadviseFileChange(System.UInt32)" /> Method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.IgnoreFile(System.UInt32,System.String,System.Int32)">
      <summary>Ignores changes to a file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="VSCOOKIE">[in] A VSCOOKIE that identifies the file. If you use this parameter to specify the file, then <paramref name="pszMkDocument" /> must be set to null.</param>
      <param name="pszMkDocument">[in] String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file. If you use this parameter to specify the file, then <paramref name="vsCookie" /> must be set to null.</param>
      <param name="fIgnore">[in] If true, then ignore the file changes. If false, then do not ignore the file changes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.SyncFile(System.String)">
      <summary>Forces change events to be sent. Used in conjunction with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.IgnoreFile(System.UInt32,System.String,System.Int32)" /> to make file changes but not receive notification.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.UnadviseDirChange(System.UInt32)">
      <summary>Disables a client from receiving notifications of changes to a directory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="VSCOOKIE">[in] Unique identifier of the file with which the event sink should be disassociated. This is the same value that was provided in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.AdviseDirChange(System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents,System.UInt32@)" /> Method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.UnadviseFileChange(System.UInt32)">
      <summary>Disables a client from receiving notifications of changes to a file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="VSCOOKIE">in] Unique identifier of the file with which the event sink should be disassociated. This is the same value that was provided in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.AdviseFileChange(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents,System.UInt32@)" /> Method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg">
      <summary>Sets filtering for the Add Item dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg.FilterListItemByLocalizedName(System.Guid@,System.String,System.Int32@)">
      <summary>Filters files by localized name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszLocalizedName">[in] Pointer to a null terminated string containing the localized name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg.FilterListItemByTemplateFile(System.Guid@,System.String,System.Int32@)">
      <summary>Filters files by actual template file name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszTemplateFile">[in] Pointer to a null terminated string containing the template file name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg.FilterTreeItemByLocalizedName(System.Guid@,System.String,System.Int32@)">
      <summary>Filters tree elements by localized name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszLocalizedName">[in] Pointer to a null terminated string containing the localized name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg.FilterTreeItemByTemplateDir(System.Guid@,System.String,System.Int32@)">
      <summary>Filters tree elements by actual directory name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszTemplateDir">[in] Pointer to a null terminated string containing the template directory name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2">
      <summary>Sets filtering for the AddItem dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2.FilterListItemByCategory(System.Guid@,System.String,System.Int32@)">
      <summary>Filters files by category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszCategoryName">[in] Pointer to a null terminated string containing the category template name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2.FilterListItemByLocalizedName(System.Guid@,System.String,System.Int32@)">
      <summary>Filters files by localized name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszLocalizedName">[in] Pointer to a null terminated string containing the localized name.</param>
      <param name="pfFilter">[out] Set to trueto filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2.FilterListItemByTemplateFile(System.Guid@,System.String,System.Int32@)">
      <summary>Filters files by actual template file name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszTemplateFile">[in] Pointer to a null terminated string containing the template file name.</param>
      <param name="pfFilter">[out] Set to trueto filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2.FilterTreeItemByCategory(System.Guid@,System.String,System.Int32@)">
      <summary>Filters tree elements by category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszCategoryName">[in] Pointer to a null terminated string containing the category template name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2.FilterTreeItemByLocalizedName(System.Guid@,System.String,System.Int32@)">
      <summary>Filters tree elements by localized name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszLocalizedName">[in] Pointer to a null terminated string containing the localized name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg2.FilterTreeItemByTemplateDir(System.Guid@,System.String,System.Int32@)">
      <summary>Filters tree elements by actual directory name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectItemTemplates">[in] GUID of the project supplying the item templates.</param>
      <param name="pszTemplateDir">[in] Pointer to a null terminated string containing the template directory name.</param>
      <param name="pfFilter">[out] Set to true to filter out the specified item. Set to false to display the item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFilterKeys">
      <summary>Controls the binding between keys and commands. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsFilterKeys" /> (SID_SVsFilterKeys) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterKeys.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[],System.UInt32,System.Guid@,System.UInt32@)">
      <summary>Takes a Windows message, translates it into a command, and, optionally, executes the command. </summary>
      <returns>If the message does or will translate to a command, the method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> and fills the pguidCmd and pdwCmd parameters with the command's GUID and ID. If the message does not or will not translate to a command, the method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />, and sets the two parameters to zero.</returns>
      <param name="pMsg">[in] Pointer to the Windows message.</param>
      <param name="dwFlags">[in] Bit flags to determine whether or not to perform default actions, or to execute the command. Values formed from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS" /> enumeration.</param>
      <param name="pguidCmd">[out] Pointer to the GUID of the corresponding command.</param>
      <param name="pdwCmd">[out] Pointer to the identifier of the command.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents">
      <summary>Fires the same events (<see cref="P:EnvDTE80.Events2.SolutionEvents" />) a solution normally fires. Enables a project that nests subprojects to fire these events. Implemented by the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnAfterClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" />, after closing a child project in a nested project hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the parent project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" />, after a project is loaded in the project hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the loaded project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnAfterOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" />, after opening a child project in a nested project hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the parent project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)" />, after opening the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being opened.</param>
      <param name="fAdded">[in] Boolean. Set to true if the project is added to the solution after opening the solution. Set to false if the project is added to the solution while the solution is opening.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)" />, before closing a project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoved">[in] Boolean. Set to true if the project was removed from the solution before the solution was closed. Set to false if the project was removed from the solution while the solution was being closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnBeforeClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" />, before closing a child project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the parent project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnBeforeOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" />, before opening a children project in a nested project hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the parent project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" />, before unloading a project from a project hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the  <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being unloaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)" />, indicating a query about closing the project.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the callee vetoes the operation. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoving">[in] Boolean. Set to true if the project is being removed from the solution before the solution is closed. Set to false if the project is being removed from the solution while the solution is being closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireSolutionEvents.FireOnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires a solution event, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)" />, indicating a query about unloading the project.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the callee vetoes the operation. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being unloaded.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults">
      <summary>Allows a VSPackage to support the IDE's Fonts and Colors properties page by defining default fonts and colors for a window or UI component.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetBaseCategory(System.Guid@)">
      <summary>IVsFontAndColorDefaults::GetBaseCategory allows a VSPackage that manages fonts and colors to change the behavior of the Use Defaults button of the Fonts and Colors properties page.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidBase">[out] Pointer to a GUID specifying the base category for a client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetCategoryName(System.String@)">
      <summary>Returns the display name of a Display Items category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] Pointer to a string containing the name of the Display Items category.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetFlags(System.UInt32@)">
      <summary>Returns a combination of <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS" /> values. The member of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS" /> enumeration define how the Fonts and Colors properties page in the Options dialog box implements font and color changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[out] Reference to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS" /> enumeration containing the font color flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetFont(Microsoft.VisualStudio.Shell.Interop.FontInfo[])">
      <summary>Returns a <see cref="T:Microsoft.VisualStudio.Shell.Interop.FontInfo" /> structure containing information about a Category's default font to the Visual Studio environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pInfo">[out] Reference to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.FontInfo" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetItem(System.Int32,Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo[])">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo" /> structure containing font and color information for specific member of the Display Items list for a given Category as indicated by the <paramref name="iItem" /> parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer containing the item index.</param>
      <param name="pInfo">[out] Reference to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo" /> structure, which contains the defaults attributes of the indexed Display Item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetItemByName(System.String,Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo[])">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo" /> structure containing font and color information for one of the Display Items listed in the Fonts and Colors properties page.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szItem">[in] Null-terminated string containing the name of the item.</param>
      <param name="pInfo">[out] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.AllColorableItemInfo" /> structure, which contains the default attributes of the named item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetItemCount(System.Int32@)">
      <summary>Returns the number of colorable Display items in the Options dialog box. The Display items are provided by the selected option in the Show Settings for: drop-down list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcItems">[out] Pointer to the number of colorable items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults.GetPriority(System.UInt16@)">
      <summary>Returns the display priority of the items in the Show settings for: drop-down list of the Fonts and Colors property page.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPriority">[out] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY" /> enumeration value indicating the priority value of the category.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaultsProvider">
      <summary>Provides an instance of the IVsFontAndColorDefaults or the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup" /> interface corresponding to a particular Category -- a particular item listed in the Show Settings For: drop down listing of the Fonts and Colors properties page of the Options dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaultsProvider.GetObject(System.Guid@,System.Object@)">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults" /> or an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults" /> interface for the category specified by the <paramref name="rguidCategory" /> parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] Specifies the GUID of the category.</param>
      <param name="ppObj">[out] An IUnknown interface, which must be queried for either an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaults" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorEvents">
      <summary>Notifies VSPackages using font and color information about changes in font and color settings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorEvents.OnApply">
      <summary>Called by the environment when user has clicked the OK or Apply button on the Fonts and Colors property page in the Options dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorEvents.OnFontChanged(System.Guid@,Microsoft.VisualStudio.Shell.Interop.FontInfo[],Microsoft.VisualStudio.Shell.Interop.LOGFONTW[],System.UInt32)">
      <summary>Called by the Visual Studio environment when the fonts of one Categories of the items listed in the Display Items drop-down list is modified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] Specifies the GUID of the affected category. Compare this GUID to the GUID of your category to determine whether the event applies to your VSPackage.</param>
      <param name="pInfo">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.FontInfo" /> structure that contains font identification information.</param>
      <param name="pLOGFONT">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.LOGFONTW" /> structure containing the attributes of the font.</param>
      <param name="HFONT">[in] Pointer to a font object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorEvents.OnItemChanged(System.Guid@,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo[],System.UInt32,System.UInt32)">
      <summary>Called by the environment whenever an item in the Display Items drop-down list is modified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] The GUID of a category with a modified Display Item.</param>
      <param name="szItem">[in] Canonical name of item modified.</param>
      <param name="iItem">[in] Index of item modified.</param>
      <param name="pInfo">[in] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo" /> structure containing information about the altered item.</param>
      <param name="crLiteralForeground">[in] The Display Item's foreground color.</param>
      <param name="crLiteralBackground">[in] The Display Item's background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorEvents.OnReset(System.Guid@)">
      <summary>Called by the environment whenever the items in the Display Items list are reset to their default values.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] Specifies the GUID of the Category.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorEvents.OnResetToBaseCategory(System.Guid@)">
      <summary>Called by the environment whenever all of a category's attributes are reset to its alternate set of default values, as specified by its base category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] Specifies the GUID of the base category.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup">
      <summary>Provides a mechanism by which a VSPackage providing font and color support can specify a Display Item group - a super-category that represents the union of two or more categories.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup.GetCategory(System.Int32,System.Guid@)">
      <summary>Returns the GUID of the one of the categories within a group as identified by a group index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCategory">[in] Integer containing the category index number.</param>
      <param name="pguidCategory">[out] Pointer to a GUID specifying the indexed category.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup.GetCount(System.Int32@)">
      <summary>Returns the number of categories represented by the group.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pnCategories">[out] Reference to an integer containing the category count.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup.GetGroupName(System.String@)">
      <summary>Returns a category group's localized name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] Pointer to a string containing the name..</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorGroup.GetPriority(System.UInt16@)">
      <summary>Returns a group's display priority, which determines its position in the Show settings for: drop-down box of the Fonts and Colors property page.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPriority">[out] Reference to a value containing the priority value of the group.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage">
      <summary>Allows a VSPackage to retrieve or save font and color data to the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.CloseCategory">
      <summary>Closes the registry key containing font and color information for the Display Items in the currently open Category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.GetFont(Microsoft.VisualStudio.Shell.Interop.LOGFONTW[],Microsoft.VisualStudio.Shell.Interop.FontInfo[])">
      <summary>Returns the font attributes for the currently open Category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLOGFONT">[in, out] Reference to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.LOGFONTW" /> structure.</param>
      <param name="pInfo">[in, out] Reference to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.FontInfo" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.GetItem(System.String,Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo[])">
      <summary>Returns the user-modifiable information for a named Display Item in the currently open Category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szName">[in] Null-terminated string containing the non-localized name of the Display Item in the currently open Category.</param>
      <param name="pInfo">[in, out] Reference to an allocated <see cref="T:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo" /> object to contain information about the Display Item in the currently open Category.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.OpenCategory(System.Guid@,System.UInt32)">
      <summary>Opens the registry key containing font and color information for a Cateogry found in the Show Settings for: drop-down list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] Specifies the GUID of the Category of Display Items whose information is to be accessed.</param>
      <param name="fFlags">[in] Specifies how a Category's information is to be accessed. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.RemoveCategory(System.Guid@)">
      <summary>Deletes saved data for a Category from the registry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] The GUID of the Category.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.SetFont(Microsoft.VisualStudio.Shell.Interop.FontInfo[])">
      <summary>Stores the basic definition of a font to be used by the currently open Category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pInfo">[in] Reference to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.FontInfo" /> structure that contains the font specification.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.SetItem(System.String,Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo[])">
      <summary>Stores the user-modifiable color and font settings for a named Display Item in the registry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szName">[in] Null-terminated string containing the non-localized name of the Display Item.</param>
      <param name="pInfo">[in] Reference to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo" /> structure containing information about the Display Item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress">
      <summary>Enables the single file generator to report on its progress and to provide additional warning and/or error information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress.GeneratorError(System.Int32,System.UInt32,System.String,System.UInt32,System.UInt32)">
      <summary>Returns warning and error information to the project system.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fWarning">[in] Flag that indicates whether this message is a warning or an error. Set to true to indicate a warning or to false to indicate an error.</param>
      <param name="dwLevel">[in] Severity level of the error. The project system currently ignores the value of this parameter.</param>
      <param name="bstrError">[in] Text of the error to be displayed to the user by means of the Task List.</param>
      <param name="dwLine">[in] Zero-based line number that indicates where in the source file the error occurred. This can be –1 (or, 0xFFFFFFFF) if not needed.</param>
      <param name="dwColumn">[in] One-based column number that indicates where in the source file the error occurred. This can be –1 if not needed, but must be –1 if <paramref name="dwLine" /> is –1.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress.Progress(System.UInt32,System.UInt32)">
      <summary>Sets an index that specifies how much of the generation has been completed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nComplete">[in] Index that specifies how much of the generation has been completed. This value can range from zero to <paramref name="nTotal" />..</param>
      <param name="nTotal">[in] The maximum value for <paramref name="nComplete" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGetCfgProvider">
      <summary>Implemented by a project system. Retrieves a pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGetCfgProvider.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)">
      <summary>Returns a pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider" /> so that the package can retrieve information relating to the project's configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppCfgProvider">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList">
      <summary>Provides a list of all possible values for a Help attribute. The interface does not provide an enumerator but instead uses an integer index to retrieve the values.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeName(System.String@)">
      <summary>Gets the name of the attribute of the item at the current index set by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeStatusIndex(System.Int32,System.Int32@)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeValue(System.Int32,Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE,System.String@)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrName">[out] String containing the attribute name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeStatusIndex(System.Int32,System.Int32@)">
      <summary>Get the attribute's status by index. Also sets the position for other methods not specifying an index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Index indicating the position of the attribute in the list.</param>
      <param name="pfActive">[out] Pointer to a Boolean. Set to true if the attribute is active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeStatusVal(System.String,Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE,System.Int32@)">
      <summary>Gets the status of an attribute value.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrValue">[in] Pointer to a string containing the value.</param>
      <param name="type">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE" /> indicating the type of the attribute: VSHAL_Real for the actual attribute, VSHAL_Display for the display attribute.</param>
      <param name="pfActive">[out] Boolean. Set to true if the attribute is active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeValue(System.Int32,Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE,System.String@)">
      <summary>Get the attribute's value by index. Also sets the position for other methods not specifying an index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Index indicating the position of the attribute in the list.</param>
      <param name="type">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE" /> indicating the type of the attribute: VSHAL_Real for the actual attribute, VSHAL_Display for the display attribute.</param>
      <param name="pbstrValue">[out] Pointer to a string containing the attribute value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetCount(System.Int32@)">
      <summary>Gets the number of attributes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Pointer to the number of attributes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.UpdateAttributeStatus(System.Int32@)">
      <summary>Updates the status of the attribute at the current index set by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeStatusIndex(System.Int32,System.Int32@)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList.GetAttributeValue(System.Int32,Microsoft.VisualStudio.Shell.Interop.ATTRVALUETYPE,System.String@)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="afActive">[in] Pointer to a Boolean. Set to true if the attribute is active.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem">
      <summary>Provides access to the help system. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.ActivateHelpSystem(System.UInt32)">
      <summary>Starts the Help system and displays the table of contents.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Bit flags specifying Help options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND" /> enumeration. In general, you'll only use <see cref="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_Default" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.ALinkSearch(System.String,System.UInt32,System.UInt32)">
      <summary>Performs an Alink search based on the word, flags, and context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszALink">[in] Pointer to a string containing the ALink keyword.</param>
      <param name="dwFlags">[in] Bit flags specifying Help options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND" /> enumeration. In general, you'll only use <see cref="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_Default" />.</param>
      <param name="dwReserved">[in] Reserved. Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromIdentifier(System.String,System.UInt32,System.UInt32)">
      <summary>Displays a topic based on an identifier.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFile">[in] Pointer to a string containing the file name of the Help file.</param>
      <param name="Id">[in] The Help topic identifier.</param>
      <param name="Command">[in] Bit flags specifying Help options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND" /> enumeration and the HTML Help commands. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)">
      <summary>Displays a topic using a URL and options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszURL">[in] Pointer to a string containing the URL.</param>
      <param name="Command">[in] Bit flags specifying Help options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND" /> enumeration and the HTML Help commands</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.FullTextSearchDlg(System.String,System.UInt32,System.UInt32)">
      <summary>Displays the full text search dialog.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszQuery">[in] Pointer to a string containing the query.</param>
      <param name="dwFlags">[in] Bit flags specifying Help options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND" /> enumeration and the HTML Help commands. </param>
      <param name="dwReserved">[in] Reserved. Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.GetCurrentURL(System.String@)">
      <summary>Retrieves the URL of the topic currently displayed in the topic window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszURL">[out] Pointer to a string containing the URL. The method allocates the string using SysAllocString. The caller is responsible for freeing the string with SysFreeString.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.KeywordSearch(System.String,System.UInt32,System.UInt32)">
      <summary>Performs an F1 search based on a keyword, flags, and context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszKeyword">[in] Pointer to a string containing the keyword.</param>
      <param name="dwFlags">[in] Bit flags specifying Help options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND" /> enumeration and the HTML Help commands. </param>
      <param name="dwReserved">[in] Reserved. Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.KeywordSearchDlg(System.String,System.UInt32,System.UInt32)">
      <summary>Displays the keyword search dialog pre-populated with the keyword.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszKeyword">[in] Pointer to a string containing the keyword.</param>
      <param name="dwFlags">[in] Bit flags specifying Help options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND" /> enumeration and the HTML Help commands. </param>
      <param name="dwReserved">[in] Reserved. Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.Reserved(Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND,Microsoft.VisualStudio.Shell.Interop.VsHelpErrors)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="Command">[in]</param>
      <param name="error">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy">
      <summary>Provides hierarchy management for VSPackages that implement project hierarchies. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <summary>Establishes client notification of hierarchy events without the hierarchy implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEventSink">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" /> interface on the object requesting notification of hierarchy events.</param>
      <param name="pdwCookie">[out] Pointer to a unique identifier for the referenced event sink. This value is required to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.UnadviseHierarchyEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Close">
      <summary>Closes and cleans up a hierarchy once the environment determines that it is no longer used.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetCanonicalName(System.UInt32,System.String@)">
      <summary>Returns a unique, string name for an item in the hierarchy. Used for workspace persistence, such as remembering window positions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the hierarchy item. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="pbstrName">[out] Pointer to the canonical name of the hierarchy item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Gets properties whose values are GUIDs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of hierarchy item whose property is to be retrieved. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the property of the given hierarchy item. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pguid">[out] Pointer to a GUID property specified in <paramref name="propid" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>Makes it possible for a node of a given hierarchy to be a shortcut to the middle of another hierarchy.</summary>
      <returns>If <paramref name="itemid" /> is not a nested hierarchy, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE" /> is returned. The caller would then treat this node as if it had no children, if the requested interface had been essential (as is often the case when the requested interface is IID_IVsUIHierarchy).</returns>
      <param name="itemid">[in] Item identifier of the node whose nested hierarchy information is requested. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="iidHierarchyNested">[in] Identifier of the interface to be returned in <paramref name="ppHierarchyNested" />. To implement, first get the object that represents the nested hierarchy and run QueryInterface on it to obtain the interface ID (IID). Then, pass the IID in with <paramref name="iidHierarchyNested" />. The result of the QueryInterface call goes into <paramref name="ppHierarchyNested" />.</param>
      <param name="ppHierarchyNested">[out, iid_is(iidHierarchyNested)] Pointer to the interface whose identifier was passed in <paramref name="iidHierarchyNested" />.</param>
      <param name="pitemidNested">[out] Pointer to an item identifier of the root node of the nested hierarchy. For a list of <paramref name="pitemidnested" /> values, see VSITEMID. Although the interface is set up to support shortcutting to any node in another hierarchy, the environment currently only supports shortcutting to the root node of the nested hierarchy, in which case <paramref name="pitemidNested" /> must be set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
      <summary>Gets properties of a given node or of the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier of an item in the hierarchy. For a list of <paramref name="itemid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSITEMID" />.</param>
      <param name="propid">[in] Identifier of the hierarchy property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Pointer to a VARIANT containing the property value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Gets the service provider from which to access the services.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSP">[out] Pointer to the <see cref="T:System.IServiceProvider" /> interface of the service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.ParseCanonicalName(System.String,System.UInt32@)">
      <summary>Returns the identifier of the hierarchy item, given its canonical name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszName">[in] Pointer to the canonical name of the hierarchy item.</param>
      <param name="pitemid">[out] Pointer to the item identifier for the hierarchy item. For a list of <paramref name="pitemid" /> values, see VSITEMID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.QueryClose(System.Int32@)">
      <summary>Determines whether the given hierarchy can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCanClose">[out] If true, then the hierarchy can be closed. If false, then the hierarchy cannot be closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Sets properties whose values are GUIDs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the hierarchy item that is to be set. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the property in the given hierarchy item. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="rguid">[in] GUID value of the property specified in <paramref name="propid" /> that is returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
      <summary>Sets properties of a specific node or of the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier of the hierarchy item whose properties are to be set. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the hierarchy property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="var">[in] Variant that contains property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the service provider from which to access the services.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="psp">[in] Pointer to the <see cref="T:System.IServiceProvider" /> interface of the service provider to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.UnadviseHierarchyEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy events without requiring that the hierarchy implement <see cref="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle to the client that was disabled from receiving notifications of hierarchy events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused0">
      <summary>Adds new methods without recompiling or breaking binary compatibility.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused1">
      <summary>Adds new methods without recompiling or breaking binary compatibility.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused2">
      <summary>Adds new methods without recompiling or breaking binary compatibility.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused3">
      <summary>Adds new methods without recompiling or breaking binary compatibility.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused4">
      <summary>Adds new methods without recompiling or breaking binary compatibility.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler">
      <summary>Manages the deletion or removal of hierarchy items.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler.DeleteItem(System.UInt32,System.UInt32)">
      <summary>Handles the deletion or removal of a hierarchy item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwDelItemOp">[in] Determines whether the hierarchy or hierarchy item is deleted from storage or removed from the project. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> enumeration.</param>
      <param name="itemid">[in] Item identifier of an item in the hierarchy. <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> will delete everything in the hierarchy. <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" /> is not supported.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler.QueryDeleteItem(System.UInt32,System.UInt32,System.Int32@)">
      <summary>Called by the environment to determine whether the hierarchy supports item deletion, removal, or both.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwDelItemOp">[in] Determines whether the hierarchy or hierarchy item is deleted from storage or removed from the project. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> enumeration.</param>
      <param name="itemid">[in] Item identifier of an item in the hierarchy. Use <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> to delete all in the hierarchy. <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" /> is not supported.</param>
      <param name="pfCanDelete">[out] If true, then the hierarchy supports either item deletion or item removal, depending on the value specified for the <paramref name="dwDelItemOp" /> parameter. If false, then the hierarchy or hierarchy item cannot be deleted.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource">
      <summary>Provides information about a dragged item in relation to its data source during a drag-and-drop operation within a hierarchy window. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)">
      <summary>Returns information about one or more of the items being dragged.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwOKEffects">[out] Pointer to a DWORD value describing the effects displayed while the item is being dragged, such as cursor icons that change during the drag-and-drop operation. For example, if the item is dragged over an invalid target point (such as the item's original location), the cursor icon changes to a circle with a line through it. Similarly, if the item is dragged over a valid target point, the cursor icon changes to a file or folder.</param>
      <param name="ppDataObject">[out] Pointer to the IDataObject interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>
      <param name="ppDropSource">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDropSource" /> interface of the item being dragged.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource.OnDropNotify(System.Int32,System.UInt32)">
      <summary>Notifies clients that the dragged item was dropped.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDropped">[in] If true, then the dragged item was dropped on the target. If false, then the drop did not occur.</param>
      <param name="dwEffects">[in] Visual effects associated with the drag-and-drop operation, such as cursors, bitmaps, and so on. The value of <paramref name="dwEffects" /> passed to the source object via OnDropNotify method is the value of <paramref name="pdwEffects" /> returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2">
      <summary>Provides information about a dragged item in relation to its data source during a drag-and-drop operation within a hierarchy window. The interface extends and inherits from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource" /> interface. You only need to use IVsHierarchyDropDataSource2 if you need the additional methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)">
      <summary>Returns information about one or more of the dragged items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwOKEffects">[out] Pointer to a DWORD value indicating the effect of the drop: DROPEFFECT_COPY, DROPEFFECT_LINK, or DROPEFFECT_MOVE. The values are mutually exclusive and cannot be combined.</param>
      <param name="ppDataObject">[out] Pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> interface of the dragged item. This data object contains the data transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated in the target hierarchy or hierarchy window.</param>
      <param name="ppDropSource">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDropSource" /> interface of the dragged item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)">
      <summary>Enables the drag source to prompt to save unsaved items before dropping. Notifies the source hierarchy that information dragged from it is about to be dropped on a target. This method is called immediately after the mouse button is released on a drop.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] Pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> interface on the dragged item. Contains the data transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated in the hierarchy window of the new hierarchy.</param>
      <param name="dwEffect">[in] Pointer to a DWORD value indicating the effect of the drop: DROPEFFECT_COPY, DROPEFFECT_LINK, or DROPEFFECT_MOVE. The values are mutually exclusive and cannot be combined.</param>
      <param name="pfCancelDrop">[out, retval] If true, then the source hierarchy cancelled the drop. If false, then the drop can continue.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2.OnDropNotify(System.Int32,System.UInt32)">
      <summary>Notifies clients the dragged item was dropped.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDropped">[in] If true, then the dragged item was dropped on the target. If false, no drop occurred.</param>
      <param name="dwEffects">[in] Pointer to a DWORD value indicating the effect of the drop: DROPEFFECT_COPY, DROPEFFECT_LINK, or DROPEFFECT_MOVE. The values are mutually exclusive and cannot be combined.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget">
      <summary>Provides information about a dragged item in relation to its drop target during a drag-and-drop operation within a hierarchy window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Called as soon as the mouse drags an item over a new hierarchy or hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] Pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the hierarchy window.</param>
      <param name="grfKeyState">[in] Current state of the keyboard and the mouse modifier keys. Valid values are shown in the following table. These values can be combined using a bitwise OR operator.[1|1] Hex[1|2] Value[1|3] Description[2|1] 0x0001[2|2] MK_LBUTTON[2|3] Left mouse button is clicked.[3|1] 0x0002[3|2] MK_RBUTTON[3|3] Right mouse button is clicked.[4|1] 0x0004[4|2] MK_SHIFT[4|3] SHIFT key is pressed.[5|1] 0x0008[5|2] MK_CONTROL[5|3] CONTROL key is pressed.[6|1] 0x0010[6|2] MK_MBUTTON[6|3] Middle mouse button is clicked.[7|1] 0x0020[7|2] MK_ALT[7|3] ALT key is pressed.</param>
      <param name="itemid">[in] Item identifier of the item currently being dragged. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="pdwEffect">[in, out] On entry, pointer to the value of the <paramref name="pdwEffect" /> parameter of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object, identifying all effects that the hierarchy supports. On return, must contain one of the effect flags that indicate the result of the drop operation. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.DragLeave">
      <summary>Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is cancelled or completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.DragOver(System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Called when one or more items are dragged over the target hierarchy or hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfKeyState">[in] Current state of the keyboard keys and the mouse modifier buttons. Valid values are shown in the following table. These values can be combined using a bitwise OR operator.[1|1] Hex[1|2] Value[1|3] Description[2|1] 0x0001[2|2] MK_LBUTTON[2|3] Left mouse button is clicked.[3|1] 0x0002[3|2] MK_RBUTTON[3|3] Right mouse button is clicked.[4|1] 0x0004[4|2] MK_SHIFT[4|3] SHIFT key is pressed.[5|1] 0x0008[5|2] MK_CONTROL[5|3] CONTROL key is pressed.[6|1] 0x0010[6|2] MK_MBUTTON[6|3] Middle mouse button is clicked.[7|1] 0x0020[7|2] MK_ALT[7|3] ALT key is pressed.</param>
      <param name="itemid">[in] Item identifier of the drop data target over which the item is being dragged. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="pdwEffect">[in, out] On entry, pointer to the value of the <paramref name="pdwEffect" /> parameter of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object, identifying all effects that the hierarchy supports. On return, the <paramref name="pdwEffect" /> parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of <paramref name="pwdEffects" /> values, see <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] Pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>
      <param name="grfKeyState">[in] Current state of the keyboard and the mouse modifier keys. Valid values are shown in the following table. These values can be combined using a bitwise OR operator.[1|1] Hex[1|2] Value[1|3] Description[2|1] 0x0001[2|2] MK_LBUTTON[2|3] Left mouse button is clicked.[3|1] 0x0002[3|2] MK_RBUTTON[3|3] Right mouse button is clicked.[4|1] 0x0004[4|2] MK_SHIFT[4|3] SHIFT key is pressed.[5|1] 0x0008[5|2] MK_CONTROL[5|3] CONTROL key is pressed.[6|1] 0x0010[6|2] MK_MBUTTON[6|3] Middle mouse button is clicked.[7|1] 0x0020[7|2] MK_ALT[7|3] ALT key is pressed.</param>
      <param name="itemid">[in] Item identifier of the drop data target over which the item is being dragged. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="pdwEffect">[in, out] Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. The value of <paramref name="dwEffects" /> passed to the source object via the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2.OnDropNotify(System.Int32,System.UInt32)" /> method is the value of pdwEffects returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents">
      <summary>Notifies clients of changes to the hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents.OnInvalidateIcon(System.IntPtr)">
      <summary>Notifies clients when changes are made to icons.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hicon">[in] Icon handle.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents.OnInvalidateItems(System.UInt32)">
      <summary>Notifies clients when changes are made to the item inventory of a hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidParent">[in] Parent item identifier, or root, of the hierarchy whose item inventory has changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents.OnItemAdded(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Notifies clients when an item is added to the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidParent">[in] Identifier of the parent, or root node of the hierarchy in which the item is added.</param>
      <param name="itemidSiblingPrev">[in] Identifier that indicates where the item is added in relation to other items (siblings) within the parent hierarchy (<paramref name="itemidParent" />). If the new item is added at the beginning of the sibling items, then a value of <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> is specified. If the item is added after a particular node, the Item Id of the node in question is specified.</param>
      <param name="itemidAdded">[in] Identifier of the added item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents.OnItemDeleted(System.UInt32)">
      <summary>Notifies clients when an item is deleted from the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the deleted item. This is the same identifier assigned to the new item by the hierarchy when it is added to the hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents.OnItemsAppended(System.UInt32)">
      <summary>Notifies clients when items are appended to the end of the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidParent">[in] Identifier of the parent or root node of the hierarchy to which the item is appended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents.OnPropertyChanged(System.UInt32,System.Int32,System.UInt32)">
      <summary>Notifies clients when one or more properties of an item have changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item whose property has changed. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the property of <paramref name="itemid" />. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="flags">[in] Not implemented.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter">
      <summary>Enables the debugger to handle some HTML elements in its output. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsHTMLConverter" /> (SID_SVsHTMLConverter) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter.ConvertFromEntities(System.String,System.UInt32,System.UInt16[],System.UInt32@)">
      <summary>Converts entity references in a string to characters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szToConvert">[in] String to convert.</param>
      <param name="cchBuffSize">[in] Length of the buffer in which to store the converted string.</param>
      <param name="szBuffer">[out] The buffer containing the converted string.</param>
      <param name="pcchBuffSizeActual">[out] Actual size of the buffer used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter.ConvertFromURLEncoding(System.UInt32,System.String,System.UInt32,System.UInt16[],System.UInt32@)">
      <summary>Converts a string from URL encoding (such as using %20 for space) to characters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="uCodePage">[in] The code page to use when converting to characters.</param>
      <param name="szToConvert">[in] String to convert.</param>
      <param name="cchBuffSize">[in] Length of the buffer in which to store the converted string.</param>
      <param name="szBuffer">[out] The buffer containing the converted string.</param>
      <param name="pcchBuffSizeActual">[out] Pointer to the actual size of the buffer used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter.ConvertToEntities(System.String,System.UInt32,System.UInt16[],System.UInt32@)">
      <summary>Converts a character string to one containing entity references such "&amp;auml;" for the character "ä."</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szToConvert">[in] String to convert.</param>
      <param name="cchBuffSize">[in] Length of the buffer in which to store the converted string.</param>
      <param name="szBuffer">[out] The buffer containing the converted string.</param>
      <param name="pcchBuffSizeActual">[out] Actual size of the buffer used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter.ConvertToURLEncoding(System.UInt32,System.String,System.UInt32,System.UInt16[],System.UInt32@)">
      <summary>Converts a string substituting URL encoding where needed, such as "%20" for a space.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="uCodePage">[in] The code page to use when converting.</param>
      <param name="szToConvert">[in] String to convert.</param>
      <param name="cchBuffSize">[in] Length of the buffer in which to store the converted string.</param>
      <param name="szBuffer">[out] The buffer containing the converted string.</param>
      <param name="pcchBuffSizeActual">[out] Actual size of the buffer used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter.get_DefaultURLEncodingCodePage(System.UInt32@)">
      <summary>Returns the value of the default code page used when encoding strings.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pulCodePage">[out] Pointer to the default code page.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsIME">
      <summary>Gives the package access to the Input Method Editor (IME). The Input Method Editor offers candidate items in response to user keystrokes. Frequently used in localization for non-alphabetic languages. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsIME" /> (SID_SVsIME) service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.Activate(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSIME_ERR[])">
      <summary>Activates the Input Method Editor (IME).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The handle for the editing window.</param>
      <param name="perr">[out] Pointer to an error value, a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR" /> enumeration. IMENORMAL indicates no error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.AttachContext(System.IntPtr,System.Int32,Microsoft.VisualStudio.Shell.Interop.VSIME_ERR[])">
      <summary>Associates or disassociates an Input Method Editor (IME) context with an editor window. For more information about IME contexts, see Input Context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The handle of the editor window.</param>
      <param name="fAttach">[in] Boolean. Set to true to attach an IME context to the window. Set to false to destroy an attached IME context.</param>
      <param name="perr">[out] Pointer to an error value, a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR" /> enumeration. IMENORMAL indicates no error. IMENTOLD indicates there is no IME active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.Deactivate(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSIME_ERR[])">
      <summary>Deactivates the Input Method Editor (IME).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The handle of the editor window.</param>
      <param name="perr">[out] Pointer to an error value, a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR" /> enumeration. IMENORMAL indicates no error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.Escape(System.IntPtr,System.UInt32,System.UInt32,System.String,System.Int32@)">
      <summary>Provides access to ImmEscape, a method enabling access to features, often country-specific, of particular Input Method Editors (IME).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hkl">[in] Input locale identifier.</param>
      <param name="HIMC">[in] Handle to the input context.</param>
      <param name="uEsc">[in] The operation to perform. One of the IME Escapes values.</param>
      <param name="bstrData">[in] The string containing information on which to perform the operation.</param>
      <param name="plRetVal">[out] Pointer to a status value. Returns zero for errors. For more information, see IME Escapes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.FDeactivate(System.IntPtr,System.Int32,Microsoft.VisualStudio.Shell.Interop.VSIME_ERR[])">
      <summary>Enables or disables the Input Method Editor (IME).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the editor window.</param>
      <param name="fDisable">[in] Boolean. If true, disables the IME and destroys the context. Otherwise, activates the IME and attaches the context to the editor window.</param>
      <param name="perr">[out] Pointer to an error value, a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR" /> enumeration. IMENORMAL indicates no error. IMENTOLD indicates there is no IME active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.GetDefaultWindow(System.IntPtr,System.IntPtr@)">
      <summary>Retrieves the default window for the Input Method Editor (IME) class that is active. Wrapper for a call to ImmGetDefaultIMEWnd.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The handle for the editor window.</param>
      <param name="phRetVal">[out] If successful, the default window for the IME class. Otherwise, null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.GetImmCompositionString(System.UInt32,System.UInt32,System.String@,System.Int32@)">
      <summary>Retrieves information about the composition string. Wrapper for a call to ImmGetCompositionString.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="HIMC">[in] Handle to the IME context.</param>
      <param name="dwIndex">[in] Index of the information to retrieve. For more information about possible values, see IME Composition String Values.</param>
      <param name="pbstrCompString">[out] Binary buffer—not a Unicode string. Allocated using SysAllocStringByteLen. For more information, see ImmSetCompositionStringand ImmGetCompositionString.</param>
      <param name="plRetVal">[out] Pointer to the return value. Contains the number of bytes copied to the destination buffer or, if <paramref name="dwBufLen" /> is zero, the buffer size, in bytes, needed to receive all of the information. The size is always in bytes, even if the requested data is a Unicode string.On error, set to one of the two values: IMM_ERROR_NODATA, or IMM_ERROR_GENERAL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.GetImmCompositionStringW(System.UInt32,System.UInt32,System.String@,System.Int32@)">
      <summary>Retrieves information about the composition string. Wrapper for a call to ImmGetCompositionString. Handles string as wide characters (wchar_t) rather than as bytes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="HIMC">[in] Handle to the IME context.</param>
      <param name="dwIndex">[in] Index of the information to retrieve. For more information about possible values, see IME Composition String Values.</param>
      <param name="pbstrCompString">[out] Wide character (wchar_t, Unicode) buffer. Use SysAllocStringByteLen and SysStringByteLen to manage memory for this item. See ImmSetCompositionString and ImmGetCompositionString.</param>
      <param name="plRetVal">[out] Pointer to the return value. Contains the number of wide characters copied to the destination buffer or, if <paramref name="dwBufLen" /> is zero, the buffer size, in wide characters, needed to receive all of the information. The size is always in wide characters.On error, set to one of the two values: IMM_ERROR_NODATA, or IMM_ERROR_GENERAL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.GetImmContext(System.IntPtr,System.UInt32@)">
      <summary>Retrieves the Input Method Editor (IME) context for a given window. Use before getting or setting IME information using methods such as <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.GetImmCompositionString(System.UInt32,System.UInt32,System.String@,System.Int32@)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle for the editor window.</param>
      <param name="phimc">[out] Pointer to a handle to the IME context.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.IsActive(System.IntPtr,System.Int32@)">
      <summary>Indicates whether or not the Input Method Editor (IME) is active for a given window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle for the editor window.</param>
      <param name="pfRetVal">[out] Pointer to a Boolean. Set to true if the IME is active for the window. Set to false otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.Notify(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32@)">
      <summary>Notifies the Input Method Editor (IME) of changes to the IME input context. The method is a wrapper for ImmNotifyIME.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="HIMC">[in] Handle to the IME context.</param>
      <param name="dwAction">[in] The notification code indicating the change. For values of this argument, see ImmNotifyIME.</param>
      <param name="dwIndex">[in] The index of a candidate list, or a value indicating a change in the composition string. For values of this argument, see ImmNotifyIME.</param>
      <param name="dwValue">[in] An additional argument used with some values of <paramref name="dwAction" />. For more information, see ImmNotifyIME.</param>
      <param name="pfRetVal">[out] Nonzero value if method is successful; a zero value otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.ReleaseImmContext(System.IntPtr,System.UInt32,System.Int32@)">
      <summary>Releases the Input Method Editor (IME) input context and frees the associated memory. The method is a wrapper for ImmReleaseContext.. You should call this function once for each call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.GetImmContext(System.IntPtr,System.UInt32@)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle of the editor window.</param>
      <param name="HIMC">[in] Handle to the IME input context.</param>
      <param name="pfRetVal">[out] Error return value. Set to zero if there is an error. Nonzero otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.SetCurPos(System.IntPtr,System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.VSIME_ERR[])">
      <summary>Sets the current position of the editing window using the Input Method Editor (IME). The method provides a wrapper to ImmSetCompositionWindow.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the editing window.</param>
      <param name="x">[in] Horizontal position, in pixels, of the upper left corner of the window.</param>
      <param name="y">[in] Vertical position, in pixels, of the upper left corner of the window.</param>
      <param name="perr">[out] A nonzero value indicates success. Any other value, an error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.SetDefCurPos(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSIME_ERR[])">
      <summary>Moves the editor window to the default position. The method provides a wrapper to ImmSetCompositionWindow.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle of the editor window.</param>
      <param name="perr">[out] Set to zero when there is an error. Nonzero otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.SetFont(System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSIME_ERR[])">
      <summary>Sets the fault in the editor window. Provides a wrapper to ImmSetCompositionFont.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the editor window.</param>
      <param name="hf">[in] Handle to the font. If null, uses the default system font.</param>
      <param name="perr">[out] Error return value. Set to zero if there is an error. Nonzero otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.SetImmCandidateWindow(System.UInt32,Microsoft.VisualStudio.Shell.Interop.CANDIDATEFORM[],System.Int32@)">
      <summary>Sets aspects of the candidate list window. Provides a wrapper for ImmSetCandidateWindow.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="HIMC">[in] Handle to the IME input context.</param>
      <param name="pfRetVal">[out] Error return value. Set to zero when there is an error. Nonzero otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIME.SetImmCompositionString(System.UInt32,System.UInt32,System.String,System.String,System.Int32@)">
      <summary>Sets the characters, attributes, and clauses of the composition and reading strings. Provides a wrapper for ImmSetCompositionString.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="HIMC">[in] Handle to the IME input context.</param>
      <param name="dwIndex">[in] Determines which elements are set. For a list of values, see ImmSetCompositionString.</param>
      <param name="bstrCompString">[in] Binary buffer for or containing the composition string. Not a Unicode string. For more information, see ImmSetCompositionString.</param>
      <param name="bstrReadString">[in] Binary buffer for or containing the composition string. Not a Unicode string. For more information, see ImmSetCompositionString.</param>
      <param name="pfRetVal">[out] Error return value. Set to a nonzero value when there is no error. Zero otherwise.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct">
      <summary>Allows your VSPackage to place information on the splash screen and in the About dialog box on the Help menu.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdBmpSplash(System.UInt32@)">
      <summary>Visual Studio 2005 no longer calls this method. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIdBmp">[out] Pointer to the ID of the bitmap to be displayed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdIcoLogoForAboutbox(System.UInt32@)">
      <summary>Obtains the icon used in the splash screen and the About dialog box on the Help menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIdIco">[out] Pointer to the icon used in the splash screen and About dialog box on the Help menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.OfficialName(System.String@)">
      <summary>Obtains a pointer to the string containing the official name of the product that is displayed in the splash screen and About dialog box on the Help menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] Pointer to the string to be displayed in the splash screen and About dialog box.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.ProductDetails(System.String@)">
      <summary>Obtains a pointer to the string containing the product details that are displayed in the About dialog box on the Help menu. Not called for the splash screen.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrProductDetails">[out] Pointer to a string containing the product details.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.ProductID(System.String@)">
      <summary>Obtains a pointer to the string containing the ID of the product that is displayed in the About dialog box on the Help menu. Not called for the splash screen.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrPID">[out] Pointer to the string that identifies the product ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler">
      <summary>Enables a package to make full use of IntelliMouse functionality. Used in shell clients implementing some of their own functionality. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsIntelliMouseHandler" /> (SID_SVsIntelliMouseHandler) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.DeleteBitmap_(System.UInt32@)">
      <summary>Deletes the bitmap used for panning with the Intellisense mouse.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpPanBitmap">[in] Pointer to a PANBITMAP structure. For more information, see Remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.DrawBitmap_(System.UInt32@,System.Int32)">
      <summary>Draws or erases the bitmap used for panning with the Intellisense mouse.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpPanBitmap">[in] Pointer to a PANBITMAP structure. For more information, see Remarks.</param>
      <param name="fErase">[in] Boolean. If true, erase the bitmap. Otherwise, draw it.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.GetMouseWheelMsg_(System.UInt32@)">
      <summary>Get the most recent message about the Intellisense mouse wheel.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="uMsg">[out] The mouse wheel Windows message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.HandleWheelButtonDown(System.IntPtr,System.UInt32)">
      <summary>Handle the Intellisense wheel button being pushed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The HWND of the active window.</param>
      <param name="dwStyle">[in] Bit flags, such as WS_VSCROLL, indicating which scrollbar styles are used. Set to zero (0) for defaults.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.HandleWheelRotation(System.IntPtr,System.UInt32,System.UInt32)">
      <summary>If the Intellisense mouse wheel has been moved, respond to the movement.</summary>
      <returns>If the Windows message parameter is a mouse wheel message, responds and returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
      <param name="hwnd">[in] The HWND of the active window.</param>
      <param name="wp">[in] A Windows message parameter. If the message is WM_MOUSEWHEEL, uses GET_WHEEL_DELTA_WPARAM macro to extract how far the wheel has moved and responds.</param>
      <param name="dwStyle">[in] Bit flags, such as WS_VSCROLL, indicating which scrollbar styles are used. Set to zero (0) for defaults.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.IsMouseWheelRotationMessage(System.UInt32)">
      <summary>Tests a Windows message to see if it is an Intellisense mouse wheel rotation message.</summary>
      <returns>If the message is an Intellisense mouse wheel rotation message, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
      <param name="msg">[in] The Windows message to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.LoadBitmap_(System.IntPtr,System.UInt32,System.UInt32,Microsoft.VisualStudio.OLE.Interop.POINT,System.UInt32@)">
      <summary>Load the bitmap to display for panning with the Intellisense mouse. Once loaded, you then draw the bitmap with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.DrawBitmap_(System.UInt32@,System.Int32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] The HWND of the active window.</param>
      <param name="idbmp">[in] The resource ID of the bitmap.</param>
      <param name="idcur">[in] The resource ID of the cursor.</param>
      <param name="ptOrg">[in] A POINT structure indicating the center point of the bitmap to display.</param>
      <param name="lpPanBitmap">[in] Pointer to a PANBITMAP structure. For more information, see Remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.MouseWheelPresent">
      <summary>Indicates whether or not there is an Intellisense mouse wheel in use.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if there is a mouse wheel. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler.SetMouseCursor_(Microsoft.VisualStudio.OLE.Interop.POINT,Microsoft.VisualStudio.OLE.Interop.POINT,System.UInt32,System.UInt32)">
      <summary>Sets the cursor base where the mouse is currently located.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ptOrg">[in] A POINT structure indicating the current origin of the mouse cursor.</param>
      <param name="ptNew">[in] A POINT structure indicating the new position of the mouse cursor.</param>
      <param name="idCurOrg">[in] The resource ID of the current mouse cursor.</param>
      <param name="uNeutralRadius">[in] The neutral radius. If the change in position between <paramref name="ptOrg" /> and <paramref name="ptNew" /> is less than this radius, does not move the cursor.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor">
      <summary>Obtains the document data for the file "under edit" by the invisible editor object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor.GetDocData(System.Int32,System.Guid@,System.IntPtr@)">
      <summary>Obtains the document data for the file "under edit" by this editor object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fEnsureWritable">BOOLEAN indicating whether the document data is writable.</param>
      <param name="riid">GUID of the editor object.</param>
      <param name="ppDocData">Pointer to the document data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditorManager">
      <summary>Used to register an invisible editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditorManager.RegisterInvisibleEditor(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory,Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor@)">
      <summary>Registers an invisible editor on the specified document. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">The name of the document.</param>
      <param name="pProject">The project to which the file must belong. If null is supplied, the file can belong to any project; when opened, it is opened by whichever project responds to IsDocumentInAProject from the shell (including the miscellaneous files project).</param>
      <param name="dwFlags">Zero or more <see cref="T:Microsoft.VisualStudio.Shell.Interop._EDITORREGFLAGS" /> values; If REIF_ENABLECACHING flag is set, the document is loaded and placed in the RDT immediately, if not already present, and attempts are made to keep the document there as long as possible; certain actions may force it to be unlocked, such as user closing without saving, etc. This allows the document to stay in the RDT in the scenario where a document is open in a visible editor, and closed by the user while an invisible editor is registered for that document. Otherwise, the document is not loaded until <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor.GetDocData(System.Int32,System.Guid@,System.IntPtr@)" /> is called (unless. of course, it is already in memory), and no unnecessary attempts to keep the document in the RDT while this editor is registered are made.</param>
      <param name="pFactory">An instance of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory" /> that is used to load the document if it isn't already open. If null is supplied, a default editor factory is used to load the file into a shell-provided instance of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
      <param name="ppEditor">Filled with the newly created and registered invisible editor instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLanguageInfoPackage">
      <summary>Used to provide per-language editor property pages in the Options dialog.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLanguageInfoPackage.GetLanguagePropertyPage(System.Guid@,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[])">
      <summary>Gets the property page for a given language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPage">[in] GUID for the property page.</param>
      <param name="guidLang">[in] GUID for the language service.</param>
      <param name="ppage">[in, out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad">
      <summary>Interface to generate command-line tools and batch files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad.ExecBatchScript(System.String,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadEvents,System.String[])">
      <summary>Creates a temporary batch file to be executed with output piped to an output pane in the IDE.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBatchFileContents">[in] String containing the text to be written to the batch file.</param>
      <param name="pszWorkingDir">[in] Working directory that is passed to CreateProcess by the environment. Can be null.</param>
      <param name="lpf">[in] Launch pad flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS" /> enumeration.</param>
      <param name="pOutputWindowPane">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface created by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow.CreatePane(System.Guid@,System.String,System.Int32,System.Int32)" />.</param>
      <param name="nTaskItemCategory">[in] Task item category, if <paramref name="lpf" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList" />. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> enumeration.</param>
      <param name="nTaskItemBitmap">[in] Task item bitmap if <paramref name="lpf" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList" /> is specified. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap" /> enumeration.</param>
      <param name="pszTaskListSubcategory">[in] Specifies a new task list subcategory to be created if <paramref name="lpf" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList" /> is specified. The new subcategory is used for sorting and grouping in the task pane.</param>
      <param name="pVsLaunchPadEvents">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadEvents" /> interface.</param>
      <param name="pbstrOutput">[out] true if all output was generated. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad.ExecCommand(System.String,System.String,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadEvents,System.UInt32@,System.String[])">
      <summary>Executes a command with output piped to an output pane in the IDE.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszApplicationName">[in] Application name that is passed to CreateProcess by the environment. For more information, see CreateProcess.</param>
      <param name="pszCommandLine">[in] Command line string that is passed to CreateProcess by the environment.</param>
      <param name="pszWorkingDir">[in] Working directory that is passed to CreateProcess by the environment. Can be null.</param>
      <param name="lpf">[in] Launch pad flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS" /> enumeration.</param>
      <param name="pOutputWindowPane">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> interface created by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow.CreatePane(System.Guid@,System.String,System.Int32,System.Int32)" />.</param>
      <param name="nTaskItemCategory">[in] Task item category, if <paramref name="lpf" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList" />. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> enumeration.</param>
      <param name="nTaskItemBitmap">[in] Task item bitmap, if <paramref name="lpf" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList" />.</param>
      <param name="pszTaskListSubcategory">[in] Task list subcategory, if <paramref name="lpf" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList" />.</param>
      <param name="pVsLaunchPadEvents">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadEvents" /> interface.</param>
      <param name="pdwProcessExitCode">[out] Value returned by process.</param>
      <param name="pbstrOutput">[out] true if all output was generated. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad.ParseOutputStringForTaskItem(System.String,System.UInt32[],System.String[],System.UInt32[],System.String[],System.Int32[])">
      <summary>Parses an output string and sends the results to the output pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOutputString">[in] One line of output text.</param>
      <param name="pnPriority">[out] Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._vstaskpriority" /> enumeration. Value returned is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY.TP_HIGH" /> when the text is "error", and <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY.TP_NORMAL" /> for all other text.</param>
      <param name="pbstrFilename">[out] Filename inside <paramref name="PszOutputString" /> if found.</param>
      <param name="pnLineNum">[out] Line number if the file is found.</param>
      <param name="pbstrTaskItemText">[out] Message following the file name and line number.</param>
      <param name="pfTaskItemFound">[out] true if a file name, line number and message were found in <paramref name="PszOutputString" /> and the item was added to the list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadEvents">
      <summary>Notifies the environment to cancel a launch pad event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadEvents.Tick(System.Int32@)">
      <summary>Allows cancellation of a launch pad event.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCancel">[in, out] true to cancel an event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadFactory">
      <summary>ICreates an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad" /> object that can be used to spawn command line tools and batch files</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadFactory.CreateLaunchPad(Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad@)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad" /> object that can be used to spawn command line tools and batch files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLaunchPad">[out] Pointer to a launch pad object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary">
      <summary>This core interface describes the library and is used by the Object Manager to access symbols pertinent to it.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.AddBrowseContainer(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA[],System.UInt32@,System.String@)">
      <summary>Adds a browse container to be browsed by the library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcdComponent">[in] Specifies attributes that identify the added component.</param>
      <param name="pgrfOptions">[in, out] Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS" /> enumeration.</param>
      <param name="pbstrComponentAdded">[out] pointer to a string containing the text to display for the added component.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetBrowseContainersForHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSBROWSECONTAINER[],System.UInt32[])">
      <summary>Returns an array of Browse Containers that correspond to the given <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
      <returns>If the method succeeds, it returns. <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="celt">[in] Count of elements <paramref name="rgBrowseContainers" /> array.</param>
      <param name="rgBrowseContainers">[in, out] On input, null. On output, an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSECONTAINER" /> structs.</param>
      <param name="pcActual">[out] Pointer to a count of containers to be returned in <paramref name="rgBrowseContainers" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetGuid(System.Guid@)">
      <summary>Returns a pointer to the GUID of the library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppguidLib">[out] Pointer to the GUID of the current library.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetLibFlags(System.UInt32@)">
      <summary>Returns flags associated with the library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfFlags">[out] Pointer to a flag indicating which flags apply to the current library.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetLibList(Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@)">
      <summary>Returns the list of browse containers currently being browsed by the library as an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lptType">[in] Specifies type of library to return. For a list of <paramref name="lptType" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE" />.</param>
      <param name="pplist">out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetList(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA[],Microsoft.VisualStudio.Shell.Interop.IVsObjectList@)">
      <summary>Returns the requested list of symbols as an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList" /> interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ListType">[in] Specifies list type. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE" /> enumeration.</param>
      <param name="flags">[in] Specifies flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS" /> enumeration.</param>
      <param name="pobSrch">[in] Specifies a pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA" /> structure.</param>
      <param name="pplist">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetSeparatorString(System.String[])">
      <summary>Returns the string used to separate symbols for this type of Browse Container.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSeparator">[out] Pointer to a null-terminated string containing the language specific scope operator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetSupportedCategoryFields(Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY,System.UInt32@)">
      <summary>Returns the category values supported by the library for a specified category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="Category">[in] Specifies a library's category type. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY" /> enumeration.</param>
      <param name="pCatField">[out] Pointer to a category field object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.LoadState(Microsoft.VisualStudio.OLE.Interop.IStream,Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE)">
      <summary>Asks the library to load its persisted global Browse Containers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIStream">[in] Pointer to an <see cref="T:System.Runtime.InteropServices.ComTypes.IStream" /> interface.</param>
      <param name="lptType">[in] Specifies the persisted type of the library. Always <see cref="F:Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE.LPT_GLOBAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.RemoveBrowseContainer(System.UInt32,System.String)">
      <summary>Removes a Browse Container being browsed by the library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved. Set this parameter to null.</param>
      <param name="pszLibName">[in] Pointer to a null-terminated string containing the library name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.SaveState(Microsoft.VisualStudio.OLE.Interop.IStream,Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE)">
      <summary>Asks the library to save its persisted global Browse Containers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIStream">[in] Pointer to an <see cref="T:System.Runtime.InteropServices.ComTypes.IStream" /> interface.</param>
      <param name="lptType">[in] Specifies the persisted type of the library. Always LPT_GLOBAL from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.UpdateCounter(System.UInt32@)">
      <summary>Returns the current change counter for the library and is used to indicate that the library contents have changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCurUpdate">[out] Pointer to a current update counter.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr">
      <summary>This root interface allows the environment's Object Manager to access a package's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary" />. Most implementations will typically provide a single <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary" />. This root interface allows the environment's Object Manager to access a package's IVsLibrary. Most implementations will typically provide a single <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr.GetCheckAt(System.UInt32,Microsoft.VisualStudio.Shell.Interop.LIB_CHECKSTATE[])">
      <summary>Returns the checked state of the requested library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nLibIndex">[in] Specifies the zero-based index of the library of interest.</param>
      <param name="pstate">[out] Specifies the checked state of a library. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.LIB_CHECKSTATE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr.GetCount(System.UInt32@)">
      <summary>Returns the number of libraries implemented by the library manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pnCount">[out] Pointer to the count of libraries managed by your library manager.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr.GetLibraryAt(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsLibrary@)">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary" /> interface for the requested library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nLibIndex">[in] Specifies the zero-based index of the library of interest.</param>
      <param name="ppLibrary">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr.GetNameAt(System.UInt32,System.IntPtr)">
      <summary>Returns the displayable name for the requested library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nLibIndex">[in] Specifies the zero-based index of the library of interest.</param>
      <param name="pszName">[out] Pointer to a null-terminated string containing the library name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr.SetLibraryGroupEnabled(Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE,System.Int32)">
      <summary>No method information is provided. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="lpt">Do not use.</param>
      <param name="fEnable">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr.ToggleCheckAt(System.UInt32)">
      <summary>Tells the requested library to toggle its current checked state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nLibIndex">[in] Specifies the zero-based index of the library of interest.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager">
      <summary>Provides information about reference .NET libraries for the Object Browser. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsComplusLibrary" /> (SID_SVsComplusLibrary) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager.AddComponentReference(System.String,System.Object)">
      <summary>Called by the project when adding a reference to a component identified by its path.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wszPath">[In] Reference to a component identified by its path.</param>
      <param name="pVsLibrary">[in] A pointer to an object of type pVsLibrary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager.DecrementCheckCount(System.String,System.Object)">
      <summary>Called by the project referencing a component identified by its path when it is taken out of scope.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wszPath">[In] Reference to a component identified by its path.</param>
      <param name="pVsLibrary">[In] A pointer to an object of type pVsLibrary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager.GetListIndex(Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO[],Microsoft.VisualStudio.Shell.Interop.IVsObjectList@,System.UInt32@)">
      <summary>Provides browse information for the Object Browser. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pObjInfo">[in] A pointer to an object of type VSOBJECTINFO.</param>
      <param name="pplist">[Out] A pointer to a pointer of type IVsObjectList.</param>
      <param name="pIndex">[Out] A pointer to an integer</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager.IncrementCheckCount(System.String,System.Object)">
      <summary>Called by the project referencing a component identified by its path when it is brought into scope. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wszPath">[In] Reference to a component identified by its path.</param>
      <param name="pVsLibrary">[In] A pointer to an object of type pVsLibrary.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager.RemoveComponentReference(System.String,System.Object)">
      <summary>Called by the project when removing a reference to a component identified by its path.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wszPath">[in] Reference to a component identified by its path.</param>
      <param name="pVsLibrary">[In] A pointer to an object of type pVsLibrary.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree">
      <summary>Represents a lightweight tree control. Used, for example, in the ObjectBrowser and FindSymbol dialogs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.AdviseTreeEvents(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents,System.UInt32@)">
      <summary>Registers an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents" /> interface and thus adds an events listener to the listener list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEventSink">[in] Pointer to events interface, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents" />.</param>
      <param name="pdwCookie">[out] Cookie used to identify this particular instance of the events interface in calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.UnadviseTreeEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.CloneTreeAbsolute(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsLiteTree@)">
      <summary>Clones the tree structure starting a specific node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Index of the node at which to begin cloning.</param>
      <param name="retVal">[out] Pointer to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.DelayRedraw(System.Int32)">
      <summary>Indicates whether or not to redraw the tree.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fOn">[in] Boolean. Set to true, prevents redrawing.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.DeleteItems(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList,System.UInt32,System.UInt32)">
      <summary>Used to delete specific items without realigning the tree by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.ReAlign(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNode">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> to delete items from.</param>
      <param name="iStart">[in] Index of the item where the deletion begins.</param>
      <param name="Count">[in] Number of items to delete.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.EnableTreeEvents(System.UInt32,System.Int32)">
      <summary>Enables reporting of events on the tree.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] The VSCOOKIE returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.AdviseTreeEvents(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents,System.UInt32@)" /> method.</param>
      <param name="fEnable">[in] Boolean. Set to true if events were enabled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.EnumAbsoluteIndices(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList,System.UInt32,System.IntPtr@,System.UInt32@)">
      <summary>Enumerates the items in a tree list beginning at a particular index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pList">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" />.</param>
      <param name="index">[in] Starting index.</param>
      <param name="ppvNext">[in, out] Pointer to the next item in the list. Use NULL if you only want to use the absolute index.</param>
      <param name="pAbsIndex">[out] The absolute index of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.EnumOrderedListItems(System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@,System.UInt32@,System.UInt32@,System.UInt32@)">
      <summary>Enumerate the complete tree list a sub-tree at a time.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNextStartIndex">[in, out] Pointer to the index of the first item in the list. On return, index of the next item in the list.</param>
      <param name="pptl">[out] Pointer to the IVsLiteTreeList for this segment of the tree.</param>
      <param name="pFirstRelIndex">[out] Pointer to the relative index of the first item in the list.</param>
      <param name="pLastRelIndex">[Out] Pointer to the relative index of the last item in the list.</param>
      <param name="pLevel">[Out] Pointer to the current level within the tree.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetDescendantItemCount(System.UInt32,System.UInt32@)">
      <summary>Returns the number of descendants of a given node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Index of node to check. Use -1 on first call.</param>
      <param name="pCount">[out] Pointer to the number of descendants; 0 if not expanded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetExpandableAbsolute(System.UInt32,System.Int32@)">
      <summary>Determines whether or not you can expand an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Absolute index of the item to check.</param>
      <param name="pfCanExpand">[out] Pointer to a Boolean. Set to true if you can expand the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetExpandedAbsolute(System.UInt32,System.Int32@)">
      <summary>Determines whether an item is expanded. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Absolute index of the item to test.</param>
      <param name="pfExpanded">[out] Pointer to Boolean. Set to true if the item is expanded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetExpandedListAbsolute(System.UInt32,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@)">
      <summary>Returns the expanded list at the given index, if any.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Absolute index for which to retrieve the expanded list.</param>
      <param name="pLevel">[out] Pointer to an integer containing the level.</param>
      <param name="pptl">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> interface for the expanded list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetInitFlags(System.UInt32@)">
      <summary>Retrieves the tree list options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pgrfOpts">[Out] Pointer to bit flags containing the options. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetItemInfoAbsolute(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@,System.UInt32@,System.UInt32@)">
      <summary>Retrieves the parent list of a node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Integer containing the absolute index of the tree node.</param>
      <param name="pptl">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> of the parent.</param>
      <param name="pIndex">[out] Pointer to an integer containing the index.</param>
      <param name="pLevel">[out] Pointer to an integer value containing a Level.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetOffsetFromParent(System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Returns the offset between the index of a parent node and a relative index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ParentAbsIndex">[in] Integer containing the absolute index of the parent.</param>
      <param name="RelIndex">[in] Integer containing the relative index of a node in the tree list.</param>
      <param name="pOffset">[out] Pointer to an integer containing the offset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.GetParentIndexAbsolute(System.UInt32,System.UInt32@)">
      <summary>Gets the next visible expanded list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there are no more lists. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" /> if the index is out of range.</returns>
      <param name="AbsIndex">[in] Integer containing the absolute index of the node. Use -1 on the first call or the index of an expanded node.</param>
      <param name="pParentIndex">[out] Pointer to the index of the expanded list. Set to null if there are no more lists available.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.Init(System.UInt32)">
      <summary>Initializes the tree using specified options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOpts"> [in] Bit flags specifying the options. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.InsertItems(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList,System.UInt32,System.UInt32)">
      <summary>Insert items without performing realignment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNode">[In] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> to modify. Using -1 indicates starting at the beginning of the list.</param>
      <param name="iAfter">[In] Integer index of the after which to insert the new node.</param>
      <param name="Count">[In] Integer containing the count of nodes inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.QueryItemVisible(System.UInt32,System.Int32@)">
      <summary>Indicates whether an item is visible.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Index of the item's node.</param>
      <param name="pfVisible">[out] Pointer to a Boolean. Set to true if the node is visible; false otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.ReAlign(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList)">
      <summary>Realign part of the list designated by an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> instance.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNode">[In] Pointer to an object of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.Refresh">
      <summary>Refresh the tree by calling <see cref="P:Microsoft.VisualStudio.ManagedInterfaces.Publish.IPublishProperties.UpdateRequired" /> as necessary.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.SetRedraw(System.Int32)">
      <summary>Set or reset redrawing of the tree list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fOn">[In] Boolean. Use true to turn on redrawing; use false to turn off redrawing.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.SetRoot(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList,Microsoft.VisualStudio.Shell.Interop.IVsLiteTree@)">
      <summary>Sets the root object of the tree.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pList">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> instance to use as the root.</param>
      <param name="ppClone">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" /> that is a clone of the tree. Use null if you don't want to clone the tree.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.ToggleExpansionAbsolute(System.UInt32,System.Int32@,System.Int32@)">
      <summary>Expands an item by selected by absolute index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Integer. The absolute index of the node to expand.</param>
      <param name="pfCanRecurse">[out] Pointer to a Boolean. Set to true if the tree list can be recursive.</param>
      <param name="pChange">[out] Pointer to an integer. Set to zero (0) if there is no change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.ToggleStateAbsolute(System.UInt32,System.UInt32@)">
      <summary>Toggles the state of an item. An item may have more than two states.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[in] Integer containing the absolute index of the node.</param>
      <param name="ptscr">[out] Pointer to a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH" />.enumeration indicating what type of refresh needs to do.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.UnadviseTreeEvents(System.UInt32)">
      <summary>Unregisters an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents" /> interface and thus removes an events listener from the list.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[In] The cookie returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.AdviseTreeEvents(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.VisibleItemCount(System.UInt32@)">
      <summary>Returns the number of items displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Pointer to an integer. The number of visible items in the tree list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents">
      <summary>Defines the events of the lightweight tree control. Used as an argument in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree.AdviseTreeEvents(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents,System.UInt32@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents.OnDeleteItems(System.UInt32,System.UInt32)">
      <summary>Counts items that have been deleted starting with iStart.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStart">[In] An unsigned integer containing the start item of the deletion.</param>
      <param name="Count">[In] An unsigned integer containing the Deletion Count.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents.OnInsertItems(System.UInt32,System.UInt32)">
      <summary>Counts items that have been inserted after iAfter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAfter">[In] An unsigned integer containing the item index after which the insertion(s) will take place.</param>
      <param name="Count">[In] An unsigned integer containing the Insertion Count.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents.OnQueryItemVisible(System.UInt32,System.Int32@)">
      <summary>Checks whether specified item is visible.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[In] An integer containing the Absolute Item Index to query.</param>
      <param name="pfVisible">[Out] A pointer to a Boolean value that return TRUE if the Item is visible, FALSE if not visible.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents.OnRefresh">
      <summary>The list has been refreshed (update count, window, current selection).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents.OnSetRedraw(System.Int32)">
      <summary>Turns redraw on/off.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fOn">[In] Boolean input parameter set to TRUE when Redraw is set to ON and set to FALSE if redraw is set to OFF.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents.OnToggleExpansion(System.UInt32,System.Int32)">
      <summary>Called when an item enters or leaves the expanded state. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[In] An unsigned integer containing the Absolute Index of the Item.</param>
      <param name="cChange">[In] An integer indicating the state change of the specified item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeEvents.OnToggleState(System.UInt32,System.UInt32)">
      <summary>Called when an icon changes state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="AbsIndex">[In] An unsigned integer containing the Absolute Index of the Item.</param>
      <param name="tscr">[In] An object of type VSTREESTATECHANGEREFRESH</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList">
      <summary>Provides information about symbols in a list that is part of an overall organization in the tree view (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" />) of the code browsing tools. A list is the basic unit of information with which the libraries communicate with the tools and is displayed as a set of peer nodes of a specific parent in the tree view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetDisplayData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA[])">
      <summary>Retrieves data to draw the requested tree list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the node of interest.</param>
      <param name="pData">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure containing the display data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetExpandable(System.UInt32,System.Int32@)">
      <summary>Specifies whether an item is expandable. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the node of interest.</param>
      <param name="pfExpandable">true if item is expandable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetExpandedList(System.UInt32,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@)">
      <summary>Expands a tree list node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the child node of the current tree list to be expanded.</param>
      <param name="pfCanRecurse">[out] Pointer to a flag indicating that the tree list can recurse.</param>
      <param name="pptlNode">[out] Pointer to the selected node's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetFlags(System.UInt32@)">
      <summary>Returns the attributes of the current tree list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFlags">[out] Pointer to a variable indicating attributes of the current tree list. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetItemCount(System.UInt32@)">
      <summary>Returns the number of items in the current tree list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Pointer to the count of the tree list items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetListChanges(System.UInt32@,Microsoft.VisualStudio.Shell.Interop.VSTREELISTITEMCHANGE[])">
      <summary>Returns changes that have occurred in a tree list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcChanges">[in, out] On input, the size of the <paramref name="prgListChanges" /> array. On output, pointer to a count of changes.</param>
      <param name="prgListChanges">[in] Pointer to an array that receives any changes that have been made to the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetText(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS,System.String@)">
      <summary>Returns a pointer to the text representations for the requested tree list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the zero based index of the item of interest.</param>
      <param name="tto">[in] Specifies the text type being requested. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS" /> enumeration.</param>
      <param name="ppszText">[out] Pointer to a text string from the specified tree list item. Implementers must allocate this string and keep the pointer valid as per the remarks below.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetTipText(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE,System.String@)">
      <summary>Returns a pointer to the tool tip text for the requested tree list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the node of interest.</param>
      <param name="eTipType">[in] Specifies the type of tool tip text. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE" /> enumeration.</param>
      <param name="ppszText">[out] Pointer to a text string containing the tree list item's tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.LocateExpandedList(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList,System.UInt32@)">
      <summary>Returns a pointer to an index number of the specified tree list</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ExpandedList">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> interface that specifies an expanded list.</param>
      <param name="iIndex">[out] Pointer to an integer containing the index of the specified tree list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.OnClose(Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS[])">
      <summary>Notifies the current tree list that it is being closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ptca">[out] Specifies to the tree view the action to take when closing this tree list. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.ToggleState(System.UInt32,System.UInt32@)">
      <summary>Tells the requested tree item to toggle its checked state if it has check boxes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the tree list item of interest.</param>
      <param name="ptscr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.UpdateCounter(System.UInt32@,System.UInt32@)">
      <summary>Returns the current change counter for the tree list, and is used to indicate that the list contents have changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCurUpdate">[out] Pointer to the update counter of the current tree list.</param>
      <param name="pgrfChanges">[out] Specifies changes that have occurred. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor">
      <summary>Exposes the shared menu editor to form designers. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorFactory" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.AddMenuItem(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.Shell.Interop.IVsMenuItem)">
      <summary>Adds a new menu item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMI">[in] The menu item to be added.</param>
      <param name="pIMIParent">[in] The parent menu item of the new menu item being added.</param>
      <param name="pIMIInsertAfter">[in] The location in the menu to place the new menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.DeleteMenuItem(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem)">
      <summary>Deletes the specified menu item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMI">[in] The menu item to delete.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.Filter(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Allows the Menu designer to process a few selected messages that are required to correctly position, paint, and activate the menus.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the window whose window procedure receives the message.</param>
      <param name="uMsg">[in] The message identifier.</param>
      <param name="wParam">[in] Additional information about the message. The exact meaning depends on the value of the <paramref name="uMsg" /> parameter. </param>
      <param name="lParam">[in] Additional information about the message. The exact meaning depends on the value of the <paramref name="uMsg" /> parameter.</param>
      <param name="plResult">[out] If this method succeeds, this parameter contains the destination window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.GetHeight(System.Int32@)">
      <summary>Can be used by the site to change the size of the host when the user wants to remove the menu. This allows the site an easy way to determine how much to decrease the size of the host.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piHeight">[out] The height of the menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.GetItemRect(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
      <summary>Called to obtain the bounding rectangle for a specific menu item (pmi != NULL) or the bounding rectangle for all currently displayed menu windows (pmi == NULL). </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMI">[in] The menu item that the bounding rectangle will encompass.</param>
      <param name="prc">[out] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.RECT" /> structure that defines the boundaries of the rectangle.</param>
      <param name="fForScrolling">[in] Indicates whether this method is getting an item rectangle for the purpose of scrolling it into view. If true, it is for the purpose of scrolling it into view. In this case, the Designer includes the items Popup rectangle and next item rectangle since these items may not yet be known by the Site, and thus there is no way to obtain their rectangles to make them visible.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.GetUIState(System.UInt32@)">
      <summary>Returns the current UI state of the Menu Editor, giving the site a mechanism to know if the Menu Editor has any UI operations in progress.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pstate">[out, retval] The current UI state of the Menu Editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.IsActive(System.Int32@)">
      <summary>Indicates whether the shared menu is displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfActive">[out, retval] true if the shared menu is displayed, or false if the shared menu is not displayed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.OnChange(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,System.Int32)">
      <summary>Must be called by IMenuEditorSite if any property known by <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor" /> changes on any menu item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMI">[in] The menu item on which the property changed.</param>
      <param name="propid">[in] The identifier of the property that changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.SelectionChange(System.IntPtr)">
      <summary>Called whenever the selection changes. If <paramref name="pIMI" /> is null, no menu item is selected. If it is not null, it points to the item to be selected. Only one item can be selected at a time from outside MenuDesigner. This method does not set focus to the item; see the SetFocus method for that behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMI">[in] The menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.SelectionChangeFocus(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem)">
      <summary>Same as <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.SelectionChange(System.IntPtr)" />, except this method also sets focus to the selected item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMI">[in] The menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Allows the edit control to catch keystrokes just like an ActiveX control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpmsg">[in] Pointer to an <see cref="T:System.Windows.Interop.MSG" /> structure that receives message information.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorFactory">
      <summary>Provides an instance of an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor" /> interface for use by form designers that want to use the shared menu editor. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsMenuEditor" /> (SID_SVsMenuEditor) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorFactory.CreateMenuEditor(Microsoft.VisualStudio.Shell.Interop.MEINIT[],Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor@)">
      <summary>Creates a new instance of a menu editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMEInit">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.MEINIT" /> structure that contains values for the menu editor initialization.</param>
      <param name="ppME">[out] The new instance of a menu editor.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorSite">
      <summary>Describes the site for an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor" /> instance. Provided by the environment and used by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorSite.CreateItem(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.Shell.Interop.IVsMenuItem@)">
      <summary>The host is responsible for giving the menu a unique name, and providing back to IVsMenuEditor a valid IVsMenuItem*. As in IVsMenuEditor::AddItem, both IMIParent and pIMIInsertAfter can be NULL.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMIParent">[In] A pointer to an object of type IVsMenuItem representing the parent menu item.</param>
      <param name="pIMIInsertAfter">[In] A pointer to an object of type IVsMenuItem representing the menu item after which the new items will be inserted.</param>
      <param name="ppIMINew">[Out] A pointer to an object of type IVsMenuItem representing the new menu item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorSite.DeleteItem(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem)">
      <summary>Deletes the given item. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.  If it fails, it returns an error code.</returns>
      <param name="pIMI">[In] A pointer to an object of type IVsMenuItem representing the menu item to delete.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorSite.MoveItems(Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.Shell.Interop.IVsMenuItem,Microsoft.VisualStudio.Shell.Interop.IVsMenuItem)">
      <summary>Moves one or more menu items to a new location. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIMIFirst">[In] A pointer to an object of type IVsMenuItem, representing the First Menu Item to move.</param>
      <param name="pIMILast">[In] A pointer to an object of type IVsMenuItem, representing the Last Menu Item to move.</param>
      <param name="pIMIParent">[In] A pointer to an object of type IVsMenuItem, containing information on the Parent Item to move</param>
      <param name="pIMIInsertAfter">[In] A pointer to an object of type IVsMenuItem, containing information on the Menu Item under which the other menu item(s) will be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorSite.SelectionChange(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSMESELCMD)">
      <summary>Called when the selection changes.</summary>
      <returns>SelectionChange() takes an array from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuItem" />, but supports receiving this only if the sel command is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD.SELCMD_SELCHANGE" />, since you cannot view code or properties for multiple items.If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIMI">[In] A pointer to a pointer to an object of type IVsMenuItem representing the item to watch for a selection change.</param>
      <param name="SelCmd">[In] An object of type VSMESELCMD.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuItem">
      <summary>Enables form designers to use the shared menu editor. Implemented by the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuItem.IMIGetExtraProps(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Gets menu item properties not directly handled by the menu editor (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor" />).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pstm">[in] Pointer to a stream (<see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> interface).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuItem.IMIGetProp(System.Int32,System.Object@)">
      <summary>Gets a standard menu item property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] The property. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID" /> Enumeration.</param>
      <param name="pvar">[out] Pointer to a VARIANT containing the property value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuItem.IMISetExtraProps(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Sets menu item properties not directly handled by the menu editor (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor" />).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pstm">[in] Pointer to a stream (<see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> interface).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuItem.IMISetProp(System.Int32,System.Object)">
      <summary>Sets a standard menu item property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] The property. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID" /> Enumeration.</param>
      <param name="var">[in] Pointer to a VARIANT containing the property value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection">
      <summary>Enables VSPackages to receive notification of selection events and to get information about the current project hierarchy, item, element value, and command UI context.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.AdviseSelectionEvents(Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents,System.UInt32@)">
      <summary>Registers a VSPackage for selection event notification.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents" /> interface of the VSPackage registering for selection event notification.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle representing the completed registration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCmdUIContextCookie(System.Guid@,System.UInt32@)">
      <summary>Registers a command UI context GUID and returns cookie value.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCmdUI">[in] GUID representing a specific command UI context. Command UI context GUID values are defined by the environment and by VSPackages to meet specific needs. See the Remarks section below for a list of command UI GUIDs defined by the environment.</param>
      <param name="pdwCmdUICookie">[out] Pointer to a DWORD representing the GUID value in <paramref name="rguidCmdUI" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)">
      <summary>Returns the value for a particular element.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="elementid">[in] Identifier of the current element. For valid <paramref name="elementid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID" />.</param>
      <param name="pvarValue">[out] Pointer to data associated with the element identified by <paramref name="elementid" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentSelection(System.IntPtr@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@,System.IntPtr@)">
      <summary>Returns the current project hierarchy, project item, and selection container for the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the current project hierarchy if the selection belongs to a single hierarchy. If the selection belongs to multiple hierarchies, <paramref name="ppHier" /> is set to null.</param>
      <param name="pitemid">[out] Pointer to the identifier for the current project item. If <paramref name="pitemid" /> is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />, the current selection involves multiple items. These items can be accessed using the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface pointed to by <paramref name="ppMIS" />.</param>
      <param name="ppMIS">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface to be used to access a multiple selection.</param>
      <param name="ppSC">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface to be used to access data for the Properties window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.IsCmdUIContextActive(System.UInt32,System.Int32@)">
      <summary>Determines whether a specific command UI context is active.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCmdUICookie">[in] DWORD representation of the GUID identifying the command UI context passed in as the <paramref name="rguidCmdUI" /> parameter in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCmdUIContextCookie(System.Guid@,System.UInt32@)" />.</param>
      <param name="pfActive">[out] Flag set to true if the command UI context identified by <paramref name="dwCmdUICookie" /> is active and false otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.SetCmdUIContext(System.UInt32,System.Int32)">
      <summary>Sets the state of the command UI context to active or inactive.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCmdUICookie">[in] DWORD representation of the GUID identifying the command UI context passed as the <paramref name="rguidCmdUI" /> parameter in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCmdUIContextCookie(System.Guid@,System.UInt32@)" />.</param>
      <param name="fActive">[out] Flag that is set to true if the command UI context should be set to active and false if it should be set to inactive.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.UnadviseSelectionEvents(System.UInt32)">
      <summary>Cancels a registration for selection event notification.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle representing the registration to be cancelled. VSPackages that register for notification receive an abstract handle representing their registration when they call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.AdviseSelectionEvents(Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents,System.UInt32@)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext">
      <summary>Creates a new context or subcontext bag.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.AdviseContextItemEvents(Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemEvents,System.UInt32@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pEvents">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.CreateEmptyContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
      <summary>Creates a new context or subcontext bag on the context provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppContext">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> interface representing the new context or subcontext bag.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.FindTargetItems(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection@,System.Int32@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pszTargetAttr">Do not use.</param>
      <param name="pszTargetAttrValue">Do not use.</param>
      <param name="pplist">Do not use.</param>
      <param name="pfF1Kwd">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.get_ApplicationContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="ppContext">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.GetContextItems(Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pplist">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.GetF1Kwd(System.String@,System.Int32@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pbstrKwd">Do not use.</param>
      <param name="fF1Kwd">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.GetNextCtxBag(System.String@,System.String@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pbstrAttrName">Do not use.</param>
      <param name="pbstrAttrVal">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.GetNextCtxBagAttr(System.String@,System.String@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pbstrAttrName">Do not use.</param>
      <param name="pbstrAttrVal">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.GetPrevAttrCache(System.IntPtr@,System.IntPtr@,System.Int32@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pbstrCacheArray">Do not use.</param>
      <param name="pnCurrNumStored">Do not use.</param>
      <param name="pnMaxNumStored">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.IsF1Lookup(System.Int32@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="fF1Lookup">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.IsIdleAvailable(System.Int32@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pfIdleAvail">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.put_ApplicationContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pContext">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.RegisterItemProvider(Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider,System.UInt32@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pProvider">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.ResetNextCtxBagAttr">
      <summary>Method information is not provided. Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="psp">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.SetTopicTypeFilter(Microsoft.VisualStudio.Shell.Interop.IVsHelpAttributeList)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pTopicTypeList">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.UnadviseContextItemEvent(System.UInt32)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="dwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.UnregisterItemProvider(System.UInt32)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="dwCookie">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect">
      <summary>Provides the environment with access to multiple selections.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect.GetSelectedItems(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION[])">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface pointer and item identifier for selected items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfGSI">[in] Flag providing information about how the selected items should be returned. For valid <paramref name="grfGSI" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSGSIFLAGS" />.</param>
      <param name="cItems">[in] Number of items that are selected.</param>
      <param name="rgItemSel">[out, size_is(cItems)] Array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> structures which contain an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> pointer and item identifier for each selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect.GetSelectionInfo(System.UInt32@,System.Int32@)">
      <summary>Returns a flag that indicates whether or not the selected items belong to one or more hierarchies and a count of the number of selected items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcItems">[out] Pointer to a count of the number of selected items.</param>
      <param name="pfSingleHierarchy">[out] Pointer to a flag that is set to true if the selected items are within a single hierarchy and false if the selected items are across multiple hierarchies.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView">
      <summary>Supports multiple view tabs on the same view, such as the HTML and Design tabs on the HTML editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.ActivateLogicalView(System.Guid@)">
      <summary>Identifies which view is activated when the editor window is instantiated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidLogicalView">[in] GUID identifying the logical view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.GetActiveLogicalView(System.Guid@)">
      <summary>Determines which logical view is active.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLogicalView">[out] GUID identifying the active logical view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.IsLogicalViewActive(System.Guid@,System.Int32@)">
      <summary>Determines whether the specified logical view is active.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidLogicalView">[in] GUID identifying the logical view.</param>
      <param name="pIsActive">[out, retval] If true, then the specified logical view is the active view.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsNonLocalProject">
      <summary>Ensures a local copy of a non-local project exists. Projects that use non-local projects can get the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsNonLocalProject.EnsureLocalCopy(System.UInt32)">
      <summary>Verifies that there is a local copy of the file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="itemid">[in] The item id (VSITEMID) of the file. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsNonSolutionProjectFactory">
      <summary>Indicates the projects created by the factory are not part of a solution.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjBrowser">
      <summary>Implemented by the environment. Used by VsPackages that want to manipulate Object Browser. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjBrowser.NavigateTo(Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO[],System.UInt32)">
      <summary>Navigates to object described by <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pObjInfo">[in] The object to which to navigate.</param>
      <param name="dwReserved">[in] Reserved. Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2">
      <summary>Provides descriptive text about an object for the object browser. The environment provides this interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2.AddDescriptionText(System.String,Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION,Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO[])">
      <summary>Adds descriptive text for an object browser object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pText">[in] Pointer to a string containing the text to add.</param>
      <param name="obdSect">[in] Value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION" /> enumeration indicating the type of the object or description.</param>
      <param name="pHyperJump">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO" /> structure containing information about the object being described.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2.ClearDescriptionText">
      <summary>Clears the description descriptive text for an object in the browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList">
      <summary>Provides information about symbols in a list that is part of an overall organization in the tree view (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" />) of the code browsing tools. IVsObjectList is an extension of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> and provides additional methods that are pertinent to symbols in the project. Provides information about symbols in a list that is part of an overall organization in the tree view (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" />) of the code browsing tools. IVsObjectList is an extension of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> and provides additional methods that are pertinent to symbols in the project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CanDelete(System.UInt32,System.Int32@)">
      <summary>Returns a flag indicating if the given list item can be deleted.</summary>
      <returns>Returns true if it can delete the item index, false if it cannot.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pfOK">[out] Pointer to a flag indicating whether the item can be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CanGoToSource(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE,System.Int32@)">
      <summary>Returns a flag indicating if navigation to the given list item's source is supported.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="SrcType">[in] Specifies the source type. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE" /> enumeration.</param>
      <param name="pfOK">[out] Pointer to a flag indicating whether navigation is supported.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CanRename(System.UInt32,System.String,System.Int32@)">
      <summary>Returns a flag indicating if the given list item can be renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pszNewName">[in] Pointer to a null terminated string containing the new name.</param>
      <param name="pfOK">[out] Pointer to a flag indicating whether an item can be renamed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CountSourceItems(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.UInt32@)">
      <summary>Returns the hierarchy and the number of ItemIDs corresponding to source files for the given list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="ppHier">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="pitemid">[out] Specifies the itemid of an item within the hierarchy. Values are described in VSITEMID.</param>
      <param name="pcItems">[out] Pointer to the count of items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoDelete(System.UInt32,System.UInt32)">
      <summary>Asks the given list item to do the delete operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item to delete.</param>
      <param name="grfFlags">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoDragDrop(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32@)">
      <summary>Asks the given list item to handle a drag-and-drop operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pDataObject">[in] Pointer to an <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> being dropped.</param>
      <param name="grfKeyState">[in] Current state of the keyboard and the mouse modifier keys.</param>
      <param name="pdwEffect">[in, out] On input, the effect being requested. On output, the effect that your object list allows.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoRename(System.UInt32,System.String,System.UInt32)">
      <summary>Asks the given list item to do the rename operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pszNewName">[in] Pointer to a null terminated string containing the new name.</param>
      <param name="grfFlags">[in] Flag indicating that Index is part of a multi-select. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJOPFLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.EnumClipboardFormats(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT[],System.UInt32[])">
      <summary>Asks the given list item to enumerate its supported clipboard formats.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="grfFlags">[in] Specifies multi-selection. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJCFFLAGS" /> enumeration.</param>
      <param name="celt">[in] Specifies the element count of <paramref name="rgcfFormats" />.</param>
      <param name="rgcfFormats">[in, out] Specifies an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT" /> structures defining the formats supported.</param>
      <param name="pcActual">[out] Pointer to a count of formats in the <paramref name="rgcfformats" /> array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.FillDescription(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2)">
      <summary>Asks the list item to provide description text to be used in the object browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="grfOptions">[in] Specifies description options. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJDESCOPTIONS" /> enumeration</param>
      <param name="pobDesc">[in] Specifies an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription3" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetBrowseObject(System.UInt32,System.Object@)">
      <summary>Returns a pointer to the property browse <see cref="F:System.Runtime.InteropServices.UnmanagedType.IDispatch" /> for the given list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="ppdispBrowseObj">[out] Pointer to an <see cref="F:System.Runtime.InteropServices.UnmanagedType.IDispatch" /> object that is used to populate the Properties window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetCapabilities(System.UInt32@)">
      <summary>Returns an object list's capabilities.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCapabilities">[out] Specifies an object list's capabilities. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetCategoryField(System.UInt32,Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY,System.UInt32@)">
      <summary>Returns the value for the specified category for the given list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="Category">[in] Specifies the category of interest. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY" /> enumeration.</param>
      <param name="pField">[out] Pointer to a variable holding the value returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetClipboardFormat(System.UInt32,System.UInt32,Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Asks the given list item to renders a specific clipboard format that it supports.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="grfFlags">[in] Specifies multi-selection. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJCFFLAGS" /> enumeration.</param>
      <param name="pFormatetc">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure containing clipboard format information.</param>
      <param name="pMedium">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure indicating the data transfer medium.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetContextMenu(System.UInt32,System.Guid@,System.Int32@,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
      <summary>Allows the list to provide a different context menu and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> for the given list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pclsidActive">[out] Specifies the CLSID of the menu group containing your menu.</param>
      <param name="pnMenuId">[out] Pointer to an integer containing the menu id.</param>
      <param name="ppCmdTrgtActive">[out] Pointer to the list's or the library's IOleCommandTarget interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetDisplayData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA[])">
      <summary>Retrieves data to draw the requested tree list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the node of interest.</param>
      <param name="pData">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure containing the display data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetExpandable(System.UInt32,System.Int32@)">
      <summary>Method information not provided. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="index">Do not use.</param>
      <param name="pfExpandable">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetExpandable2(System.UInt32,System.UInt32,System.Int32@)">
      <summary>Returns a flag indicating whether the given list item is expandable.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="ListTypeExcluded">[in] Specifies the list types to be excluded. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE" /> enumeration. This is primarily to remove <see cref="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_MEMBERS" /> from consideration in object browser, where they are shown in a separate pane.</param>
      <param name="pfExpandable">[out] Pointer to a flag indicating expandability.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetExpandedList(System.UInt32,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@)">
      <summary>Expands a tree list node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the child node of the current tree list to be expanded.</param>
      <param name="pfCanRecurse">[out] Pointer to a flag indicating that the tree list can recurse.</param>
      <param name="pptlNode">[out] Pointer to the selected node's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetExtendedClipboardVariant(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT[],System.Object@)">
      <summary>Asks the given list item to renders a specific clipboard format as a variant.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="grfFlags">[in] Specifies multi-selection. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJCFFLAGS" /> enumeration.</param>
      <param name="pcfFormat">[in] Specifies a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT" /> structure defining the format requested.</param>
      <param name="pvarFormat">[out] Specifies a pointer to a variant where you render the data. The environment will free the variant when it is done with it.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetFlags(System.UInt32@)">
      <summary>Returns the attributes of the current tree list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFlags">[out] Pointer to a variable indicating attributes of the current tree list. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS" /> enumeration</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetItemCount(System.UInt32@)">
      <summary>Returns the number of items in the current tree list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Pointer to the count of the tree list items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetList(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA[],Microsoft.VisualStudio.Shell.Interop.IVsObjectList@)">
      <summary>Returns a child <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList" /> for the specified category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="ListType">[in] Specifies the type of list being requested. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE" /> enumeration.</param>
      <param name="flags">[in] Specifies the flags that control the request for object list information. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS" /> enumeration.</param>
      <param name="pobSrch">[in] Unused. Should be ignored.</param>
      <param name="pplist">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList" /> interface of the returned child list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetListChanges(System.UInt32@,Microsoft.VisualStudio.Shell.Interop.VSTREELISTITEMCHANGE[])">
      <summary>Returns changes that have occurred in a tree list. For future use only. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcChanges">[in, out] On input, the size of the <paramref name="prgListChanges" /> array. On output, pointer to a count of changes.</param>
      <param name="prgListChanges">[in] Pointer to an array that receives any changes that have been made to the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetMultipleSourceItems(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION[])">
      <summary>Returns the ItemID corresponding to source files for the given list item if more than one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="grfGSI">[in] Flag providing information about how the selected items should be returned. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSGSIFLAGS" /> enumeration.</param>
      <param name="cItems">[in] The number of items returned in <paramref name="rgItemSel" />.</param>
      <param name="rgItemSel">[out] Array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> structures that contain an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> pointer and item identifier for each selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetNavigationInfo(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2[])">
      <summary>Fills the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2" /> structure for the given list item allowing the list to navigate back to it through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.LocateNavigationInfo(Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2[],Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE[],System.Int32,System.Int32@,System.UInt32[])" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pobNav">[in, out] Specifies navigation information. Values are placed in a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetSourceContext(System.UInt32,System.IntPtr,System.UInt32@)">
      <summary>Returns a source filename and line number for the given list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pszFilename">[out] Pointer to a null terminated string containing the file name. You must allocate this buffer and free it on the list's final Release, but you can reuse this buffer for multiple calls to this method.</param>
      <param name="pulLineNum">[out] Specifies a line number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetText(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS,System.String@)">
      <summary>Returns a pointer to the text representations for the requested tree list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the zero based index of the item of interest.</param>
      <param name="tto">[in] Specifies the text type being requested. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS" /> enumeration.</param>
      <param name="ppszText">[out] Pointer to a text string from the specified tree list item. Implementers must allocate this string and keep the pointer valid as per the remarks below.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetTipText(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE,System.String@)">
      <summary>Returns a pointer to the tool tip text for the requested tree list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the node of interest.</param>
      <param name="eTipType">[in] Specifies the type of tool tip text. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE" /> enumeration.</param>
      <param name="ppszText">[out] Pointer to a text string containing the tree list item's tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetUserContext(System.UInt32,System.Object@)">
      <summary>Returns the user context object for the given list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="ppunkUserCtx">[out] Pointer to a context bag returned as an IUnknown interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GoToSource(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE)">
      <summary>Navigates to the source for the given list item.</summary>
      <returns>This returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> on success or an hr error (along with rich error information if possible) if the navigation failed.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="SrcType">[in] Specifies the source type. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.LocateExpandedList(Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList,System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ExpandedList">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList" /> interface that specifies an expanded list.</param>
      <param name="iIndex">[out] Pointer to an integer containing the index of the specified tree list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.LocateNavigationInfo(Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2[],Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE[],System.Int32,System.Int32@,System.UInt32[])">
      <summary>Returns the index of the list item corresponding to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pobNav">[in] Specifies navigation information. Values are in a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2" /> structure.</param>
      <param name="pobName">[in] Specifies the name of the node of interest. Values are in a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE" /> structure.</param>
      <param name="fDontUpdate">[in] Flag indicating do not update.</param>
      <param name="pfMatchedName">[out] Pointer to a flag indicating a matched name was found.</param>
      <param name="pIndex">[out] Pointer to the index of the located item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.OnClose(Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS[])">
      <summary>Notifies the current tree list that it is being closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ptca">[out] Specifies to the tree view the action to take when closing this tree list. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.QueryDragDrop(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32@)">
      <summary>Returns a flag indicating whether the given list item supports a drag-and-drop operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
      <param name="pDataObject">[in] Pointer to an <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> being dropped.</param>
      <param name="grfKeyState">[in] Current state of the keyboard and the mouse modifier keys.</param>
      <param name="pdwEffect">[in, out] On input, the effect being requested. On output, the effect that your object list allows.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.ShowHelp(System.UInt32)">
      <summary>Allows the list to display help for the given list item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the list item of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.ToggleState(System.UInt32,System.UInt32@)">
      <summary>Tells the requested tree item to toggle its checked state if it has check boxes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Specifies the index of the tree list item of interest.</param>
      <param name="ptscr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREESTATECHANGEREFRESH" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.UpdateCounter(System.UInt32@,System.UInt32@)">
      <summary>Returns the current change counter for the tree list, and is used to indicate that the list contents have changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCurUpdate">[out] Pointer to the update counter of the current tree list.</param>
      <param name="pgrfChanges">[out] Specifies changes that have occurred. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner">
      <summary>Provides information about a list of objects as well as manipulating the list. Used in the Search pane. The environment implements the interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.CalculateExtendedText(Microsoft.VisualStudio.Shell.Interop.IVsObjectList,System.UInt32,System.String)">
      <summary>Finds the extended text (fully qualified name) for an object in a list of objects.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pList">[in] Pointer to the list of objects, an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList" /> interface.</param>
      <param name="iItem">[in] Index of the object within the object list.</param>
      <param name="strSeperator">[in] Separator to use in generating the string containing the extended name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.ClearCachedData(System.UInt32)">
      <summary>Clears cached object list data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfDataKinds">[in] A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNERCACHEDDATAKINDS" /> enumeration indicating type of data to clear from the cache.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.ClearListFilters(System.UInt32)">
      <summary>Sets filters on the object list to their default values.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Unused.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.ClearSearchHit">
      <summary>Clears the flag indicate a search found an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.DoWaitUI(System.Int32)">
      <summary>Displays the wait cursor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fStart">[in] Boolean. If true, displays the wait cursor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.GetExtendedText(System.IntPtr)">
      <summary>Retrieves the extended text (fully qualified object names) produced by the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.CalculateExtendedText(Microsoft.VisualStudio.Shell.Interop.IVsObjectList,System.UInt32,System.String)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszExtText">[out] String containing the fully qualified object names created by the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.CalculateExtendedText(Microsoft.VisualStudio.Shell.Interop.IVsObjectList,System.UInt32,System.String)" />. Items are separated by the separator specified in that call.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.GetOptions(System.UInt32@)">
      <summary>Returns options set for the object list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptions">[out] Bit flags formed by combining values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJLISTOWNEROTPIONS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.HaveSearchHit">
      <summary>Indicates whether or not a search has found something.</summary>
      <returns>If the search found something, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.IsVisible">
      <summary>Indicates whether or not the object list is visible.</summary>
      <returns>If the object list is visible, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.ListLoadRefused">
      <summary>Sets a flag to prevent loading of the object list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.NotifySearchHit">
      <summary>Sets a flag to indicate a search has found an object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner.UpdateDisplayData(Microsoft.VisualStudio.Shell.Interop.IVsObjectList,System.UInt32,System.Int32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA[])">
      <summary>Updates the display data of an object in the object list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pList">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList" /> interface representing the list of object.</param>
      <param name="iItem">[in] Index of the item in the list to update.</param>
      <param name="fPackageList">[in] Boolean. Set to true if updating only package information.</param>
      <param name="dwReserved">[in] Unused.</param>
      <param name="pData">[in, out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA" /> structure to hold the updated display information.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectManager">
      <summary>This interface is used by a package to register and un-register its library manager with the object manager. Obtain an IVsObjectManager interface by calling QueryService for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsObjectManager" /> service. This interface is used by a package to register and un-register its library manager with the object manager. Obtain an IVsObjectManager interface by calling QueryService for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsObjectManager" /> service. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectManager.EnumLibMgrs(System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr[])">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pCount">Do not use.</param>
      <param name="rgpLibMgrs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectManager.GetList(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr,Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA[],Microsoft.VisualStudio.Shell.Interop.IVsObjectList@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="ListType">Do not use.</param>
      <param name="flags">Do not use.</param>
      <param name="pLibMgr">Do not use.</param>
      <param name="pobSrch">Do not use.</param>
      <param name="pplist">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectManager.RefreshLists">
      <summary>Method information is not provided. Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectManager.RegisterLibMgr(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsLibraryMgr,System.UInt32@)">
      <summary>Registers a library with the environment's object manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidLibMgr">[in] GUID of a library manager.</param>
      <param name="pLibMgr">[in] Pointer to a library manager.</param>
      <param name="pdwCookie">[out] Abstract handle identifying the newly registered library manager.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectManager.UnregisterLibMgr(System.UInt32)">
      <summary>Unregisters a library manager with the environment's object manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle used to un-register the library manager</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectManagerEvents">
      <summary>Represents object manager events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectManagerEvents.OnAfterSubsetChange"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectManagerEvents.OnBeforeSubsetChange"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectSearch">
      <summary>Performs a search for a specified object. The environment implements the interface. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsObjectSearch" /> (SID_SVsObjectSearch) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectSearch.Find(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA[],Microsoft.VisualStudio.Shell.Interop.IVsObjectList@)">
      <summary>Searches for an object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="flags">[in] Bit flags determining how to display the results. Constructed using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS" /> enumeration.</param>
      <param name="pobSrch">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA" /> structure defining the name and other elements of the search.</param>
      <param name="pplist">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectList" /> interface providing access to the objects meeting the search criteria.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectSearchPane">
      <summary>Searches for an object in a referenced library or assembly. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectSearchPane.SetResultsList(Microsoft.VisualStudio.Shell.Interop.IVsLibrary,Microsoft.VisualStudio.Shell.Interop.IVsObjectList,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsObjectListOwner@)">
      <summary>Searches a library and may, depending on the options chosen, display the results in the Results pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLibrary">[in] Pointer to the library (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary" />) to search.</param>
      <param name="pList">[in] Pointer to the IVsObjectList interface to use for the search results.</param>
      <param name="flags">[in] Bit flags determining display of the results. Constructed using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS" /> enumeration.</param>
      <param name="ppListOwner">[out] Pointer to the IVsObjectListOwner interface of the results. Released by caller.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsOutput">
      <summary>Provides information about the outputs of a configuration.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput.get_CanonicalName(System.String@)">
      <summary>Returns the canonical name of an output item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the output item's canonical name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput.get_DeploySourceURL(System.String@)">
      <summary>Returns the web location of an output item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDeploySourceURL">[out] Pointer to the output item's web location in URL format.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput.get_DisplayName(System.String@)">
      <summary>Returns the display name of an output item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] Pointer to the display name of the output item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput.get_Type(System.Guid@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pguidType">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsOutput2">
      <summary>Provides information about the outputs of a configuration.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput2.get_CanonicalName(System.String@)">
      <summary>Returns the canonical name of an output item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the output item's canonical name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput2.get_DeploySourceURL(System.String@)">
      <summary>Returns the web location of an output item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDeploySourceURL">[out] Pointer to the output item's web location in URL format.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput2.get_DisplayName(System.String@)">
      <summary>Returns the display name of an output item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] Pointer to the display name of the output item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput2.get_Property(System.String,System.Object@)">
      <summary>Returns a property of an output item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szProperty">[in] Pointer to the property to be returned.</param>
      <param name="pvar">[out] Pointer to a VARIANT that holds the value of the property identified by <paramref name="szProperty" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput2.get_RootRelativeURL(System.String@)">
      <summary>Returns an output item's path relative to the application directory when installed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRelativePath">[out] Pointer to the canonical name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutput2.get_Type(System.Guid@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pguidType">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup">
      <summary>Allows projects to group outputs according to usage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup.get_CanonicalName(System.String@)">
      <summary>Returns the canonical name of the output group.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the canonical name of the output group.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup.get_DeployDependencies(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency[],System.UInt32[])">
      <summary>Provides access to one or more deployment dependencies.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of requested deployment dependencies.</param>
      <param name="rgpdpd">[in, out] On input, pointer to an interface array of size <paramref name="celt" />. On output, pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency" /> interface array that contains either the number of interfaces specified by <paramref name="celt" /> or the number available.</param>
      <param name="pcActual">[out, optional] Pointer to the actual number of dependencies returned in <paramref name="pgpdpd" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup.get_Description(System.String@)">
      <summary>Returns the description of an output group.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDescription">[out] Pointer to the description of an output group.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup.get_DisplayName(System.String@)">
      <summary>Returns the display name of the output group.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] Pointer to the display name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup.get_KeyOutput(System.String@)">
      <summary>Returns the canonical name of the key output group.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the canonical name of the key output group.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup.get_Outputs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutput2[],System.UInt32[])">
      <summary>Returns an array of pointers to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutput2" /> interfaces providing access to a configuration's output items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of output items requested.</param>
      <param name="rgpcfg">[in, out] On input, a pointer to an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutput2" /> interfaces for the requested output items. On output, an array containing the number of entries specified by <paramref name="celt" />.</param>
      <param name="pcActual">[out, optional] Pointer to the number of actual outputs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2@)">
      <summary>Returns a pointer to the configuration's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2" /> interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsProjectCfg2">[out] Back pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2" /> interface for the requested project configuration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow">
      <summary>Manages and controls functions specific to the Output tool window that has multiple panes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow.CreatePane(System.Guid@,System.String,System.Int32,System.Int32)">
      <summary>Creates an output window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPane">[in] GUID of the Output window pane.</param>
      <param name="pszPaneName">[in] Name of the output window pane.</param>
      <param name="fInitVisible">[in] If true, the output window pane is initially visible</param>
      <param name="fClearWithSolution">[in] If true, the output window pane is cleared when the solution closes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow.DeletePane(System.Guid@)">
      <summary>Deletes an output window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPane">[in] GUID of the window pane to delete.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow.GetPane(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane@)">
      <summary>Returns an Output window pane, given its identifying GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPane">[in] Identifies the Output window pane.</param>
      <param name="ppPane">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> of the requested Output window pane. Returns null if the requested pane does not exist.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane">
      <summary>Allows a VSPackage to manipulate a particular Output window pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.Activate">
      <summary>Shows and activates the Output window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.Clear">
      <summary>Removes all text from the Output window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.FlushToTaskList">
      <summary>Causes any output messages that were added by means of a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.OutputTaskItemString(System.String,Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY,System.String,System.Int32,System.String,System.UInt32,System.String)" /> method to be added as tasks to the task list tool window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.GetName(System.String@)">
      <summary>Returns the name of the window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrPaneName">Name of the window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.Hide">
      <summary>Hides the Output window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.OutputString(System.String)">
      <summary>Writes text to the Output window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOutputString">[in] Text to be appended to the Output window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.OutputStringThreadSafe(System.String)">
      <summary>Thread safe method to write text to the Output window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOutputString">[in] Text to be appended to the Output window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.OutputTaskItemString(System.String,Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY,System.String,System.Int32,System.String,System.UInt32,System.String)">
      <summary>Adds a string to the Output window and a corresponding item to the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOutputString">[in] Output string of the task item.</param>
      <param name="nPriority">[in] Priority of the task item whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" /> enumeration.</param>
      <param name="nCategory">[in] Category of the task item whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> enumeration.</param>
      <param name="pszSubcategory">[in] Subcategory of the task.</param>
      <param name="nBitmap">[in] Bitmap of the task item whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap" /> enumeration.</param>
      <param name="pszFilename">[in] Name of the file containing <paramref name="pszOutputString" />.</param>
      <param name="nLineNum">[in] Line number within <paramref name="pszFilename" /> of <paramref name="pszOutputString" />.</param>
      <param name="pszTaskItemText">[in] Text of the task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.OutputTaskItemStringEx(System.String,Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY,System.String,System.Int32,System.String,System.UInt32,System.String,System.String)">
      <summary>Adds a string to the Output window and a corresponding item to the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOutputString">[in] Output string of the task item.</param>
      <param name="nPriority">[in] Priority of the task item whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" /> enumeration.</param>
      <param name="nCategory">[in] Category of the task item whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> enumeration.</param>
      <param name="pszSubcategory">[in] Subcategory of the task.</param>
      <param name="nBitmap">[in] Bitmap of the task item whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap" /> enumeration.</param>
      <param name="pszFilename">[in] Name of the file containing <paramref name="pszOutputString" />.</param>
      <param name="nLineNum">[in] Line number within <paramref name="pszFilename" /> of <paramref name="pszOutputString" />.</param>
      <param name="pszTaskItemText">[in] Text of the task item.</param>
      <param name="pszLookupKwd"> [in] Lookup keyword for F1 functionality.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane.SetName(System.String)">
      <summary>Changes the existing name of the window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPaneName">[in] New name of the window pane.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsOwnedProjectFactory">
      <summary>Used by projects that support being aggregated by an Owner to persist the OwnerKey in their project file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOwnedProjectFactory.InitializeForOwner(System.String,System.String,System.String,System.UInt32,System.Guid@,System.UInt32,System.IntPtr@,System.Int32@)">
      <summary>Called by the project owner to tell the owned project to do all its initialization.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Pointer to a null terminated string containing the filename.</param>
      <param name="pszLocation">[in] Pointer to a null terminated string containing the location.</param>
      <param name="pszName">[in] Pointer to a null terminated string containing the name.</param>
      <param name="grfCreateFlags">[in] Specifies the create flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enum.</param>
      <param name="iidProject">[in] Specifies <paramref name="iidProject" />. </param>
      <param name="cookie">[in] Cookie identifying the owned project.</param>
      <param name="ppvProject">[out] Specifies <paramref name="ppvProject" />.</param>
      <param name="pfCanceled">[out] Pointer to a flag indicating canceled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOwnedProjectFactory.PreCreateForOwner(System.Object,System.Object@,System.UInt32@)">
      <summary>Gives the owned project a chance to create an aggregated project object based on the input controlling IUnknown (<paramref name="pUnkOwner" />).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkOwner">[in] Pointer to an IUnknown owner object.</param>
      <param name="ppUnkInner">[out] Pointer to a pointer to an IUnknown inner object.</param>
      <param name="pCookie">[out] Pointer to a cookie object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage">
      <summary>Initializes a VSPackage in the environment and makes its services available to the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.Close">
      <summary>Closes the VSPackage, releases cached interface pointers, and unadvises event sinks.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.CreateTool(System.Guid@)">
      <summary>Enables the environment to create on-demand tool windows that are implemented by VSPackages.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPersistenceSlot">[in] Unique identifier of the Tool window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetAutomationObject(System.String,System.Object@)">
      <summary>Enables a VSPackage to participate in the DTE automation object model.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszPropName">[in] Pointer to a null terminated string containing the prop name.</param>
      <param name="ppDisp">[out] Pointer to the IDispatch interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetPropertyPage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[])">
      <summary>Proffers access to the Tools menu Options and the property pages of the Customize Toolbox dialog boxes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPage">[in] Unique identifier of the requested property page.</param>
      <param name="ppage">[in, out] Pointer to the property page whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.QueryClose(System.Int32@)">
      <summary>Enables a VSPackage that requires user intervention to abort the shutdown process.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCanClose">[out] Flag indicating whether the VSPackage can close. Is set to true if the VSPackage can close.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.ResetDefaults(System.UInt32)">
      <summary>Resets Toolbox defaults.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes a VSPackage with a back pointer to the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> Interface through which the VSPackage can query for services.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPackageDynamicToolOwner">
      <summary>Enables a package to show or hide its tool windows dynamically. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SIVsPackageDynamicToolOwner" /> (SID_SVsPackageDynamicToolOwner) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackageDynamicToolOwner.QueryShowTool(System.Guid@,System.Int32@)">
      <summary>Allows the package to control whether the tool window should be shown or hidden. This method is called by the shell when the user switches to a different window view or context, for example Design, Debugging, Full Screen, etc. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPersistenceSlot">[in] The GUID of the window.</param>
      <param name="pfShowTool">[out] true to show the window, otherwise false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsParentHierarchy">
      <summary>Unsupported interface. Do not use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParentHierarchy.ExtendsBrowseObjects(Microsoft.VisualStudio.Shell.Interop.VSEXTENDSHIERARCHY[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="peExtends">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParentHierarchy.GetBrowseExtender(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Object@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pHierarchyChild">[in]</param>
      <param name="ppDispatchExtension">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsParentProject">
      <summary>Allows nested projects to be opened and closed in the proper sequence with the build of the solution hierarchy by the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParentProject.CloseChildren">
      <summary>Implemented to close nested projects under a parent project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParentProject.OpenChildren">
      <summary>Implemented to open nested projects under a parent project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine">
      <summary>Parses command line arguments for implementers of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsParseCommandLine" /> (SID_SVsParseCommandLine) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.EvaluateSwitches(System.String)">
      <summary>Evaluates command line switches based on switch definitions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szSwitchDefs">[in] String containing the switch definitions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetACParam(System.Int32@,System.Int32@,System.Int32@,System.String@)">
      <summary>Retrieves an auto completion command line item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piACIndex">[out] Pointer to an index indicating whether or not there is an auto completion item. Set to PCL_AUTO_COMMANDS if there are auto completion items.</param>
      <param name="piACStart">[out] Pointer to the beginning of the auto completion item in the command line buffer.</param>
      <param name="pcchACLength">[out] Pointer to the length of the auto completion item.</param>
      <param name="pbstrACParam">[out] Pointer to a string containing the current auto completion parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetCommand(System.String@)">
      <summary>Gets the current command.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCommand">[out] Pointer to a string containing the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetCommandTail(System.String@)">
      <summary>Returns the tail of the command line—characters remaining after the defined switches and arguments.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCommandTail">[out] Pointer to a string containing the tail of the command line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetParam(System.Int32,System.String@)">
      <summary>Returns a parameter by index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Index for the parameter to return.</param>
      <param name="pbstrParam">[out] Pointer to a string containing the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetParamCount(System.Int32@)">
      <summary>Gets the number of command line parameters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piParamCount">[out] Pointer to an integer containing the parameter count.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetRawSwitch(System.Int32,System.String@)">
      <summary>Returns a raw, unparsed switch by index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Index of the switch to return.</param>
      <param name="pbstrRawSwitch">[out] Pointer to a string containing the raw, unparsed switch.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetRawSwitchValue(System.Int32,System.String@)">
      <summary>Returns the raw, unparsed value of the switch by index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Index of the switch value to return.</param>
      <param name="pbstrRawSwitchValue">[out] Pointer to a string containing the switch value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetSwitchCount(System.Int32@)">
      <summary>Returns the number of switches in the command line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piSwitchCount">[out] Pointer to an integer containing the number of switches.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetSwitchValue(System.Int32,System.String@)">
      <summary>Gets the parsed value of a switch by index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSwitchIndex">[in] Index of the switch value to return.</param>
      <param name="pbstrValue">[out] Pointer to a string containing the switch value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.GetSwitchValueCount(System.Int32@)">
      <summary>Gets the number of switch values on the command line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piSwitchValueCount">[out] Pointer to an integer containing the number of switch values.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.HasParams">
      <summary>Queries whether or not there are command line parameters.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if there are parameters, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.HasSwitches">
      <summary>Queries whether or not there are command line switches.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if there are switches, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.HasSwitchValues">
      <summary>Queries whether or not there are command line switch values.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if there are switch values, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.IsSwitchPresent(System.Int32)">
      <summary>Queries, by index, whether or not a given switch is present.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the switch is present, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> otherwise. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" /> if the index is out of range.</returns>
      <param name="iSwitchIndex">[in] Index of the switch to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.ParseCommandLine(System.String,System.Int32,System.Int32)">
      <summary>Parses the command line as preparation for using other interface methods to retrieve the parsed elements.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szCommandLine">[in] String containing the command line to parse.</param>
      <param name="iMaxParams">[in] Integer—the maximum number of parameters.</param>
      <param name="iCursorPos">[in] Integer. The character position to begin parsing of the command line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.ParseCommandTail(System.String,System.Int32)">
      <summary>Parses the tail of the command line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szCommandTail">[in] String containing the command line.</param>
      <param name="iMaxParams">[in] Integer—the maximum number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.QuoteParam(System.String,System.String@)">
      <summary>Quote a parameter string and escape characters within the string appropriately.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szParam">[in] String containing the parameter to quote.</param>
      <param name="pbstrQuotedParam">[out] Pointer to the quoted parameter string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.RejectAllSwitches">
      <summary>Tests for whether or not there were any switches.</summary>
      <returns>If there are no switches, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.SwitchHasValue(System.Int32)">
      <summary>Tests, by index, whether or not a specific switch has a value.</summary>
      <returns>If the switch has no value, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />.</returns>
      <param name="iIndex">[in] Integer. The index of the switch to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine.ValidateParamCount(System.Int32,System.Int32)">
      <summary>Verify the parameter count is within a specific range.</summary>
      <returns>If the parameter count is within the range, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" /> otherwise.</returns>
      <param name="cParamsMin">[in] The minimum number of parameters.</param>
      <param name="cParamsMax">[in] The maximum number of parameters.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing">
      <summary>IVsPerPropertyBrowsing is used to perform custom edits for localization on some properties displayed in the Properties window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.CanResetPropertyValue(System.Int32,System.Int32@)">
      <summary>Checks whether the given property can be reset to the default value.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">[in] Specifies the dispatch ID.</param>
      <param name="pfCanReset">[out] Pointer to a flag indicating can reset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.DisplayChildProperties(System.Int32,System.Int32@)">
      <summary>Allows properties of type <see cref="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DISPATCH" /> to be viewed recursively.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">[in] Specifies the dispatch ID.</param>
      <param name="pfDisplay">[out] Pointer to a flag indicating whether the property can be displayed recursively.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.GetClassName(System.String@)">
      <summary>Returns the classname for this object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrClassName">[out] Pointer to a string containing the classname.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.GetLocalizedPropertyInfo(System.Int32,System.UInt32,System.String@,System.String@)">
      <summary>Retrieves the localized name and description for a property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">[in] Specifies dispatch ID.</param>
      <param name="localeID">[in] Specifies localeID.</param>
      <param name="pbstrLocalizedName">[out] Pointer to a string containing the localized name.</param>
      <param name="pbstrLocalizeDescription">[out] Pointer to a string containing the localize description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.HasDefaultValue(System.Int32,System.Int32@)">
      <summary>Determines if the current value for a property is the default.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">[in] Specifies the dispatch ID.</param>
      <param name="fDefault">[out] Flag indicating the current property value is the default value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.HideProperty(System.Int32,System.Int32@)">
      <summary>Hides the property at the given <paramref name="dispid" /> from the Properties window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">Specifies the dispatch ID.</param>
      <param name="pfHide">[out] Pointer to a flag indicating hide.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.IsPropertyReadOnly(System.Int32,System.Int32@)">
      <summary>Determines if a property should be made read only.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">[in] Specifies dispatch ID.</param>
      <param name="fReadOnly">[out] Flag indicating read only.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPerPropertyBrowsing.ResetPropertyValue(System.Int32)">
      <summary>Resets the value of the given property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispid">[in] Specifies the dispatch ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData">
      <summary>Enables persistence functionality for document data managed by the text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.Close">
      <summary>Closes the IVsPersistDocData object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.GetGuidEditorType(System.Guid@)">
      <summary>Returns the unique identifier of the editor factory that created the IVsPersistDocData object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pClassID">[out] Pointer to the class identifier of the editor type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.IsDocDataDirty(System.Int32@)">
      <summary>Determines whether the document data has changed since the last save.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfDirty">[out] true if the document data has been changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.IsDocDataReloadable(System.Int32@)">
      <summary>Determines whether the document data can be reloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfReloadable">[out] true if the document data can be reloaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.LoadDocData(System.String)">
      <summary>Loads the document data from a given MkDocument.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Path to the document file name to be loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.OnRegisterDocData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Called by the Running Document Table (RDT) when it registers the document data in the RDT.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract handle for the document to be registered. See the VSDOCCOOKIE datatype.</param>
      <param name="pHierNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="itemidNew">[in] Item identifier of the document to be registered from VSITEM.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.ReloadDocData(System.UInt32)">
      <summary>Reloads the document data and in the process determines whether to ignore a subsequent file change.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFlags">[in] Flag indicating whether to ignore the next file change when reloading the document data. See the data type <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.RenameDocData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Renames the document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfAttribs">[in] File attribute of the document data to be renamed. See the data type <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" />.</param>
      <param name="pHierNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document being renamed.</param>
      <param name="itemidNew">[in] Item identifier of the document being renamed. See the data type VSITEMID.</param>
      <param name="pszMkDocumentNew">[in] Path to the document being renamed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.SaveDocData(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String@,System.Int32@)">
      <summary>Saves the document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwSave">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration.</param>
      <param name="pbstrMkDocumentNew">[out] Pointer to the path to the new document.</param>
      <param name="pfSaveCanceled">[out] true if the document was not saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData.SetUntitledDocPath(System.String)">
      <summary>Sets the initial name (or path) for unsaved, newly created document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszDocDataPath">[in] String indicating the path of the document. Most editors can ignore this parameter. It exists for historical reasons.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2">
      <summary>Enables persistence functionality for document data managed by the text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.Close">
      <summary>Closes the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.GetGuidEditorType(System.Guid@)">
      <summary>Returns the unique identifier of the editor factory that created the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2" /> object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pClassID">[out] Pointer to the class identifier of the editor type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.IsDocDataDirty(System.Int32@)">
      <summary>Determines whether the document data has changed since the last save.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfDirty">[out] true if the document data has been changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.IsDocDataReadOnly(System.Int32@)">
      <summary>Determines whether the document data is read-only.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfReadOnly">[out] Pointer to a flag indicating read-only.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.IsDocDataReloadable(System.Int32@)">
      <summary>Determines whether the document data can be reloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfReloadable">[out] true if the document data can be reloaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.LoadDocData(System.String)">
      <summary>Loads the document data from a given MkDocument.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Path to the document file name to be loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.OnRegisterDocData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Called by the Running Document Table (RDT) when it registers the document data in the RDT.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract handle for the document to be registered. See the VSDOCCOOKIE datatype.</param>
      <param name="pHierNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="itemidNew">[in] Item identifier of the document to be registered from VSITEMID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.ReloadDocData(System.UInt32)">
      <summary>Reloads the document data and in the process determines whether to ignore a subsequent file change.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFlags">[in] Flag indicating whether to ignore the next file change when reloading the document data. See the data type <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRELOADDOCDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.RenameDocData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Renames the document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfAttribs">[in] File attribute of the document data to be renamed. See the data type <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" />.</param>
      <param name="pHierNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document being renamed.</param>
      <param name="itemidNew">[in] Item identifier of the document being renamed. See the data type VSITEMID.</param>
      <param name="pszMkDocumentNew">[in] Path to the document being renamed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.SaveDocData(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String@,System.Int32@)">
      <summary>Saves the document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwSave">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration.</param>
      <param name="pbstrMkDocumentNew">[out] Pointer to the path to the new document.</param>
      <param name="pfSaveCanceled">[out] true if the document was not saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.SetDocDataDirty(System.Int32)">
      <summary>Sets the IsDirty flag to true.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDirty">[in] Flag indicating that the document data is dirty.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.SetDocDataReadOnly(System.Int32)">
      <summary>Sets the Read-Only flag to true.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fReadOnly">[in] Flag indicating read only.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.SetUntitledDocPath(System.String)">
      <summary>Sets the initial name (or path) for unsaved, newly created document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszDocDataPath">[in] String indicating the path of the document. Most editors can ignore this parameter. It exists for historical reasons.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem">
      <summary>Provides persistence to hierarchy items.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
      <summary>Determines whether the hierarchy item changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier of the hierarchy item contained in VSITEMID.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of the hierarchy item.</param>
      <param name="pfDirty">[out] true if the hierarchy item changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
      <summary>Saves the hierarchy item to disk.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwSave">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration.</param>
      <param name="pszSilentSaveAsName">[in] File name to be applied when <paramref name="dwSave" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_SilentSave" />.</param>
      <param name="itemid">[in] Item identifier of the hierarchy item saved from VSITEMID.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of the hierarchy item saved.</param>
      <param name="pfCanceled">[out] true if the save action was canceled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2">
      <summary>Provides persistence to hierarchy items.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2.IgnoreItemFileChanges(System.UInt32,System.Int32)">
      <summary>Flag indicating that changes to a file can be ignored when item is saved or reloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Specifies the item id from VSITEMID.</param>
      <param name="fIgnore">[in] Flag indicating ignore.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
      <summary>Determines whether the hierarchy item changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier of the hierarchy item contained in VSITEMID.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of the hierarchy item.</param>
      <param name="pfDirty">[out] true if the hierarchy item changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2.IsItemReloadable(System.UInt32,System.Int32@)">
      <summary>Determines whether a project item is reloadable before calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2.ReloadItem(System.UInt32,System.UInt32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Specifies <paramref name="itemid" /> from VSITEMID.</param>
      <param name="pfReloadable">[out] Pointer to a flag indicating whether the item is reloadable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2.ReloadItem(System.UInt32,System.UInt32)">
      <summary>Called to reload project item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Specifies <paramref name="itemid" /> from VSITEMID.</param>
      <param name="dwReserved">[in] Double word containing the reserved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem2.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
      <summary>Saves the hierarchy item to disk.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwSave">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" /> enumeration.</param>
      <param name="pszSilentSaveAsName">[in] File name to be applied when <paramref name="dwSave" /> is set to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_SilentSave" />.</param>
      <param name="itemid">[in] Item identifier of the hierarchy item saved from VSITEMID.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of the hierarchy item saved.</param>
      <param name="pfCanceled">[out] true if the save action was canceled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts">
      <summary>Provides access to user-specific options in the user options file associated with the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
      <summary>Loads user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPersistence">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> interface on which the VSPackage should call its <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" /> method for each stream name it wants to read from the user options (.opt) file.</param>
      <param name="grfLoadOpts">[in] User options whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS" /> DWORD.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
      <summary>Reads user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in] Pointer to the IStream interface from which the VSPackage should read the user-specific options.</param>
      <param name="pszKey">[in] Name of the stream, as provided by the VSPackage by means of the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
      <summary>Saves user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPersistence">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> interface on which the VSPackage should call its <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" /> method for each stream name it wants to write to the user options file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
      <summary>Writes user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in] Pointer to the IStream interface to which the VSPackage should write the user-specific options.</param>
      <param name="pszKey">[in] Name of the stream, as provided by the VSPackage by means of the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps">
      <summary>Enables VSPackages to write non-user-specific solution properties into the solution .sln file. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
      <summary>Loads user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPersistence">[in] the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> interface on which the VSPackage should call its <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" /> method for each stream name it wants to read from the user options (.opt) file.</param>
      <param name="grfLoadOpts">[in] User options whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS" /> DWORD.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.OnProjectLoadFailure(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String,System.String)">
      <summary>Allows cleanup and memory management in cases where project fails to load.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the stub project. To be used in place of the project that failed to load.</param>
      <param name="pszProjectName">[in] Project name as it appears in the solution file (.sln). null for global section.</param>
      <param name="pszProjectMk">[in] Full path for project file. null for global section.</param>
      <param name="pszKey">[in] Name of the section.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.QuerySaveSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS[])">
      <summary>Creates a property bag for storing solution properties.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />. null indicates a save for the global section of the solution file.</param>
      <param name="pqsspSave">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS" />  enumeration indicating whether the solution has properties, properties that have changed, or no properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.ReadSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.OLE.Interop.IPropertyBag)">
      <summary>Reads out solution properties from its .sln file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface. null for preSolution or global sections because the hierarchy does not exist if the solution has yet to create it, or because the section being loaded is global.</param>
      <param name="pszProjectName">[in] null for global sections, which means a load for the global section of the solution (.sln) file.</param>
      <param name="pszProjectMk">[in] null for global sections, which means a load for the global section of the solution (.sln) file.</param>
      <param name="pszKey">[in] Name of the solution's property set, that is, its property bag.</param>
      <param name="fPreLoad">[in] Indicator of whether a <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.ReadSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.OLE.Interop.IPropertyBag)" /> call is from a pre- or post-load section.</param>
      <param name="pPropBag">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPropertyBag" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
      <summary>Reads user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in] Pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IStream" /> interface from which the VSPackage should read the user-specific options.</param>
      <param name="pszKey">[in] Name of the stream, as provided by the VSPackage by means of the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.SaveSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
      <summary>Saves solution properties to its .sln file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="pPersistence">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
      <summary>Saves user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPersistence">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> interface on which the VSPackage should call its <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" /> method for each stream name it wants to write to the user options file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.WriteSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,Microsoft.VisualStudio.OLE.Interop.IPropertyBag)">
      <summary>Writes solution properties to the .sln file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="pszKey">[in] Name of the set of properties, the property bag.</param>
      <param name="pPropBag">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPropertyBag" /> interface to which the property name/value pairs are written.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
      <summary>Writes user options for a given solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in] Pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IStream" /> interface to which the VSPackage should write the user-specific options.</param>
      <param name="pszKey">[in] Name of the stream, as provided by the VSPackage by means of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" /></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProject">
      <summary>Manages items, or documents, within a project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
      <summary>Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Identifier of the container folder for the item being added. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the enumeration VSITEMID. Note that this parameter is currently ignored because only adding items as children of a project node is supported. Projects that support the notion of folders will want to add the items relative to <paramref name="itemidLoc" />.</param>
      <param name="dwAddItemOperation">[in] Operation applied to the newly created item. See the enumeration <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" />.</param>
      <param name="pszItemName">[in] Name of the item to be added.</param>
      <param name="cFilesToOpen">[in] Number of items in <paramref name="rgpszFilesToOpen" />. Can be zero. This must be 1 if <paramref name="dwAddItemOperation" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE" /> or VSADDITEMOP_OPENDIRECTORY. If <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD" />, it must be 1 or 2.</param>
      <param name="rgpszFilesToOpen">[in, size_is(cFilesToOpen)] Array of pointers to OLESTR file names. If <paramref name="dwAddItemOperation" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE" /> or VSADDITEMOP_OPENDIRECTORY, the first item (<paramref name="rgpszFilesToOpen[0]" />) in the array is the name of the file to clone or the directory to open. If it is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD" />, the first item (<paramref name="rgpszFilesToOpen[0]" />) is the name of the wizard to run, and the second item (<paramref name="rgpszFilesToOpen[1]" />) is the file name the user supplied (same as <paramref name="pszItemName" />).</param>
      <param name="hwndDlgOwner">[in] Handle to the Add Item dialog box.</param>
      <param name="pResult">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" /> enumeration indicating whether the item was successfully added to the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)">
      <summary>Generates a unique document name for a given item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Container folder for the unique item name being generated. Should be a valid item identifier. For further information, see VSITEMID. The value of this parameter is typically determined by the <paramref name="itemidLoc" /> parameter that the project passes to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)" /> method.</param>
      <param name="pszExt">[in] File extension of the new document name.</param>
      <param name="pszSuggestedRoot">[in] If not null or empty, this value should be used as the base name for the item, and numbers should be appended to make the name unique. If supplied, the project should make up its own root name based on the <paramref name="pszExt" /> file extension.</param>
      <param name="pbstrItemName">[out] Pointer to the new name, which contains the name only, not the item's file path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.GetItemContext(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Returns the context of an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the context item whose value is taken from the VSITEMIDDWORD.</param>
      <param name="ppSP">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.GetMkDocument(System.UInt32,System.String@)">
      <summary>Returns a document moniker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier corresponding to a node in this project's hierarchy. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier.</param>
      <param name="pbstrMkDocument">[out] Pointer to a document moniker in a BSTR. It is fully qualified text uniquely identifying the document represented by the <paramref name="itemid" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)">
      <summary>Determines whether a document is in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Pointer to the document moniker for which to search.</param>
      <param name="pfFound">[out] Pointer to a BOOL. Implementer sets contents to true if the document is found in the project, false if otherwise or an error occurs.</param>
      <param name="pdwPriority">[out] Priority level whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY" /> enumeration if the document is found; zero if not or an error occurs.</param>
      <param name="pitemid">[out] Pointer to the item identifier of the document within the project. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the enumeration VSITEMID. If the document is found, implementer sets contents to a value; if not found or an error occurs, implementer sets contents to zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.OpenItem(System.UInt32,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens an item in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item to open. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the VSITEMID enumeration.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. If not GUID_NULL, indicates a specific type of view to create. For more information, see the LOGVIEWID.</param>
      <param name="punkDocDataExisting">[in] Pointer to the document data object of the item to open. If the caller of OpenItem had a pointer to the document data object, it would pass it in the <paramref name="punkDocDataExisting" /> parameter. If the caller knew that the document data object was not open, it would pass null. If the caller did not know if the document data object was open or if it did not want to look it up in the running document table (RDT) to find out, then it could pass in DOCDATAEXISTING_UNKNOWN. If this value is passed, then <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> will look up the value in the RDT by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.FindAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)" /> (RDT_EditLock) to determine whether the file (document data object) is already open.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProject2">
      <summary>Provides the ability to remove and reopen items in a project, in addition to the methods in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
      <summary>Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Identifier of the container folder for the item being added. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the enumeration VSITEMID. Note that this parameter is currently ignored because only adding items as children of a project node is supported. Projects that support the notion of folders will want to add the items relative to <paramref name="itemidLoc" />.</param>
      <param name="dwAddItemOperation">[in] Operation applied to the newly created item. Can be VSADDITEMOP_OPENDIRECTORY only if VSADDITEM_ShowAddFolderButton is passed to the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)" />. See the enumeration <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" />.</param>
      <param name="pszItemName">[in] Name of the item to be added.</param>
      <param name="cFilesToOpen">[in] Number of items in <paramref name="rgpszFilesToOpen" />. Can be zero. This must be 1 if <paramref name="dwAddItemOperation" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE" /> or VSADDITEMOP_OPENDIRECTORY. If <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD" />, it must be 1 or 2.</param>
      <param name="rgpszFilesToOpen">[in, size_is(cFilesToOpen)] Array of pointers to OLESTR file names. If <paramref name="dwAddItemOperation" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE" /> or VSADDITEMOP_OPENDIRECTORY, the first item (<paramref name="rgpszFilesToOpen[0]" />) in the array is the name of the file to clone or the directory to open. If it is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD" />, the first item (<paramref name="rgpszFilesToOpen[0]" />) is the name of the wizard to run, and the second item (<paramref name="rgpszFilesToOpen[1]" />) is the file name the user supplied (same as <paramref name="pszItemName" />).</param>
      <param name="hwndDlgOwner">[in] Handle to the Add Item dialog box.</param>
      <param name="pResult">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" /> enumeration indicating whether the item was successfully added to the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)">
      <summary>Generates a unique document name for a given item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Container folder for the unique item name being generated. Should be a valid item identifier. For further information, see VSITEMID. The value of this parameter is typically determined by the <paramref name="itemidLoc" /> parameter that the project passes to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)" /> method.</param>
      <param name="pszExt">[in] File extension of the new document name.</param>
      <param name="pszSuggestedRoot">[in] If not null or empty, this value should be used as the base name for the item, and numbers should be appended to make the name unique. If supplied, the project should make up its own root name based on the <paramref name="pszExt" /> file extension.</param>
      <param name="pbstrItemName">[out] Pointer to the new name, which contains the name only, not the item's file path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.GetItemContext(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Returns the context of an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the context item whose value is taken from the VSITEMIDDWORD.</param>
      <param name="ppSP">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.GetMkDocument(System.UInt32,System.String@)">
      <summary>Returns a document moniker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier corresponding to a node in this project's hierarchy. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See VSITEMID.</param>
      <param name="pbstrMkDocument">[out] Pointer to a document moniker in a BSTR. It is fully qualified text uniquely describing the document represented by the <paramref name="itemid" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)">
      <summary>Determines whether a document is in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Pointer to the document moniker for which to search.</param>
      <param name="pfFound">[out] Pointer to a BOOL. Implementer sets contents to true if the document is found in the project, false if otherwise or an error occurs.</param>
      <param name="pdwPriority">[out] Priority level whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY" /> enumeration if the document is found; zero if not or an error occurs.</param>
      <param name="pitemid">[out] Pointer to the item identifier of the document within the project. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the enumeration VSITEMID. If the document is found, implementer sets contents to a value; if not found or an error occurs, implementer sets contents to zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.OpenItem(System.UInt32,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens an item in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item to open. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the VSITEMID enumeration.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. If not GUID_NULL, indicates a specific type of view to create. For more information, see the LOGVIEWID.</param>
      <param name="punkDocDataExisting">[in] Pointer to the document data object of the item to open. If the caller of OpenItem had a pointer to the document data object, it would pass it in the <paramref name="punkDocDataExisting" /> parameter. If the caller knew that the document data object was not open, it would pass null. If the caller did not know if the document data object was open or if it did not want to look it up in the running document table (RDT) to find out, then it could pass in DOCDATAEXISTING_UNKNOWN. If this value is passed, then <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> will look up the value in the RDT by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.FindAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)" /> (RDT_EditLock) to determine whether the file (DocData) is already open.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.RemoveItem(System.UInt32,System.UInt32,System.Int32@)">
      <summary>Removes an item from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="itemid">[in] Identifier of the item to be removed.</param>
      <param name="pfResult">[out, retval] true if the item was successfully removed from the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject2.ReopenItem(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Reopens an item in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item reopened.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of the physical view. If set to null, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.MapLogicalView(System.Guid@,System.String@)" /> will be called.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. In MultiView, the case will determine the view to be activated.</param>
      <param name="punkDocDataExisting">[in] Pointer to the IUnknown interface.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3">
      <summary>Provides the ability add or open a project item with a specific editor and to transfer an item to another project, in addition to the methods in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject2" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
      <summary>Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Identifier of the container folder for the item being added. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the enumeration VSITEMID. Note that this parameter is currently ignored because only adding items as children of a project node is supported. Projects that support the notion of folders will want to add the items relative to <paramref name="itemidLoc" />.</param>
      <param name="dwAddItemOperation">[in] Operation applied to the newly created item. Can be VSADDITEMOP_OPENDIRECTORY only if VSADDITEM_ShowAddFolderButton is passed to the method <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)" />. See the enumeration <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" />.</param>
      <param name="pszItemName">[in] Name of the item to be added.</param>
      <param name="cFilesToOpen">[in] Number of items in <paramref name="rgpszFilesToOpen" />. Can be zero. This must be 1 if <paramref name="dwAddItemOperation" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE" /> or VSADDITEMOP_OPENDIRECTORY. If <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD" />, it must be 1 or 2.</param>
      <param name="rgpszFilesToOpen">[in, size_is(cFilesToOpen)] Array of pointers to OLESTR file names. If <paramref name="dwAddItemOperation" /> is <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE" /> or VSADDITEMOP_OPENDIRECTORY, the first item (<paramref name="rgpszFilesToOpen[0]" />) in the array is the name of the file to clone or the directory to open. If it is VSADDITEMOP_RUNWIZARD, the first item (<paramref name="rgpszFilesToOpen[0]" />) is the name of the wizard to run, and the second item (<paramref name="rgpszFilesToOpen[1]" />) is the file name the user supplied (same as <paramref name="pszItemName" />).</param>
      <param name="hwndDlgOwner">[in] Handle to the Add Item dialog box.</param>
      <param name="pResult">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" /> enumeration indicating whether the item was successfully added to the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
      <summary>Adds an item using a specific editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Item identifier of the item to add. Values are taken from the VSITEMIDDWORD.</param>
      <param name="dwAddItemOperation">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION" /> enumeration.</param>
      <param name="pszItemName">[in] Name of the item to be added.</param>
      <param name="cFilesToOpen">[in] Number of files to open.</param>
      <param name="rgpszFilesToOpen">[in, size_is(cFilesToOpen)] Actual number of files passed in with <paramref name="cFilesToOpen" />.</param>
      <param name="hwndDlgOwner">[in] Handle to the dialog box.</param>
      <param name="grfEditorFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of physical view.</param>
      <param name="rguidLogicalView">[in] Name of the logical view.</param>
      <param name="pResult">[out, retval] Results whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)">
      <summary>Generates a unique document name for a given item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Container folder for the unique item name being generated. Should be a valid item identifier. For further information, see VSITEMID. The value of this parameter is typically determined by the <paramref name="itemidLoc" /> parameter that the project passes to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg2.AddProjectItemDlg(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,System.String,System.String,System.String@,System.String@,System.Int32@)" /> method.</param>
      <param name="pszExt">[in] File extension of the new document name.</param>
      <param name="pszSuggestedRoot">[in] If not null or empty, this value should be used as the base name for the item, and numbers should be appended to make the name unique. If supplied, the project should make up its own root name based on the <paramref name="pszExt" /> file extension.</param>
      <param name="pbstrItemName">[out] Pointer to the new name, which contains the name only, not the item's file path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.GetItemContext(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Returns the context of an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the context item whose value is taken from the VSITEMIDDWORD.</param>
      <param name="ppSP">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.GetMkDocument(System.UInt32,System.String@)">
      <summary>Returns a document moniker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier corresponding to a node in this project's hierarchy. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See VSITEMID.</param>
      <param name="pbstrMkDocument">[out] Pointer to a document moniker in a BSTR. It is fully qualified text uniquely describing the document represented by the <paramref name="itemid" /> parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)">
      <summary>Determines whether a document is in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Pointer to the document moniker for which to search.</param>
      <param name="pfFound">[out] Pointer to a BOOL. Implementer sets contents to true if the document is found in the project, false if otherwise or an error occurs.</param>
      <param name="pdwPriority">[out] Priority level whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY" /> enumeration if the document is found; zero if not or an error occurs.</param>
      <param name="pitemid">[out] Pointer to the item identifier of the document within the project. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the enumeration VSITEMID. If the document is found, implementer sets contents to a value; if not found or an error occurs, implementer sets contents to zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.OpenItem(System.UInt32,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens an item in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item to open. Should be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or other valid item identifier. See the VSITEMID enumeration.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. If not GUID_NULL, indicates a specific type of view to create. For more information, see the LOGVIEWID.</param>
      <param name="punkDocDataExisting">[in] Pointer to the document data object of the item to open. If the caller of OpenItem had a pointer to the document data object, it would pass it in the <paramref name="punkDocDataExisting" /> parameter. If the caller knew that the document data object was not open, it would pass null. If the caller did not know if the document data object was open or if it did not want to look it up in the running document table (RDT) to find out, then it could pass in DOCDATAEXISTING_UNKNOWN If this value is passed, then <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> will look up the value in the RDT by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.FindAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)" /> (RDT_EditLock) to determine whether the file (document data object) is already open.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.OpenItemWithSpecific(System.UInt32,System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens an item using a specific editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier of the item to open. Values are taken from the VSITEMIDDWORD.</param>
      <param name="grfEditorFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of the physical view.</param>
      <param name="rguidLogicalView">[in] Name of the logical view.</param>
      <param name="punkDocDataExisting">[in] Pointer to the IUnknown interface on the document to open.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.RemoveItem(System.UInt32,System.UInt32,System.Int32@)">
      <summary>Removes an item from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="itemid">[in] Identifier of the item to be removed.</param>
      <param name="pfResult">[out, retval] true if the item was successfully removed from the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.ReopenItem(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Reopens an item in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item reopened.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of the physical view. If set to null, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.MapLogicalView(System.Guid@,System.String@)" /> will be called.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. In MultiView, the case will determine the view to be activated.</param>
      <param name="punkDocDataExisting">[in] Pointer to the IUnknown interface.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Transfers an item from one project to another. The project that presently owns the item to be transferred calls this method on the project intending to receive the transferred item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocumentOld">[in] Path to the old document. Passed as <paramref name="pszDocumentOld" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)" />.</param>
      <param name="pszMkDocumentNew">[in] Path to the new document. Passed as <paramref name="pszDocumentNew" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)" />.</param>
      <param name="punkWindowFrame">[in] Optional. Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg">
      <summary>Provides access to project configuration information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.EnumOutputs(Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="ppIVsEnumOutputs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_BuildableProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg@)">
      <summary>Provides access to a configuration's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> interface to use to manage the build process.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsBuildableProjectCfg">[out] Pointer to the configuration's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_CanonicalName(System.String@)">
      <summary>Returns a configuration's canonical name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the canonical name of the configuration such as Debug or Release.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_DisplayName(System.String@)">
      <summary>Returns a string that describes the configuration and can be displayed in the environment's UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] Pointer to the display name of the configuration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_IsDebugOnly(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsDebugOnly">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_IsPackaged(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsPackaged">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_IsReleaseOnly(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsReleaseOnly">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_IsSpecifyingOutputSupported(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsSpecifyingOutputSupported">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_Platform(System.Guid@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pguidPlatform">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_ProjectCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="ppIVsProjectCfgProvider">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_RootURL(System.String@)">
      <summary>Returns a configuration's root URL for its output items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRootURL">[out] Pointer to the root URL for the configuration's output items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_TargetCodePage(System.UInt32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puiTargetCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.get_UpdateSequenceNumber(Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER[])">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puliUSN">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg.OpenOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutput@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="szOutputCanonicalName">Do not use.</param>
      <param name="ppIVsOutput">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2">
      <summary>Provides support for grouping output based on the configuration, in addition to the methods in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.EnumOutputs(Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="ppIVsEnumOutputs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_BuildableProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg@)">
      <summary>Provides access to a configuration's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> interface to use to manage the build process.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsBuildableProjectCfg">[out] Pointer to the configuration's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_CanonicalName(System.String@)">
      <summary>Returns a configuration's canonical name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCanonicalName">[out] Pointer to the canonical name of the configuration such as Debug or Release.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_CfgType(System.Guid@,System.IntPtr@)">
      <summary>Provides access to a configuration interface such as <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iidCfg">[in] Interface identifier of the configuration interface to access.</param>
      <param name="ppCfg">[out, iid_is(iidCfg)] Pointer to the configuration interface identified by <paramref name="iidCfg" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_DisplayName(System.String@)">
      <summary>Returns a string that describes the configuration and can be displayed in the environment's UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] Pointer to the display name of the configuration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_IsDebugOnly(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsDebugOnly">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_IsPackaged(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsPackaged">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_IsPrivate(System.Int32@)">
      <summary>Obsolete method. Returns whether or not a configuration is private or shared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfPrivate">[out] Pointer to a flag set to true if the configuration is private and false if it is shared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_IsReleaseOnly(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsReleaseOnly">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_IsSpecifyingOutputSupported(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsSpecifyingOutputSupported">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_OutputGroups(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup[],System.UInt32[])">
      <summary>Returns an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup" /> pointers for the output groups of a configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Requested number of output groups to be returned.</param>
      <param name="rgpcfg">[in, out, size_is(celt)] Pointer to an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup" /> interface pointers.</param>
      <param name="pcActual">[out, optional] Pointer to the actual number of output groups returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_Platform(System.Guid@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pguidPlatform">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_ProjectCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="ppIVsProjectCfgProvider">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_RootURL(System.String@)">
      <summary>Returns a configuration's root URL for its output items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRootURL">[out] Pointer to the root URL for the configuration's output items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_TargetCodePage(System.UInt32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puiTargetCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_UpdateSequenceNumber(Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER[])">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puliUSN">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.get_VirtualRoot(System.String@)">
      <summary>Obsolete method. This method is required for debugging Web projects.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrVRoot">[out] Pointer to a string containing the virtual root.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.OpenOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutput@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="szOutputCanonicalName">Do not use.</param>
      <param name="ppIVsOutput">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.OpenOutputGroup(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup@)">
      <summary>Returns a specific output group.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szCanonicalName">[in] Canonical name of the configuration such as Debug or Release.</param>
      <param name="ppIVsOutputGroup">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup" /> object that will be instantiated for the output group.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2.OutputsRequireAppRoot(System.Int32@)">
      <summary>Obsolete method. This method replaces the get_IsWebApplication method from the now-obsolete IVsDeployWebProject interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfRequiresAppRoot">[out] </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider">
      <summary>Provides access to project configuration information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider.get_UsesIndependentConfigurations(System.Int32@)">
      <summary>Do not use.</summary>
      <param name="pfUsesIndependentConfigurations">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])">
      <summary>Returns one or more configuration objects.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>
      <param name="rgpcfg">[in, out, size_is(celt)] On input, pointer to an interface array or null. On output, this parameter points to an array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCfg" /> interfaces belonging to the requested configuration objects.</param>
      <param name="pcActual">[out, optional] Pointer to the number of configuration objects actually returned or null, if this information is not necessary.</param>
      <param name="prgfFlags">[out, optional] Flags that specify settings for project configurations, or null if no additional flag settings are required. For valid <paramref name="prgrFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)">
      <summary>Provides access to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg" /> interface implemented on a project's configuration object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szProjectCfgCanonicalName">[in] Pointer to the canonical name of the configuration to access.</param>
      <param name="ppIVsProjectCfg">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg" /> interface of the configuration identified by <paramref name="szProjectCfgCanonicalName" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectDeployDependency">
      <summary>Provides information about project-to-project dependencies. Implemented by a project system that supports producing builds. Inherits from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectDeployDependency.get_DeployDependencyURL(System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pbstrURL">[out] Location of dependency (local, UNC, or Web).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectDeployDependency.get_ProjectInfo(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)">
      <summary>Gets the project information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsHierarchy">[out] The hierarchy that contains the project information.</param>
      <param name="ppIVsProjectCfg">[out] Location of dependency (local, UNC, or Web).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory">
      <summary>Creates projects within the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.CanCreateProject(System.String,System.UInt32,System.Int32@)">
      <summary>Determines whether a new project can be created.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] File name of the project you are trying to create.</param>
      <param name="grfCreateFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.</param>
      <param name="pfCanCreate">[out] true if the project can be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.Close">
      <summary>Shuts down the project factory.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>Creates a new project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] File name of the project that will be created.</param>
      <param name="pszLocation">[in] Location where the project will be created.</param>
      <param name="pszName">[in] If applicable, the name of the template to use when cloning a new project.</param>
      <param name="grfCreateFlags">[in] Set of flag values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.</param>
      <param name="iidProject">[in] Identifier of the interface that the caller wants returned.</param>
      <param name="ppvProject">[out, iid_is(iidProject)] Pointer to the interface specified by iidProject.</param>
      <param name="pfCanceled">[out] Returns true if the user presses the Cancel button to abort the creation of this project. Otherwise, it is false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes the project factory in the environment and allows the project to obtain services proffered by the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface, which can be used by the factory to obtain services proffered by the Visual Studio shell.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectResources">
      <summary>Manages resource (.RESX) files for .NET Designers. Most often used to manage localized resources. You can get an instance of the interface by querying <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectResources.CreateResourceDocData(System.UInt32,System.IntPtr@)">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object for a resource item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidResource">[in]The VSITEMID of the resource.</param>
      <param name="punkDocData">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.IUnknown" /> interface of the new <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectResources.GetResourceItem(System.UInt32,System.String,System.UInt32,System.UInt32@)">
      <summary>Gets a resource item and adds it to the project. Commonly used to add a culture-specific resource.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidDocument">[in] The VSITEMID of the document to add the resource to.</param>
      <param name="pszCulture">[in] String containing the culture designation. For more information about culture, see <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="grfPRF">[in] Integer. A value from the __VSPROJRESFLAGS enumeration.</param>
      <param name="pitemidResource">[out] Pointer to the VSITEMID of the resource added to the document.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles">
      <summary>Enables you to query the project for special files, such as web configuration or license files, and, optionally, to create them. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)">
      <summary>Gets the item identifier, name, and path of a special project file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fileID">[in] The type of special file. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID" /> enumeration.</param>
      <param name="grfFlags">[in] Flags indicating whether or not to create the file, or whether the full path has been provided. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS" /> enumeration.</param>
      <param name="pitemid">[out] Pointer to the VSITEMID of the special file.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the name of the file and, optionally, the full path.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap">
      <summary>Implemented by projects to support placing a project-specific editor in the Open With dialog box, or to indicate which editor or language service should be associated with a file type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap.GetSpecificEditorType(System.String,System.Guid@)">
      <summary>Use to specify which editor should be used to load the specified file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system.</param>
      <param name="pguidEditorType">[out, retval] GUID of the editor factory that should be used to instantiate an editor for the file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap2">
      <summary>Implemented by projects to support placing a project-specific editor in the Open With dialog box, or to indicate which editor or language service should be associated with a file type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap2.GetSpecificEditorProperty(System.String,System.Int32,System.Object@)">
      <summary>Gets properties related to project-specific editors and the Open With dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system.</param>
      <param name="propid">[in] If equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_UseGlobalEditorByDefault" /> (false) then the user has chosen to open the file in the project-specific editor information listed in the Open With dialog box. If <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_UseGlobalEditorByDefault" /> (true), then the global editor was chosen. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID" />.</param>
      <param name="pvar">[out, retval] Pointer to a VARIANT containing the property value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap2.GetSpecificEditorType(System.String,System.Guid@)">
      <summary>Specifies which editor should be used to load the specified file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system.</param>
      <param name="pguidEditorType">[out, retval] GUID of the editor factory that should be used to instantiate an editor for the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap2.GetSpecificLanguageService(System.String,System.Guid@)">
      <summary>Use to specify the language service that should be associated with the core editor if the core editor is the default editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system.</param>
      <param name="pguidLanguageService">[out, retval] GUID of the language service to be associated with the core editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecificEditorMap2.SetSpecificEditorProperty(System.String,System.Int32,System.Object)">
      <summary>Sets properties related to project-specific editors and the Open With dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Provides properties to set project-specific editor information in the Open With dialog box.</param>
      <param name="propid">[in] If equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_UseGlobalEditorByDefault" /> (false) then the user has chosen to open the file in the project-specific editor information listed in the Open With dialog box. If <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_UseGlobalEditorByDefault" /> (true), then the global editor was chosen. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID" />.</param>
      <param name="var">[in] VARIANT containing property information.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices">
      <summary>Enables project extensibility by other developers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices.AddStartupService(System.Guid@)">
      <summary>Adds third party service to the list of services to be started when the project is instantiated and ensures that all third party services are started.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidService">[in] GUID object specifying service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices.GetStartupServiceEnum(Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices@)">
      <summary>Used to look up a third party service array element by GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumProjectStartupServices" /> interface object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices.RemoveStartupService(System.Guid@)">
      <summary>Removes a service ID GUID from the list of third party services to be started and releases the service if it has been loaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidService">[in] GUID object specifying service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectTextImageProvider">
      <summary>Opens or close <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> interfaces for files. Often used to enable Find and Replace on non-local files. Frequently used with Web files. Your implementation should make itself available through querying <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectTextImageProvider.CloseItemTextImage(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.VsTextImage)">
      <summary>Closes the text image of a project item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Pointer to a string containing the file name and path corresponding to the text image.</param>
      <param name="vsptipDisposition">[in] Integer. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION" /> enumeration indicating whether or not the file was modified or whether to just close it.</param>
      <param name="pTextImage">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> interface of the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectTextImageProvider.OpenItemTextImage(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.VsTextImage@)">
      <summary>Opens a text image for a given file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Pointer to a string containing the file name and path.</param>
      <param name="grfMode">[in] Integer. The mode in which to open the image—read only or read/write. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE" /> enumeration.</param>
      <param name="ppTextImage">[out] Pointer to the created <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgrade">
      <summary>Implemented by project objects that need to upgrade project file formats between different versions of Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgrade.UpgradeProject(System.UInt32)">
      <summary>Called by the environment to determine whether the project object needs to upgrade the project to a new version.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfUpgradeFlags">[in] Flags used to determine whether the user has or has not been prompted by the environment to upgrade the solution. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSUPGRADEPROJFLAGS" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser">
      <summary>Gets and sets the state of the property browser. Implemented by the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser.GetState(Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState[])">
      <summary>Gets the state of the property browser and returns it in a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pstate">[in, out] Pointer to a caller-allocated instance of a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState" /> structure filled in with information about the property browser.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser.SetState(Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState[])">
      <summary>Sets the state of the property browser using information in a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pstate">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState" /> structure containing the new state of the browser.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn">
      <summary>Reads a file containing property names and values. Inherits from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamIn" />. Returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.OpenExisting(System.String,System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn@,System.String[])" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn.Close">
      <summary>Closes the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn.Read(System.UInt32,System.UInt16[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE[],System.Object@,Microsoft.VisualStudio.OLE.Interop.IErrorLog)">
      <summary>Reads a property and value from the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cchPropertyName">[in] Length of <paramref name="szPropertyName" />.</param>
      <param name="szPropertyName">[out] String containing the property name.</param>
      <param name="pcchPropertyNameActual">[out] Length of property name.</param>
      <param name="pvspspt">[out] Pointer to a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE" /> enumeration indicating whether this is a simple property or a substream of the property stream.</param>
      <param name="pvarValue">[out] A VARIANT containing the property value.</param>
      <param name="pIErrorLog">[in] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IErrorLog" /> interface to use for reporting errors.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn.SkipToEnd">
      <summary>Go to the end of the input stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut">
      <summary>Writes out a file of property names and values. Extends an inherits from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut" />. Returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.CreateNew(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut.BeginPropertySection(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut@,System.UInt32@)">
      <summary>Begins a property section (inner property stream) used until a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.EndPropertySection(System.UInt32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szName">[in] String containing the name of the property section.</param>
      <param name="szLineComment">[in] String containing a comment about the section.</param>
      <param name="ppIVsPropertyStreamOut">[out] Pointer to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.BeginPropertySection(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut@,System.UInt32@)" /> interface to use for output.</param>
      <param name="pdwCookie">[out] Pointer to an integer that is a cookie identifying this property section. Used in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.EndPropertySection(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut.Close">
      <summary>Closes the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut.EndPropertySection(System.UInt32)">
      <summary>Ends a property section (an inner property stream).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Pointer to an integer that is a cookie identifying the property section to end. Cookie comes from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.BeginPropertySection(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut@,System.UInt32@)" /> call.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut.Flush">
      <summary>Flushes a property stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut.Write(System.String,System.Object,System.String)">
      <summary>Writes a property name, value, and comment to the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szPropertyName">[in] String containing the name of the property.</param>
      <param name="varValue">[in] A VARIANT containing the property value.</param>
      <param name="szLineComment">[in] An optional string containing a comment.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut.WriteSzAsBSTR(System.String,System.String,System.String)">
      <summary>Write out a null-terminated string property value as a BSTR.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szPropertyName">[in] String containing the property name.</param>
      <param name="szValue">[in] String containing the property's value.</param>
      <param name="szLineComment">[in] An optional string containing a comment.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPage">
      <summary>Implemented by VSPackages on IPropertyPage objects to show categorized property pages in the property frame.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPage.CategoryTitle(System.UInt32,System.String@)">
      <summary>Returns the category under which your property pages should be displayed in the tree view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLevel">[in] Integer containing the level.</param>
      <param name="pbstrCategory">[out, retval] Pointer to the category (folder) under which you want your property page to be displayed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame">
      <summary>Changes the initial display of the property page in the Properties window. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsPropertyPageFrame" /> (SID_SVsPropertyPageFrame) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame.CanShowPropertyPages(System.Int32@)">
      <summary>Verifies that the Property Pages can be displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbCanShow">[out] Pointer to a Boolean. Set to true if the Property Pages can be displayed; false otherwise.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame.HideFrame">
      <summary>Hides the property page.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame.ReportError(System.Int32)">
      <summary>Reports a COM (HRESULT) error.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hrErr">[in] An HRESULT.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame.ShowFrame(System.Guid)">
      <summary>Shows the property page specified by a CLSID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsidInitialPage">[in] The class identifier (CLSID) for the property page.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame.ShowFrameDISPID(System.Int32)">
      <summary>Shows the property page specified by a dispatch ID (DISPID).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dispidToActivate">[in] The dispatch ID (DISPID) of the property page.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame.Update">
      <summary>Updates the property pages.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame.UpdateAfterApply">
      <summary>Updates the property page after all property page values have been applied to the underlying objects (after completion of all calls to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IPropertyPage.Apply" /> method of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPropertyPage" /> interface).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageNotify">
      <summary>Tells the environment that a property page wants notification when it is visible. Optional interface for implementers of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPage" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageNotify.OnShowPage(System.Int32)">
      <summary>Called whenever a property page window changes visibility. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fPageActivated">[in] Indicates whether the property page window is visible or not. If true, the window is visible. If false, the window is not visible.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamIn">
      <summary>Reads a property name, type, and value from a stream. Implemented by the environment and used with the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamIn.Read(System.UInt32,System.UInt16[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE[],System.Object@,Microsoft.VisualStudio.OLE.Interop.IErrorLog)">
      <summary>Reads a property and value from the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cchPropertyName">[in] Length of <paramref name="szPropertyName" />.</param>
      <param name="szPropertyName">[out] String containing the property name.</param>
      <param name="pcchPropertyNameActual">[out] Length of property name.</param>
      <param name="pvspspt">[out] Pointer to a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE" /> enumeration indicating whether this is a simple property or a substream of the property stream.</param>
      <param name="pvarValue">[out] A VARIANT containing the property value.</param>
      <param name="pIErrorLog">[in] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IErrorLog" /> interface to use for reporting errors.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamIn.SkipToEnd">
      <summary>Go to the end of the input stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut">
      <summary>Writes out a property's name and its value. Also provides transaction-like handling for output. Implemented by the environment. Used with the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.BeginPropertySection(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut@,System.UInt32@)">
      <summary>Begins a property section (inner property stream) used until a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.EndPropertySection(System.UInt32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szName">[in] String containing the name of the property section.</param>
      <param name="szLineComment">[in] String containing a comment about the section.</param>
      <param name="ppIVsPropertyStreamOut">[out] Pointer to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.BeginPropertySection(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut@,System.UInt32@)" /> interface to use for output.</param>
      <param name="pdwCookie">[out] Pointer to an integer that is a cookie identifying this property section. Used in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.EndPropertySection(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.EndPropertySection(System.UInt32)">
      <summary>Ends a property section (an inner property stream).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Pointer to an integer that is a cookie identifying the property section to end. Cookie comes from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.BeginPropertySection(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut@,System.UInt32@)" /> call.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.Flush">
      <summary>Flushes a property stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.Write(System.String,System.Object,System.String)">
      <summary>Writes a property name, value, and comment to the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szPropertyName">[in] String containing the name of the property.</param>
      <param name="varValue">[in] A VARIANT containing the property value.</param>
      <param name="szLineComment">[in] An optional string containing a comment.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyStreamOut.WriteSzAsBSTR(System.String,System.String,System.String)">
      <summary>Write out a null-terminated string property value as a BSTR.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szPropertyName">[in] String containing the property name.</param>
      <param name="szValue">[in] String containing the property's value.</param>
      <param name="szLineComment">[in] An optional string containing a comment.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideComponentEnumeration">
      <summary>Writes an XML document in a string out to a file. A support interface for enumerator interfaces. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SCompEnumService" /> (SID_SCompEnumService) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProvideComponentEnumeration.WriteXMLToFile(System.String,System.String@)">
      <summary>Writes a string of XML out to a file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrDesiredFile">[in] String containing XML to write out.</param>
      <param name="pbstrActualFile">[out] Pointer to a string containing the XML as it was written out.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext">
      <summary>Provides context for an item in a selection container.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext.GetUserContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
      <summary>Informs the environment where the selection's context is located.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppctx">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> interface, representing the context bag for the selection container.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContextForObject">
      <summary>Retrieves the user context interface, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> for a given object. A user context provides things such as the text for a search or a help keyword.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContextForObject.GetObjectContext(System.Object,Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
      <summary>Return the user context (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> interface) of an object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="punk">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.IUnknown" /> interface of the object.</param>
      <param name="ppctx">[out] Pointer to the user context (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" />) of the object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2">
      <summary>Indicates to the environment or source control package that a file is about to be changed in memory or saved.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.BeginQuerySaveBatch">
      <summary>Creates a batch of a sequence of documents before attempting to save them to disk.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.DeclareReloadableFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[])">
      <summary>States that a file will be reloaded if it changes on disk.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Path to the file on the disk.</param>
      <param name="rgf">[in] Flags whose values for valid file attributes are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags" /> enumeration. The default value is zero.</param>
      <param name="pFileInfo">[in] Can be null. This parameter is ignored if <paramref name="rgf" /> is 0. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.DeclareUnreloadableFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[])">
      <summary>States that a file will not be reloaded if it changes on disk</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Path to the file on the disk.</param>
      <param name="rgf">[in] Flags whose values for the file attributes are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags" /> enumeration. Default = 0.</param>
      <param name="pFileInfo">[in] Can be NULL. This parameter is ignored if <paramref name="rgf" /> is 0. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.EndQuerySaveBatch">
      <summary>Ends the batch started by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.BeginQuerySaveBatch" /> method and displays any user interface (UI) generated within the batch.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.IsReloadable(System.String,System.Int32@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsQueryEditQuerySave" /> service's understanding of whether this file is reloadable</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.The parameter<paramref name=" pbResult" /> will be:Nonzero (true) if either the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.DeclareReloadableFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[])" /> method or nothing has been called on this file.Zero (false) if the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.DeclareUnreloadableFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[])" /> method has been called on this file.</returns>
      <param name="pszMkDocument">[in] Path to the file on the disk.</param>
      <param name="pbResult">[out] If nonzero (true), the file is reloadable. If zero (false), the file is not reloadable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.OnAfterSaveUnreloadableFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[])">
      <summary>Synchronizes or refreshes the file date and size after an editor saves an unreloadable file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Path to the file on the disk.</param>
      <param name="rgf">[in] Flags whose values for the file attributes are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags" /> enumeration. The default value is zero.</param>
      <param name="pFileInfo">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA" /> structure. Can be null. This parameter is ignored if <paramref name="rgf" /> is zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)">
      <summary>Called when a file is about to be edited.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.The return value in <paramref name="pfEditCanceled" /> indicates whether it is OK for editing of the file to continue.The parameter<paramref name=" prgfMoreInfo" /> returns the following results:Whether any files are checked outWhether any files changed on checkoutWhether any files are being edited in memoryWhether in-memory edit is not allowedWhether noisy checkout is required (in silent mode only)Whether checkout has been canceled or has failed</returns>
      <param name="rgfQueryEdit">[in] Set of flag values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags" /> enumeration. Default is 0.</param>
      <param name="cFiles">[in] Count of files.</param>
      <param name="rgpszMkDocuments">[in] File to be processed. This is the same size as <paramref name="cFiles" />. It is not valid for <paramref name="cFiles" /> to be 0.</param>
      <param name="rgrgf">[in] An array of flag values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags" /> enumeration. NULL implies that they are all 0.</param>
      <param name="rgFileInfo">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA" /> structure containing information about the file attributes. This can be null; it is ignored if <paramref name="rgrgf" /> is null.</param>
      <param name="pfEditVerdict">[out] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> enumeration indicating whether editing can continue.</param>
      <param name="prgfMoreInfo">[out] Pointer to a set of flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)">
      <summary>Notifies the environment that a file is about to be saved.</summary>
      <returns>If the method fails, it returns an error code.If it succeeds, it returns:<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_SaveOK" />Save the file. The file should not be read-only at this point.<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_ForceSaveAs" />QuerySaveFile has not put up a Save As dialog box, but either it is quietly telling you to do so, or the user has been prompted and has selected Save As. If you are editing a conventional file, you are encouraged to call the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetSaveFileNameViaDlg(Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW[])" /> method in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell" /> interface at this point. <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_UserCanceled" />The user was notified that the file is read-only and has elected either to not save or to cancel the operation. The choice depends on the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.BeginQuerySaveBatch" /> / <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.EndQuerySaveBatch" /> methods. The results for <paramref name="*pdwQSResult" /> are:Proceed with save (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_SaveOK" />).Do not save (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Continue" />).Save as (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_ForceSaveAs" />).Cancel Save (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_UserCanceled" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Cancel" />).</returns>
      <param name="pszMkDocument">[in] Path to the file (document to be saved) on the disk.</param>
      <param name="rgf">[in] Flags whose values for valid file attributes are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags" /> enumeration. The default value is zero.</param>
      <param name="pFileInfo">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA" /> structure containing information about the file attributes. Can be null; is ignored if <paramref name="rgf" /> is 0.</param>
      <param name="pdwQSResult">[out] Pointer to a value taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)">
      <summary>Notifies the environment that multiple files are about to be saved.</summary>
      <returns>If the method fails, it returns an error code.If it succeeds, it returns:  <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_SaveOK" />Save the file. The file should not be read-only at this point.<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_ForceSaveAs" />This method has not put up a Save As dialog box, but either it is quietly telling you to do so, or the user has been prompted and has selected Save As. If you are editing a conventional file, you are encouraged to call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetSaveFileNameViaDlg(Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW[])" /> at this point. <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_UserCanceled" />The user was notified that the file is read-only and has elected either to not save or to cancel the operation. The choice depends on the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.BeginQuerySaveBatch" /> / <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.EndQuerySaveBatch" /> methods .NoteIf the editor is trying to save multiple files, you must know the batching state and the difference between no and cancel. Call the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)" /> method for each individual file. If the environment returns <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_UserCanceled" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Cancel" />, then the save is canceled. If the environment returns <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Continue" />, then that one file in the batch will not be saved, but you can continue to save the other files.The results for <paramref name="*pdwQSResult" /> are:  Proceed with save (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_SaveOK" />).Do not save (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Continue" />).Save as (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_ForceSaveAs" />).Cancel Save (<see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_UserCanceled" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Cancel" />).</returns>
      <param name="rgfQuerySave">[in] Flags are currently unused. The caller should always pass in the default null flag, which is zero.</param>
      <param name="cFiles">[in] File count.</param>
      <param name="rgpszMkDocuments">[in] Path to the file on the disk.</param>
      <param name="rgrgf">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags" /> enumeration for valid file attributes. Default = 0.</param>
      <param name="rgFileInfo">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA" /> structure containing information about the file attributes. Can be null; is ignored if <paramref name="rgrgf" /> is 0.</param>
      <param name="pdwQSResult">[out] Pointer to a value taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors">
      <summary>Registers and unregisters editors in the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors.RegisterEditor(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory,System.UInt32@)">
      <summary>Registers an editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidEditor">[in] Unique GUID of the editor that was registered.</param>
      <param name="pVsPF">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" /> interface.</param>
      <param name="pdwCookie">[out] Abstract handle to be used later to unregister this editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors.UnregisterEditor(System.UInt32)">
      <summary>Unregisters an editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle that was returned by the call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors.RegisterEditor(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory,System.UInt32@)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget">
      <summary>Used to register and unregister a command target (an instance of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />) as a high priority command handler. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsRegisterPriorityCommandTarget" /> (SID_SVsRegisterPriorityCommandTarget) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget.RegisterPriorityCommandTarget(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.UInt32@)">
      <summary>Registers a new command target (<see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Must be zero.</param>
      <param name="pCmdTrgt">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface to register.</param>
      <param name="pdwCookie">[out] Pointer to a cookie (VSCOOKIE). Used when unregistering the command target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget.UnregisterPriorityCommandTarget(System.UInt32)">
      <summary>Unregisters the command target identified by a cookie.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Cookie (VSCOOKIE) identifying the command target to unregister. Returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget.RegisterPriorityCommandTarget(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes">
      <summary>Registers a VSPackage project type in the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes.RegisterProjectType(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory,System.UInt32@)">
      <summary>Registers a project type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjType">[in] Unique identifier of the project type as it appears in the registry.</param>
      <param name="pVsPF">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory" /> interface.</param>
      <param name="pdwCookie">[out] Abstract handle used to retrieve this entry from the environment and to unregister the project type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes.UnregisterProjectType(System.UInt32)">
      <summary>Unregisters a project type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle returned from the environment when the project type was registered by the call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes.RegisterProjectType(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRelativePathResolver">
      <summary>Allows packages to resolve a relative path to an absolute path when IVsUIShellOpenDocument::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.SearchProjectsForRelativePath(System.UInt32,System.String,System.String[])" /> is called.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRelativePathResolver.ResolveRelativePath(System.UInt32,System.String,System.String@)">
      <summary>Resolves a relative path to an absolute path for a document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use. Must be zero.</param>
      <param name="pszRelPath">[in] Relative path to the document.</param>
      <param name="pbstrAbsPath">[out, retval] Absolute path to the document.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsResourceView">
      <summary>Represents the resource view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents">
      <summary>Implements methods that fire in response to changes to documents in the Running Document Table (RDT).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after a change in an attribute of a document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is placed in the Hide state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose window has been hidden.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface representing the frame containing the document's window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after application of the first lock of the specified type to the specified document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document that has had its first lock applied. See Remarks.</param>
      <param name="dwRDTLockType">[in] Specifies the type of document lock. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] The number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] The number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterSave(System.UInt32)">
      <summary>Called after saving a document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document that has just been saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before displaying a document window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose window is about to be shown.</param>
      <param name="fFirstShow">[in] Non-zero (TRUE) if the document window is being displayed for the first time.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the frame containing the document's window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose last lock is about to be removed.</param>
      <param name="dwRDTLockType">[in] Type of lock being released. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] The number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] The number of edit locks remaining.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2">
      <summary>Implements methods that fire in response to changes to documents in the Running Document Table (RDT).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after a change in a document attribute of a document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Called after a document attribute changes. This is an advanced version of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <param name="pHierOld">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that previously owned the document.</param>
      <param name="itemidOld">[in] Indicates the previous item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentOld">[in] Name of the old document.</param>
      <param name="pHierNew">[in] The current <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that now owns the document.</param>
      <param name="itemidNew">[in] Indicates the new item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentNew">[in] Name of the new document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface object representing the frame containing the document's window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after applying the first lock of the specified type to the specified document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] Specifies the type of document lock. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of edit locks remaining.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before displaying a document window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="fFirstShow">[in] Non-zero (TRUE) if the doc window is being displayed for the first time.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface object representing the frame that contains the document's window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] Type of lock being released. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of edit locks remaining.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3">
      <summary>Implements methods that fire in response to changes to documents in the Running Document Table (RDT).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after an attribute of a document in the Running Document Table (RDT) changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Called after a document attribute is changed. This is an advanced version of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <param name="pHierOld">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that previously owned the document.</param>
      <param name="itemidOld">[in] The previous item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentOld">[in] Name of the old document.</param>
      <param name="pHierNew">[in] The current <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that owns the document.</param>
      <param name="itemidNew">[in] Indicates the new item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentNew">[in] Name of the new document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface representing the document window's frame.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after application of the first lock of the specified type to a document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] The document lock type. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of remaining read locks.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of remaining edit locks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before displaying a document window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="fFirstShow">[in] Non-zero (TRUE) if the doc window is being displayed for the first time.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface object representing the frame that contains the document's window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] Type of lock being released. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of remaining read locks.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of remaining edit locks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeSave(System.UInt32)">
      <summary>Called before saving a document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document about to be saved..</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable">
      <summary>Manages the set of currently open documents in the environment. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.AdviseRunningDocTableEvents(Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents,System.UInt32@)">
      <summary>Enables the client to receive notifications of changes to the Running Document Table (RDT).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents" /> interface that receives the event notifications.</param>
      <param name="pdwCookie">[out] Returns an abstract value that identifies the client to be advised of RDT events. Use this cookie later in a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnadviseRunningDocTableEvents(System.UInt32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.FindAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)">
      <summary>Locates a document in the RDT using the document file name, then obtains a read or edit lock on that document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwRDTLockType">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="pszMkDocument">[in] Path to the located document.</param>
      <param name="ppHier">[out, optional] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the located document.</param>
      <param name="pitemid">[out, optional] Returns an item identifier of the located document. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="ppunkDocData">[out, optional] Returns the IUnknown interface. See Remarks for details.</param>
      <param name="pdwCookie">[out, optional] Returns an abstract value for the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)">
      <summary>Returns information about a document registered in the RDT, given the cookie.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Abstract value representing the document for which information was requested.</param>
      <param name="pgrfRDTFlags">[out] Returns flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="pdwReadLocks">[out] Returns the number of read locks on the document.</param>
      <param name="pdwEditLocks">[out] Returns the number of edit locks on the document.</param>
      <param name="pbstrMkDocument">[out] Returns the path and file name of the document.</param>
      <param name="ppHier">[out, optional] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="pitemid">[out, optional] Item identifier of the document. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="ppunkDocData">[out, optional] Returns an IUnknown interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetRunningDocumentsEnum(Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments@)">
      <summary>Enumerates through all documents in the RDT.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.LockDocument(System.UInt32,System.UInt32)">
      <summary>Obtains a read or edit lock on a document when it is opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfRDTLockType">[in] Flag whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwCookie">[in] Abstract value representing the open document for which a read or an edit lock is to be obtained.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.ModifyDocumentFlags(System.UInt32,System.UInt32,System.Int32)">
      <summary>Modifies the RDT document flags for a registered document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] Unique value representing the document.</param>
      <param name="grfFlags">[in] Valid document flags. See Remarks for valid modifications. See <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /></param>
      <param name="fSet">[in]. Flag indicating that the document flag has been set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)">
      <summary>Notifies the client when changes are made to the document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract value representing the document that is changed.</param>
      <param name="grfDocChanged">[in] RDT attributes whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyOnAfterSave(System.UInt32)">
      <summary>Fires after a document in the RDT has been saved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract value representing the document that is saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyOnBeforeSave(System.UInt32)">
      <summary>Fires before a document in the RDT is saved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract value representing the document that is to be saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.UInt32@)">
      <summary>Creates an entry in the running document table when a document is created or opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfRDTLockType">[in] Flags taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" />, <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS2" />, and <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS3" /> enumerations. The flags must include either RDT_EditLock or RDT_ReadLock.</param>
      <param name="pszMkDocument">[in] Path to the document.</param>
      <param name="pHier">[in] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy that owns the document. Can only be a null value if a read lock has been obtained.</param>
      <param name="itemid">[in] Item identifier of the document in the hierarchy. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="punkDocData">[in] The IUnknown interface of the document. A null value indicates no document object that can be persisted.</param>
      <param name="pdwCookie">[out] Returns an abstract value representing the document in the RDT.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterDocumentLockHolder(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,System.UInt32@)">
      <summary>Registers a document lock holder in the running document table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfRDLH">[in] This is zero or a flag taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREGDOCLOCKHOLDER" /> enumeration.</param>
      <param name="dwCookie">[in] Abstract value representing the open document for which the read or edit lock is to be released.</param>
      <param name="pLockHolder">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder" /> interface representing the document lock holder for the registered document.</param>
      <param name="pdwLHCookie">[out] Unique value representing the document lock holder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)">
      <summary>Renames and/or changes the ownership of a document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocumentOld">[in] Path to the previous document.</param>
      <param name="pszMkDocumentNew">[in] Path to the current document.</param>
      <param name="pHier">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that is to take ownership. Use HIERARCHY_DONTCHANGE if not changing ownership.</param>
      <param name="itemidNew">[in] Item identifier of the current document if the hierarchy is to take ownership. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />. Use <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if not changing ownership.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.SaveDocuments(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32)">
      <summary>Saves the documents.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfSaveOpts">[in] Save options whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS" /> enumeration.</param>
      <param name="pHier">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that owns the document.</param>
      <param name="itemid">[in] Item identifier of the saved documents. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="docCookie">[in] Abstract value representing the saved documents.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnadviseRunningDocTableEvents(System.UInt32)">
      <summary>Disables the client from receiving notifications of changes to the RDT.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract value that identifies the client that is to be disabled from receiving RDT events. See Remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnlockDocument(System.UInt32,System.UInt32)">
      <summary>Releases a read or edit lock on the open document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfRDTLockType">[in] Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration. Use the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_RequestUnlock" /> flag with this method to indicate what should happen if this is the last unlock, because the last unlock will cause the document to be saved. </param>
      <param name="dwCookie">[in] Abstract value representing the open document for which the read or edit lock is to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnregisterDocumentLockHolder(System.UInt32)">
      <summary>Unregisters a document lock holder in the running document table.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwLHCookie">[in] Unique identifier for the document lock holder. See Remarks.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSaveOptionsDlg">
      <summary>Shows a dialog box from which to choose additional save format options from within the Save As dialog box. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSaveOptionsDlg.ShowSaveOptionsDlg(System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Shows a dialog box from which to choose additional save format options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved. Do not use.</param>
      <param name="hwndDlgParent">[in] The window to use as the save options dialog’s parent.</param>
      <param name="pszFilename">[in] The absolute path of the file that is to be saved.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2">
      <summary>Allows projects and hierarchies to register themselves with source control and obtain information on source control status.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.BrowseForProject(System.String@,System.Int32@)">
      <summary>Obsolete: returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="pbstrDirectory">Do not use.</param>
      <param name="pfOK">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.CancelAfterBrowseForProject">
      <summary>Obsolete: returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.GetSccGlyph(System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])">
      <summary>This method is called by projects to discover the source control glyphs to use on files and the files' source control status; this is the only way to get status.</summary>
      <returns>The method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if at least one of the files is controlled, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if none is controlled.</returns>
      <param name="cFiles">[in] Count of files. It should be greater than 0 if there are files under source code control. Currently, the environment supports only a count of 1.</param>
      <param name="rgpszFullPaths">[in] Array of paths to files; cannot be null.</param>
      <param name="rgsiGlyphs">[out] Array of icons corresponding to <paramref name="rgpszFullPaths" />; cannot be null. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> for additional information.</param>
      <param name="rgdwSccStatus">[out] Specifies status for corresponding <paramref name="rgpszFullPaths" /> entry. For a list of possible values, see File Status Code Enumerator. This parameter can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.GetSccGlyphFromStatus(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsStateIcon[])">
      <summary>This function determines which glyph to display, given a combination of status flags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.NoteIf this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, it must set <paramref name="psiGlyph" /> to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> value other than <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_NOSTATEICON" /> (which is always considered an invalid icon index).</returns>
      <param name="dwSccStatus">[in] A combination of flags from the SccStatus enumeration. For a list of possible values, see File Status Code Enumerator.</param>
      <param name="psiGlyph">[out] Returns the icon to display as a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.IsInstalled(System.Int32@)">
      <summary>This function determines whether the source control package is installed. Source control packages should always return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> and <paramref name="pbInstalled" /> = nonzero.</summary>
      <returns>Source control packages should always return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
      <param name="pbInstalled">[out] Returns nonzero (true) if the source control package is installed; otherwise, returns zero (false). Source control packages should always set this to nonzero (true).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.RegisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2,System.String,System.String,System.String,System.String)">
      <summary>This method is called by projects that are under source control when they are first opened to register project settings.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pscp2Project">[in] Pointer to the project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2" /> interface. This interface must be on the same object that supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
      <param name="pszSccProjectName">[in] A string that identifies the project location on the server.</param>
      <param name="pszSccAuxPath">[in] A string that identifies the path to the server.</param>
      <param name="pszSccLocalPath">[in] A string that identifies the local path to the project.</param>
      <param name="pszProvider">[in] A string that identifies the source control package.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.UnregisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2)">
      <summary>Called by projects registered with the source control portion of the environment before they are closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pscp2Project">[in] Pointer to the project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2" /> interface. Note   This interface must be on the same object that supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2">
      <summary>Implemented in a project system to provide source control for project files and project items.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
      <summary>This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.NoteIf a project returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.GetMkDocument(System.UInt32,System.String@)" /> will be called to discover the file associated with the node. If each of a project's nodes refers to a single file, and there are no special files, then a project can safely always return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
      <param name="itemid">[in] Identifier for the VSITEMID being queried.</param>
      <param name="pCaStringsOut">[out] Pointer to an array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.CALPOLESTR" /> strings containing the file names for this item.</param>
      <param name="pCaFlagsOut">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.CADWORD" /> array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
      <summary>This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item being queried. Value is taken from the VSITEMIDDWORD.</param>
      <param name="pszSccFile">[in] One of the files associated with the node..</param>
      <param name="pCaStringsOut">[out] Special files associated with the file indicated by the <paramref name="pszSccFile" /> value. These are returned in a <see cref="T:Microsoft.VisualStudio.OLE.Interop.CALPOLESTR" /> array.</param>
      <param name="pCaFlagsOut">[out] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CADWORD" /> structure. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])">
      <summary>This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cAffectedNodes">[in] Count of changed nodes.</param>
      <param name="rgitemidAffectedNodes">[in] An array of VSITEMID identifiers of the changed nodes.</param>
      <param name="rgsiNewGlyphs">[in] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> glyphs representing the new state of the corresponding item in <paramref name="rgitemidAffectedNodes" />.</param>
      <param name="rgdwNewSccStatus">[in] An array of status flags from the File Status Code Enumerator (SccStatus) corresponding to <paramref name="rgitemidAffectedNodes" />. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.SetSccLocation(System.String,System.String,System.String,System.String)">
      <summary>This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSccProjectName">[in] String, opaque to the project, that identifies the project location on the server. Persist this string in the project file.</param>
      <param name="pszSccAuxPath">[in] String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>
      <param name="pszSccLocalPath">[in] String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>
      <param name="pszSccProvider">[in] String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents">
      <summary>Notifies registered VSPackages of changes to the current selection, element value, or command UI context.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnCmdUIContextChanged(System.UInt32,System.Int32)">
      <summary>Reports that the command UI context has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCmdUICookie">[in] DWORD representation of the GUID identifying the command UI context passed in as the <paramref name="rguidCmdUI" /> parameter in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCmdUIContextCookie(System.Guid@,System.UInt32@)" />.</param>
      <param name="fActive">[in] Flag that is set to true if the command UI context identified by <paramref name="dwCmdUICookie" /> has become active and false if it has become inactive.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)">
      <summary>Reports that an element value has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="elementid">[in] DWORD value representing a particular entry in the array of element values associated with the selection context. For valid <paramref name="elementid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID" />.</param>
      <param name="varValueOld">[in] VARIANT that contains the previous element value. This parameter contains element-specific data, such as a pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface if <paramref name="elementid" /> is set to SEID_ResultsList or a pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface if <paramref name="elementid" /> is set to SEID_UndoManager.</param>
      <param name="varValueNew">[in] VARIANT that contains the new element value. This parameter contains element-specific data, such as a pointer to the IOleCommandTarget interface if <paramref name="elementid" /> is set to SEID_ResultsList or a pointer to the IOleUndoManager interface if <paramref name="elementid" /> is set to SEID_UndoManager.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)">
      <summary>Reports that the project hierarchy, item and/or selection container has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierOld">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project hierarchy for the previous selection.</param>
      <param name="itemidOld">[in] Identifier of the project item for previous selection. For valid <paramref name="itemidOld" /> values, see VSITEMID.</param>
      <param name="pMISOld">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface to access a previous multiple selection.</param>
      <param name="pSCOld">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface to access Properties window data for the previous selection.</param>
      <param name="pHierNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project hierarchy for the current selection.</param>
      <param name="itemidNew">[in] Identifier of the project item for the current selection. For valid <paramref name="itemidNew" /> values, see VSITEMID.</param>
      <param name="pMISNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface for the current selection.</param>
      <param name="pSCNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface for the current selection.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsShell">
      <summary>Provides access to the fundamental environment services, specifically those dealing with VSPackages and the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.AdviseBroadcastMessages(Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents,System.UInt32@)">
      <summary>Enables clients to receive messages that are typically broadcast only to the main application window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents" /> interface. You will receive notification of its implementation.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle required to unadvise the client of broadcast messages in the environment.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.AdviseShellPropertyChanges(Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents,System.UInt32@)">
      <summary>Enables clients to receive notifications of property changes to the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents" /> interface.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle to the client that will be notified of changes to environment properties</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.GetPackageEnum(Microsoft.VisualStudio.Shell.Interop.IEnumPackages@)">
      <summary>Returns a standard enumerator to iterate through the VSPackages currently loaded by the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumPackages" /> interface that specifies the enumerator of the loaded VSPackage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.GetProperty(System.Int32,System.Object@)">
      <summary>Returns an environment property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Identifier of the environment property. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID" />.</param>
      <param name="pvar">[out] Pointer to a VARIANT structure containing the value of the specified property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.IsPackageInstalled(System.Guid@,System.Int32@)">
      <summary>Determines whether a VSPackage identified by guidPackage is installed and registered with the system.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidPackage">[in] Unique identifier of the VSPackage.</param>
      <param name="pfInstalled">[out, retval] true if the VSPackage is installed in the registry.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.IsPackageLoaded(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsPackage@)">
      <summary>Determines whether a VSPackage identified by the package GUID (<paramref name="guidPackage" />) is loaded in the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidPackage">[in] GUID identifying a specific VSPackage.</param>
      <param name="ppPackage">[out] Pointer to a pointer to a package object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.LoadPackage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsPackage@)">
      <summary>Triggers a VSPackage implementation DLL to be loaded into the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidPackage">[in] Unique identifier of the VSPackage.</param>
      <param name="ppPackage">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> interface of the VSPackage that has just been loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.LoadPackageString(System.Guid@,System.UInt32,System.String@)">
      <summary>Directly loads a localized string from a VSPackage satellite DLL.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidPackage">[in] Unique identifier of the VSPackage whose UI DLL contains the string specified to load.</param>
      <param name="resid">[in] Identifier of the string table resource.</param>
      <param name="pbstrOut">[out, retval] Pointer to the requested string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.LoadUILibrary(System.Guid@,System.UInt32,System.UInt32@)">
      <summary>Triggers the satellite DLL to load if it has not already done so.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidPackage">[in] Unique identifier of the satellite DLL to be loaded.</param>
      <param name="dwExFlags">[in] Flags that are directly passed to the Microsoft Win32 LoadLibrary API.</param>
      <param name="phinstOut">[out, retval] Pointer to the HINSTANCE of the loaded library.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.SetProperty(System.Int32,System.Object)">
      <summary>Sets an environment property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Identifier of the environment property. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID" />.</param>
      <param name="var">[in] VARIANT structure that contains information on how to set the property identified by <paramref name="propid" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.UnadviseBroadcastMessages(System.UInt32)">
      <summary>Disables clients from receiving messages typically broadcast only to the main application window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle used to unadvise the client of broadcast messages in the environment.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.UnadviseShellPropertyChanges(System.UInt32)">
      <summary>Disables clients from receiving notifications of property changes to the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle used to unadvise the client of property changes to the environment.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents">
      <summary>Implemented by clients of ShellPropertyChangeEvents. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents.OnShellPropertyChange(System.Int32,System.Object)">
      <summary> Called when a shell property changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] ID of the property that changed.</param>
      <param name="var">[in] the new value of the property.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory">
      <summary>Creates a doc data object from a given file and returns the requested interface of the document. The environment supplies a default implementation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory.LoadDocument(System.String,System.Guid@,System.IntPtr@)">
      <summary>Loads the given file into a document data object and returns the given interface on that object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] Pointer to a string containing the path and file name.</param>
      <param name="riid">[in] Pointer to a GUID that is the REFIID of the interface desired.</param>
      <param name="ppDocData">[out] Pointer to the desired interface on the object implementing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator">
      <summary>Transforms a single input file into a single output file that can be compiled or added to a project. Any COM component that implements the IVsSingleFileGenerator is a custom tool.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.DefaultExtension(System.String@)">
      <summary>Retrieves the file extension that is given to the output file name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDefaultExtension">[out, retval] Returns the file extension that is to be given to the output file name. The returned extension must include a leading period. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.Generate(System.String,System.String,System.String,System.IntPtr[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)">
      <summary>Executes the transformation and returns the newly generated output file, whenever a custom tool is loaded, or the input file is saved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wszInputFilePath">[in] The full path of the input file. May be null in future releases of Visual Studio, so generators should not rely on this value.</param>
      <param name="bstrInputFileContents">[in] The contents of the input file. This is either a UNICODE BSTR (if the input file is text) or a binary BSTR (if the input file is binary). If the input file is a text file, the project system automatically converts the BSTR to UNICODE.</param>
      <param name="wszDefaultNamespace">[in] This parameter is meaningful only for custom tools that generate code. It represents the namespace into which the generated code will be placed. If the parameter is not null and not empty, the custom tool can use the following syntax to enclose the generated code.   ' Visual Basic Namespace [default namespace]... End Namespace// Visual C#namespace [default namespace] { ... }</param>
      <param name="rgbOutputFileContents">[out] Returns an array of bytes to be written to the generated file. You must include UNICODE or UTF-8 signature bytes in the returned byte array, as this is a raw stream. The memory for <paramref name="rgbOutputFileContents" /> must be allocated using the .NET Framework call, System.Runtime.InteropServices.AllocCoTaskMem, or the equivalent Win32 system call, CoTaskMemAlloc. The project system is responsible for freeing this memory.</param>
      <param name="pcbOutput">[out] Returns the count of bytes in the <paramref name="rgbOutputFileContent" /> array.</param>
      <param name="pGenerateProgress">[in] A reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress" /> interface through which the generator can report its progress to the project system.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution">
      <summary>Provides top-level manipulation or maintenance of the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Adds a type of virtual project that is not created by clicking Open Project on the New menu to open the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the virtual project object. This object must support at least the following interfaces: <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /></param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProjectEx(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid@)">
      <summary>Assigns the original GUID to the project when it is recreated the next time the solution is opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <param name="rguidProjectID">[in] Unique project identifier (GUID).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AdviseSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents,System.UInt32@)">
      <summary>Establishes client notification of solution events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents" /> interface on the object requesting notification of solution events.</param>
      <param name="pdwCookie">[out] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UnadviseUpdateSolutionEvents(System.UInt32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CanCreateNewProjectAtLocation(System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a new project can be created at a given location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fCreateNewSolution">[in] If true, then a new solution will be created.</param>
      <param name="pszFullProjectFilePath">[in] Project path (including file name and extension) of the location to create the new project.</param>
      <param name="pfCanCreate">[out] If true, then a new project of a given name can be created at the specified location. If false, then a project of the same name already exists at the specified location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CloseSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically closes a document, a project, or the entire solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfCloseOpts">[in] Close options for the solution (.sln) file. For a list of <paramref name="grfCloseOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to close.</param>
      <param name="docCookie">[in] Document that was closed. This value is returned from the running document table, by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CreateNewProjectViaDlg(System.String,System.String,System.UInt32)">
      <summary>Controls options for the Create New Project dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszExpand">[in] Tree view node that is selected.</param>
      <param name="pszSelect">[in] List view item that is selected.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CreateProject(System.Guid@,System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@)">
      <summary>Creates or opens a project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectType">[in] Unique identifier for the project type obtained when the project factory is registered. Can be GUID_NULL, if a value for <paramref name="lpszMoniker" /> is specified. This parameter indicates the type of project to create or to add to the solution. If the value is GUID_NULL, then the environment attempts to determine the project type based on the extension of the file.</param>
      <param name="lpszMoniker">[in] Pointer to the file moniker. If this method is used to open a project, then specify the path to the project on disk (including project name and file extension). If the method is being used to create a project, then specify the full path to the template file that will be cloned.</param>
      <param name="lpszLocation">[in] Pointer to the path specifying the location for the new project. This parameter is used only when <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_CLONEFILE" /> is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is null (for open project). If the project is a directory-based project, then this is the directory for the project. The project file for the project is saved in this directory. If the project is not directory-based, then this location is used only to save the project file and perhaps as the default directory for newly created items. The <paramref name="szLocation" /> parameter is defined to always include the trailing slash (\). Then, the project factory does not have to look for paths that look like "C:\" versus "C:\MyProjects\Project1" when constructing the path name of the project file.</param>
      <param name="lpszName">[in] Pointer to the new project name. This parameter is used only when <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_CLONEFILE" /> is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is null (for open project). The project name does not include a file extension.</param>
      <param name="grfCreateFlags">[in] Controls how a project is created or opened. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" />.</param>
      <param name="iidProject">[in] Interface identifier of the returned <paramref name="ppProject" />. This value can be iid_NULL to specify no return.</param>
      <param name="ppProject">[out, iid_is(iidProject)] Pointer to the newly created project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CreateSolution(System.String,System.String,System.UInt32)">
      <summary>Creates a new solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszLocation">[in, unique] Path to the solution, excluding the filename.</param>
      <param name="lpszName">[in] Filename, excluding the extension.</param>
      <param name="grfCreateFlags">[in, unique] Controls how a new solution is created. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GenerateNextDefaultProjectName(System.String,System.String,System.String@)">
      <summary>This method obtains the default name for the next project in the solution (ProjectN).Generates the next default project name given a specific path.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBaseName">[in] Root name of the project.</param>
      <param name="pszLocation">[in] Location of the project (path).</param>
      <param name="pbstrProjectName">[out] Pointer to returned project name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GenerateUniqueProjectName(System.String,System.String@)">
      <summary>Generates a unique project name, given a root project name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszRoot">[in] Root project name. Passing in null causes the environment to use an appropriate default value for the name, like Project.</param>
      <param name="pbstrProjectName">[out] Pointer to the project name based on the root project name specified in the <paramref name="lpszRoot" /> parameter. This value is unique within the solution.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetGuidOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)">
      <summary>Returns the unique identifier for a project in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project for which the identifier is requested.</param>
      <param name="pguidProjectID">[out] Pointer to the unique identifier of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetItemInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project item reference.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Project item reference for which information is required.</param>
      <param name="propid">[in] Property identifier. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetItemOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy and hierarchy item pair for the specified project reference string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Pointer to the existing project item reference string, if applicable. Can be null.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pitemid">[out] Pointer to the item identifier referred to by the project reference. For a list of enumerated <paramref name="pitemid" /> values, see VSITEMID.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identifier describing the reason for a change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectEnum(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies@)">
      <summary>Returns an enumerator for all the projects in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfEnumFlags">[in] Specifies the projects to enumerate within a solution. For a list of <paramref name="grfEnumFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS" />.</param>
      <param name="rguidEnumOnlyThisType">[in] If the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_MATCHTYPE" /> flag is specified, the enumerator iterates projects of this type only. Otherwise, this parameter is ignored.</param>
      <param name="ppenum">[out] Pointer to the project enumerator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectFactory(System.UInt32,System.Guid[],System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory@)">
      <summary>Returns a project factory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pguidProjectType">[in, out] Unique identifier (GUID) of the project type. This parameter can be null if a value is specified for <paramref name="pszMkProject" />.</param>
      <param name="pszMkProject">[in] Path to the project. This parameter can be null if a value is specified for <paramref name="pguidProjectType" />.</param>
      <param name="ppProjectFactory">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory" /> interface of the requested project factory.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectFilesInSolution(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
      <summary>Compiles a list of the specified projects in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfGetOpts">[in] Options for returning the array of solution projects. For a list of <paramref name="grfGetOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS" />.</param>
      <param name="cProjects">[in] Number of projects in the solution, based on the option specified for the <paramref name="grfGetOpts" /> parameter.</param>
      <param name="rgbstrProjectNames">[out] Pointer to array of projects within the solution.</param>
      <param name="pcProjectsFetched">[out] Pointer to the number of project names placed in the array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project reference.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Project reference for which information is required.</param>
      <param name="propid">[in] Property identifier. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Property information is passed back to the caller through this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectOfGuid(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique identifier.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectID">[in] Unique identifier (GUID) for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by the identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy for the specified project reference string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Pointer to the existing project reference string, if applicable. Can be null.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identified describing the reason for the change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectOfUniqueName(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszUniqueName">[in] Unique name for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by <paramref name="pszUniqueName" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectTypeGuid(System.UInt32,System.String,System.Guid@)">
      <summary>Returns the project type, given a GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pszMkProject">[in] Pointer to the path of the project.</param>
      <param name="pguidProjectType">[out, retval] Pointer to the project type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjrefOfItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy and hierarchy item pair.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="itemid">[in] Valid item identifier within the project; not a VSITEMID value.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjrefOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified hierarchy.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProperty(System.Int32,System.Object@)">
      <summary>Returns the specified property of the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Property identifier for the required property information. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID" />.</param>
      <param name="pvar">[out] Pointer to property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetSolutionInfo(System.String@,System.String@,System.String@)">
      <summary>Returns the required solution file information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrSolutionDirectory">[out] Pointer to the solution directory.</param>
      <param name="pbstrSolutionFile">[out] Pointer to the solution file name.</param>
      <param name="pbstrUserOptsFile">[out] Pointer to the solutions options file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetUniqueNameOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns the unique name, given a project in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project.</param>
      <param name="pbstrUniqueName">[out] Pointer to the unique name of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetVirtualProjectFlags(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32@)">
      <summary>Determines how the virtual project was added to the Solution Explorer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified virtual project.</param>
      <param name="pgrfAddVPFlags">[out] Pointer to options for how virtual project was added to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32)">
      <summary>Completes the renaming of a project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.OpenSolutionFile(System.UInt32,System.String)">
      <summary>Opens a solution file of the type .sln, .dsw, or .vbg.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOpenOpts">[in] Options for opening a solution file. For a list of <paramref name="grfOpenOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS" />.</param>
      <param name="pszFilename">[in] Pointer to the name of the solution file to open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.OpenSolutionViaDlg(System.String,System.Int32)">
      <summary>Controls options for the Open Solution dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszStartDirectory">[in] Start directory pointed to by the Open Solution dialog box.</param>
      <param name="fDefaultToAllProjectsFilter">[in] If true, then the All Project filter is defaulted to instead of the solution filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.QueryEditSolutionFile(System.UInt32@)">
      <summary>Determines whether the solution file can be changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwEditResult">[out] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_EditOK" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_NoEdit_UserCanceled" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.QueryRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32,System.Int32@)">
      <summary>Determines whether the project can be renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pfRenameCanContinue">[out] If true, then the project can be renamed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.RemoveVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Removes a virtual project from the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfRemoveVPFlags">[in] Options for removing the virtual project from the solution. For a list of <paramref name="grfRemoveVPFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.SaveSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically saves a document, a project, or the entire solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfSaveOpts">[in] Save Options. For a list of <paramref name="grfSaveOpts" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to save.</param>
      <param name="docCookie">[in] Abstract handle to the element that was saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.SetProperty(System.Int32,System.Object)">
      <summary>Generically sets properties of the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Identifier of the solution property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID" />.</param>
      <param name="var">[out] Pointer to VARIANT that contains the property settings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.UnadviseSolutionEvents(System.UInt32)">
      <summary>Disables a client from receiving notifications of solution events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle to the client that is to be disabled from being notified of solution events.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution2">
      <summary>Provides top-level manipulation or maintenance of the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.AddVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Adds a type of virtual project that is not created by clicking OpenProject on the New menu to open the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the virtual project object. This object must support at least the following interfaces: <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /></param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.AddVirtualProjectEx(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid@)">
      <summary>Assigns the original GUID to the project when it is recreated the next time the solution is opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <param name="rguidProjectID">[in] Unique project identifier (GUID).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.AdviseSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents,System.UInt32@)">
      <summary>Establishes client notification of solution events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents" /> interface on the object requesting notification of solution events.</param>
      <param name="pdwCookie">[out] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UnadviseUpdateSolutionEvents(System.UInt32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CanCreateNewProjectAtLocation(System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a new project can be created at a given location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fCreateNewSolution">[in] If true, then a new solution will be created.</param>
      <param name="pszFullProjectFilePath">[in] Project path (including file name and extension) of the location to create the new project.</param>
      <param name="pfCanCreate">[out] If true, then a new project of a given name can be created at the specified location. If false, then a project of the same name already exists at the specified location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CloseSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically closes a document, a project, or the entire solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfCloseOpts">[in] Close options for the solution (.sln) file. For a list of <paramref name="grfCloseOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to close.</param>
      <param name="docCookie">[in] Document that was closed. This value is returned from the running document table, by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CreateNewProjectViaDlg(System.String,System.String,System.UInt32)">
      <summary>Controls options for the Create New Project dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszExpand">[in] Tree view node that is selected.</param>
      <param name="pszSelect">[in] List view item that is selected.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CreateProject(System.Guid@,System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@)">
      <summary>Creates or opens a project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectType">[in] Unique identifier for the project type obtained when the project factory is registered. Can be GUID_NULL, if a value for <paramref name="lpszMoniker" /> is specified. This parameter indicates the type of project to create or to add to the solution. If the value is GUID_NULL, then the environment attempts to determine the project type based on the extension of the file.</param>
      <param name="lpszMoniker">[in] Pointer to the file moniker. If this method is used to open a project, then specify the path to the project on disk (including project name and file extension). If the method is being used to create a project, then specify the full path to the template file that will be cloned.</param>
      <param name="lpszLocation">[in] Pointer to the path specifying the location for the new project. This parameter is used only when CPF_CLONEFILE is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is null (for open project). If the project is a directory-based project, then this is the directory for the project. The project file for the project is saved in this directory. If the project is not directory-based, then this location is used only to save the project file and perhaps as the default directory for newly created items. The <paramref name="szLocation" /> parameter is defined to always include the trailing slash (\). Then, the project factory does not have to look for paths that look like "C:\" versus "C:\MyProjects\Project1" when constructing the path name of the project file.</param>
      <param name="lpszName">[in] Pointer to the new project name. This parameter is used only when CPF_CLONEFILE is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is null (for open project). The project name does not include a file extension.</param>
      <param name="grfCreateFlags">[in] Controls how a project is created or opened. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" />.</param>
      <param name="iidProject">[in] Interface identifier of the returned <paramref name="ppProject" />. This value can be iid_NULL to specify no return.</param>
      <param name="ppProject">[out, iid_is(iidProject)] Pointer to the newly created project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CreateSolution(System.String,System.String,System.UInt32)">
      <summary>Creates a new solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszLocation">[in, unique] Path to the solution, excluding the filename.</param>
      <param name="lpszName">[in] Filename, excluding the extension.</param>
      <param name="grfCreateFlags">[in, unique] Controls how a new solution is created. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GenerateNextDefaultProjectName(System.String,System.String,System.String@)">
      <summary>Generates the next default project name given a specific path.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBaseName">[in] Root name of the project.</param>
      <param name="pszLocation">[in] Location of the project (path).</param>
      <param name="pbstrProjectName">[out] Pointer to returned project name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GenerateUniqueProjectName(System.String,System.String@)">
      <summary>Generates a unique project name, given a root project name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszRoot">[in] Root project name. Passing in null causes the environment to use an appropriate default value for the name, like Project.</param>
      <param name="pbstrProjectName">[out] Pointer to the project name based on the root project name specified in the <paramref name="lpszRoot" /> parameter. This value is unique within the solution.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetGuidOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)">
      <summary>Returns the unique identifier for a project in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project for which the identifier is requested.</param>
      <param name="pguidProjectID">[out] Pointer to the unique identifier of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetItemInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project item reference.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Project item reference for which information is required.</param>
      <param name="propid">[in] Property identifier. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetItemOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy and hierarchy item pair for the specified project reference string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Pointer to the existing project item reference string, if applicable. Can be null.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pitemid">[out] Pointer to the item identifier referred to by the project reference. For a list of enumerated <paramref name="pitemid" /> values, see VSITEMID.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identifier describing the reason for a change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectEnum(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies@)">
      <summary>Returns an enumerator for all the projects in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfEnumFlags">[in] Specifies the projects to enumerate within a solution. For a list of <paramref name="grfEnumFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS" />.</param>
      <param name="rguidEnumOnlyThisType">[in] If the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_MATCHTYPE" /> flag is specified, the enumerator iterates projects of this type only. Otherwise, this parameter is ignored.</param>
      <param name="ppenum">[out] Pointer to the project enumerator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectFactory(System.UInt32,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory@)">
      <summary>Returns a project factory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pguidProjectType">[in, out] Unique identifier (GUID) of the project type. This parameter can be null if a value is specified for <paramref name="pszMkProject" />.</param>
      <param name="pszMkProject">[in] Path to the project. This parameter can be null if a value is specified for <paramref name="pguidProjectType" />.</param>
      <param name="ppProjectFactory">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory" /> interface of the requested project factory.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectFilesInSolution(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
      <summary>Compiles a list of the specified projects in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfGetOpts">[in] Options for returning the array of solution projects. For a list of <paramref name="grfGetOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS" />.</param>
      <param name="cProjects">[in] Number of projects in the solution, based on the option specified for the <paramref name="grfGetOpts" /> parameter.</param>
      <param name="rgbstrProjectNames">[out] Pointer to array of projects within the solution.</param>
      <param name="pcProjectsFetched">[out] Pointer to the number of project names placed in the array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project reference.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Project reference for which information is required.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectOfGuid(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique identifier.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectID">[in] Unique identifier (GUID) for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by the identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy for the specified project reference string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszProjref">[in] Pointer to the existing project reference string, if applicable. Can be null.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identified describing the reason for the change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectOfUniqueName(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszUniqueName">[in] Unique name for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by <paramref name="pszUniqueName" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectTypeGuid(System.UInt32,System.String,System.Guid@)">
      <summary>Returns the project type, given a GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pszMkProject">[in] Pointer to the path of the project.</param>
      <param name="pguidProjectType">[out, retval] Pointer to the project type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjrefOfItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy and hierarchy item pair.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="itemid">[in] Valid item identifier within the project; not a VSITEMID value.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjrefOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified hierarchy.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProperty(System.Int32,System.Object@)">
      <summary>Returns the specified property of the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Property identifier for the required property information. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID" />.</param>
      <param name="pvar">[out] Pointer to property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetSolutionInfo(System.String@,System.String@,System.String@)">
      <summary>Returns the required solution file information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrSolutionDirectory">[out] Pointer to the solution directory.</param>
      <param name="pbstrSolutionFile">[out] Pointer to the solution file name.</param>
      <param name="pbstrUserOptsFile">[out] Pointer to the solutions options file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetUniqueNameOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns the unique name, given a project in the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project.</param>
      <param name="pbstrUniqueName">[out] Pointer to the unique name of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetVirtualProjectFlags(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32@)">
      <summary>Determines how the virtual project was added to the Solution Explorer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified virtual project.</param>
      <param name="pgrfAddVPFlags">[out] Pointer to options for how virtual project was added to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32)">
      <summary>Completes the renaming of a project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.OpenSolutionFile(System.UInt32,System.String)">
      <summary>Opens a solution file of the type .sln, .dsw, or .vbg.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOpenOpts">[in] Options for opening a solution file. For a list of <paramref name="grfOpenOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS" />.</param>
      <param name="pszFilename">[in] Pointer to the name of the solution file to open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.OpenSolutionViaDlg(System.String,System.Int32)">
      <summary>Controls options for the Open Solution dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszStartDirectory">[in] Start directory pointed to by the Open Solution dialog box.</param>
      <param name="fDefaultToAllProjectsFilter">[in] If true, then the All Project filter is defaulted to instead of the solution filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.QueryEditSolutionFile(System.UInt32@)">
      <summary>Determines whether the solution file can be changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwEditResult">[out] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_EditOK" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_NoEdit_UserCanceled" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.QueryRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32,System.Int32@)">
      <summary>Determines whether the project can be renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pfRenameCanContinue">[out] If true, then the project can be renamed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.RemoveVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Removes a virtual project from the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfRemoveVPFlags">[in] Options for removing the virtual project from the solution. For a list of <paramref name="grfRemoveVPFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.SaveSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically saves a document, a project, or the entire solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfSaveOpts">[in] Save Options. For a list of <paramref name="grfSaveOpts" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to save.</param>
      <param name="docCookie">[in] Abstract handle to the element that was saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.SetProperty(System.Int32,System.Object)">
      <summary>Generically sets properties of the solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.UnadviseSolutionEvents(System.UInt32)">
      <summary>Disables a client from receiving notifications of solution events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle to the client that is to be disabled from being notified of solution events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.UpdateProjectFileLocation(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies a solution of a project file location change.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager">
      <summary>Allows solutions to manage configuration information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)">
      <summary>Adds the caller to the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents" /> events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsUpdateSolutionEvents">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents" /> interface on the object requesting notification of solution events.</param>
      <param name="pdwCookie">[out] Pointer to a double word containing the cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.CanCancelUpdateSolutionConfiguration(System.Int32@)">
      <summary>Enables or disables the Cancel menu item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCanCancel">[out] Pointer to a flag indicating whether or nor the update can be cancelled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.CancelUpdateSolutionConfiguration">
      <summary>Cancels the update solution configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.DebugLaunch(System.UInt32)">
      <summary>Launches the startup project specified by the solution as the debug project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Specifies launch flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.FindActiveProjectCfg(System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg[])">
      <summary>Determines the project configuration that is currently active.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pvReserved1">[in] Reserved. Must be null.</param>
      <param name="pvReserved2">[in] Reserved. Must be null.</param>
      <param name="pIVsHierarchy_RequestedProject">[in] Pointer to an IVsHierarchy_RequestedProject object.</param>
      <param name="ppIVsProjectCfg_Active">[out] Pointer to a pointer to an IVsProjectCfg_Active object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.get_CodePage(System.UInt32@)">
      <summary>Obsolete method. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="puiCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.get_IsDebug(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfIsDebug">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.get_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Programmatic method to get the startup project that will be run when the F5 key is pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppHierarchy">[out] Pointer to a pointer to a hierarchy object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.GetProjectDependencies(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],System.UInt32[])">
      <summary>Returns a list of projects that the given hierarchy depends on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <param name="celt">[in] Specifies <paramref name="celt" />.</param>
      <param name="rgpHier">[in, out] Specifies projects to build.</param>
      <param name="pcActual">[out, optional] Pointer to the number of projects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.put_CodePage(System.UInt32)">
      <summary>Obsolete method. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="uiCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.put_IsDebug(System.Int32)">
      <summary>Obsolete method. Do not use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fIsDebug">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.QueryBuildManagerBusy(System.Int32@)">
      <summary>Determines if the build manager is busy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfBuildManagerBusy">[out] Pointer to a flag indicating that the build manager is busy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.QueryDebugLaunch(System.UInt32,System.Int32@)">
      <summary>Determines whether or not the F5 (debug start) key should be enabled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Specifies how the debugger is launched. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
      <param name="pfCanLaunch">[out] Pointer to a flag indicating whether or not the debug operation can be launched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.set_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Sets the startup project that will be run when the F5 key is pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.StartSimpleUpdateProjectConfiguration(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.UInt32,System.UInt32,System.Int32)">
      <summary>This is a variant of the update command that allows you to build, clean, deploy, or launch a single project configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsHierarchyToBuild">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of the project to build.</param>
      <param name="pIVsHierarchyDependent">[in] Pointer to an optional dependent project in the dependency graph contained in IVsHierarchy.</param>
      <param name="pszDependentConfigurationCanonicalName">[in] Pointer to a null terminated string containing the optional dependent configuration canonical name.</param>
      <param name="dwFlags">[in] Double word containing the build update flags. For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2" />.</param>
      <param name="dwDefQueryResults">[in] Double word containing the def query results. For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" />.</param>
      <param name="fSuppressUI">[in] Set to true to use the default response to any dialogs, which will not be displayed; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.StartSimpleUpdateSolutionConfiguration(System.UInt32,System.UInt32,System.Int32)">
      <summary>Builds, cleans, or deploys a list of solutions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Double word containing the build update flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2" /> for more information.</param>
      <param name="dwDefQueryResults">[in] Double word containing the <paramref name="DefQueryResults" />. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" /> for more information.</param>
      <param name="fSuppressUI">[in] Set to true to use the default response to any dialogs, which will not be displayed; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UnadviseUpdateSolutionEvents(System.UInt32)">
      <summary>Removes the caller from the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2" /> events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Double word containing the cookie received from a previous call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UpdateSolutionConfigurationIsActive(System.Int32@)">
      <summary>Checks for any build, clean, or deploy action in progress.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfIsActive">[out] Pointer to a flag indicating whether an action is active.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2">
      <summary>Allows solutions to manage configuration information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)">
      <summary>Adds the caller to the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2" /> events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsUpdateSolutionEvents">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents" /> object.</param>
      <param name="pdwCookie">[out] Pointer to a double word containing the cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.CalculateProjectDependencies">
      <summary>Forces dependencies to be recalculated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.CanCancelUpdateSolutionConfiguration(System.Int32@)">
      <summary>Enables or disables the Cancel menu item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCanCancel">[out] Pointer to a flag indicating whether or nor the update can be cancelled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.CancelUpdateSolutionConfiguration">
      <summary>Cancels the update solution configuration.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.DebugLaunch(System.UInt32)">
      <summary>Launches the startup project specified by the solution as the debug project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Specifies the launch flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.FindActiveProjectCfg(System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg[])">
      <summary>Determines the project configuration that is currently active.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pvReserved1">[in] Reserved. Must be null.</param>
      <param name="pvReserved2">[in] Reserved. Must be null.</param>
      <param name="pIVsHierarchy_RequestedProject">[in] Pointer to an <paramref name="IVsHierarchy_RequestedProject" /> object.</param>
      <param name="ppIVsProjectCfg_Active">[out] Pointer to a pointer to an <paramref name="IVsProjectCfg_Active" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.get_CodePage(System.UInt32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puiCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.get_IsDebug(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsDebug">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.get_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Programmatic method to get the startup project that will be run when the F5 key is pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppHierarchy">[out] Pointer to a pointer to a hierarchy object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.GetProjectDependencies(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],System.UInt32[])">
      <summary>Returns a list of projects that the given hierarchy depends on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <param name="celt">[in] Specifies <paramref name="celt" />.</param>
      <param name="rgpHier">[in, out] Specifies projects to build.</param>
      <param name="pcActual">[out, optional] Pointer to the number of projects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.put_CodePage(System.UInt32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="uiCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.put_IsDebug(System.Int32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="fIsDebug">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.QueryBuildManagerBusy(System.Int32@)">
      <summary>Determines if the build manager is busy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfBuildManagerBusy">[out] Pointer to a flag indicating that the build manager is busy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.QueryDebugLaunch(System.UInt32,System.Int32@)">
      <summary>Determines whether or not the F5 (debug start) key should be enabled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLaunch">[in] Specifies how the debugger is launched. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
      <param name="pfCanLaunch">[out] Pointer to a flag indicating whether or not the debug operation can be launched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.QueryProjectDependency(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Checks to see if one project is dependent upon another.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of a project to check for dependency on <paramref name="pHierDependentOn" />.</param>
      <param name="pHierDependentOn">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of a project that <paramref name="pHier" /> may be dependent on.</param>
      <param name="pfIsDependentOn">[out] The flag is set true if the dependency relationship exists, otherwise it is set to false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.SaveDocumentsBeforeBuild(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32)">
      <summary>A project calls this method to ensure that the buildable/runnable components of projects are saved before starting build or run operations.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of a project.</param>
      <param name="itemid">[in] Specifies VSITEMID. This is the VSITEMID corresponding to a single document in the project hierarchy.</param>
      <param name="docCookie">[in] Specifies the document cookie; an abstract handle to the document returned when it was registered with <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.set_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Sets the startup project that will be run when the F5 key is pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartSimpleUpdateProjectConfiguration(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.UInt32,System.UInt32,System.Int32)">
      <summary>This is a variant of the update command that allows you to build, clean, deploy, or launch a single project configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsHierarchyToBuild">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of the project to build.</param>
      <param name="pIVsHierarchyDependent">[in] Pointer to an optional dependent project in the dependency graph contained in IVsHierarchy.</param>
      <param name="pszDependentConfigurationCanonicalName">[in] Pointer to a null terminated string containing the optional dependent configuration canonical name.</param>
      <param name="dwFlags">[in] Double word containing the build update flags. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2" />.</param>
      <param name="dwDefQueryResults">[in] Double word containing the def query results. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" />.</param>
      <param name="fSuppressUI">[in] Set to true to use the default response to any dialogs, which will not be displayed; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartSimpleUpdateSolutionConfiguration(System.UInt32,System.UInt32,System.Int32)">
      <summary>Builds, cleans, or deploys a list of solutions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Double word containing the build update flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS" /> for more information.</param>
      <param name="dwDefQueryResults">[in] Double word containing the <paramref name="DefQueryResults" />. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" /> for more information.</param>
      <param name="fSuppressUI">[in] Set to true to use the default response to any dialogs, which will not be displayed; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartUpdateProjectConfigurations(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],System.UInt32,System.Int32)">
      <summary>Builds, cleans, or deploys a list of projects.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjs">[in] Count of projects to build.</param>
      <param name="rgpHierProjs">[in] Specifies list of projects to be built.</param>
      <param name="dwFlags">[in] Double word containing the flags. For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS" />.</param>
      <param name="fSuppressUI">[in] Set to true to use the default response to any dialogs, which will not be displayed; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartUpdateSpecificProjectConfigurations(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32,System.Int32)">
      <summary>Use this method to maintain total control of a build process.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjs">[in] Count of projects.</param>
      <param name="rgpHier">[in] Specifies projects to build.</param>
      <param name="rgpcfg">[in] A configuration in the projects specified in <paramref name="rgpHier" />.</param>
      <param name="rgdwCleanFlags">[in] dwOptions parameter for each corresponding project in <paramref name="rgpHier" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg2.StartBuildEx(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)" />. Can be null.</param>
      <param name="rgdwBuildFlags">[in] dwOptions for each corresponding project in <paramref name="rgpHier" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg2.StartBuildEx(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)" />. Can be null</param>
      <param name="rgdwDeployFlags">[in] dwOptions for each corresponding project in <paramref name="rgpHier" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.StartDeploy(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)" />. Can be null.</param>
      <param name="dwFlags">[in] Double word containing <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS" /> flags.</param>
      <param name="fSuppressUI">[in] Flag should be set true to use the default response to any dialogs, which will be suppressed; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.UnadviseUpdateSolutionEvents(System.UInt32)">
      <summary>Removes the caller from the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2" /> events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Double word containing the cookie received from a previous call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.UpdateSolutionConfigurationIsActive(System.Int32@)">
      <summary>Checks for any build, clean, or deploy action in progress.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfIsActive">[out] Pointer to a flag indicating whether an action is active.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents">
      <summary>Listening interface that monitors any notifications of changes to the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterCloseSolution(System.Object)">
      <summary>Notifies listening clients that a solution has been closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project has been loaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the unloaded project.</param>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that was loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project has been opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being loaded.</param>
      <param name="fAdded">[in] true if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>Notifies listening clients that the solution has been opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="fNewSolution">[in] true if the solution is being created. false if the solution was created previously or is being loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project is about to be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoved">[in] true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeCloseSolution(System.Object)">
      <summary>Notifies listening clients that the solution is about to be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project is about to be unloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that will be unloaded.</param>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the project being unloaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be closed.</param>
      <param name="fRemoving">[in] true if the project is being removed from the solution before the solution is closed. false if the project is being removed from the solution while the solution is being closed.</param>
      <param name="pfCancel">[out] true if the client vetoed the closing of the project. false if the client approved the closing of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>Queries listening clients as to whether the solution can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="pfCancel">[out] true if the client vetoed closing the solution. false if the client approved closing the solution.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be unloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be unloaded.</param>
      <param name="pfCancel">[out] true if the client vetoed unloading the project. false if the client approved unloading the project.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2">
      <summary>Listening interface that monitors any notifications of changes to the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterCloseSolution(System.Object)">
      <summary>Notifies listening clients that a solution has been closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project has been loaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the unloaded project.</param>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that was loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterMergeSolution(System.Object)">
      <summary>Notifies listening clients that all projects have been merged into the open solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project has been opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being loaded.</param>
      <param name="fAdded">[in] true if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>Notifies listening clients that the solution has been opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="fNewSolution">[in] true if the solution is being created. false if the solution was created previously or is being loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project is about to be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoved">[in] true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnBeforeCloseSolution(System.Object)">
      <summary>Notifies listening clients that the solution is about to be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project is about to be unloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that will be unloaded.</param>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the project being unloaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be closed.</param>
      <param name="fRemoving">[in] true if the project is being removed from the solution before the solution is closed. false if the project is being removed from the solution while the solution is being closed.</param>
      <param name="pfCancel">[out] true if the client vetoed the closing of the project. false if the client approved the closing of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>Queries listening clients as to whether the solution can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="pfCancel">[out] true if the client vetoed closing the solution. false if the client approved closing the solution.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be unloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be unloaded.</param>
      <param name="pfCancel">[out] true if the client vetoed unloading the project. false if the client approved unloading the project.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3">
      <summary>Listening interface that monitors any notifications of changes to the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterCloseSolution(System.Object)">
      <summary>Notifies listening clients that a solution has been closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired after closing all nested projects owned by a parent hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project has been loaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the unloaded project.</param>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that was loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterMergeSolution(System.Object)">
      <summary>Notifies listening clients that all projects have been merged into the open solution.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired after opening all nested projects owned by a parent hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project has been opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being loaded.</param>
      <param name="fAdded">[in] true if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>Notifies listening clients that the solution has been opened.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="fNewSolution">[in] true if the solution is being created. false if the solution was created previously or is being loaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project is about to be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoved">[in] true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeCloseSolution(System.Object)">
      <summary>Notifies listening clients that the solution is about to be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired before closing all nested projects owned by a parent hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired before opening all nested projects owned by a parent hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project is about to be unloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that will be unloaded.</param>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the project being unloaded.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be closed.</param>
      <param name="fRemoving">[in] true if the project is being removed from the solution before the solution is closed. false if the project is being removed from the solution while the solution is being closed.</param>
      <param name="pfCancel">[out] true if the client vetoed the closing of the project. false if the client approved the closing of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>Queries listening clients as to whether the solution can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="pfCancel">[out] true if the client vetoed closing the solution. false if the client approved closing the solution.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be unloaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be unloaded.</param>
      <param name="pfCancel">[out] true if the client vetoed unloading the project. false if the client approved unloading the project.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence">
      <summary>Facilitates writing package-specific properties and options into the solution file (.sln), and, conversely, the loading of properties and options from the file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)">
      <summary>Enables the loading of package-level user options that are stored in one or more named streams in the solution .sln file. This method allows the caller to name the option stream (or streams) to be loaded.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPSO">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts" /> interface.</param>
      <param name="pszKey">[in] Name of the stream to be opened in the options file storage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageSolutionProps(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps,System.String)">
      <summary>Writes properties to the solution .sln file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fPreLoad">[in] true if the solution properties are to be pre-loaded.</param>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface. A null value indicates the global section of the solution file is to be saved.</param>
      <param name="ppSP">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps" /> interface.</param>
      <param name="pszKey">[in] Name of the solution file section (the property bag) for which the properties should be written.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)">
      <summary>Writes user options to the solution file. Saves package-level user options to one or more named streams in the solution .sln file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPSO">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts" /> interface.</param>
      <param name="pszKey">[in] Name of the stream to which options are to be saved.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar">
      <summary>Provides access to the environment's status bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.Animation(System.Int32,System.Object@)">
      <summary>Controls the animation of the icon in the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. If this method is called in an instance of Visual Studio running in a remote session, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />, and the icon is not displayed.</returns>
      <param name="fOnOff">[in] Set to true to turn on animation, or set to false to turn it off..</param>
      <param name="pvIcon">[in] If the VARIANT is a <see cref="F:System.Runtime.InteropServices.VarEnum.VT_I2" />, it refers to the SBAI_Index of predefined animated icons. If this parameter is a <see cref="F:System.Runtime.InteropServices.VarEnum.VT_I4" />, it refers to an HBITMAP containing the filmstrip image for animation, whose width should be a multiple of its height.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.Clear">
      <summary>Clears the status text area and the editor information area in the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.FreezeOutput(System.Int32)">
      <summary>Inhibits updates to the status text area.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fFreeze">[in] true tells the environment to place a freeze on the status bar. No further updates can be made until the freeze is released. false releases the freeze.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.GetFreezeCount(System.Int32@)">
      <summary>Returns the number of freeze holds on the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="plCount">[out] Count of the number of freeze holds currently in place on the status bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.GetText(System.String@)">
      <summary>Retrieves the current status bar text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[out] Current status bar text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.IsCurrentUser(Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser,System.Int32@)">
      <summary>Determines whether the specified user is the current user of the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUser">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser" /> interface.</param>
      <param name="pfCurrent">[out] true if the user is current.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.IsFrozen(System.Int32@)">
      <summary>Returns the freeze state of the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfFrozen">[out] Flag indicating whether the status bar is frozen to new content.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.Progress(System.UInt32@,System.Int32,System.String,System.UInt32,System.UInt32)">
      <summary>Shows the progress of operations that take a determinate amount of time.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwCookie">[in, out] ID of the current user, to prevent multiple uses of the progress bar at the same time.</param>
      <param name="fInProgress">[in] true while the progress bar is in use; false when complete.</param>
      <param name="pwszLabel">[in] Text to display in status field while the progress bar is in use.</param>
      <param name="nComplete">[in] Number of units currently complete in the progress bar.</param>
      <param name="nTotal">[in] Total number of units for the progress bar operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetColorText(System.String,System.UInt32,System.UInt32)">
      <summary>Sets the status bar text with foreground and background colors.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] The text to display in the status text area.</param>
      <param name="crForeColor">[in] The foreground color of <paramref name="pszText" />.</param>
      <param name="crBackColor">[in] The background color of <paramref name="pszText" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetInsMode(System.Object@)">
      <summary>Sets the mode of the editor in the status bar to either insert or overwrite.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pvInsMode">[in] Pointer to a VARIANT indicating the insert mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetLineChar(System.Object@,System.Object@)">
      <summary>Displays the line number and character position in the editor information area of the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pvLine">[in] Line number of the cursor.</param>
      <param name="pvChar">[in] Character position of the cursor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetLineColChar(System.Object@,System.Object@,System.Object@)">
      <summary>Displays the line number, column number, and character position in the editor information area of the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pvLine">[in] Line number of the cursor.</param>
      <param name="pvCol">[in] Column number of the cursor.</param>
      <param name="pvChar">[in] Character position of the cursor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetSelMode(System.Object@)">
      <summary>Sets the block or stream selection mode of the editor in the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pvSelMode">[in] Pointer to a VARIANT indicating the selection mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetText(System.String)">
      <summary>Sets the status bar text in the text area.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] The text to display in the status text area.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetXYWH(System.Object@,System.Object@,System.Object@,System.Object@)">
      <summary>Displays the (x,y) position and the width and height of the current graphics box in the editor information area of the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pvX">[in] Pointer to the x ordinate location of the upper-left corner of the current graphic.</param>
      <param name="pvY">[in] Pointer to the y ordinate location of the upper-left corner of the current graphic.</param>
      <param name="pvW">[in] Pointer to the width of the current graphic.</param>
      <param name="pvH">[in] Pointer to the height of the current graphic.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser">
      <summary>Used to define each user of the status bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser.SetInfo">
      <summary>Sets the information in the status bar to reflect this status bar user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO">
      <summary>Provides a common way to perform multi-format saves. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsStructuredFileIO" /> (SID_SVsStructuredFileIO) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.CreateNew(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut@)">
      <summary>Creates a new multi-format file with format index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szFileName">[in] Null-terminated string containing the file name.</param>
      <param name="nFormatIndex">[in] Integer containing the format index.</param>
      <param name="dwShareMode">[in] Double word containing the share mode.</param>
      <param name="dwCreationDisposition">[in] Double word containing the creation disposition.</param>
      <param name="dwFlagsAndAttributes">[in] Double word containing the flags and attributes.</param>
      <param name="pIVsStructuredFileIOHelper">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper" /> object.</param>
      <param name="szFormatVersion">[in] Null-terminated string containing the format version.</param>
      <param name="szDescription">[in] Null-terminated string containing the description.</param>
      <param name="ppIVsPropertyFileOut">[out] Pointer to a pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.FindFormatIndex(System.UInt32,System.UInt32[])">
      <summary>Returns the format index for the CodePage of the data object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="uiCodePage">[in] Specifies CodePage.</param>
      <param name="pnFormatIndex">[out, optional] Pointer to an integer containing the format index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.GetFormatInfo(System.UInt32,System.UInt32[])">
      <summary>Returns the format information for the format index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nFormatIndex">[in] Integer containing the format index.</param>
      <param name="puiCodePage">[out, optional] Pointer to CodePage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.GetFormatList(System.String,System.String,System.String@)">
      <summary>Returns the format list for the file types supported by your VSPackage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szEntityName">[in] Null-terminated string containing the entity name, for example, "Distribution Unit Project File" or "VB Project File.".</param>
      <param name="szFileTypes">[in] Null-terminated string containing the file types. This is a semicolon-separated list of file extensions.</param>
      <param name="ppszFormatList">[out] Specifies the location in which the file format list will be stored.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.OpenExisting(System.String,System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn@,System.String[])">
      <summary>Open a previously created structured file data element and returns a pointer to the format index, data element, and pointer to a string containing the format version.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szFileName">[in] Null-terminated string containing the file name.</param>
      <param name="dwShareMode">[in] Double word containing the share mode.</param>
      <param name="dwCreationDisposition">[in] Double word containing the creation disposition.</param>
      <param name="dwFlagsAndAttributes">[in] Double word containing the flags and attributes.</param>
      <param name="pIVsStructuredFileIOHelper">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper" /> object.</param>
      <param name="pnFormatIndex">[out] Pointer to an integer containing the format index.</param>
      <param name="ppIVsPropertyFileIn">[out] Pointer to a pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn" /> object.</param>
      <param name="pbstrFormatVersion">[out, optional] Pointer to a string containing the format version.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper">
      <summary>Enables substitution of localized strings for tokens found in persisted files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper.LoadLocalizedString(System.UInt32,System.String@)">
      <summary>Loads tokens found in persisted files that are to be loaded with localized strings.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ulStringID">A string Identifier</param>
      <param name="pbstr">A pointer to a localized string.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSupportItemHandoff">
      <summary>Supports transferring an item from one project to another. This interface is implemented by the project that is transferring the item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSupportItemHandoff.HandoffItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProject3,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Supports transferring an item from one project to another.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item to be transferred.</param>
      <param name="pProjDest">[in] Project to which the document will be transferred.</param>
      <param name="pszMkDocumentOld">[in] String form of the moniker identifier of the document in the project system for the document prior to transfer. The requesting project will pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)" /> in the <paramref name="pszDocumentOld" /> parameter.</param>
      <param name="pszMkDocumentNew">[in] String form of the moniker identifier of the document in the project system for the document following transfer. The requesting project will pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)" /> as the <paramref name="pszDocumentNew" /> parameter.</param>
      <param name="punkWindowFrame">[in] Pointer to the window frame containing the document view. This parameter is optional if the document is not open.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetCellTooltip(System.Int32,System.Int32,System.String@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrTooltip">[Out] A pointer to a string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetEnabledCount(System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcEnabled">[in, out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetMetrics(Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS[])">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetSelection(System.Int32@,System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pxCur">[In, Out] A pointer to an integer value.</param>
      <param name="pyCur">[In, Out] A pointer to an integer value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.RealizePalette(System.IntPtr,System.IntPtr@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phpalOld">[Out] A pointer to a value of type CPalette::operator HPALETTE.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.RenderCell(Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER[],System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pRender">[In] A pointer to an object of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER" />[].</param>
      <param name="ptcidRet">[In, Out] A pointer to an integer value that represents an MSO control ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.SelectCell(System.Int32,System.Int32)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="x">[In] A value of integer type.</param>
      <param name="y">[In] A value of integer type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.SelectionUpdate(System.Int32@,System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pxCur">[In, Out] A pointer to an integer value.</param>
      <param name="pyCur">[In, Out] A pointer to an integer value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem">
      <summary>Provides methods for modifying task behavior.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.CanDelete(System.Int32@)">
      <summary>Determines whether a task item can be deleted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCanDelete">[out, retval] If true, then the task item can be deleted. If false, then the item cannot be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
      <summary>Returns the category of a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCat">[out, retval] Category of the task item. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Column(System.Int32@)">
      <summary>Returns the column number of a task within the specified file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piCol">[out, retval] Number of the column that contains the task item within the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Document(System.String@)">
      <summary>Returns the name of the file associated with a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrMkDocument">[out, retval] Path to the document for this task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Checked(System.Int32@)">
      <summary>Determines whether the task item's check box is currently selected or cleared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfChecked">[out, retval] If true, then the check box for the task item is selected. If false, then the check box is cleared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
      <summary>Returns the priority level of a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ptpPriority">[out, retval] Priority (high, normal, or low) of the task item. For a list of <paramref name="ptpPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Text(System.String@)">
      <summary>Returns the description of the task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out, retval] Pointer to a description of the task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.HasHelp(System.Int32@)">
      <summary>Obsolete. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="pfHasHelp">true if the task supports a help topic on itself; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.ImageListIndex(System.Int32@)">
      <summary>Returns the index into the image list maintained by a provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIndex">[out, retval] Pointer to the index into the image list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
      <summary>Determines whether a specified task field is set to read-only status.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="field">[in] Task field of which to check read-only status. For a list of field values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD" />.</param>
      <param name="pfReadOnly">[out, retval] If true, then the task field is read-only. If false, then the task field can be edited by the user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Line(System.Int32@)">
      <summary>Returns the line number of a task item within a specified document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out, retval] Line number of the task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.NavigateTo">
      <summary>Opens a file associated with a task item and moves to the appropriate position in the file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.NavigateToHelp">
      <summary>If there is a help topic for this task item, this method should open it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.OnDeleteTask">
      <summary>Notifies the task provider that a user has deleted a task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.OnFilterTask(System.Int32)">
      <summary>Notifies the task provider that a task item has been filtered in or out of view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fVisible">[in] If true, then the task is visible. If false, then the task has been filtered out of view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Checked(System.Int32)">
      <summary>Sets whether a task item's check box is selected or cleared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fChecked">[in] If true, then the check box is selected. If false, then the check box is cleared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
      <summary>Sets the priority level of a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="tpPriority">[in] Priority level (high, medium, or low) of the task. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Text(System.String)">
      <summary>Sets the description for a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrName">[in] Description of the task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.SubcategoryIndex(System.Int32@)">
      <summary>Returns the index to the subcategory list maintained by the provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIndex">[out, retval] Index position in the subcategory list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2">
      <summary>Provides methods for modifying task behavior.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.BrowseObject(System.Object@)">
      <summary>OBSOLETE. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="ppObj">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.CanDelete(System.Int32@)">
      <summary>Determines whether a task item can be deleted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCanDelete">[out, retval] If true, then the task item can be deleted. If false, then the item cannot be deleted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
      <summary>Returns the category of a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCat">[out, retval] Category of the task item. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Column(System.Int32@)">
      <summary>Returns the column number of a task within the specified file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piCol">[out, retval] Number of the column that contains the task item within the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Document(System.String@)">
      <summary>Returns the name of the file associated with a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrMkDocument">[out, retval] Path to the document for this task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Checked(System.Int32@)">
      <summary>Determines whether the task item's check box is currently selected or cleared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfChecked">[out, retval] If true, then the check box for the task item is selected. If false, then the check box is cleared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_CustomColumnText(System.Guid@,System.UInt32,System.String@)">
      <summary>Returns the text of a customized field for the specified task list view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidView">[in] GUID of the task list view.</param>
      <param name="iCustomColumnIndex">[in] Index of the customized field.</param>
      <param name="pbstrText">[out] Pointer to a string containing the customized field text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
      <summary>Returns the priority level of a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ptpPriority">[out, retval] Priority (high, normal, or low) of the task item. For a list of <paramref name="ptpPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Text(System.String@)">
      <summary>Returns the description of the task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out, retval] Pointer to a description of the task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.HasHelp(System.Int32@)">
      <summary>Obsolete. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="pfHasHelp">Returns true if there is a help topic associated with this task; otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.ImageListIndex(System.Int32@)">
      <summary>Returns the index into the image list maintained by a provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIndex">[out, retval] Pointer to the index into the image list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.IsCustomColumnReadOnly(System.Guid@,System.UInt32,System.Int32@)">
      <summary>Determines if a customized task field is set to read-only status.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidView">[in] GUID of the task list view.</param>
      <param name="iCustomColumnIndex">[in] Index of the customized field.</param>
      <param name="pfReadOnly">[out] true if the customized field has read-only status.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
      <summary>Determines whether a specified task field is set to read-only status.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="field">Task field of which to check read-only status. For a list of field values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD" />.</param>
      <param name="pfReadOnly">out, retval] If true, then the task field is read-only. If false, then the task field can be edited by the user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Line(System.Int32@)">
      <summary>Returns the line number of a task item within a specified document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out, retval] Line number of the task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.NavigateTo">
      <summary>Opens a file associated with a task item and moves to the appropriate position in the file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.NavigateToHelp">
      <summary>Opens the associated help topic.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.OnDeleteTask">
      <summary>Notifies the task provider that a user has deleted a task.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.OnFilterTask(System.Int32)">
      <summary>Notifies the task provider that a task item has been filtered in or out of view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fVisible">[in] If true, then the task is visible. If false, then the task has been filtered out of view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_Checked(System.Int32)">
      <summary>Sets whether a task item's check box is selected or cleared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fChecked">[in] If true, then the check box is selected. If false, then the check box is cleared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_CustomColumnText(System.Guid@,System.UInt32,System.String)">
      <summary>Sets the text of a customized field for the specified task list view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidView">[in] GUID of the task list view.</param>
      <param name="iCustomColumnIndex">[in] Index of the customized field.</param>
      <param name="bstrText">[in] Pointer to a string containing the customized field text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
      <summary>Sets the priority level of a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="tpPriority">[in] Priority level (high, medium, or low) of the task. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_Text(System.String)">
      <summary>Sets the description for a task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrName">[in] Description of the task item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.SubcategoryIndex(System.Int32@)">
      <summary>Returns the index into the subcategory list maintained by a task provider.</summary>
      <param name="pIndex">[out, retval] Index position in the subcategory list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList">
      <summary>Manages lists of task items supplied by task providers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.AutoFilter(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY)">
      <summary>Filters the task list so only the specified category is shown.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cat">[in] Category to filter on. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.AutoFilter2(System.Guid@)">
      <summary>Filters the task list so only the specified view is shown.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidCustomView">[in] GUID of the view to filter on.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.DumpOutput(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY,Microsoft.VisualStudio.OLE.Interop.IStream,System.Int32@)">
      <summary>Do not use.</summary>
      <param name="dwReserved">Do not use.</param>
      <param name="cat">Do not use.</param>
      <param name="pstmOutput">Do not use.</param>
      <param name="pfOutputWritten">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Enumerates all of the tasks on the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RefreshTasks(System.UInt32)">
      <summary>Informs the task list that a task provider has new or updated tasks.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterCustomCategory(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
      <summary>Registers a custom category with the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidCat">[in] GUID of the custom category you wish to register.</param>
      <param name="dwSortOrder">[in] The requested sort placement within <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> for the custom category.</param>
      <param name="pCat">[out] Pointer to the actual sort placement of the custom category within <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)">
      <summary>Registers a task provider with the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProvider">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider" /> interface.</param>
      <param name="pdwProviderCookie">[out] Pointer to an ID for the task provider specified by <paramref name="pProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.SetSilentOutputMode(System.Int32)">
      <summary>Sets the UI output mode the task list should follow.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSilent">[in] If true, do not display a UI.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.UnregisterCustomCategory(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY)">
      <summary>Unregisters the specified custom category from the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="catAssigned">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> enumeration assigned to the custom category from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterCustomCategory(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.UnregisterTaskProvider(System.UInt32)">
      <summary>Unregisters the specified task provider from the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.UpdateProviderInfo(System.UInt32)">
      <summary>Updates the image and subcategory lists associated with the specified task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskListEvents">
      <summary>Provides an event set for events related to the task list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskListEvents.OnCommentTaskInfoChanged">
      <summary>Provides notification that the set of comment task tokens has been modified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider">
      <summary>Supplies tasks to the task list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Standard enumerator over tasks supplied by this provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.ImageList(System.IntPtr@)">
      <summary>Returns the image list for the tasks of this task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImageList">[out, retval] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.hImageList" />, a handle for this image list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
      <summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTaskList">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> interface that the task provider is registered to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.ReRegistrationKey(System.String@)">
      <summary>Do not use.</summary>
      <param name="pbstrKey">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
      <summary>Returns the list of subcategories for the tasks of this task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cbstr">in] Number of subcategories in the list.</param>
      <param name="rgbstr">[out, size_is(cbstr)] Array of BSTRs whose elements represent the subcategories indicated by <paramref name="cbstr" />.</param>
      <param name="pcActual">[out] Pointer to the number of BSTRs contained in the <paramref name="rgbstrarray" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2">
      <summary>Supplies tasks to the task list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Enumerates the tasks supplied by the task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.ImageList(System.IntPtr@)">
      <summary>Returns the image list for the tasks of this task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImageList">[out, retval] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.hImageList" />, a handle for this image list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.MaintainInitialTaskOrder(System.Int32@)">
      <summary>Determines whether or not the task list should maintain the task order given to it by the task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bMaintainOrder">[out] true if the task list should maintain the task order provided by the task provider, rather than use the task list's default sort.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
      <summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTaskList">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> interface that the task provider is registered to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.ReRegistrationKey(System.String@)">
      <summary>Do not use.</summary>
      <param name="pbstrKey">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
      <summary>Returns the list of subcategories for the tasks of this task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cbstr">[in] Number of subcategories in the list.</param>
      <param name="rgbstr">[out, size_is(cbstr)] Array of BSTRs whose elements represent the subcategories indicated by <paramref name="cbstr" />.</param>
      <param name="pcActual">[out] Pointer to the number of BSTRs contained in the <paramref name="rgbstrarray" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTestLog">
      <summary>Provides a method to log idle time.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTestLog.LogIdleTime(System.String)">
      <summary>Logs idle time in seconds.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszIdle">[in] <paramref name="pszIdle" /> format: ID&lt;TAB&gt;Idle Time in Seconds&lt;TAB&gt;Idle Start Time&lt;TAB&gt;String ID</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider">
      <summary>Enables a DocData object to delegate text buffer (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />) implementation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider.GetTextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Retrieves the contents of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppTextBuffer">[out] The contents of the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider.LockTextBuffer(System.Int32)">
      <summary>Locks the text buffer to prevent editing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fLock">[in] Set to true to lock the text buffer, or false to unlock the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider.SetTextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Writes the text data to the specified text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextBuffer">[in] Storage for textual data to be placed directly in the DocData.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTextOut">
      <summary>Exposes the core editor's unicode text measurement and display methods. Implemented by the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextOut.VsGetTextExtent(System.UInt32,System.Int32,System.UInt16[],Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <summary>Gets the extent of text's Hardware Device Context (HDC), number of characters, and outputs a pointer to the length of the pText parameter. Returns a Windows structure that represents the size of the text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Pointer to a long type to a hardware device context (HDC).</param>
      <param name="cch">[in] Number of characters, or -1 if null-terminated.</param>
      <param name="pText">[in] OLE String that represents the text.</param>
      <param name="pSize">[in] Length of the OLE String.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextOut.VsTextOut(System.UInt32,System.Int32,System.UInt16[],System.UInt32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Outputs text to a location specified to a Hardware Device Context (HDC).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Pointer to a long type to a hardware device context (HDC).</param>
      <param name="cch">[in] Number of characters, or -1 if null-terminated.</param>
      <param name="pText">[in] OLE String that represents the text.</param>
      <param name="grfETO">[in] ExtTextOut flags.</param>
      <param name="x">[in] X coordinate of the text location.</param>
      <param name="y">[in] Y coordinate of the text location.</param>
      <param name="prc">[in] A Windows rectangle (a struct). </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadSafeCommandWindow">
      <summary>Posts commands that are handled on the main thread, which then calls the regular handlers. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadSafeCommandWindow.ThreadSafePrintNoShow(System.String)">
      <summary>Like <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.PrintNoShow(System.String)" />, but may be called on any thread.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="szTextToPrint">[in] The text to be printed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox">
      <summary>Used to manage the Toolbox.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddActiveXItem(System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Allows ActiveX controls to be programmatically added to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier defining the ActiveX control to add to the Toolbox.</param>
      <param name="lpszTab">[[in] The localized name of the tab to add the ActiveX control to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
      <param name="pHierarchy">[in] Not implemented.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String)">
      <summary>Adds a data object to the specified tab in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> to be added to the References tab in the Toolbox.</param>
      <param name="ptif">[in] Structure identifying item characteristics, such as the item name and icon. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <param name="lpszTab">[in] The localized name of the Toolbox tab to add the data object to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddItemFromFile(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Allows files to be programmatically added to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Full path of file to add to the Toolbox.</param>
      <param name="pHierSource">[in] Hierarchy that owns the source file. This value can be null.</param>
      <param name="pfItemAdded">[out, retval] If true, then the file was successfully added to the Toolbox. If false, then the file was not added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddTab(System.String)">
      <summary>Adds a new tab to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddTabEx(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Adds a new tab to the Toolbox and specifies how the tabs are viewed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="tv">[in] Determines whether the Toolbox tab is shown in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.DataUsed">
      <summary>Called by a designer to inform the Toolbox that the item has been pasted onto the form.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.EnumItems(System.String,Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems@)">
      <summary>Enumerates items on a given tab in the Toolbox, or all items in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to enumerate items on. This value can be null.</param>
      <param name="pEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems" /> interface, which is used to enumerate Toolbox items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.EnumTabs(Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs@)">
      <summary>Enumerates through tabs in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEnum">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs" /> interface, which is used to enumerate Toolbox tabs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetData(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns the data object for the selected item in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppDO">[out, retval] Toolbox item for which data needs to be returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetFrame(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the window frame for the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame for the Toolbox.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetTab(System.String@)">
      <summary>Returns the name of the selected tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrTab">[out, retval] Name of the selected tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW[])">
      <summary>Returns the tab view for the specified tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to return the view for.</param>
      <param name="ptv">[out, retval] Determines whether the tab is in list view or icon view. For a list of <paramref name="ptv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.IsCurrentUser(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,System.Int32@)">
      <summary>Determines whether the specified Toolbox user is the current user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUser">[in] Pointer to the Toolbox user.</param>
      <param name="pfCurrent">[out, retval] If true, then the specified Toolbox user is the current user. If false, then the specified user is not the current Toolbox user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.RegisterDataProvider(Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider,System.UInt32@)">
      <summary>Registers a Toolbox data provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDP">[in] Pointer to the Toolbox data provider to register.</param>
      <param name="pdwProvider">[out, retval] Unique cookie identifying the newly registered Toolbox data provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.RemoveItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Removes an item from the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object to remove from the Toolbox.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.RemoveTab(System.String)">
      <summary>Removes a tab from the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Name of the tab to remove from the Toolbox.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SelectItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Programmatically selects an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Pointer to a data object identifying the selected item. This value can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SelectTab(System.String)">
      <summary>Programmatically selects the referenced Toolbox tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to select.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SetCursor">
      <summary>Sets the drop cursor for the current, enabled Toolbox item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])">
      <summary>Sets information for the referenced item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object to set information for.</param>
      <param name="ptif">[in] Structure containing the item information to set for the data object. For a list of <paramref name="ptif" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Sets the type of view for the specified tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to set the view for.</param>
      <param name="tv">[in] Determines whether the tab is in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.UnregisterDataProvider(System.UInt32)">
      <summary>Unregisters the specified data provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwProvider">[in] Cookie identifying the data provider to unregister.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.UpdateToolboxUI">
      <summary>Forces a redraw of the Toolbox UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2">
      <summary>Used to manage the Toolbox.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddActiveXItem(System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Allows ActiveX controls to be programmatically added to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier defining the ActiveX control to add to the Toolbox.</param>
      <param name="lpszTab">[[in] The localized name of the tab to add in] Toolbox tab to add the ActiveX control to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="pHierarchy">[in] Not implemented.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddActiveXItem2(System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)">
      <summary>Adds an ActiveX item to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsid">[in] Class identifier defining the ActiveX item to add.</param>
      <param name="lpszTab">[in] [in] The localized name of the Toolbox to add the ActiveX item to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
      <param name="pHierarchy">[in] Not yet implemented.</param>
      <param name="guidPkg">[in] Not yet implemented</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String)">
      <summary>Adds a data object to the specified tab in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] IDataObject to be added to the References tab in the Toolbox.</param>
      <param name="ptif">[in] Structure identifying item characteristics, such as the item name and icon. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <param name="lpszTab">[in] The localized name of the Toolbox tab to add the data object to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItem2(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String,System.Guid@)">
      <summary>Adds an item to the referenced Toolbox tab, specifying a package GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object to add to the Toolbox.</param>
      <param name="ptif">[in] Structure containing the item information to set for the data object. For a list of <paramref name="ptif" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
      <param name="guidPkg">[in] GUID identifying the package adding the Toolbox item. Package GUID identifying your VSPackage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItemFromFile(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Allows files to be programmatically added to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in]Full path of file to add to the Toolbox.</param>
      <param name="pHierSource">[in]Hierarchy that owns the source file. This value can be null.</param>
      <param name="pfItemAdded">[out, retval] If true, then the file was successfully added to the Toolbox. If false, then the file was not added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItemFromFile2(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@,System.Int32@)">
      <summary>Adds an item to the Toolbox from a file, specifying a package GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Name of the file containing the item to add to the Toolbox.</param>
      <param name="pHierSource">[in] Hierarchy containing the file. This parameter can be null if the file is not part of a project.</param>
      <param name="guidPkg">[in] Package GUID identifying your VSPackage.</param>
      <param name="pfItemAdded">[out, retval] If true, then the item was successfully added from the file to the Toolbox. If false, then the item was not added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTab(System.String)">
      <summary>Adds a new tab to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTab2(System.String,System.Guid@)">
      <summary>Adds a tab to the Toolbox, specifying the tab view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="guidPkg">[in] Package GUID identifying your VSPackage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTabEx(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Adds a new tab to the Toolbox and specifies how the tabs are viewed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="tv">[in] Determines whether the Toolbox tab is shown in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTabEx2(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW,System.Guid@)">
      <summary>Adds a tab to the Toolbox, specifying a tab view and a package GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="tv">[in] Determines whether the tab is in list view or icon view. For a list of <paramref name="ptv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <param name="guidPkg">[in] Package GUID identifying your VSPackage.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.DataUsed">
      <summary>Called by a designer to inform the Toolbox that the item has been pasted onto the form.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.EnumItems(System.String,Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems@)">
      <summary>Enumerates items on a given tab in the Toolbox, or all items in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to enumerate items on. This value can be null.</param>
      <param name="pEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems" /> interface, which is used to enumerate Toolbox items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.EnumTabs(Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs@)">
      <summary>Enumerates through tabs in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEnum">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs" /> interface, which is used to enumerate Toolbox tabs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetData(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns the data object for the selected item in the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppDO">[out, retval] Toolbox item for which data needs to be returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetFrame(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the window frame for the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame for the Toolbox.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetTab(System.String@)">
      <summary>Returns the name of the selected tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrTab">[out, retval] Name of the selected tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW[])">
      <summary>Returns the tab view for the specified tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to return the view for.</param>
      <param name="ptv">[out, retval] Determines whether the tab is in list view or icon view. For a list of <paramref name="ptv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.IsCurrentUser(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,System.Int32@)">
      <summary>Determines whether the specified Toolbox user is the current user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUser">[in] Pointer to the Toolbox user.</param>
      <param name="pfCurrent">[out, retval] If true, then the specified Toolbox user is the current user. If false, then the specified user is not the current Toolbox user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.RegisterDataProvider(Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider,System.UInt32@)">
      <summary>Registers a Toolbox data provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDP">[in] Pointer to the Toolbox data provider to register.</param>
      <param name="pdwProvider">[out, retval] Unique cookie identifying the newly registered Toolbox data provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.RemoveItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Removes an item from the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object to remove from the Toolbox.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.RemoveTab(System.String)">
      <summary>Removes a tab from the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Name of the tab to remove from the Toolbox.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SelectItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Programmatically selects an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Pointer to a data object identifying the selected item. This value can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SelectTab(System.String)">
      <summary>Programmatically selects the referenced Toolbox tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to select.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SetCursor">
      <summary>Sets the drop cursor for the current, enabled Toolbox item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])">
      <summary>Sets information for the referenced item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object to set information for.</param>
      <param name="ptif">[in] Structure containing the item information to set for the data object. For a list of <paramref name="ptif" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Sets the type of view for the specified tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTab">[in] Toolbox tab to set the view for.</param>
      <param name="tv">[in] Determines whether the tab is in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.UnregisterDataProvider(System.UInt32)">
      <summary>Unregisters the specified data provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwProvider">[in] Cookie identifying the data provider to unregister.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.UpdateToolboxUI">
      <summary>Forces a redraw of the Toolbox UI.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler">
      <summary>Provides support for the clipboard ring to document windows and tool windows.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler.AreDataObjectsAvailable(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,System.Int32@)">
      <summary>Determines whether any items are available to preview in the clipboard ring.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTarget">[in] Used by the Toolbox to ensure that the next item is supported.</param>
      <param name="pbItemsAvailable">[out] If true, then items are available to preview. If false, then items are not available.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler.BeginCycle">
      <summary>Forces the clipboard cycle to start at the top of the list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler.GetAndSelectNextDataObject(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Gets the next data object for the target Toolbox user's clipboard ring.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTarget">[in] Target Toolbox user to cycle through clipboard items.</param>
      <param name="ppDO">[out] Pointer to the next data object in the list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider">
      <summary>Requests information from data providers regarding the data objects that they support.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.FileDropped(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Sends notification that a file is being dropped on the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilename">[in] Name of file dropped.</param>
      <param name="pHierSource">[in] Source hierarchy containing the dropped file. This value may be null if the file is not associated with a hierarchy.</param>
      <param name="pfFileProcessed">[out, retval] If true, then the file was successfully processed. If false, then the file was not processed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.GetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])">
      <summary>Returns the item information for the specified data object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object for which to return item information.</param>
      <param name="ptif">[out] Item information. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.IsDataSupported(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Determines the appropriate clipboard data format for a data object .</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfetc">[in] Generalized clipboard format. For more information, see the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure in the MSDN Library.</param>
      <param name="pstm">[in] Generalized global memory handle used for data transfer operations by <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" />. For more information, see <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> in the MSDN Library.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether or not a data object is supported by a data provider and can be added to the Toolbox.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object to be added to the Toolbox.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser">
      <summary>Sends notification about Toolbox items to the owner of these items.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether the Toolbox user supports the referenced data object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object to be supported.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser.ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Sends notification that an item in the Toolbox is selected through a click, or by pressing ENTER.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Data object that is selected.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory">
      <summary>Provides VSPackages the ability to create multiple tool windows.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory.CreateToolWindow(System.Guid@,System.UInt32)">
      <summary>Enables the environment to create multiple on-demand tool windows that are implemented by VSPackages.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPersistenceSlot">[in] Unique identifier of the tool window.</param>
      <param name="dwToolWindowId">[in] Double word containing the tool window ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar">
      <summary>Gets the border size and sets the border space for a tool window. You should implement this interface to give information to the toolbar hosted inside the tool window about its hosting surface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar.GetBorder(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Returns the border information for a tool window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prc">[out] Pointer to the location and size of the tool window border.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar.SetBorderSpace(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Sets the border space for a tool window after the toolbar is placed. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbw">[in] Border space for the tool window.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost">
      <summary>Provides control over features pertaining to a tool window toolbar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.AddToolbar(Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION,System.Guid@,System.UInt32)">
      <summary>Adds a toolbar to the tool window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwLoc">[in] Specifies the location of the toolbar within the tool window. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION" /> enumeration.</param>
      <param name="pguid">[in] Pointer to a unique identifier for the toolbar's menu group.</param>
      <param name="dwId">[in] DWORD that, in combination with <paramref name="pguid" />, identifies the toolbar to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.BorderChanged">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.Close(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">[in] Reserved. Must be 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ForceUpdateUI">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.Hide(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ProcessMouseActivation(System.IntPtr,System.UInt32,System.UInt32,System.Int32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="hwnd">Do not use.</param>
      <param name="msg">Do not use.</param>
      <param name="wp">Do not use.</param>
      <param name="lp">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ProcessMouseActivationModal(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32@)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="hwnd">Do not use.</param>
      <param name="msg">Do not use.</param>
      <param name="wp">Do not use.</param>
      <param name="lp">Do not use.</param>
      <param name="plResult">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.Show(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ShowHideToolbar(System.Guid@,System.UInt32,System.Int32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="pguid">Do not use.</param>
      <param name="dwId">Do not use.</param>
      <param name="fShow">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2">
      <summary>Used by projects to query the environment for permission to add, remove, or rename a file or directory in a solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.AdviseTrackProjectDocumentsEvents(Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2,System.UInt32@)">
      <summary>This method enables clients to receive notifications of project documents events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEventSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" /> interface.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle that identifies the client to be advised of project documents events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.BeginBatch">
      <summary>This method starts a batch of IVsTrackProjectDocuments2.OnAfter* method calls.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.EndBatch">
      <summary>This method ends the batch started by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.BeginBatch" /> and displays any user interface (UI) that was generated within the batch.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.Flush">
      <summary>This method displays the UI for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2" /> calls completed so far without ending the batch.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[])">
      <summary>This method is called by a project after directories have been added to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project for which the directories have been added.</param>
      <param name="cDirectories">[in] Number of directories that were added.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories that were added. This is the same size as <paramref name="cFiles" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
      <summary>This method is called by a project after directories have been added to the project. This method is equivalent to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[])" />, but it also takes flags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project for which the directories have been added.</param>
      <param name="cDirectories">[in] Number of directories that were added.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories that were added. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[])">
      <summary>This method is called by a project after files have been added to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project to which the files have been added.</param>
      <param name="cFiles">[in] Number of files that were added.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files that were processed. This is the same size as <paramref name="cFiles" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
      <summary>This method is called by a project after files have been added to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project to which the files have been added.</param>
      <param name="cFiles">[in] Number of files that were added.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files that were processed. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
      <summary>This method is called by a project after directories have been removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project from which the directories have been removed.</param>
      <param name="cDirectories">[in] Number of directories that were removed.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories that were removed.</param>
      <param name="rgFlags">[in, size_is(cDirectories)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
      <summary>This method is called by a project after files have been removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project from which the files have been removed.</param>
      <param name="cFiles">[in] Number of files that were removed.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files that were removed.</param>
      <param name="rgFlags">[in, size_is(cFiles)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
      <summary>This method is called by a project after a directory has been renamed in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the renamed directories.</param>
      <param name="cDirs">[in] Number of directories to rename.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old names of the directories.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new names of the directories.</param>
      <param name="rgFlags">[in] Flags specifying information about the renamed directories. For a list of <paramref name="rgflags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameFile(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)">
      <summary>This method is called by a project after a file has been renamed in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the files that were renamed.</param>
      <param name="pszMkOldName">[in] Path for the old file.</param>
      <param name="pszMkNewName">[in] Path for the renamed file.</param>
      <param name="flags">[in] For a list of flags values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
      <summary>This method is called by a project after files have been renamed in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the files that were renamed.</param>
      <param name="cFiles">[in] Number of files that were renamed.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old files' names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new files' names.</param>
      <param name="rgFlags">[in] For a list of <paramref name="rgflags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterSccStatusChanged(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[])">
      <summary>This method is called by the Source Control Stub to inform listeners that source control status has changed. Do not call this method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> interface.</param>
      <param name="cFiles">[in] Number of files.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of file paths.</param>
      <param name="rgdwSccStatus">[in, size_is(cFiles)] Array of status values for each file. Values are taken from the SccStatus enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
      <summary>This method is called by a project to determine whether directories can be added to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the renamed directories.</param>
      <param name="cDirectories">[in] Number of directories to be added.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to add.</param>
      <param name="rgFlags">[in] Flags identifying information about each directory. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddNotOK" />; if the results for all directories are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results[].For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.Note   If you pass in null for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
      <summary>This method is called by a project to determine whether files can be added to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project to which the files will be added.</param>
      <param name="cFiles">[in] Number of files to add. It is not valid for <paramref name="cFiles" /> to be zero.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files to be added. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags associated with each file. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file in the array is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results for each individual file. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.Note   If you pass in null for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
      <summary>This method is called by a project to determine whether directories can be removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the directories to remove.</param>
      <param name="cDirectories">[in] Number of directories to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to remove.</param>
      <param name="rgFlags">[in] Array of directory removal flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS" /></param>
      <param name="pSummaryResult">[out] ] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results[]. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.Note   If you pass in null for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
      <summary>This method is called by a project to determine whether files can be removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the files to remove.</param>
      <param name="cFiles">[in] Number of files to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files to be removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results[].For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.Note   If you pass in null for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
      <summary>This method is called by a project to determine whether directories in the project can be renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the directories to rename.</param>
      <param name="cDirs">[in] Number of directories to be renamed.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old directory names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new directory names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS" /></param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgszMkOldNames" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.Note   If you pass in null for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFile(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS,System.Int32@)">
      <summary>This method is called by a project to determine whether a file in the project can be renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the file to be renamed.</param>
      <param name="pszMkOldName">[in] Path to the old file name.</param>
      <param name="pszMkNewName">[in] Path to the new file name.</param>
      <param name="flags">[in] For a list of flags values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
      <param name="pfRenameCanContinue">[out] This value is true if file renaming can continue.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
      <summary>This method is called by a project to determine whether files can be renamed in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project in which the files will be renamed.</param>
      <param name="cFiles">[in] Number of files to rename in the project.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old file names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new file names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgszMkOldNames" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.Note   If you pass in null for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.UnadviseTrackProjectDocumentsEvents(System.UInt32)">
      <summary>This method prevents clients from receiving notifications of project documents events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle that identifies the client to be unadvised of project documents events.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2">
      <summary>Notifies clients of changes made to project files or directories.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
      <summary>This method notifies the client after directories are added to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjects">[in] Number of projects to which directories were added.</param>
      <param name="cDirectories">[in] Number of directories added.</param>
      <param name="rgpProjects">[in] Array of projects to which directories were added.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each directory belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories that were added. This is the same size as <paramref name="cDirectories" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
      <summary>This method notifies the client after a project has added files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjects">[in] Number of projects to which files were added.</param>
      <param name="cFiles">[in] Number of files that were added.</param>
      <param name="rgpProjects">[in] Array of projects to which files were added.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files that were processed. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
      <summary>This method notifies the client when directories have been removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjects">[in] Number of projects from which directories were removed.</param>
      <param name="cDirectories">[in] Number of directories removed.</param>
      <param name="rgpProjects">[in] Array of projects from which directories were removed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each directory belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories that were removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
      <summary>This method notifies the client after files are removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjects">[in] Number of projects from which files were removed.</param>
      <param name="cFiles">[in] Number of files removed.</param>
      <param name="rgpProjects">[in] Array of projects from which files were removed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files that were removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
      <summary>This method notifies the client when directories have been renamed in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjects">[in] Number of projects with renamed directories.</param>
      <param name="cDirs">[in] Number of directories renamed.</param>
      <param name="rgpProjects">[in] Array of projects from which directories were renamed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each directory belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old names of the directories.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new names of the directories.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
      <summary>This method notifies the client when files have been renamed in the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjects">[in] Number of projects in which files have been renamed.</param>
      <param name="cFiles">[in] Number of files renamed.</param>
      <param name="rgpProjects">[in] Array of projects in which files were renamed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old file names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new file names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
      <summary>This method notifies the client when source control status has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cProjects">[in] Number of projects for which source control status has changed.</param>
      <param name="cFiles">[in] Number of files.</param>
      <param name="rgpProjects">[in] Array of projects for which source control status has changed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of file paths.</param>
      <param name="rgdwSccStatus">[in] Array of status values for each file. Values are taken from the SccStatus enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
      <summary>This method notifies the client when a project has requested to add directories.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project to which the directories will be added.</param>
      <param name="cDirectories">[in] Number of directories to add.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to add.</param>
      <param name="rgFlags">[in] Flags identifying information about each directory. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddNotOK" />; if the results for all directories are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
      <summary>This method notifies the client when a project has requested to add files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project requesting to add files.</param>
      <param name="cFiles">[in] Number of files to add.</param>
      <param name="rgpszMkDocuments">[in] Array of files to add to the project.</param>
      <param name="rgFlags">[in] Array of flags associated with each file. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file in the array is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results for each individual file. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
      <summary>This method notifies the client when a project has requested to remove directories.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project from which the directories will be removed.</param>
      <param name="cDirectories">[in] Number of directories to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to remove.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
      <summary>This method notifies the client when a project has requested to remove files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project from which the files will be removed.</param>
      <param name="cFiles">[in] Number of files to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files to be removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results[].For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
      <summary>This method notifies the client when a project has requested to rename directories.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project requesting to rename directories.</param>
      <param name="cDirs">[in] Number of directories to rename.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old directory names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new directory names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgszMkOldNames" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
      <summary>This method notifies the client when a project has requested to rename files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project requesting to rename files.</param>
      <param name="cFiles">[in] Number of files to rename.</param>
      <param name="rgszMkOldNames">[in] Array of old file names.</param>
      <param name="rgszMkNewNames">[in] Array of new file names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgszMkOldNames" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx">
      <summary>Notifies the environment of a change in the current selection and provides access to hierarchy and item information relating to the new selection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.GetCurrentSelection(System.IntPtr@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@,System.IntPtr@)">
      <summary>Returns the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppHier">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the current selection.</param>
      <param name="pitemid">[out] Pointer to the item identifier of the current selection. For a list of valid <paramref name="pitemid" /> values, see VSITEMID.</param>
      <param name="ppMIS">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface of the window containing the current selection.</param>
      <param name="ppSC">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface of the current selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.IsMyHierarchyCurrent(System.Int32@)">
      <summary>Determines whether the user's hierarchy is current.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCurrent">[out] Pointer to a flag that is set to true if the user's hierarchy is current and false if it is not current.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.OnElementValueChange(System.UInt32,System.Int32,System.Object)">
      <summary>Informs the environment that a change in an element value has occurred. Element values are attached to a window's selection context and used in the same way to update the environment's user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="elementid">[in] Identifier of the element that has changed. For a list of valid <paramref name="elementid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID" />.</param>
      <param name="fDontPropagate">[in] Flag that indicates whether or not selected values should be broadcast throughout the environment. If set to true, the information stored in <paramref name="varValue" /> relating to the element is kept private. If set to false, the <paramref name="varValue" /> information is made available to the environment.</param>
      <param name="varValue">[in] Private data related to the element identified by <paramref name="elementid" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.OnSelectChange(Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)">
      <summary>Reports that the current selection container has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSC">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface to access Properties window data for the current selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.OnSelectChangeEx(System.IntPtr,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,System.IntPtr)">
      <summary>Informs the environment that a change in the current selection has occurred.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the new selection.</param>
      <param name="itemid">[in] Identifier of the project item of the new selection. For a list of valid <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="pMIS">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface of the window containing the new selection.</param>
      <param name="pSC">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface of the window containing the new selection.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper">
      <summary>This interface is implemented by all wrapping tools.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.GetMainWrapperFilename(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the filename for a given type library.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the file name. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.GetMainWrapperFriendlyName(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the name that is displayed in the project system when the component is referred to.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTypeLibToWrap">[in] Pointer to a type lib to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the friendly file name. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.NeedsRegeneration(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.Int32,System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a given wrapper for a given type library needs to be regenerated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="wszKeyFile">[in] Specifies <paramref name="wszkey" /> file.</param>
      <param name="wszKeyContainerName">[in] Specifies <paramref name="wszkey" /> container name.</param>
      <param name="bDelaySign">[in] Boolean indicating whether delay signed. If true, the assembly is partially signed.</param>
      <param name="bCurrentlyDelaySigned">[in] Boolean indicating whether currently delay signed.</param>
      <param name="wszExistingWrapperFilename">[in] Specifies the wrapper filename.</param>
      <param name="pbNeedsRegeneration">[out] false if the wrapper does not need to be regenerated. true if the wrapper needs to be regenerated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.WrapTypeLibrary(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback,System.IntPtr[],System.IntPtr[],System.IntPtr[],System.IntPtr[],System.UInt32@)">
      <summary>Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTypeLibToWrap">[in] Pointer to a type library you want to wrap.</param>
      <param name="wszDestinationDirectory">[in] Specifies wszdestination folder.</param>
      <param name="wszKeyFile">[in] Specifies wszkey file.</param>
      <param name="wszKeyContainer">[in] Specifies wszkey container.</param>
      <param name="bDelaySign">[in] Byte containing the delay sign.</param>
      <param name="pCallback">[in] Pointer to a callback object. For more information see, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback" />.</param>
      <param name="rgbstrWrapperPaths">[out] Indicates the type library wrapper path(s).There may be more than one generated wrapper since the method also wraps the dependencies of the type library.</param>
      <param name="rgWrappedTypeLibs">[out] Holds a <see cref="T:Microsoft.VisualStudio.OLE.Interop.TLIBATTR" /> structure for each wrapped type library. Only the GUID, LCID, and major/minor versions are guaranteed to be set in this structure, the rest of the parameters are zero.</param>
      <param name="rgbGenerated">[out] If the wrapper about to be generated already exists on disk and has not expired, the wrapper is not regenerated and corresponding entry in <paramref name="rgbGenerated" /> is set to false. If the wrapper does not exist on disk, <paramref name="rgbGenerated" /> is set to true and the wrapped is generated.</param>
      <param name="rgbstrWrapperTools">[out] This array indicates which tool was used for each returned wrapper. The possible return values are "Tlbimp", "Aximp", and "Primary".</param>
      <param name="pcWrappedTypeLibs">[out] Pointer to the size of wrapped type libraries.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback">
      <summary>Allows the wrapper tools to communicate back to the project system and retrieve already existing wrappers for a given type library.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback.GetAssembly(System.String,System.String@)">
      <summary>Returns a path to an assembly if the assembly is referenced. If the assembly is not referenced, returns an error code.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wszFusionName">[in] Specifies assembly name.</param>
      <param name="pbstrPath">[out] Pointer to a string containing the path for the assembly.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback.GetComClassic(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.Int32@,System.String@,System.String@)">
      <summary>Returns a COM classic <see cref="T:Microsoft.VisualStudio.OLE.Interop.TLIBATTR" /> wrapper structure for a given type library and wrapper tool combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTypeLibAttr">[in] Pointer to a type library attribute object.</param>
      <param name="wszWrapperTool">[in] Specifies the wrapper tool.</param>
      <param name="pDelaySigned">[out] Boolean indicating whether the object is delay signed.</param>
      <param name="pbstrWrapperTool">[out] Pointer to the wrapper tool.</param>
      <param name="pbstrPath">[out] Pointer to a string containing the path for the wrapper.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback.GetComClassicByTypeLibName(System.String,Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.Int32@,System.String@,System.String@)">
      <summary>Returns a COM classic wrapper name for a given type library and wrapper tool combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wszTypeLibName">[in] Specifies type library name.</param>
      <param name="pTypeLibAttr">[out] Pointer to a type library attribute object.</param>
      <param name="pDelaySigned">[out] Pointer to a delay signed object.</param>
      <param name="pbstrWrapperTool">[out] Pointer to a string containing the wrapper tool name.</param>
      <param name="pbstrPath">[out] Pointer to a string containing the path for the wrapper.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy">
      <summary>Redirects commands you invoke to the appropriate hierarchy window instead of the standard command handler.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <summary>Allows clients to hook up for event notifications without making the hierarchy implement <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEventSink">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" /> interface on the object requesting notification of hierarchy events.</param>
      <param name="pdwCookie">[out] Pointer to a unique identifier for the referenced event sink. This value is required to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.UnadviseHierarchyEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Close">
      <summary>Closes and cleans up a hierarchy once the environment determines that it is no longer used.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes a command on a specific item within a UI hierarchy window, or on the hierarchy itself.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item affected by the command passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" />. For a list of <paramref name="itemid" /> values, see VSITEMID. For single selection, this value is the actual item ID. For multiple selections, set <paramref name="itemid" /> equal to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pguidCmdGroup">[in, unique] Unique identifier of the command group; can be null to specify the standard group. All the commands that are passed in the <paramref name="nCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" /></param>
      <param name="nCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdexecopt">[in] Values describe how the object should execute the command.[1|1] nCmdexecopt value[1|2] Value[1|3] Description[2|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_DODEFAULT" />[2|2] 0[2|3] Prompt the user for input or not, depending on the default behavior[3|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_PROMPTUSER" />[3|2] 1[3|3] Execute the command after obtaining user input.[4|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_DONTPROMPTUSER" />[4|2] 2[4|3] Execute the command without prompting the user. For example, clicking the Print toolbar button causes a document to be immediately printed without user input. [5|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_SHOWHELP" />[5|2] 3[5|3] Show help for the corresponding command, but do not execute. </param>
      <param name="pvaIn">[in, unique] Pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="pvaOut">[in, out, unique] VARIANTARG structure to receive command output. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetCanonicalName(System.UInt32,System.String@)">
      <summary>Used for workspace persistence, for example, for remembering window positions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the hierarchy item. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="pbstrName">[out] Pointer to the canonical name of the hierarchy item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Identifies the "type" of a particular node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of hierarchy item whose property is to be retrieved. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the property of the given hierarchy item. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pguid">[out] Pointer to a GUID property specified in <paramref name="propid" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>Makes it possible for a node of a given hierarchy to be a shortcut to the middle of another hierarchy.</summary>
      <returns>If <paramref name="itemid" /> is not a nested hierarchy, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE" /> is returned. The caller would then treat this node as if it had no children, if the requested interface had been essential (as is often the case when the requested interface is IID_IVsUIHierarchy).</returns>
      <param name="itemid">[in] Item identifier of the node whose nested hierarchy information is requested. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="iidHierarchyNested">[in] Identifier of the interface to be returned in <paramref name="ppHierarchyNested" />. To implement, first get the object that represents the nested hierarchy and run IUnknown::QueryInterface on it to obtain the interface ID (IID). Then, pass the IID in with <paramref name="iidHierarchyNested" />. The result of the QueryInterface call goes into <paramref name="ppHierarchyNested" />.</param>
      <param name="ppHierarchyNested">[out, iid_is(iidHierarchyNested)] Pointer to the interface whose identifier was passed in <paramref name="iidHierarchyNested" />.</param>
      <param name="pitemidNested">[out] Pointer to an item identifier of the root node of the nested hierarchy. For a list of <paramref name="pitemidnested" /> values, see VSITEMID. Although the interface is set up to support shortcutting to any node in another hierarchy, the environment currently only supports shortcutting to the root node of the nested hierarchy, in which case <paramref name="pitemidNested" /> must be set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
      <summary>Gets properties of a given node or of the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier of an item in the hierarchy. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the hierarchy property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Pointer to a VARIANT containing the property value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Gets the service provider from which to access the services.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSP">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface of the service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ParseCanonicalName(System.String,System.UInt32@)">
      <summary>Returns the identifier of the hierarchy item, given its canonical name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszName">[in] Pointer to the canonical name of the hierarchy item.</param>
      <param name="pitemid">[out] Pointer to the item identifier for the hierarchy item. For a list of <paramref name="pitemid" /> values, see VSITEMID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryClose(System.Int32@)">
      <summary>Determines whether the given hierarchy can be closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCanClose">[out] If true, then the hierarchy can be closed. If false, then the hierarchy cannot be closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Queries the object for the command status.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the item affected by this command. For a list of <paramref name="itemid" /> values, see VSITEMID. For single selection, this is the actual item ID. For multiple selections, set <paramref name="itemid" /> equal to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pguidCmdGroup">[in, unique] Pointer to a unique identifier of the command group. The <paramref name="pguidCmdGroup" /> parameter can be null to specify the standard group.</param>
      <param name="cCmds">[in] The number of commands in the <paramref name="prgCmds" /> array.</param>
      <param name="prgCmds">[in, out, size_is(cCmds)] A caller-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration.</param>
      <param name="pCmdText">[in, out, unique] Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure in which to return the name and/or status information of a single command. Can be null to indicate that the caller does not require this information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Sets properties whose values are GUIDs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Identifier of the hierarchy item that is to be set. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the property in the given hierarchy item. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="rguid">[in] GUID value of the property specified in <paramref name="propid" /> that is returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
      <summary>Sets properties of a specific node or of the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Item identifier of the hierarchy item whose properties are to be set. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="propid">[in] Identifier of the hierarchy property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="var">[in] Variant that contains property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the service provider from which to access the services.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface of the service provider to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.UnadviseHierarchyEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy events without requiring that the hierarchy implement <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle to the client that was disabled from receiving notifications of hierarchy events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused0">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused1">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused2">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused3">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused4">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow">
      <summary>Implemented by the environment to display the hierarchies that VSPackages write.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.AddUIHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32)">
      <summary>Adds an additional root UI hierarchy node to the list managed by the UI hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to add.</param>
      <param name="grfAddOptions">[in] Sets selection behavior in the hierarchy window when a new hierarchy is added. For a list of <paramref name="grfAddOptions" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS)">
      <summary>Controls the state or appearance of items in the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to modify the appearance of.</param>
      <param name="itemid">[in] Identifier of the item in the hierarchy. To change the appearance of the hierarchy itself, set <paramref name="itemid" /> to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="expf">[in] Specifies the state or appearance of the hierarchy or items within the hierarchy, such as whether the hierarchy or item is expanded, highlighted, or shown in bold font. For a list of <paramref name="expf" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.FindCommonSelectedHierarchy(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@)">
      <summary>Finds the lowermost hierarchy that is the nearest ancestor to every selected node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOpt">[in] Controls whether this method returns the Solution as the common hierarchy. For a list of <paramref name="grfOpt" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS" />.</param>
      <param name="lppCommonUIH">[out, retval] Common <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface for the selected hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.GetCurrentSelection(System.IntPtr@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@)">
      <summary>Gets the alternate itemID of the current selection when an alternate UIHierarchy is used.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the current project hierarchy.</param>
      <param name="pitemid">[out] Pointer to the identifier for the current project item. If <paramref name="pitemid" /> is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />, the current selection involves multiple items. These items can be accessed using the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface pointed to by <paramref name="ppMIS" />.</param>
      <param name="ppMIS">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface to be used to access a multiple selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.GetItemState(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Returns the state or appearance of the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface to determine the state or appearance of.</param>
      <param name="itemid">[in] Identifier of the item in the hierarchy. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="dwStateMask">[in] Mask values used to determine which <paramref name="pdwState" /> values are provided. For a list of <paramref name="dwStateMask" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE" />.</param>
      <param name="pdwState">[out, retval] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE" /> enumeration, which were passed in with <paramref name="expf" /> in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)">
      <summary>Initializes a custom use of a UI hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to initialize.</param>
      <param name="grfUIHWF">[in] Characteristics of the UI hierarchy window. For a list of values, see the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS" /> enumeration.</param>
      <param name="ppunkOut">[out] Pointer to the IUnknown interface of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object containing the UI hierarchy window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.RemoveUIHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy)">
      <summary>Removes a root UI hierarchy node from the UI hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface representing the UI hierarchy node to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.SetCursor(System.IntPtr,System.IntPtr@)">
      <summary>This method is obsolete.  Calling it has no effect. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.SetWindowHelpTopic(System.String,System.UInt32)">
      <summary>Sets the Help topic for the hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszHelpFile">[in] Help file name.</param>
      <param name="dwContext">[in] Context for the Help topic.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper">
      <summary>Coordinates clipboard operations between hierarchies in a UI hierarchy window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.AdviseClipboardHelperEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents,System.UInt32@)">
      <summary>Establishes client notification of hierarchy clipboard helper events without the hierarchy implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents" /> interface on the object requesting notification of hierarchy events.</param>
      <param name="pdwCookie">[out] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.UnadviseClipboardHelperEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Copy(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Copies a data object from a hierarchy to the clipboard.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> copied from the source hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Cut(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Cuts a data object from a hierarchy to the clipboard.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] Pointer to a data object cut from the source hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Paste(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32)">
      <summary>Pastes a data object from the clipboard to the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interface on the item being pasted. This data object contains the data being transferred in the paste operation. If the paste occurs, then this data object (hierarchy item) is incorporated into the target hierarchy.</param>
      <param name="dwEffects">[in] Pointer to the value of the <paramref name="pdwEffect" /> parameter of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object, identifying all effects that the hierarchy supports.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.UnadviseClipboardHelperEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy clipboard helper events without requiring that the hierarchy implement <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Abstract handle to the client that was disabled from receiving notifications of hierarchy clipboard helper events.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents">
      <summary>Provides clipboard notifications to the source hierarchy in a cut or copy operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents.OnClear(System.Int32)">
      <summary>Signals that the clipboard has been cleared.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDataWasCut">[in] This flag informs the source that the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Cut(Microsoft.VisualStudio.OLE.Interop.IDataObject)" /> method was called (true), rather than <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Copy(Microsoft.VisualStudio.OLE.Interop.IDataObject)" /> (false), so the source knows whether to "un-cut-highlight" the items that were cut.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents.OnPaste(System.Int32,System.UInt32)">
      <summary>Signals that a paste operation has occurred.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDataWasCut">[in] If true, then the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> has been successfully pasted into a target hierarchy. If false, then the cut or copy operation was cancelled.</param>
      <param name="dwEffects">[in] Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. These should be the same visual effects used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource.OnDropNotify(System.Int32,System.UInt32)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell">
      <summary>This interface provides access to basic windowing functionality, including access to and creation of tool windows and document windows. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.AddNewBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object,System.Int32)">
      <summary>Adds a new backward and forward navigation item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pWindowFrame">[in] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="bstrData">[in] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="punk">[in] Pointer to a specific interface for the navigation point.</param>
      <param name="fReplaceCurrent">[in] If true, then the current navigation item is replaced.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CenterDialogOnWindow(System.IntPtr,System.IntPtr)">
      <summary>Centers the provided dialog box HWND on the parent HWND (if provided), or on the main IDE window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwndDialog">[in] Specifies HWND dialog.</param>
      <param name="hwndParent">[in] Specifies HWND parent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>This method creates a document window containing the embedding indicated by the <paramref name="punkDocView" /> parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfCDW">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" />DWORD.</param>
      <param name="pszMkDocument">[in] Path to the document. This path is used by the environment to register this view in the Running Document Table (RDT).</param>
      <param name="pUIH">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy item containing this document.</param>
      <param name="itemid">[in] Identifier of the item within the hierarchy corresponding to this document. Value is taken from the VSITEMID enumeration.</param>
      <param name="punkDocView">[in] Pointer to the IUnknown interface for the document view object to be displayed within this window. The document view object can be a document object, such as <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleDocument" />, a control, such as <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleObject" /> or <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleControl" />, or a simple environment embedding, such as <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" />.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of an object representing the document data object of this document in situations where there is view or data separation. For example, the core text editor has a text view object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />) and the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" />). This parameter can be null. Passing null causes the environment to create an instance of a default implementation of the <paramref name="punkDocData" /> on the caller's behalf.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor factory that created an instance of the document view and document data objects. This should be GUID_NULL if the document is not constructed using an editor factory (that is, an instance is created with private knowledge of a particular project).</param>
      <param name="pszPhysicalView">[in] String to identify the physical view type for the editor. Some editor factories can support creating multiple physical view types. For example, it is possible for a single editor factory to support creating a graphical designer view (<see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Designer" />) as well as a textual code view (<see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code" />). The editor factory must register information in the system registry for the mapping between logical and physical view types under the LogicalViewMap registry subkey.</param>
      <param name="rguidCmdUI">[in] Indicates what set of menus should be merged into the main menu bar when this document is active. This type of menu merging is recommended over OLE2 menu merging, which can be used if this parameter is GUID_NULL. The initial value of this parameter is returned as an [out] parameter in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> method.</param>
      <param name="psp">[in] Pointer to the IServiceProvider interface. Can be null. This is an additional service provider provided by the caller (typically a project) making it possible for the caller to provide extra context (by means of services) to the embedded editor. Thus, when the embedded object makes a service request, the frame attempts to satisfy this request. If the service is not provided by the frame, <paramref name="psp" /> is tried. If the service is not found there, then the environment's global service provider is queried.</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."</param>
      <param name="pszEditorCaption">[in] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets (for example, [Form]). The initial value of this parameter is returned as an [out] parameter in the IVsEditorFactory::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> method.</param>
      <param name="pfDefaultPosition">[out] Can be null if the caller does not desire this information. true if the environment did not have any information saved about the last position of this tool window (that is, <paramref name="guidPersistenceSlot" /> was not found), hence it was placed in some default location on the screen. false if this window was placed where the user last located and sized it.</param>
      <param name="ppWindowFrame">[out] Pointer to the frame containing this editor, which can be used to manipulate the location, size, caption, and other properties of the window. It can also be used to get the IUnknown interface pointer of the embedding (that is, the <paramref name="punkDocView" />) or the <paramref name="punkDocData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>This method creates a tool window containing the embedding indicated by <paramref name="punkDocView" />, or the <paramref name="clsidDocView" /> parameter, if the <paramref name="punkDocView" /> parameter is null.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfCTW">[in] Specifies how a new tool window is created. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN" />.</param>
      <param name="dwToolWindowId">[in] Tool window instance ID. If you are creating a single-instance tool window, then pass in a pass of zero for this parameter. If you are creating a multi-instance tool window, then pass in the identifier for the next available tool window.</param>
      <param name="punkTool">[in] View object to be displayed in the client area of the tool window. This object can be an Active X control (such as, IOleInPlaceActiveObject, IOleControl), an Active X document (such as IOleView, IOleDocument), or a simple environment embedding (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" />). Can be null if a value is provided for <paramref name="rclsidTool" />.</param>
      <param name="rclsidTool">[in] Tool to create class ID for the type of tool window. The indicated class is created using <see cref="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)" /> (clsidTool). This functionality is a convenience for the caller. Can be GUID_NULL if a value is provided for <paramref name="punkTool" />.</param>
      <param name="rguidPersistenceSlot">[in] Unique identifier for this tool window so the environment can retain information (for example, window position, docking status, and so on) about this tool window across sessions. No two tool windows can share the same GUID. If so, the second tool window would fail in creation.</param>
      <param name="rguidAutoActivate">[in] Must be GUID_NULL. Do not use. For more information about how tool window visibility is controlled, see Tool Window Overview.</param>
      <param name="psp">[in] Pointer to the IServiceProvider interface. Can be null. This parameter allows the caller to specify an additional service provider provided for the tool window, and thus provide extra context to the tool window through the service. When the embedding makes a service request, the frame attempts to satisfy this request. If the service is not provided by the frame, then the service specified in the psp parameter is queried. If the service is not found there, then the environment's global service provider is queried.</param>
      <param name="pszCaption">[in] Tool window caption.</param>
      <param name="pfDefaultPosition">[out] Pointer to the default position of the tool window. Can be null, if the caller does not desire this information. If false, then the environment did not have any information saved about the last position of this tool window (that is, <paramref name="guidPersistenceSlot" /> was not found), and the tool window is placed in some default location on the screen. If set to true, then the window is placed where the user last located and sized it.</param>
      <param name="ppWindowFrame">[out] Pointer to the window frame containing the tool window. Use this pointer to manipulate the location, size, caption, and so on of the tool window and to get the IUnknown interface pointer of the embedding.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.EnableModeless(System.Int32)">
      <summary>Enables or disables a frame's modeless dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fEnable">[in] true when exiting a modal state. false when entering a modal state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.FindToolWindow(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> pointer for the requested single-instance tool window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFTW">[in] Provides criteria used to find a tool window in the environment. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN" />.</param>
      <param name="rguidPersistenceSlot">[in] Unique identifier for a tool window created using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />. The caller of this method can use predefined identifiers that map to tool windows if those tool windows are known to the caller.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object containing the tool window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.FindToolWindowEx(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> pointer for the requested single- or multi-instance tool window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFTW">[in] Provides criteria used to find a tool window in the environment. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN" />.</param>
      <param name="rguidPersistenceSlot">[in] Unique identifier for a tool window created using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />. The caller of this method can use predefined identifiers that map to tool windows if those tool windows are known to the caller.</param>
      <param name="dwToolWinId">[in] Identifier of the requested tool window in the multi-instanced tool window. The first instance of a multi-instance tool window has an identifier of zero, the second instance has an identifier of one, and so on.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the desired tool window</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetAppName(System.String@)">
      <summary>Returns the name of the application.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrAppName">[out] Pointer to the name of the application</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetCurrentBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.String@,System.Object@)">
      <summary>Returns the current backward and forward navigation item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppWindowFrame">[out] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="pbstrData">[out] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="ppunk">[out] Pointer to a specific interface for the navigation point. This is the interface passed in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.AddNewBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object,System.Int32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetDialogOwnerHwnd(System.IntPtr@)">
      <summary>Returns the HWND that can be used to parent modal dialogs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phwnd">[out] Pointer to a window handle that can be used to parent modal dialogs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetDirectoryViaBrowseDlg(Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW[])">
      <summary>Brings up the Browse dialog box to find a directory location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBrowse">[in, out] Pointer to a browse file name structure that contains information used to initialize the dialog box. When this method returns, this structure contains information about the directory location selected by the user. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW" /> structure for more information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetDocumentWindowEnum(Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)">
      <summary>Returns an enumerator that iterates through all existing document windows in the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the document window enumerator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetErrorInfo(System.String@)">
      <summary>Gets the text of error messages.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrErrText">[out] Pointer to a string containing the error text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetNextBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.String@,System.Object@)">
      <summary>Returns the next backward and forward navigation item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppWindowFrame">[out] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="pbstrData">[out] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="ppunk">[out] Pointer to a specific interface for the navigation point.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetOpenFileNameViaDlg(Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW[])">
      <summary>Brings up the Open dialog box to obtain an open file name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOpenFileName">[in, out] Pointer to an open file name structure that contains information used to initialize the dialog box. When this method returns, this structure contains information about the user's file selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetPreviousBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.String@,System.Object@)">
      <summary>Returns the previous backward and forward navigation item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppWindowFrame">[out] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="pbstrData">[out] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="ppunk">[out] Pointer to a specific interface for the navigation point.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetSaveFileNameViaDlg(Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW[])">
      <summary>Brings up the Save As dialog box to save a file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSaveFileName">[in, out] Pointer to a save file name structure that contains information used to initialize the dialog box. When this method returns, this structure contains information about the file name selected by the user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetToolWindowEnum(Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)">
      <summary>Returns an enumerator that iterates through all of the existing tool windows in the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppenum">[out] Pointer to the tool window enumerator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetURLViaDlg(System.String,System.String,System.String,System.String@)">
      <summary>Brings up Open Project From Web dialog box to obtain a URL from a user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszDlgTitle">[in] Pointer to the dialog box title.</param>
      <param name="pszStaticLabel">[in] Pointer to the static label above the drop-down list box.</param>
      <param name="pszHelpTopic">[in] An F1 keyword that points to a specific Help topic for this dialog box. </param>
      <param name="pbstrURL">[out] URL entered by the user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetVSSysColor(Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR,System.UInt32@)">
      <summary>This method is deprecated. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetVSSysColorEx(System.Int32,System.UInt32@)" /> instead.</summary>
      <param name="dwSysColIndex">Do not use.</param>
      <param name="pdwRGBval">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.OnModeChange(Microsoft.VisualStudio.Shell.Interop.DBGMODE)">
      <summary>Internal method. Do not use.</summary>
      <param name="dbgmodeNew">[in] Internal method. Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.PostExecCommand(System.Guid@,System.UInt32,System.UInt32,System.Object@)">
      <summary>Allows asynchronous execution of commands.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdGroup">[in, unique] Unique identifier of the command group; can be null to specify the standard group. All the commands that are passed in the <paramref name="nCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdexecopt">[in] Values describe how the object should execute the command.</param>
      <param name="pvaIn">[in, unique] Pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.PostSetFocusMenuCommand(System.Guid@,System.UInt32)">
      <summary>Sets focus in a combo box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdGroup">[in] Pointer to a GUID specifying the command group.</param>
      <param name="nCmdID">[in] Integer containing the command group ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RefreshPropertyBrowser(System.Int32)">
      <summary>Makes it possible for a project (or any other selected object being browsed by the Properties window) to keep the Properties window in sync with property changes without implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" /> and firing <see cref="M:Microsoft.VisualStudio.OLE.Interop.IPropertyNotifySink.OnChanged(System.Int32)" /> events.</summary>
      <returns>S_OK if the method succeeds, otherwise a failure code.</returns>
      <param name="dispid">[in] Dispatch ID of the property that has changed. Pass DISPID_UNKNOWN to refresh all properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RemoveAdjacentBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection)">
      <summary>Removes an adjacent navigation item in the specified direction.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rdDir">[in] Specifies which direction the navigation item to be removed is located in.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RemoveCurrentNavigationDupes(Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection)">
      <summary>Removes navigation duplicates in backward and forward navigation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rdDir">[in] Specifies in which direction the navigation item to be removed is located.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.ReportErrorInfo(System.Int32)">
      <summary>Helper method that displays an error message to the user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hr">[in] Error message to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SaveDocDataToFile(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.Object,System.String,System.String@,System.Int32@)">
      <summary>Helper method used by editors that implement the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" /> interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfSave">[in] Specifies file Save options. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" />.</param>
      <param name="pPersistFile">[in] Pointer to the IUnknown interface of the file in which the doc data is to be saved.</param>
      <param name="pszUntitledPath">[in] File path to which the doc data for an as-yet unsaved document is to be saved.</param>
      <param name="pbstrDocumentNew">[out] New document file name.</param>
      <param name="pfCanceled">[out] Set to true if the user aborts the save by clicking the Cancel button.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetErrorInfo(System.Int32,System.String,System.UInt32,System.String,System.String)">
      <summary>Helper method that records rich information about an error.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hr">[in] Error message to display.</param>
      <param name="pszDescription">[in] Rich error information.</param>
      <param name="dwReserved">[in] Must be zero.</param>
      <param name="pszHelpKeyword">[in] Pointer to the F1 keyword to attach to the Help button on the message box. This keyword links through the environment to a Help file (.HxS) registered with the Visual Studio Help collection. For more information about developing F1 keywords, see Unique F1 Keywords.</param>
      <param name="pszSource">[in] Pointer to pass to the SetSource method of the standard Windows ICreateErrorInfo interface, which sets the language-dependent <paramref name="ProgID" /> for the class or application that raised the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetForegroundWindow">
      <summary>Activates the environment application window by calling the SetForegroundWindow Win32 API.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetMRUComboText(System.Guid@,System.UInt32,System.String,System.Int32)">
      <summary>Adds information to a combo box list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdGroup">[in] Unique identifier of the command group; can be null to specify the standard group. All the commands that are passed in the <paramref name="nCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="dwCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="lpszText">[in] Specifies the text to place in the combo box list.</param>
      <param name="fAddToList">[in] If true, then the text in <paramref name="lpszText" /> is added to the combo box.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetMRUComboTextW(System.Guid[],System.UInt32,System.String,System.Int32)">
      <summary>Adds information to a combo box list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdGroup">[in] Unique identifier of the command group; can be null to specify the standard group. All the commands that are passed in the <paramref name="dwCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="dwCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="pwszText">[in] Text to place in the combo box.</param>
      <param name="fAddToList">[in] If true, then the text in <paramref name="lpszText" /> is added to the combo box and the associated list. If false, then the <paramref name="lpszText" /> is only added to the combo box, but not added to the associated list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetToolbarVisibleInFullScreen(System.Guid[],System.UInt32,System.Int32)">
      <summary>Sets the toolbar to visible when the window is in full-screen mode.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdGroup">[in] Unique identifier of the toolbar group; can be null to specify the standard group.</param>
      <param name="dwToolbarId">[in] Double word containing the toolbar id.</param>
      <param name="fVisibleInFullScreen">[in] true indicates that the toolbar is visible in full-screen mode. The default value is false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetupToolbar(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar,Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost@)">
      <summary>Called by VSPackage that creates a tool window in order to attach a toolbar to the tool window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the window in which the toolbar is to be set up.</param>
      <param name="ptwt">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar" /> interface for the new toolbar.</param>
      <param name="pptwth">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetWaitCursor">
      <summary>Changes the cursor to the hourglass cursor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.ShowContextMenu(System.UInt32,System.Guid@,System.Int32,Microsoft.VisualStudio.Shell.Interop.POINTS[],Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Shows the context menu for the active menu object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Do not use.</param>
      <param name="rclsidActive">[in] Specifies the GUID of the context menu in the .ctc file.</param>
      <param name="nMenuId">[in] Identifier of the context menu to show from the .ctc file.</param>
      <param name="pos">[in] Specifies the position to place the context menu.</param>
      <param name="pCmdTrgtActive">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface of the active menu object. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.ShowMessageBox(System.UInt32,System.Guid@,System.String,System.String,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,System.Int32,System.Int32@)">
      <summary>Manages implementation of a message box event.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCompRole">[in] Do not use.</param>
      <param name="rclsidComp">[in] Do not use.</param>
      <param name="pszTitle">[in] Pointer to the title of the message box.</param>
      <param name="pszText">[in] Pointer to the text of the message box.</param>
      <param name="pszHelpFile">[in] F1 keyword that corresponds to a specific Help topic. For more information, see Unique F1 Keywords.</param>
      <param name="dwHelpContextID">[in] Pass in zero.</param>
      <param name="msgbtn">[in] Specifies the set of buttons to appear in the message box. This parameter is similar to the <paramref name="uType" /> parameter of the Win32 MessageBox function in that it uses similar values with similar semantics. For a list of valid <paramref name="msgbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON" />.Note   OLEMSGBUTTON_YESALLNOCANCEL is not supported and returns the same result as OLEMSGBUTTON_OK.</param>
      <param name="msgdefbtn">[in] Specifies the default button for the message box. For a list of valid <paramref name="msgdefbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON" />.</param>
      <param name="msgicon">[in] Specifies the icon and type of the message. For a list of valid <paramref name="msgicon" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON" />.</param>
      <param name="fSysAlert">[in] If true, this flag causes the MB_SYSTEMMODAL flag to be set when showing the message. If false, no system flag is set during the message display.</param>
      <param name="pnResult">[out] Specifies the result of the message display. If ShowMessageBox succeeds, <paramref name="pnResult" /> is set to one of the following menu item values returned by the dialog box.ValueDescriptionIDABORTAbort button was clicked.IDCANCELCancel button was clicked or the ESC key was pressed. If the message box does not have a Cancel button, pressed the ESC key has no effect.IDIGNOREIgnore button was clicked.IDNONo button was clicked.IDOKOK button was clicked.IDRETRYRetry button was clicked.IDYESYes button was clicked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.TranslateAcceleratorAsACmd(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Causes the environment to use the active key binding table to convert, if possible, a keyboard message into the appropriate command, then route the command using the usual command routing mechanism.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMsg">[in] Pointer to a message structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.UpdateCommandUI(System.Int32)">
      <summary>Informs the environment to update the state of the command bars (menus and toolbars).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fImmediateUpdate">[in] true if the update is performed synchronously (immediately). It is strongly recommended to pass false for this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.UpdateDocDataIsDirtyFeedback(System.UInt32,System.Int32)">
      <summary>Makes it possible for a document data object to synchronously inform the environment when their document must be changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="docCookie">[in] An abstract value representing the document in the Running Document Table.</param>
      <param name="fDirty">The value of this parameter is ignored. The document's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)" /> method is called to determine the document's dirty state.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShellDocumentWindowMgr">
      <summary>Saves and retrieves from a stream, window position, editor type, and view for all active windows. Implemented by the environment. Rarely used.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellDocumentWindowMgr.ReopenDocumentWindows(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Reopens all document windows from the window position information in the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStream">[in] A pointer to an object of type IStream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellDocumentWindowMgr.SaveDocumentWindowPositions(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Saves the window positions and <paramref name="guidEditorType/pszPhysicalView" /> for each open document window into a stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pStream">[in] A pointer to an object of type IStream.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument">
      <summary>Controls the state of open documents within the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.AddStandardPreviewer(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.UInt32)">
      <summary>Adds a Web browser to the list of available previewers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszExePath">[in] Full path to the executable file you want to launch for the previewer.</param>
      <param name="pszDisplayName">[in] Name that appears in the Browse With dialog box.</param>
      <param name="fUseDDE">[in] Set to true to use Dynamic Data Exchange (DDE). For more information, see Dynamic Responding to Dynamic Data Exchange (DDE)</param>
      <param name="pszDDEService">[in] Identifies the DDE service.</param>
      <param name="pszDDETopicOpenURL">[in] Identifies the topic open URL.</param>
      <param name="pszDDEItemOpenURL">[in] Provides the path to the file that is being browsed.</param>
      <param name="pszDDETopicActivate">[in] Identifies the topic activate URL.</param>
      <param name="pszDDEItemActivate">[in] Identifies the topic activate string.</param>
      <param name="aspAddPreviewerFlags">[in] Sets the viewer to be one of the system defaults. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.GetFirstDefaultPreviewer(System.String@,System.Int32@,System.Int32@)">
      <summary>Returns the .exe file path of the first default web browser.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if a default previewer is defined. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there are no default previewers.</returns>
      <param name="pbstrDefBrowserPath">[out] Pointer to the full path to the default browser.</param>
      <param name="pfIsInternalBrowser">[out] true if the default browser is internal.</param>
      <param name="pfIsSystemBrowser">[out] true if the default browser is the system browser.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.GetStandardEditorFactory(System.UInt32,System.Guid@,System.String,System.Guid@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory@)">
      <summary>Returns the editor factory associated with a specific document (for example, a file type).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pguidEditorType">[in, out] GUID of the editor factory you want returned. To indicate which editor factory should be returned, specify a value for <paramref name="pguidEditorType" /> or <paramref name="pszMkDocument" />. Do not provide values for both parameters.</param>
      <param name="pszMkDocument">[in] String form of the moniker identifier of the document in the project system, for example, the full path to the file. To indicate which editor factory should be returned, specify a value for <paramref name="pszMkDocument" /> or <paramref name="pguidEditorType" />. Do not provide values for both parameters.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View.</param>
      <param name="pbstrPhysicalView">[out] Physical view string corresponding to the view that is associated with the logical view GUID passed in <paramref name="rguidLogicalView" />.</param>
      <param name="ppEF">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" /> implementation for the requested editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.InitializeEditorInstance(System.UInt32,System.IntPtr,System.IntPtr,System.String,System.Guid@,System.String,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Initializes an instance of the document editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfIEI">[in] Flags controlling the initialization of the editor. For a list of enumeration values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS" />. If you specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_DoNotLoadDocData" /> for this parameter, then this method does not attempt to load your DocData by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.LoadDocData(System.String)" />.</param>
      <param name="punkDocView">[in] Pointer to the IUnknown interface of the document data object.</param>
      <param name="punkDocData">[in] Pointer to the IUnknown interface of the document data object.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidEditorType">[in]GUID of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of the physical view.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View. If you implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on your document data object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is displayed. The editor window is displayed when the editor is instantiated. By specifying the logical view GUID, the caller of IVsUIShellOpenDocument::InitializeEditorInstance can request the specific view that matches the reason the caller is requesting the view. For example, the caller would specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging view, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the format: "ProjectName – ItemName."</param>
      <param name="pszEditorCaption">[in] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets (for example, [Form]). The initial value of this parameter is returned as an [out] parameter in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> method.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the document.</param>
      <param name="itemid">[in] UI hierarchy item identifier of the document in the project system. For more information see VSITEMID.</param>
      <param name="punkDocDataExisting">[in] Pointer to the IUnknown interface of the document data object if the document data object already exists in the running document table.</param>
      <param name="pSPHierContext">[in] Project-specific service provider. For more information, see <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
      <param name="rguidCmdUI">[in] Command UI GUID of the commands to display for this editor.</param>
      <param name="ppWindowFrame">[out, retval] The window frame that contains the editor. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsDocumentInAProject(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,System.Int32@)">
      <summary>Determines whether a document is part of the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="ppUIH">[out] If the document is open, this is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface implementation of the project that contains the document. If the document is not open, the value of this parameter is null. You can call Query Interface From <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to obtain a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project.</param>
      <param name="pitemid">[out] Pointer to the hierarchy item identifier of the document in the project system. For more information see VSITEMID.</param>
      <param name="ppSP">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the project.</param>
      <param name="pDocInProj">[out, retval] Flags that indicate whether a document is part of a project. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsDocumentOpen(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.String,System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.Int32@)">
      <summary>Determines whether a document is currently open.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierCaller">[in] If the document is open, this is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface implementation of the project that contains the document. If the document is not open, this is null. You can call Query Interface from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to obtain a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project. Used with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen" />.</param>
      <param name="itemidCaller">[in] Hierarchy item identifier of the document in the project. Used with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen" />. For more information, see VSITEMID.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View.</param>
      <param name="grfIDO">[in] Flags that control what actions are performed on an open document. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS" />.</param>
      <param name="ppHierOpen">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the Open document. If <paramref name="pfOpen" /> is false, then this parameter is null.</param>
      <param name="pitemidOpen">[out] Pointer to the hierarchy item identifier of the open document in the project system. For more information see VSITEMID. </param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window frame that contains the editor in which the document is being edited. If <paramref name="pfOpen" /> is false, then this parameter is null.</param>
      <param name="pfOpen">[out, retval] true if the document is currently open; false if the document is not open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsSpecificDocumentViewOpen(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.String,System.Guid@,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.Int32@)">
      <summary>Determines whether a specified document view is open.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierCaller">[in] Hierarchy identifier of the caller passed as a pointer to the caller's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> implementation. This parameter is used by the environment's implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsSpecificDocumentViewOpen(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.String,System.Guid@,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.Int32@)" /> if the caller specifies a value of IDO_ActivateIfOpen for the <paramref name="grfIDO" /> parameter..</param>
      <param name="itemidCaller">[in] UI hierarchy item identifier of the caller. Used with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen" />. For more information see VSITEMID.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidEditorType">[in] GUID of the editor factory. This value, in combination with <paramref name="pszPhysicalView" /> is used to create the unique identifier of the specified document view.</param>
      <param name="pszPhysicalView">[in] Physical view string. This value, in combination with <paramref name="rguidEditorType" />, is used to create the unique identifier of the specified document view.</param>
      <param name="grfIDO">[in] Flags that control what actions are performed on the open document. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS" />.</param>
      <param name="ppHierOpen">[out] If <paramref name="pfOpen" /> is true, then this parameter is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> that owns the view. If <paramref name="pfOpen" /> is false, then this parameter is null.</param>
      <param name="pitemidOpen">[out] If pfOpen is true, then this parameter is a pointer to the UI hierarchy item identifier of the open document that is represented by the specified view. If <paramref name="pfOpen" /> is false, then this parameter is null. For more information see VSITEMID.</param>
      <param name="ppWindowFrame">[out] If pfOpen is true, then this parameter is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> containing the specified view.</param>
      <param name="pfOpen">[out, retval] true if the specified document view is open. false if the specified document view is not open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.MapLogicalView(System.Guid@,System.Guid@,System.String@)">
      <summary>Maps a physical view to a logical view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="rguidLogicalView">[in] GUID of the logical view. For a list of logical view GUID, see Logical View and Physical View.</param>
      <param name="pbstrPhysicalView">[out, retval] Pointer to the physical view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenCopyOfStandardEditor(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Used to implement Window.NewWindow functionality.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pWindowFrame">[in] Pointer to the original window frame to clone.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View.</param>
      <param name="ppNewWindowFrame">[out] Pointer to the new, cloned window frame.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProject(System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Finds an appropriate project to open the document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown, when the editor is instantiated. By specifying the logical view GUID, you can request the specific view that matches the reason you are requesting the view. For example, specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="ppSP">[out] Pointer to the IServiceProvideroledbinterfaces_implemented_by_the_provider interface.</param>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that can open the document.</param>
      <param name="pitemid">[out] Pointer to the hierarchy item identifier of the document in the project. For more information see VSITEMID.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame that contains the editor. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProjectWithSpecific(System.String,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Finds a specified project to open this document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="grfEditorFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Unique identifier of the physical view.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown, when the editor is instantiated. By specifying the logical view GUID, you can request the specific view that matches the reason you are requesting the view. For example, specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="ppSP">[out] Pointer to the IServiceProvider interface.</param>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that can open the document.</param>
      <param name="pitemid">[out] Pointer to the hierarchy item identifier of the document in the project. For more information see VSITEMID.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame that contains the editor. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenSpecificEditor(System.UInt32,System.String,System.Guid@,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens a specified editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOpenSpecific">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS" /> enumeration.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of the physical view. If null, the environment calls <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.MapLogicalView(System.Guid@,System.String@)" /> on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View. If you implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on your document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown when the editor is instantiated. By specifying the logical view GUID, the caller of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.InitializeEditorInstance(System.UInt32,System.IntPtr,System.IntPtr,System.String,System.Guid@,System.String,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> can request the specific view that matches the reason the caller is requesting the view. For example, the caller would specify LOGVIEWID_Debugging to get the view appropriate for debugging view, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface.</param>
      <param name="itemid">[in] UI hierarchy item identifier for the specified editor. For more information see VSITEMID.</param>
      <param name="punkDocDataExisting">[in] Pointer to the IUnknown interface.</param>
      <param name="pSPHierContext">[in] Pointer to the IServiceProvide interface.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens the standard editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOpenStandard">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS" /> enumeration.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown. By specifying the logical view GUID, you can request the specific view that matches the reason you are requesting the view. For example, specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface.</param>
      <param name="itemid">[in] UI hierarchy item identifier of the standard editor. For more information see VSITEMID.</param>
      <param name="punkDocDataExisting">[in] Pointer to the IUnknown interface of the document data object.</param>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardPreviewer(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION,System.UInt32)">
      <summary>Opens a standard web browser for the specified document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ospOpenDocPreviewer">[in] Bitwise flags that indicate how the previewer is opened. These flags control whether the Browse With dialog box is used (<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_UsePreviewWithDialog" />). For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS" />.</param>
      <param name="pszURL">[in] URL of the document to preview.</param>
      <param name="resolution">[in] Resolution enumeration that determines the resolution in which the browser windows are to be displayed (if supported). Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION" /> enumeration.</param>
      <param name="dwReserved">[in] Reserved for future use. Set to null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.SearchProjectsForRelativePath(System.UInt32,System.String,System.String[])">
      <summary>Converts a relative path for a document to an absolute path that can be passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProject(System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfRPS">[in] Flags specifying how the search path should be resolved. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS" />.</param>
      <param name="pszRelPath">[in] Relative path to the document. This might simply be the file name.</param>
      <param name="pbstrAbsPath">[out, retval] Full path name of the document. This is the same as the <paramref name="pszMkDocument" /> string value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents">
      <summary>Implemented by VSPackages to sink build events for solution and project builds.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Called when the active project configuration for a project in the solution has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsHierarchy">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Begin(System.Int32@)">
      <summary>Called before any build actions have begun. This is the last chance to cancel the build before any building begins.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Cancel">
      <summary>Called when a build is being cancelled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)">
      <summary>Called when a build is completed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSucceeded">[in] true if no update actions failed.</param>
      <param name="fModified">[in] true if any update action succeeded.</param>
      <param name="fCancelCommand">[in] true if update actions were canceled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_StartUpdate(System.Int32@)">
      <summary>Called before the first project configuration is about to be built.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2">
      <summary>Implemented by VSPackages to sink build events for solution and project builds.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Called when the active project configuration for a project in the solution has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsHierarchy">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)">
      <summary>Called right before a project configuration begins to build.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierProj">[in] Pointer to a hierarchy project object.</param>
      <param name="pCfgProj">[in] Pointer to a configuration project object.</param>
      <param name="pCfgSln">[in] Pointer to a configuration solution object.</param>
      <param name="dwAction">[in] Double word containing the action.</param>
      <param name="pfCancel">[in, out] Pointer to a flag indicating cancel.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)">
      <summary>Called right after a project configuration is finished building.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHierProj">[in] Pointer to a hierarchy project object.</param>
      <param name="pCfgProj">[in] Pointer to a configuration project object.</param>
      <param name="pCfgSln">[in] Pointer to a configuration solution object.</param>
      <param name="dwAction">[in] Double word containing the action.</param>
      <param name="fSuccess">[in] Flag indicating success.</param>
      <param name="fCancel">[in] Flag indicating cancel.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_Begin(System.Int32@)">
      <summary>Called before any build actions have begun. This is the last chance to cancel the build before any building begins.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_Cancel">
      <summary>Called when a build is being cancelled.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)">
      <summary>Called when a build is completed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSucceeded">[in] true if no update actions failed.</param>
      <param name="fModified">[in] true if any update action succeeded.</param>
      <param name="fCancelCommand">[in] true if update actions were canceled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_StartUpdate(System.Int32@)">
      <summary>Called before the first project configuration is about to be built.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext">
      <summary>Manages attributes and keywords (context and subcontext) in the context or subcontext bag.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AddAttribute(Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE,System.String,System.String)">
      <summary>Adds an attribute, lookup keyword, or F1 keyword to the context or subcontext bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="usage">[in] Type of item (attribute, keyword, or F1 keyword) to add to the context or suncontext bag. For a list of usage values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE" />.</param>
      <param name="szName">[in] If you are adding an attribute to the context or subcontext bag, then specify the name of the attribute for this parameter. If you are adding a lookup keyword or an F1 keyword, enter the term "keyword" for this parameter.</param>
      <param name="szValue">[in] If you are adding an attribute to the context or subcontext bag, then specify the value of the attribute for this parameter. If you are adding a lookup keyword or F1 keyword, enter the actual text of the keyword for this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AddSubcontext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext,System.Int32,System.UInt32@)">
      <summary>Links a subcontext bag to a parent context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSubCtx">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> interface (the subcontext bag).</param>
      <param name="lPriority">[in] Priority of the subcontext. For a list of <paramref name="lPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY" />.</param>
      <param name="pdwCookie">[out, retval] Pointer to a unique identifier for the subcontext.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AdviseUpdate(Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate,System.UInt32@)">
      <summary>Enables clients to receive notification when the user context property bag is changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUpdate">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate" /> interface, which sends an update notification.</param>
      <param name="pdwCookie">[out, retval] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.UnadviseUpdate(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.CountAttributes(System.String,System.Int32,System.Int32@)">
      <summary>Returns the number of attributes or keywords present in the context or subcontext bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszName">[in] Attribute name or keyword. Specify the attribute name to determine the number of attributes of a given name in the context bag. Specify "keyword" to determine the number of F1 or lookup keywords in the context or subcontext bag.</param>
      <param name="fIncludeChildren">[in] If true, then the number of subcontext attributes or keywords are also returned in the count. If false, then the subcontext is excluded from the count.</param>
      <param name="pc">[out, retval] Pointer to an integer that indicates the number of attributes of a specific name or the number of keywords.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.CountSubcontexts(System.Int32@)">
      <summary>Returns the number of subcontext bags associated with the context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pc">[out, retval] Pointer to an integer that indicates the number of subcontext bags associated with the context bag.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetAttribute(System.Int32,System.String,System.Int32,System.String@,System.String@)">
      <summary>Returns the specified attribute or keyword from the context or subcontext bag based on index position or name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAttribute">[in] Index into the collection of attributes and keywords in the context or subcontext bag.</param>
      <param name="pszName">[in] Attribute name or keyword. Specify the attribute name to access a specific attribute. Specify "keyword" to access an F1 or lookup keyword.</param>
      <param name="fIncludeChildren">[in] If true, then the subcontext bags associated with the context bag are also returned. If false, then the subcontext is excluded.</param>
      <param name="pbstrName">[out] Pointer to the specific attribute name or the value keyword, if a match is found.</param>
      <param name="pbstrValue">[out, retval] Pointer to the specific attribute value or the keyword text, if a match is found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetAttributePri(System.Int32,System.String,System.Int32,System.Int32@,System.String@,System.String@)">
      <summary>Returns a specified attribute or keyword from the context or subcontext bag based on index position, name, or priority.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAttribute">[in] Index into the collection of attributes and keywords in the context or subcontext bag.</param>
      <param name="pszName">[in] Attribute name or keyword. Specify the attribute name to access a specific attribute in the context or subcontext bag. Specify keyword to access an F1 or lookup keyword.</param>
      <param name="fIncludeChildren">[in] If true, then the subcontext elements associated with the context bag are also returned. If true, then the subcontext is excluded.</param>
      <param name="piPriority">[out] Priority of the attribute or keyword. For a list of <paramref name="piPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY" />.</param>
      <param name="pbstrName">[out] Pointer to the specific attribute name or the value keyword, if a match is found.</param>
      <param name="pbstrValue">[out, retval] Pointer to the specific attribute value or the keyword text, if a match is found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetAttrUsage(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE[])">
      <summary>Returns the type of context (attribute, lookup keyword, or F1 keyword) that is present at a specified index position in the context or subcontext bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] Index position of the context item in the context bag. The index is zero based.</param>
      <param name="fIncludeChildren">[in] If true, then the subcontext associated with the context bag is included. If false, then the subcontext is excluded.</param>
      <param name="pUsage">[out] Specifies whether an attribute or keyword is located at the specified index position in the context bag. For a list of <paramref name="pUsage" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetPriority(System.Int32@)">
      <summary>Determines the priority of an attribute or keyword in the context or subcontext bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lPriority">[out] Priority of the attribute or keyword. For a list of <paramref name="lPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetSubcontext(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
      <summary>Returns a specified subcontext bag from the parent context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="i">[in] Index position of the subcontext bag on the parent context bag. This index is zero based.</param>
      <param name="ppSubCtx">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> interface, representing the subcontext bag.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.IsDirty(System.Int32@)">
      <summary>Determines whether the user context has changed in the context or subcontext bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfDirty">[out, retval] If true, then the user context has changed. If false, then the user context is unchanged.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveAllSubcontext">
      <summary>Removes all subcontext bags associated with the context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveAttribute(System.String,System.String)">
      <summary>Removes an attribute or keyword from a context or subcontext bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szName">[in] Name of attribute or keyword to be removed.</param>
      <param name="szValue">[in] Attribute value to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveAttributeIncludeChildren(System.String,System.String)">
      <summary>Removes an attribute or keyword from the context bag and from any associated subcontext bags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szName">[in] Attribute name or keyword. If you are removing an attribute, then specify the name of the attribute. If you are removing a lookup keyword or an F1 keyword, then enter the term keyword.</param>
      <param name="szValue">[in] Attribute or keyword value. If you are removing an attribute, then specify the value of the attribute. If you are removing a lookup keyword or F1 keyword, then enter the actual text of the keyword.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveSubcontext(System.UInt32)">
      <summary>Removes the specified subcontext bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Pointer to a unique identifier for the subcontext bag. This is the value returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AddSubcontext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext,System.Int32,System.UInt32@)" /> method when a subcontext bag is linked to the parent context bag.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.SetDirty(System.Int32)">
      <summary>Flags the context or subcontext bag for update.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDirty">[in] If true, then clients are informed that the user context has changed. If false, then clients are not informed that the user context has not changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.UnadviseUpdate(System.UInt32)">
      <summary>Disables clients from receiving notification of updates to the user context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Unique identifier for the referenced event sink. This is the same value returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AdviseUpdate(Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate,System.UInt32@)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.Update">
      <summary>Updates user context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextCustomize">
      <summary>Provides information about the extent of the context for keyword searches.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextCustomize.GetLimitKeywordSource(System.Int32@)">
      <summary>Gets the limits of how keywords are searched for context help.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pLimKwdSrc">[out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE" /> enumeration that specifies the limits.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem">
      <summary>Describes the F1Help context of an item. Member of a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.Command(System.String@)">
      <summary>Outputs the F1 command's String value.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCommand">[out] The String value of the F1 command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.CountAttributes(System.String,System.Int32@)">
      <summary>Counts the attributes of the user-selected item in the shell.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszAttrName">[in] The string name of the attribute of the UserContextItem.</param>
      <param name="pc">[out] The number of attributes in the UserContextItem.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.GetAttribute(System.String,System.Int32,System.String[],System.String[])">
      <summary>Gets the attributes of the user-selected item in the shell.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszAttrName">[in] The name of the attribute of the selected item in the shell to search for.</param>
      <param name="index">[in] The integer entry point into the array of strings containing attributes.</param>
      <param name="pbstrName">[out] The string array of attributes that match the name of the attribute searched for.</param>
      <param name="pbstrValue">[out] The string array of values that correspond to the string array of attributes returned by the member when called.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.Name(System.String@)">
      <summary>Returns the name of the UserContextItem selected by the user in the shell.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pbstrName">[out] The name of the UserContextItem in the shell.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection">
      <summary>Maintains an indexed collection of context items (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem" />) for use in context-sensitive help.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection._NewEnum(System.Object@)">
      <summary>Returns an enumerator to use for going through the collection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEnum">[out] Pointer to the enumerator interface, <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection.Count(System.Int32@)">
      <summary>Returns the number of items in the collection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Pointer to an integer containing the number of items in the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection.Item(System.Object,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem@)">
      <summary>Retrieves an item from the collection according to a VARIANT index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="index">[in] A variant. The index of the item to retrieve.</param>
      <param name="ppItem">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem" /> interface giving access to the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection.ItemAt(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem@)">
      <summary>Retrieves an item from the collection by integer index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="index">[in] Long integer. The index of the item.</param>
      <param name="ppItem">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem" /> interface giving access to the item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemEvents">
      <summary>Defines the method called when there are context-sensitive Help items available. Implement this interface and pass it to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.AdviseContextItemEvents(Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemEvents,System.UInt32@)" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext" /> interface to receive event notification.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemEvents.OnUserContextItemsAvailable(Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection)">
      <summary>Method to call when there are context-sensitive Help items available.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pList">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection" /> interface providing access to a collection of user context items.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider">
      <summary>Defines a provider of context-sensitive Help items. Implement your provider and register it with the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext.RegisterItemProvider(Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider,System.UInt32@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.GetProperty(System.Int32,System.Object@)">
      <summary>Gets the specified project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.KeywordLookup(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection@,Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext,System.Int32,System.Int32)">
      <summary>Looks up the specified keyword.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwzTargetAttr">[in]</param>
      <param name="pwzTargetAttrValue">[in]</param>
      <param name="pCMUC">[in]</param>
      <param name="fCheckIdle">[in]</param>
      <param name="fContinueInterrupt">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.LookupEnabled(System.Int32@)">
      <summary>Determines whether lookup is enabled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfLookupEnabled">[out] True if lookup is enabled, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.PackedAttributeLookup(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection@)">
      <summary>Looks up attributes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwzRequired">[in]</param>
      <param name="pwzScope">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.SetProperty(System.Int32,System.Object)">
      <summary>Sets the specified property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate">
      <summary>Allows you to update the context bag when an update notification is received.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate.UpdateUserContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext,System.UInt32)">
      <summary>Sends notification that the context is being updated. This method also clears the dirty flag from the context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCtx">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate" /> interface (the context bag) to update.</param>
      <param name="dwCookie">[in] Parameter is not currently used.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser">
      <summary>Manipulates a Web browser. Returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateWebBrowser(System.UInt32,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService" /> interface. You can get an instance of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService" /> interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsWebBrowsingService" /> (SID_SVsWebBrowsingService) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.GetDocumentInfo(System.UInt32,System.Object@)">
      <summary>Gets information about the specified document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="dwInfoIndex">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX" /> specifying document name, URL, type, etc. to be returned.</param>
      <param name="pvarInfo">[out] The requested info.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Navigate(System.UInt32,System.String)">
      <summary>Navigates to web with Visual Studio internal protocol URLs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags specifying navigation options. Possible values are VSNWB_ForceNew, VSNWB_AddToMRU, VSNWB_VsURLOnly, and VSNWB_WebURLOnly.</param>
      <param name="lpszURL">[in] The URL to which to navigate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.NavigateEx(System.UInt32,System.String,System.Object@,System.Object@,System.Object@)">
      <summary>Navigates to web with external protocol URLs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags specifying navigation options. Possible values are VSNWB_ForceNew, VSNWB_AddToMRU, VSNWB_VsURLOnly, and VSNWB_WebURLOnly.</param>
      <param name="lpszURL">[in] The URL to which to navigate.</param>
      <param name="pvarTargetFrame">[in] The target frame.</param>
      <param name="pvarPostData">[in] The data to post.</param>
      <param name="pvarHeaders">[in] Headers.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Refresh(System.UInt32)">
      <summary>Refreshes the browser contents.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwRefreshType">[in] Specifies the type of refresh. Possible values are VSWBR_Normal, VSWBR_IfExpired, and VSWBR_Completely.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Stop">
      <summary>Stops the browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser">
      <summary>Provides a way for clients of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService" /> to control the hosted Web browser control.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.Disconnect">
      <summary>Disconnects the web browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.FilterDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Modifies the specified data object with a filter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObjIn">[in] The data object before modification.</param>
      <param name="ppDataObjOut">[out] The data object after modification.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCmdUIGuid(System.Guid@)">
      <summary>Gets the command UI GUID of this web browser user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdUI">[out] Returns the command UI GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCustomMenuInfo(System.Object,System.Object,System.UInt32,System.UInt32,System.Guid@,System.Int32@)">
      <summary>Gets information needed to customize a menu.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if user is implementing a custom menu. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if menus are suppressed altogether.</returns>
      <param name="pUnkCmdReserved">[in] Reserved IUnknown pointer.</param>
      <param name="pDispReserved">[in] Reserved IDispatch pointer.</param>
      <param name="dwType">[in] The type of the menu.</param>
      <param name="dwPosition">[in] The position of the menu.</param>
      <param name="pguidCmdGroup">[in] The command group GUID.</param>
      <param name="pdwMenuID">[in] The identifier of the menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCustomURL(System.UInt32,System.String@)">
      <summary>Gets a custom URL for the specified page.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nPage">[in] The page for which custom URL is desired.</param>
      <param name="pbstrURL">[out] The custom URL for the specified page.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetDropTarget(Microsoft.VisualStudio.OLE.Interop.IDropTarget,Microsoft.VisualStudio.OLE.Interop.IDropTarget@)">
      <summary>Gets an alternative drop target for the specified drop target.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDropTgtIn">[in] The drop target for which to get an alternative.</param>
      <param name="ppDropTgtOut">[out] The alternative for the specified drop target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetExternalObject(System.Object@)">
      <summary>Gets the external object, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> when user is replacing the external object, and <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />when user is suppressing the external object. If it fails, it returns an error code.</returns>
      <param name="ppDispObject">[out] The external object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetOptionKeyPath(System.UInt32,System.String@)">
      <summary>Gets the registry key under which to save user preferences.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved.</param>
      <param name="pbstrKey">[out] The registry key under which to save user preferences.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.Resize(System.Int32,System.Int32)">
      <summary>Resizes the browser frame to the specified x and y dimensions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cx">[in] The x dimension.</param>
      <param name="cy">[in] The y dimension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.TranslateAccelarator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Translate the specified message.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpmsg">[in] The message to be translated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.TranslateUrl(System.UInt32,System.String,System.String@)">
      <summary>Translate or modify the specified URL.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved.</param>
      <param name="lpszURLIn">[in] The URL to be modified.</param>
      <param name="lppszURLOut">[out] The modified URL.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService">
      <summary>Enables a package to create and control a Web browsing session. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsWebBrowsingService" /> (SID_SVsWebBrowsingService) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateExternalWebBrowser(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION,System.String)">
      <summary>Create an instance of an external Web browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCreateFlags">[in] Bit flags specifying browser options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER" /> enumeration.</param>
      <param name="dwResolution">[in] Display resolution. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION" /> enumeration.</param>
      <param name="lpszURL">[in] Pointer to a string containing the URL of the page to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateWebBrowser(System.UInt32,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Create an instance of a Web browser within the Visual Studio user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCreateFlags">[in] Bit flags specifying browser options. Created using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER" /> enumeration.</param>
      <param name="rguidOwner">[in] The GUID of the owner of the window frame in which the browser appears.</param>
      <param name="lpszBaseCaption">[in] Pointer to a string containing the base (first part) of the caption for the browser window. Default is WebBrowser.</param>
      <param name="lpszStartURL">[in] Pointer to a string containing the URL of the page to display.</param>
      <param name="pUser">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser" /> interface to use in controlling the browser.</param>
      <param name="ppBrowser">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser" /> interface of the browser.</param>
      <param name="ppFrame">[out] Pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the browser.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateWebBrowserEx(System.UInt32,System.Guid@,System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Create an instance of a Web browser. Extension of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateWebBrowser(System.UInt32,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCreateFlags">[in] Bit flags specifying browser options. Created using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER" /> enumeration.</param>
      <param name="rguidPersistenceSlot">[in] Pointer to the browser window GUID. A window must be registered in order to be saved and restored when Visual Studio starts up. Use GUID_NULL to use the default.</param>
      <param name="dwId">[in] Integer identifier for the window. Use 0 for next available.</param>
      <param name="lpszBaseCaption">[in] Pointer to a string containing the window caption. Use null for the default caption.</param>
      <param name="lpszStartURL">[in] Pointer to a string containing the URL of the page to display. Use null for the default, the Visual Studio home page.</param>
      <param name="pUser">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser" /> interface to use in controlling the browser. Should be null if you specify GUID_NULL for <paramref name="rguidPersistenceSlot" />.</param>
      <param name="ppBrowser">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser" /> interface of the browser. May be null.</param>
      <param name="ppFrame">[out] Pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the browser. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.GetFirstWebBrowser(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@)">
      <summary>Get the first available Web browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="rguidPersistenceSlot">[in] Pointer to the browser window GUID. A window must be registered in order to be saved and restored when Visual Studio starts up. Use GUID_NULL to use the default.</param>
      <param name="ppFrame">[out] Pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the browser.</param>
      <param name="ppBrowser">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser" /> interface of the browser. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.GetWebBrowserEnum(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)">
      <summary>Get an enumerator for the current Web browsers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidPersistenceSlot">[in] Pointer to the browser window GUID. A window must be registered in order to be saved and restored when Visual Studio starts up. Use GUID_NULL to use the default.</param>
      <param name="ppenum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.Navigate(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Navigates to the specified URL.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszURL">[in] String containing the URL to navigate to. You can navigate to sites using Web and Visual Studio internal protocols.</param>
      <param name="dwNaviageFlags">[in] Bit flags setting navigation options. Constructed using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS" /> enumeration.</param>
      <param name="ppFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the browser window.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebFavorites">
      <summary>Enables a package to add to a user's Favorites list. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsWebFavorites" /> (SID_SVsWebFavorites) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebFavorites.AddFavorite(System.String,System.String,System.String,System.Int32,System.String[])">
      <summary>Add an item to the Favorites list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="lpszURL">[in] Pointer to a string containing the URL to add.</param>
      <param name="lpszName">[in] Pointer to a string containing the default display name.</param>
      <param name="pszIconFileName">[in] Pointer to string containing the name of the file containing the icon to display next to the URL. May be null.</param>
      <param name="iIconIndex">[in] Integer. The index of the icon within the file given in <paramref name="pszIconFileName" />.</param>
      <param name="pbstrFilename">[out] Pointer to the file containing the shortcut to the favorite. May be null.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview">
      <summary>Enables a package to show a preview of a Web page, typically in a child window. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsWebPreview" /> (SID_SVsWebPreview) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.ActivatePreview">
      <summary>Activates the preview set by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURL(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURLEx(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String,System.UInt32,System.Int32,System.Int32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURL(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String)">
      <summary>Provides the information for the preview. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.ActivatePreview" /> to display the preview.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pAction">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction" /> interface providing callbacks for the preview process.</param>
      <param name="lpszURL">[in] Pointer to a string containing the URL to be previewed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURLEx(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String,System.UInt32,System.Int32,System.Int32)">
      <summary>Provides the information for the preview. Extension of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURL(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String)" />. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.ActivatePreview" /> to display the preview.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pAction">[in] [in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction" /> interface providing callbacks for the preview process. May be null.</param>
      <param name="lpszURL">[in] Pointer to a string containing the URL to be previewed.</param>
      <param name="opt">[in] Integer. Options for displaying the preview window. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS" /> enumeration.</param>
      <param name="cx">[in] Integer. Horizontal position of upper left corner of preview. Can be zero (0), the default.</param>
      <param name="cy">[in] Integer. Vertical position of upper left corner of preview. Can be zero (0), the default.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.Resize(System.Int32,System.Int32)">
      <summary>Resize the preview window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="cx">[in] Integer. The new horizontal length of the preview window.</param>
      <param name="cy">[in] Integer. The new vertical length of the preview window.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction">
      <summary>Defines methods to be called in response to Web preview events. Implement the interface and use it with the Web preview methods <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURL(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURLEx(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String,System.UInt32,System.Int32,System.Int32)" /> of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction.OnPreviewClose">
      <summary>Method called when the preview window closes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction.OnPreviewLoaded(System.Object)">
      <summary>Method called when the preview window has loaded its document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pDispDocument">[in] Pointer to the IDispatch interface of the loaded document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction.OnPreviewLoadStart">
      <summary>Method called when the preview window starts loading its document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebURLMRU">
      <summary>Enables a package to add a URL to the most recently used (MRU) list of URLs and to get a list of all of the URLs in the MRU list. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsWebURLMRU" /> (SID_SVsWebURLMRU) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebURLMRU.AddURL(System.String)">
      <summary>Add a URL to the most recently used (MRU) list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrUrl">[in] Pointer to a string containing the URL to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebURLMRU.GetURLArray(System.Object@)">
      <summary>Retrieve the URLs in the most recently used (MRU) list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pvarURLs">[out] Pointer to a VARIANT containing an array of URLs.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame">
      <summary>Provides access to behaviors and properties of environment window frames, for both tool and document windows. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.CloseFrame(System.UInt32)">
      <summary>Closes a window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfSaveOptions">[in] Save options whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS[],System.Guid@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the position of the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwSFP">[out] Pointer to the frame position to set. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS" /> enumeration.</param>
      <param name="pguidRelativeTo">[out] Not used (set to null).</param>
      <param name="px">[out] Pointer to the absolute x ordinate.</param>
      <param name="py">[out] Pointer to the absolute y ordinate.</param>
      <param name="pcx">[out] Pointer to the x ordinate relative to <paramref name="px" />.</param>
      <param name="pcy">[out] Pointer to the y ordinate relative to <paramref name="py" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetGuidProperty(System.Int32,System.Guid@)">
      <summary>Returns a window frame property based on a supplied GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" /> enumeration.</param>
      <param name="pguid">[out] Pointer to the unique identifier of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetProperty(System.Int32,System.Object@)">
      <summary>Returns a window property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" /> enumeration.</param>
      <param name="pvar">[out] Pointer to a VARIANT.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.Hide">
      <summary>Hides a window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.IsOnScreen(System.Int32@)">
      <summary>Returns true if the window frame is on the screen.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfOnScreen">[out] true if the window frame is visible on the screen.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.IsVisible">
      <summary>Determines whether or not the window is visible.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the window is visible, otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.QueryViewInterface(System.Guid@,System.IntPtr@)">
      <summary>Provides <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> with a view helper (VSFPROPID_ViewHelper) inserted into its list of event notifications.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riid">[in] Identifier of the window frame being requested.</param>
      <param name="ppv">[out, iid_is(riid)] Address of pointer variable that receives the window frame pointer requested in <paramref name="riid" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the position of the window.</summary>
      <returns>If the method succeeds, it returns. <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwSFP">[in] Frame position whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS" /> enumeration.</param>
      <param name="rguidRelativeTo">[in] Not used (set to null).</param>
      <param name="x">[in] Absolute x ordinate.</param>
      <param name="y">[in] Absolute y ordinate.</param>
      <param name="cx">[in] x ordinate relative to <paramref name="x" />.</param>
      <param name="cy">[in] y ordinate relative to <paramref name="y" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetGuidProperty(System.Int32,System.Guid@)">
      <summary>Sets a window frame property based on a supplied GUID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" />  enumeration.</param>
      <param name="rguid">[in] Unique identifier of the property to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetProperty(System.Int32,System.Object)">
      <summary>Sets a window frame property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" />  enumeration.</param>
      <param name="var">[in] The value depends on the property set (see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" /> ).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.Show">
      <summary>Renders this window visible, brings the window to the top, and activates the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.ShowNoActivate">
      <summary>Shows or makes a window visible and brings it to the top, but does not make it the active window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify">
      <summary>Notifies a package of changes to one of its window frames. Superceded by <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnDockableChange(System.Int32)">
      <summary>Notifies the VSPackage that a window's docked state is being altered.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDockable">[in] true if the window frame is being docked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnMove">
      <summary>Notifies the VSPackage that a window is being moved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnShow(System.Int32)">
      <summary>Notifies the VSPackage of a change in the window's display state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fShow">[in] Specifies the reason for the display state change. Value taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnSize">
      <summary>Notifies the VSPackage that a window is being resized.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify2">
      <summary>Notifies clients when a window frame is closed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify2.OnClose(System.UInt32@)">
      <summary>Notifies the VSPackage that a window frame is closing and tells the environment what action to take.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pgrfSaveOptions">[in, out] Specifies options for saving window content. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane">
      <summary>Provides basic window pane functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.ClosePane">
      <summary>Closes a window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>Creates a window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="x">[in] Absolute x ordinate.</param>
      <param name="y">[in] Absolute y ordinate.</param>
      <param name="cx">[in] x ordinate relative to <paramref name="x" />.</param>
      <param name="cy">[in] y ordinate relative to <paramref name="y" />.</param>
      <param name="hwnd">[out] Pointer to a handle to the new window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <summary>Returns the default size of a given window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSize">[out] Pointer to the size of a given window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Loads a view state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStream">[in] Pointer to the IStream interface of the view state to load.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Saves a view state of a document window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pStream">[in] Pointer to the IStream interface of the view state to save.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes a new window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Handles the translation of special navigation keys.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpmsg">[in] Keyboard character or character combination to be handled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPaneCommit">
      <summary>Allows a window to commit pending edits in a control with focus before another command is invoked. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPaneCommit.CommitPendingEdit(System.Int32@)">
      <summary>Allows a window to commit pending edits in a control with focus before another command is invoked.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCommitFailed">[out] Indicates whether the commit failed. Set to true if the commit failed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowView">
      <summary>Controls part of the client area in a window. One of several interfaces you can implement on the the DocView or ViewHelper object to override other interfaces. Rarely used.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.GetGuidProperty(System.Int32,System.Guid@)">
      <summary>Retrieves the value of a GUID property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Integer. The property to retrieve. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="pguid">[out] Pointer to the GUID that is the value of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.GetProperty(System.Int32,System.Object@)">
      <summary>Retrieves the value of a property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Integer. The property to retrieve. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="pvar">[out] Pointer to a VARIANT containing the property's value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.SetGuidProperty(System.Int32,System.Guid@)">
      <summary>Set the value of a GUID property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Integer. The property to set. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="rguid">[in] Reference to a GUID. The value to assign to the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.SetProperty(System.Int32,System.Object)">
      <summary>Set the value of a property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Integer. The property to set. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="var">[in] A VARIANT containing the value to assign to the property.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData">
      <summary>Extracts information about a member from an XML representation. Returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService.GetMemberDataFromXML(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService" /> interface. You can get an instance of that interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsXMLMemberIndexService" /> (SID_SVsXMLMemberIndexService) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetParamCount(System.Int32@)">
      <summary>Gets the number of parameters for a member.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piParams">[out] Parameter count</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets description of a specified parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iParam">[in] Parameter location in signature</param>
      <param name="pbstrName">[out] Parameter name</param>
      <param name="pbstrText">[out] Description of parameter</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetRemarksText(System.String@)">
      <summary>Gets remarks about a member.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRemarks">[out] Remarks describing a member.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetReturnsText(System.String@)">
      <summary>Gets a description of the return value.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrReturns">[out] Description of the return value of a method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetSummaryText(System.String@)">
      <summary>Gets summary text describing a member.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrSummary">[in] Summary text of describing a member.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex">
      <summary>Creates an index of members in XML documents corresponding to metadata files. Implemented by the environment. Returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService.CreateXMLMemberIndex(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.BuildMemberIndex">
      <summary>Creates or updates the XML file member index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberDataFromXML(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData@)">
      <summary>Returns an interface (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData" />) that extracts and renders text from a given XML file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszXML">[in] Pointer to a string containing the XML file name.</param>
      <param name="ppObj">[out] Pointer to an IVsXMLMemberData interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberXML(System.UInt32,System.String@)">
      <summary>Retrieves the XML source corresponding to a given member. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwId">[in] Unsigned integer. A member identifier generated by the underlying parser. Obtain the identifier from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.ParseMemberSignature(System.String,System.UInt32@)" /> method.</param>
      <param name="pbstrXML">[out] Pointer to a string containing the XML source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.ParseMemberSignature(System.String,System.UInt32@)">
      <summary>Parses a member signature into a unique member identifier. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSignature">[in] A string containing a member signature.</param>
      <param name="pdwID">[out] Unsigned integer. A member identifier generated by the underlying parser. Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberXML(System.UInt32,System.String@)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService">
      <summary>Enables access to XML documentation corresponding to given metadata files. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsXMLMemberIndexService" /> (SID_SVsXMLMemberIndexService) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService.CreateXMLMemberIndex(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex@)">
      <summary>Creates a member index object for the given metadata binary.  </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBinaryName">[in] Pointer to a string containing the fully qualified name of the metadata file.</param>
      <param name="ppIndex">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex" /> interface providing an index to the metadata.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService.GetMemberDataFromXML(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData@)">
      <summary>Retrieves XML for a member based on a segment of XML.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszXML">[in] Pointer to a string containing the XML to look for. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberXML(System.UInt32,System.String@)" /> to obtain the XML.</param>
      <param name="ppObj">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData" /> interface for the member data.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY">
      <summary>Specifies the Library item categories that can be further parameterized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_ACTIVEPROJECT">
      <summary>Library item can have ACTIVEPROJECT attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_CLASSACCESS">
      <summary>Library item can have CLASSACCESS attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_CLASSTYPE">
      <summary>Library item can have CLASSTYPE attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_LISTTYPE">
      <summary>Library item can have LISTTYPE attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE" />. This is a special value to determine which sublists are supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_MEMBERACCESS">
      <summary>Library item can have MEMBERACCESS attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_MEMBERTYPE">
      <summary>Library item can have MEMBERTYPE attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_MODIFIER">
      <summary>Library item can have MODIFIER attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_NODETYPE">
      <summary>This is a special value for internal use only. Do not implement.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CATEGORY.LC_VISIBILITY">
      <summary>Library item can have VISIBILITY attributes as specified in <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.LIB_CHECKSTATE">
      <summary>Specifies the checked state of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CHECKSTATE.LCS_CHECKED">
      <summary>Library item is checked.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CHECKSTATE.LCS_CHECKEDGRAY">
      <summary>Library item is grayed out.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_CHECKSTATE.LCS_UNCHECKED">
      <summary>Library item is not checked.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE">
      <summary>Specifies how a library item is persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE.LPT_GLOBAL">
      <summary>The browse container of interest is a global browse container.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE.LPT_PROJECT">
      <summary>The browse container of interest is a project browse container.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.LOGFONTW">
      <summary>Specifies the attributes of a font. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfCharSet">
      <summary>Specifies the character set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfClipPrecision">
      <summary>Specifies the clipping precision. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfEscapement">
      <summary>Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfFaceName">
      <summary>A null-terminated string that specifies the typeface name of the font. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfHeight">
      <summary>Specifies the height, in logical units, of the font's character cell or character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfItalic">
      <summary>Specifies an italic font if set to true.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfOrientation">
      <summary>Specifies the angle, in tenths of degrees, between each character's base line and the x-axis of the device.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfOutPrecision">
      <summary>Specifies the output precision.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfPitchAndFamily">
      <summary>Specifies the pitch and family of the font.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfQuality">
      <summary>Specifies the output quality.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfStrikeOut">
      <summary>Specifies a strikeout font if set to true.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfUnderline">
      <summary>Specifies an underline font if set to true.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfWeight">
      <summary>Specifies the weight of the font in the range 0 through 1000.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGFONTW.lfWidth">
      <summary>Specifies the average width, in logical units, of characters in the font.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.LOGTOFILEOPTION">
      <summary>Specifies where to log command window commands and output.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGTOFILEOPTION.LTFO_APPEND">
      <summary>Append to specified file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGTOFILEOPTION.LTFO_OVERWRITE">
      <summary>Overwrite specified file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LOGTOFILEOPTION.LTFO_VALIDMASK">
      <summary>Union of all valid bits.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.MEINIT">
      <summary>Contains values for the Menu editor initialization. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditorFactory.CreateMenuEditor(Microsoft.VisualStudio.Shell.Interop.MEINIT[],Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.cchNameLimit">
      <summary>DWORD containing the maximum number of characters in the name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.cchTextLimit">
      <summary>DWORD Specifying the maximum numbers of characters in menu item captions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.dwFlags">
      <summary>DWORD specifying flags for support/no support of certain properties. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.dwSizeOfStruct">
      <summary>DWORD specifying the size of the struct.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.hwnd">
      <summary>Specifies the destination window for menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.hwndParent">
      <summary>Specifies the parent of destination window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.pMenuEditorSite">
      <summary>Specifies the menu editor site.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.psp">
      <summary>Specifies the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.pszAccelList">
      <summary>Fixed list of acceptable accelerators.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.pUndoMgr">
      <summary>Specifies the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.MEINIT.SiteId">
      <summary>Unique Id for identifying extra data in clipboard operations.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEACTIVATE">
      <summary>Specifies the type of window being activated in response to a window activation event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEACTIVATE.OLEACTIVATE_DOCWINDOW">
      <summary>Indicates that a document window is being activated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEACTIVATE.OLEACTIVATE_FRAMEWINDOW">
      <summary>Indicates that a frame window is being activated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLECOMPFLAG">
      <summary>Specifies flags that are used to control interactions between an in-place VSPackage object, its container, and the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLECOMPFLAG.OLECOMPFLAG_INHIBITNESTEDCOMPUI">
      <summary>Indicates that nested objects are prevented from displaying their own menus and toolbars when they are in-place active. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLECOMPFLAG.OLECOMPFLAG_ROUTEACTIVEASCNTRCMD">
      <summary>Indicates that the environment should first route all "Active Object" commands to the container of the active in-place object rather than to the object itself. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEHELPCMD">
      <summary>Specifies the type of help requested for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager.ShowHelp(System.UInt32,System.Guid@,Microsoft.VisualStudio.OLE.Interop.POINT,System.UInt32,System.String,System.UInt32)" />. This enumeration gives the valid values for the <paramref name="dwHelpCmd" /> parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEHELPCMD.OLEHELPCMD_CONTEXT">
      <summary>Displays help topic (for a context id).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEHELPCMD.OLEHELPCMD_CONTEXTPOPUP">
      <summary>Displays help in popup window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEIPCSTATE">
      <summary>Specifies state IDs passed to IOleInPlaceComponent::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent.OnEnterState(System.UInt32,System.Int32)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.OnUIComponentEnterState(System.UInt32,System.UInt32,System.UInt32)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.FOnUIComponentExitState(System.UInt32,System.UInt32,System.UInt32)" />, and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager.FUIComponentInState(System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEIPCSTATE.OLEIPCSTATE_MODAL">
      <summary>Modal state; disables top-level windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEIPCSTATE.OLEIPCSTATE_RECORDING">
      <summary>Recording state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEIPCSTATE.OLEIPCSTATE_REDRAWOFF">
      <summary>redrawOff state; disables window repainting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEIPCSTATE.OLEIPCSTATE_WARNINGSOFF">
      <summary>warningsOff state; disables user warnings.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEMENU">
      <summary>Specifies the way the menu belonging to the UI active object is to be used with a component's container menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMENU.OLEMENU_CNTRMENUONLY">
      <summary>Indicates that all menu commands should be routed to the component. Only the menu of the container should be displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMENU.OLEMENU_MENUMERGE">
      <summary>Indicates that the UI active object's menu should merge with the component's container menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMENU.OLEMENU_OBJECTMENUONLY">
      <summary>Indicates that only the menu of the active object should be displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMENU.OLEMENU_ROUTEACTIVEASCNTRCMD">
      <summary>Indicates that commands from the active object menu are routed first to the main component (<see cref="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_MAINCOMPONENT" />). If the main component does not handle a command, it is then routed to the component that is UI active (visible with focus). <see cref="F:Microsoft.VisualStudio.Shell.Interop.OLEMENU.OLEMENU_ROUTEACTIVEASCNTRCMD" /> may only be used by a main component that wants to ensure that it is in control of commands that are dispatched to its nested components. It is analogous to <see cref="F:Microsoft.VisualStudio.Shell.Interop.OLECOMPFLAG.OLECOMPFLAG_ROUTEACTIVEASCNTRCMD" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEMENUID">
      <summary>Describes a menu numerically and/or by name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMENUID.cwBuf">
      <summary>Size, in characters, of <paramref name="pwszNameBuf" />, the menu name buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMENUID.nMenuId">
      <summary>Specifies a numeric menu identifier; -1 if specified by name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMENUID.pwszNameBuf">
      <summary>Buffer for menu name.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON">
      <summary>Specifies the button to display with a message. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON.OLEMSGBUTTON_ABORTRETRYIGNORE">
      <summary>Displays the ABORT, RETRY, and IGNORE buttons.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON.OLEMSGBUTTON_OK">
      <summary>Displays the OK button.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON.OLEMSGBUTTON_OKCANCEL">
      <summary>Displays the OK and CANCEL buttons.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON.OLEMSGBUTTON_RETRYCANCEL">
      <summary>Displays the RETRY and CANCEL buttons.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON.OLEMSGBUTTON_YESALLNOCANCEL">
      <summary>Displays the YES, ALL, NO, and CANCEL buttons.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON.OLEMSGBUTTON_YESNO">
      <summary>Displays the YES and NO buttons.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON.OLEMSGBUTTON_YESNOCANCEL">
      <summary>Displays the YES, NO, and CANCEL buttons.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON">
      <summary>Determines which button in a group of buttons is the default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FIRST">
      <summary>The first button is the default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FOURTH">
      <summary>The fourth button is the default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_SECOND">
      <summary>The second button is the default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_THIRD">
      <summary>The third button is the default.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON">
      <summary>Controls the icon displayed in a message and indicates the type of message.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON.OLEMSGICON_CRITICAL">
      <summary>Indicates that a message is a critical message.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON.OLEMSGICON_INFO">
      <summary>Indicates that a message is an informational message.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON.OLEMSGICON_NOICON">
      <summary>Indicates that a message is an informational message.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON.OLEMSGICON_QUERY">
      <summary>Indicates that a message is a query message.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON.OLEMSGICON_WARNING">
      <summary>Indicates that a message is a warning message.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEROLE">
      <summary>Specifies the way in which a component is being used in relation to its host.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_COMPONENTCONTROL">
      <summary>Indicates that the component does not contain nested in-place objects and is not included in the container command routing chain. Therefore, component controls can only handle commands when they are in the UI active state.  <see cref="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_COMPONENTCONTROL" /> is the default role for a component; all components should assume they are being used as component controls unless told otherwise. Component controls do not implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent" />. They must return the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager" /> interface pointer by calling their site's <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_COMPONENTHOST">
      <summary>Indicates that the component is the outermost frame; it is used at the environment level.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_HOSTEXTENSION">
      <summary>Indicates that the component is being used at the same level as the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_MAINCOMPONENT">
      <summary>Indicates that the component has compile time knowledge of a nested object that it will be hosting in place. A main component has its user interface elements built into the environment and controls the menu commands available for it and for all of its nested subcomponents. This is also known as a hardwired component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_SUBCOMPONENT">
      <summary>Indicates that the component has compile time knowledge of a nested object that it contains in place like a main component, but it is not ultimately in control of its user interface modes. However, a subcomponent is included in the container command routing chain and can thereby handle commands when a nested object becomes visible and takes focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_TOPLEVELCOMPONENT">
      <summary>Indicates that the component is an independent floating modeless component with no in-place capabilities. Top-level components need to coordinate modality and message loop services with the environment through the <see cref="T:Microsoft.VisualStudio.OLE.Interop.SOleComponentManager" /> service.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEROLE.OLEROLE_UNKNOWN">
      <summary>Role is undefined.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ">
      <summary>Specifies the frequency that a user interface event normally occurs in a component </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ.OLEUIEVENTFREQ_CONSISTENTLY">
      <summary>Indicates that the event occurs on a regular basis.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ.OLEUIEVENTFREQ_FREQUENTLY">
      <summary>Indicates that the event occurs frequently.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ.OLEUIEVENTFREQ_NULL">
      <summary>Indicates that the frequency is not applicable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ.OLEUIEVENTFREQ_OFTEN">
      <summary>Indicates that the event occurs often.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ.OLEUIEVENTFREQ_SELDOM">
      <summary>Indicates that the event seldom occurs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTFREQ.OLEUIEVENTFREQ_SOMETIMES">
      <summary>Indicates that the event occurs infrequently.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS">
      <summary>Specifies the status of a user interface event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS.OLEUIEVENTSTATUS_CONTINUEAFTERDIALOG">
      <summary>A user interface event is continuing after a dialog has been displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS.OLEUIEVENTSTATUS_CONTINUEINDIALOG">
      <summary>A user interface event is continuing while a dialog is displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS.OLEUIEVENTSTATUS_OCCURRED">
      <summary>A user interface event has occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS.OLEUIEVENTSTATUS_START">
      <summary>A user interface event has started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS.OLEUIEVENTSTATUS_STARTBEFOREDIALOG">
      <summary>A user interface event has started before the display of a dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS.OLEUIEVENTSTATUS_STARTNODIALOG">
      <summary>A user interface event has started, but a dialog has not been displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.OLEUIEVENTSTATUS.OLEUIEVENTSTATUS_STOP">
      <summary>A user interface event has finished.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS">
      <summary>Specifies persist file format results.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_E_INVALIDCODEPAGE">
      <summary>The codepage specified for Ansi&lt;-&gt;Unicode conversion is not valid on this system. The codepage may be a defined codepage, but the necessary NLS files may not be available to carry out the conversion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_E_NOTTEXT">
      <summary>The data is not text. It appears to be binary.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_S_DATALOSS">
      <summary>The operation completed successfully, but some or all data was lost. For example, this code may be returned when converting from Unicode to ANSI and characters were mapped to the default character. <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetErrorInfo(System.Int32,System.String,System.UInt32,System.String,System.String)" /> is used by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat" /> implementation to provide additional information. The caller should call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetErrorInfo(System.String@)" /> to retrieve an informational message to display to the user.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.POINTS">
      <summary>Specifies an x,y pair of reference points.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.POINTS.x">
      <summary>SHORT specifying the x reference point.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.POINTS.y">
      <summary>SHORT specifying the y reference point.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT">
      <summary>Constants for working with commands. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.PrepareCommand(System.String,System.Guid@,System.UInt32@,System.IntPtr@,Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT[])" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT.PC_FAILURE">
      <summary>Failure not attributable to one of the causes below.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT.PC_NOCOMMAND">
      <summary>No command name was specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT.PC_NOTAVAILABLE">
      <summary>The command is disabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT.PC_NOTFOUND">
      <summary>The name did not match any known command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT.PC_PARAMSNOTACCEPTED">
      <summary>Parameters were specified, and the command does not accept parameters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.PREPARECOMMANDRESULT.PC_SUCCESS">
      <summary>Command preparation was successful.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection">
      <summary>Specifies the direction for removal of a navigation item. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RemoveAdjacentBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RemoveCurrentNavigationDupes(Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection.RemoveNext">
      <summary>Specifies the next navigation item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection.RemovePrev">
      <summary>Specifies the previous navigation item.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SApplicationObject">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the DTE object.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SCodeNavigate">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.ICodeNavigate" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SCompEnumService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideComponentEnumeration" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SExtendedTypeLib">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IExtendedTypeLib" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SIVsPackageDynamicToolOwner">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackageDynamicToolOwner" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SLicensedClassManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILicensedClassManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SLocalRegistry">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2" /> interfaces.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SOleComponentUIManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentUIManager" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SOleInPlaceComponent">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponent" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SOleInPlaceComponentSite">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IOleInPlaceComponentSite" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SProfferService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IProfferService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SProfferTypeLib">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IProfferTypeLib" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS">
      <summary>Specifies status bar animation icon constants. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.Animation(System.Int32,System.Object@)" /> calls</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_Bui">
      <summary>Animation when building the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_Dep">
      <summary>Animation when deploying the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_Fin">
      <summary>Animation when searching.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_Gen">
      <summary>Standard animation icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_MAX">
      <summary>The last animation icon index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_MIN">
      <summary>The first animation icon index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_Pri">
      <summary>Animation when printing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_Sav">
      <summary>Animation when saving files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.STATUSBARCONSTS.SBAI_Syn">
      <summary>Animation when synchronizing files over the network.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.STrackSelection">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.ITrackSelection" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SUIHostCommandDispatcher">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SUIHostLocale">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAddProjectItemDlg">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAddWebReferenceDlg">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAddWebReferenceDlg" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAppCommandLine">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsClassView">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsClassView" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsCmdNameMapping">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsCodeShareHandler">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCodeShareHandler" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsCommandWindow">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow2" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsComplusLibrary">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLibraryReferenceManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsComponentSelectorDlg">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDebuggableProtocol">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProtocol" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDebugLaunch">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugLaunch" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDiscoveryService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDiscoveryService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsEnumHierarchyItemsFactory">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumHierarchyItemsFactory" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsExternalFilesManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsExternalFilesManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFileChange">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the internal interface IVsFileChange.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFileChangeEx">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFilterAddProjectItemDlg">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFilterAddProjectItemDlg" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFilterKeys">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFilterKeys" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFontAndColorStorage">
      <summary>Object providing access to the Visual Studio SDK implementation of the Font and Color storage service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsGeneralOutputWindowPane">
      <summary>Pseudoservice that returns an IID_IVsOutputWindowPane interface for the General output pane in the VS environment. Querying for this service will cause the General output pane to be created if it hasn't yet been created. The General output pane is an appropriate place to display general status messages to the user, such as messages relating to operations such as opening a project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsHelpService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsHTMLConverter">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHTMLConverter" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsIME">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsIME" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsIntelliMouseHandler">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsIntelliMouseHandler" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsInvisibleEditorManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditorManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsLaunchPad">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsLaunchPadFactory">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPadFactory" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsMenuEditor">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsMonitorUserContext">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsObjBrowser">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjBrowser" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsObjectManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsObjectSearch">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsObjectSearch" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsOutputWindow">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindow" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsParseCommandLine">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsParseCommandLine" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsPropertyPageFrame">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyPageFrame" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsQueryEditQuerySave">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsRegisterEditors">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsRegisterPriorityCommandTarget">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsRegisterProjectTypes">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsResourceView">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsResourceView" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsRunningDocumentTable">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSccManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsShell">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsShell" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsShellDebugger">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsShellMonitorSelection">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSolution">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSolutionBuildManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSolutionObject">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution" /> interface. Use the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsSolution" /> service instead.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSolutionPersistence">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsStatusbar">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsStructuredFileIO">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsTaskList">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsTextOut">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTextOut" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsToolbox">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsToolboxActiveXDataProvider">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsTrackProjectDocuments">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3" /> interfaces.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsTrackSelectionEx">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUIHierWinClipboardHelper">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUIShell">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUIShellDocumentWindowMgr">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShellDocumentWindowMgr" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUIShellOpenDocument">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsWebBrowsingService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsWebFavorites">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebFavorites" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsWebPreview">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsWebURLMRU">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebURLMRU" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsWindowFrame">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsXMLMemberIndexService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags">
      <summary>Specifies how file attributes are handled by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2" /> interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags.VSQEQS_AllowCheckout">
      <summary>Deprecated flag: ignored.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags.VSQEQS_FileInfo">
      <summary>Specifies whether the file attributes are valid. This value is used for optimization and indicates that the members of the corresponding <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA" /> structure are valid, thus avoiding having to query the disk for file attributes. A caller can use this value if it has recent file information; otherwise, leave the flag un-set, and when you call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)" />, or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)" />, this information will be provided. Use the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsQueryEditQuerySave" /> service to access these methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQEQSFlags.VSQEQS_NoSaveAs">
      <summary>Deprecated flag: ignored.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags">
      <summary>This enumeration specifies flags that control how files are to be edited in memory. These flags are passed to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_AllowInMemoryEdits">
      <summary>Allows files to be edited in memory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_DisallowInMemoryEdits">
      <summary>Disallows files from being edited in memory, regardless of the Options dialog box settings.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_ForceEdit_NoPrompting">
      <summary>Perform operations to make files editable, regardless of option settings and without user interaction.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_ForceInMemoryEdits">
      <summary>Allows files to be edited in memory regardless of other conditions that would prevent this. This value overrides the Options dialog box setting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_ImplicitEdit">
      <summary>This flag disables the Cancel button on the checkout dialog box. The cancel action is interpreted as the user choice for allowing in-memory editing. This flag is primarily for internal use. Use carefully, or not at all.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_NoReload">
      <summary>Disallows edit if it would cause a reload to occur.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_ReportOnly">
      <summary>No user interface (UI) is displayed, and no action is taken. Return values indicate whether an edit would be allowed, with respect to user interaction, option settings, and external conditions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditFlags.QEF_SilentMode">
      <summary>Silent operations may be performed to make files editable; however, no UI is displayed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult">
      <summary>This enumeration specifies values returned from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" /> method indicating whether a file editing session was successfully completed or canceled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_EditNotOK">
      <summary>Edit has been disallowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_EditOK">
      <summary>Edit is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_NoEdit_UserCanceled">
      <summary>Edit has been disallowed. Edit was cancelled by the user.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags">
      <summary>This enumeration specifies bitflags, returned from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" /> method, that tell whether a file was checked out and/or changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_CheckoutCanceledOrFailed">
      <summary>Edit not allowed because checkout failed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_EditNotPossible">
      <summary>Edit will never be allowed because of current option settings or external conditions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_InMemoryEdit">
      <summary>Safe to edit files in memory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_InMemoryEditNotAllowed">
      <summary>Edit denied because in-memory edit not allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_MaybeChanged">
      <summary>Files changed on checkout.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_MaybeCheckedout">
      <summary>Files checked-out to edit.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_NoisyCheckoutRequired">
      <summary>Silent mode operation does not permit UI.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_NoisyPromptRequired">
      <summary>Silent mode operation does not permit UI.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_ReadOnlyNotUnderScc">
      <summary>Edit not allowed because file is read-only on disk.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags.QER_ReadOnlyUnderScc">
      <summary>Edit not allowed because file is read-only and under source control (probably checked in).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveFlags">
      <summary>This enumeration specifies values to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)" /> method and controls whether that method shows any user interface (UI).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveFlags.QSF_DefaultOperation">
      <summary>Normal operation: displays UI if necessary.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveFlags.QSF_SilentMode">
      <summary>No UI is displayed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult">
      <summary>This enumeration specifies values that can be returned from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFile(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)" /> method and the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QuerySaveFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_ForceSaveAs">
      <summary>The file cannot be saved using the original file name. The Save As command must be used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Cancel">
      <summary>The file cannot be saved. User cancelled the Save.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_Continue">
      <summary>The file cannot be saved, but other files in the batch can be processed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_NoisyPromptRequired">
      <summary>The file cannot be saved because user intervention is required; however, silent mode has been requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_NoSave_UserCanceled">
      <summary>The file cannot be saved. User pressed the Cancel button.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQuerySaveResult.QSR_SaveOK">
      <summary>The file can be saved.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags">
      <summary>This enumeration specifies flags that are returned by a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags.SFF_HasSpecialFiles">
      <summary>The file is special.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags.SFF_NoFlags">
      <summary>The file is normal.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVsSccSpecialFilesFlags">
      <summary>Flags associated with special source control files as returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVsSccSpecialFilesFlags.SSFF_NoFlags">
      <summary>Nothing out of the ordinary for this special file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO">
      <summary>Specifies information on toolbox items. Used on IVsToolbox::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String)" /> and IVsToolboxDataProvider::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.GetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO.bstrText">
      <summary>BSTR containing the tool tips/label text of toolbox item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO.clrTransparent">
      <summary>COLORREF item specifying the transparent color in bitmap.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO.dwFlags">
      <summary>DWORD specifying the item info flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO.hBmp">
      <summary>Specifies a 16x16 bitmap for the toolbox.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO.iImageIndex">
      <summary>INT specifying the image index of the item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO.iImageWidth">
      <summary>Specifies the width of the item image.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT">
      <summary>Sets the formatting of the dialog box font.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfCharSet">
      <summary>Specifies the character set. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfClipPrecision">
      <summary>Specifies the clipping precision.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfEscapement">
      <summary>Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfFaceName">
      <summary>Specifies the typeface name of the font. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfHeight">
      <summary>Specifies the height, in logical units, of the character cell or character of the font.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfItalic">
      <summary>Specifies an italic font if set to true. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfOrientation">
      <summary>Specifies the angle, in tenths of degrees, between each character base line and the x-axis of the device.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfOutPrecision">
      <summary>Specifies the output precision. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfPitchAndFamily">
      <summary>Specifies the pitch and family of the font. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfQuality">
      <summary>Specifies the output quality. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfStrikeOut">
      <summary>Specifies a strikeout font if set to true.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfUnderline">
      <summary>Specifies an underlined font if set to true.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfWeight">
      <summary>Specifies the weight of the font in the range 0 through 1000.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT.lfWidth">
      <summary>Specifies the average width, in logical units, of characters in the font.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND">
      <summary>Specifies help system commands.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_Default">
      <summary>Used by all functions. Same as using null.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_Localize">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromIdentifier(System.String,System.UInt32,System.UInt32)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_NoErrorMessages">
      <summary>Used by all functions. Set this to display error messages yourself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_OutsideCollectionSpace">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromIdentifier(System.String,System.UInt32,System.UInt32)" />. Does not show context id in collection's window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_UseBrowser">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VHS_COMMAND.VHS_UseHelp">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION">
      <summary>Identifies component add properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION.VSADDCOMPOP_ADD">
      <summary>Only one simple case, add.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT">
      <summary>Specifies results of component adds.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT.ADDCOMPRESULT_Cancel">
      <summary>User canceled, close the dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT.ADDCOMPRESULT_Failure">
      <summary>Add failed, do not close the dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT.ADDCOMPRESULT_Success">
      <summary>Add succeeded, close the dialog.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS">
      <summary>Indicates flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])" /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS.VSADDDIRECTORYFLAGS_AddToSourceControlDoneExternally">
      <summary>Flag is unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS.VSADDDIRECTORYFLAGS_NoFlags">
      <summary>No flags.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS">
      <summary>Flags used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS.VSADDFILEFLAGS_AddToSourceControlDoneExternally">
      <summary>Flag is unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS.VSADDFILEFLAGS_IsNestedProjectFile">
      <summary>Nested project (file), that is, the file located at the root node of a nested project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS.VSADDFILEFLAGS_IsSpecialFile">
      <summary>Special file, that is, an invisible file associated with another file in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS.VSADDFILEFLAGS_NoFlags">
      <summary>No flags associated with the file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION">
      <summary>Controls the action performed on a new item added to a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_CLONEFILE">
      <summary>The user is adding a new file based on a template. The name for the new item is specified by <paramref name="pbstrItemName" />, if required. This operation is allowed to display a UI.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_LINKTOFILE">
      <summary>Establishes a link to an existing file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_OPENFILE">
      <summary>The user is adding an existing file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD">
      <summary>The user has selected a .VSZ file. The caller is expected to run a wizard. This operation is allowed (and expected) to display a UI. The caller can use the SID_SVsExtensibility service to call the <see cref="M:EnvDTE.IVsExtensibility.RunWizardFile(System.String,System.Int32,System.Object[]@)" /> helper method to run a standard .VSZ wizard launch file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT">
      <summary>Indicates whether an item was successfully added to a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT.ADDRESULT_Cancel">
      <summary>AddItem function was canceled by the user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT.ADDRESULT_Failure">
      <summary>Item failed to be added to the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT.ADDRESULT_Success">
      <summary>Item was successfully added to the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSECONTAINER">
      <summary>Stores browse container attributes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSECONTAINER.pguidLib">
      <summary>Pointer to the GUID of a browse container.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSECONTAINER.szName">
      <summary>String containing the name of the browse container.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW">
      <summary>Specifies information used to display the Browse dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.dwFlags">
      <summary>Standard flags from the BROWSEINFO structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.dwHelpTopic">
      <summary>Help topic string. This is overridden by <paramref name="pszHelpTopic" /> parameter from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetDirectoryViaBrowseDlgEx(Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW[],System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW[])" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.hwndOwner">
      <summary>Handle of the owner window for the dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.lStructSize">
      <summary>DWORD indicating the size of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.nMaxDirName">
      <summary>Maximum length of the directory name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.pwzDirName">
      <summary>String containing the directory name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.pwzDlgTitle">
      <summary>String containing the title of the dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW.pwzInitialDir">
      <summary>String containing the initial directory.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS">
      <summary>Specifies English and/or localized canonical names.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS.CNO_GETBOTH">
      <summary>Get both English and localized names.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS.CNO_GETENU">
      <summary>Get the English canonical name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCMDNAMEOPTS.CNO_GETLOC">
      <summary>Get the localized canonical name.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA">
      <summary>Stores selection attributes for a component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.bstrFile">
      <summary>String containing the full path to component file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.bstrProjRef">
      <summary>String containing the project reference.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.bstrTitle">
      <summary>String containing the human-readable name of component (not identity information).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.dwSize">
      <summary>DWORD containing the size of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.guidTypeLibrary">
      <summary>GUID specifying the type library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.lcidTypeLibrary">
      <summary>Specifies the locale of the library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.lCustom">
      <summary>DWORD containing custom information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.type">
      <summary>Specifies the component type. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.wFileBuildNumber">
      <summary>Contains the file's build number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.wFileMajorVersion">
      <summary>Contains the file's major version number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.wFileMinorVersion">
      <summary>Contains the file's minor version number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.wFileRevisionNumber">
      <summary>Contains the file's build revision number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.wTypeLibraryMajorVersion">
      <summary>Contains the type library's major version number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA.wTypeLibraryMinorVersion">
      <summary>Contains the type library's minor version number.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT">
      <summary>Represents tab initialization information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT.dwSize">
      <summary>DWORD containing the size of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT.guidTab">
      <summary>Tab identification GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT.varTabInitInfo">
      <summary>VARIANT containing the tab initialization information.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE">
      <summary>Specifies the type of a component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_Com2">
      <summary>The component is a classic COM type library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_ComPlus">
      <summary>The component is a .NET assembly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_Custom">
      <summary>The component is a custom reference. This is implementation specific, meaning there is no set way to handle such a component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_File">
      <summary>The component is a file on disk.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_Path">
      <summary>The component enumerates directory paths to other components.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTTYPE.VSCOMPONENTTYPE_Project">
      <summary>The component is another project in the solution.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo">
      <summary>Contains information about a debug target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrArg">
      <summary>BSTR containing command-line arguments to the executable. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrCurDir">
      <summary>BSTR containing the name of the current directory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrEnv">
      <summary>BSTR containing the environment settings to pass to CreateProcess. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrExe">
      <summary>BSTR containing the name of the executable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrMdmRegisteredName">
      <summary>BSTR containing the name of the application as it is registered with the MDM.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrOptions">
      <summary>BSTR containing custom options specific to each clsidCustom (null is recommended).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrPortName">
      <summary>BSTR containing the name of port from the supplier specified in <paramref name="clsidPortSupplier" /> (can be null).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.bstrRemoteMachine">
      <summary>BSTR containing the remote machine name. Set to null for local machines.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.cbSize">
      <summary>DWORD specifying the size of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo" /> struct.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.clsidCustom">
      <summary>Specifies that the exe will be launched by some custom means.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.clsidPortSupplier">
      <summary>Specifies the Port supplier GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.dlo">
      <summary>Specifies how this process should be launched or attached. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.dwClsidCount">
      <summary>Number of GUIDs in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.pClsidList" /> member. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.fSendStdoutToOutputWindow">
      <summary>Specifies that stdout and stderr should be routed to the debug-output window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.grfLaunch">
      <summary>Specifies launch flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> enumeration. Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.DebugLaunch(System.UInt32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.hStdError">
      <summary>HANDLE to StdError.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.hStdInput">
      <summary>HANDLE to StdInput.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.hStdOutput">
      <summary>HANDLE to StdOut.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo.pClsidList">
      <summary>Holds an array of GUIDs for multiple engine launch.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_FUNCTIONVISIBILITY">
      <summary>Specifies the designer function access level.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_FUNCTIONVISIBILITY.VSDFV_Friend">
      <summary>Designer functions are marked friend.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_FUNCTIONVISIBILITY.VSDFV_Private">
      <summary>Designer functions are marked private.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_FUNCTIONVISIBILITY.VSDFV_Public">
      <summary>Designer functions are marked public (current not supported).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_VARIABLENAMING">
      <summary>Controls variable naming convention.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_VARIABLENAMING.VSDVN_Camel">
      <summary>Variables are generated with camel case. For example, button1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_VARIABLENAMING.VSDVN_VB">
      <summary>Variables are generated with VB-like case. For example, Button1.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY">
      <summary>Specifies the priority level of a document within a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY.DP_CanAddAsExternal">
      <summary>File can be opened by the Miscellaneous Files project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY.DP_CanAddAsNonMember">
      <summary>File can be added as a member of the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY.DP_External">
      <summary>File can be opened by an external editor, for example, Microsoft Word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY.DP_Intrinsic">
      <summary>File type is intrinsic to the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY.DP_NonMember">
      <summary>File is not a member of the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY.DP_Standard">
      <summary>File can be opened by one of the editors registered with the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY.DP_Unsupported">
      <summary>File cannot be added to the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY">
      <summary>Specifies the priority of various editors. Used by packages that implement an editor type with <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY.EDTPRI_BinaryEditor">
      <summary>Priority for the binary editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY.EDTPRI_InplaceEditor">
      <summary>Priority for the in-place editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY.EDTPRI_IntrinsicEditor">
      <summary>Priority for the intrinsic editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY.EDTPRI_OutsideEditor">
      <summary>Priority for the outside editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY.EDTPRI_TextEditor">
      <summary>Priority for the text editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEDITORPRIORITY.EDTPRI_TextEditorCodePage">
      <summary>Priority for the text editor code page.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes">
      <summary>Visual Studio error codes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.DISCOVERY_E_PROXYSETTINGINVALID">
      <summary>HRESULT value indicating an invalid proxy setting. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.JPM_E_LOCKINGNOTSUPPORTED">
      <summary>HSRESULT value indicating that locking is not supported. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_INCOMPATIBLEDOCDATA">
      <summary>A Visual Studio-specific error HRESULT indicating incompatible document data. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_PACKAGENOTLOADED">
      <summary>A Visual Studio-specific error HRESULT indicating that the package is not loaded. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_PROJECTALREADYEXISTS">
      <summary>A Visual Studio-specific error HRESULT indicating that the project already exists. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_PROJECTMIGRATIONFAILED">
      <summary>A Visual Studio-specific error HRESULT indicating that the project migration failed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_PROJECTNOTLOADED">
      <summary>A Visual Studio-specific error HRESULT indicating that the project is not loaded. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_SOLUTIONALREADYOPEN">
      <summary>A Visual Studio-specific error HRESULT indicating that the solution is already open. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_SOLUTIONNOTOPEN">
      <summary>A Visual Studio-specific error HRESULT indicating that the solution is not open. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_UNSUPPORTEDFORMAT">
      <summary>A Visual Studio-specific error HRESULT indicating that the document has an unsupported format. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_E_WIZARDBACKBUTTONPRESS">
      <summary>Value indicating that the user hit the back button in a Visual Studio wizard. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_S_PROJECTFORWARDED">
      <summary>A Visual Studio-specific error HRESULT indicating a toolbox marker. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes.VS_S_TBXMARKER">
      <summary>A Visual Studio-specific error HRESULT indicating that the project already exists. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSEXTENDSHIERARCHY">
      <summary>Enumerates values for the extending the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsParentHierarchy" /> interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEXTENDSHIERARCHY.EH_ITEM">
      <summary>Extend hierarchy item. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEXTENDSHIERARCHY.EH_NONE">
      <summary>No extension. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSEXTENDSHIERARCHY.EH_ROOT">
      <summary>Extend root item. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSFILTERKEYSFLAGS">
      <summary>Flags indicating action to take for controls that filter keyboard event messages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFILTERKEYSFLAGS.VSFILTERKEYS_DODEFAULT">
      <summary>Default action. (0)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFILTERKEYSFLAGS.VSFILTERKEYS_HANDLED">
      <summary>Indicates the key was handled by the combobox’s <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> implementer. (1)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFILTERKEYSFLAGS.VSFILTERKEYS_TRANSLATE">
      <summary>Indicates to try translating the key event into a shell command by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.TranslateAcceleratorAsACmd(Microsoft.VisualStudio.OLE.Interop.MSG[])" />. (2) </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE">
      <summary>Controls the display mode of a tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE.VSFM_Dock">
      <summary>The tool window is docked. A docked tool window is attached to the side of the application window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE.VSFM_Float">
      <summary>The tool window is able to float over other windows. Floating windows can exist outside the application area.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE.VSFM_FloatOnly">
      <summary>The tool window is able to float over other windows, and cannot be docked.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE.VSFM_MdiChild">
      <summary>The tool window is a Multiple Document Interface (MDI) child window, and is treated in a manner similar to a document window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsHelpErrors">
      <summary>Specifies errors unique to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsHelpErrors.VSHELP_E_COLLECTIONDOESNOTEXIST">
      <summary>The collection name read from the registry does not exist on disk.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsHelpErrors.VSHELP_E_COLLECTIONNOTREGISTERED">
      <summary>MSDN has not been registered.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsHelpErrors.VSHELP_E_HTMLHELP_UNKNOWN">
      <summary>HTML Help generated an unknown error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsHelpErrors.VSHELP_E_PREFERREDCOLLECTION">
      <summary>The preferred collection is incorrectly registered. Select a new preferred collection or reinstall.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsHelpErrors.VSHELP_E_REGISTRATION">
      <summary>The MSDN collection has been improperly registered.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR">
      <summary>Enumerates errors of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsIME" /> interface for the Input Method Editor (IME).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRGALLOC">
      <summary>Error on allocating memory for the Input Method Editor(IME) font. Value is -4.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRGETIMEINF">
      <summary>Error on attempt to get context for the Input Method Editor(IME) font. Value is -6.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRGETIMEPROC">
      <summary>Not used. Value is -3.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRGLOCK">
      <summary>Error on attempt to get a object for the Input Method Editor(IME) font. Value is -5.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRIMPGETIMEPROC">
      <summary>Not used. Value is -10.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRINVALIDHWND">
      <summary>Not used. Value is -11.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRLDLIB">
      <summary>Not used. Value is -2.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRNLSENABLEPROC">
      <summary>Not used. Value is -8.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRSETIMEKEY">
      <summary>Not used. Value is -7.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.ERRWINNLSNOTFOUND">
      <summary>Not used. Value is -9.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.IMENORMAL">
      <summary>Normal successful return from setting the Input Method Editor(IME) font.Value is 0.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSIME_ERR.IMENOTLD">
      <summary> Error indicating font not loaded for the Input Method Editor(IME). Value is -1.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION">
      <summary>Contains information that uniquely identifies a selected item within a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION.itemid">
      <summary>identifier that represents the selected item. For valid <paramref name="itemid" /> values, see VSITEMID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION.pHier">
      <summary>Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD">
      <summary>Specifies selection change commands.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD.SELCMD_ENTEREDIT">
      <summary>Entering edit mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD.SELCMD_LEAVEEDIT">
      <summary>Leaving edit mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD.SELCMD_PROPERTIES">
      <summary>Views properties for specified item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD.SELCMD_SELCHANGE">
      <summary>Default, just a selection change.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD.SELCMD_VIEWCODE">
      <summary>Views code for a specified item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSMESELCMD.SELCMD_VIEWCODEDOUBLECLICK">
      <summary>A double- click was used for view code.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION">
      <summary>Specifies the element of an object browser item description text string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_ATTRIBUTE">
      <summary>Specifies that the text is a COM/ .NET attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_COMMA">
      <summary>Specifies that a comma is to be inserted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_ENABLEGOTOSOURCE">
      <summary>Obsolete. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_ENABLEHELP">
      <summary>Call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2.AddDescriptionText(System.String,Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION,Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO[])" /> ( null, <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_ENABLEHELP" />, null) to enable help on the list item. This will cause your <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.ShowHelp(System.UInt32)" /> method to be called when the user presses F1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_ENDDECL">
      <summary>Specifies the end of the declaration portion of the description text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_ENDDECLEXPECTHTML">
      <summary>Obsolete. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_MISC">
      <summary>Specifies that the text is miscellaneous text added to the description.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_NAME">
      <summary>Specifies that the text is the name of the object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_NOTIFYONLY">
      <summary>Obsolete. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_PARAM">
      <summary>Specifies that the text is a function parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBDESCRIPTIONSECTION.OBDS_TYPE">
      <summary>Specifies that the text describes the object's or parameter's type.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT">
      <summary>Holds clipboard format attributes for an object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT.cfFormat">
      <summary>Specifies a registered clipboard format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT.dwOptions">
      <summary>Specifies a composite format. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBJCLIPFORMATOPTIONS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJCLIPFORMAT.tymed">
      <summary>Specifies the storage medium to be used. Values are taken from the TYMED enumeration described in the MSDN Library Platform SDK documentation set.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO">
      <summary>Stores library object attributes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO.dwCustom">
      <summary>DWORD containing any custom information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO.pguidLib">
      <summary>Pointer to a GUID specifying the library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO.pszClassName">
      <summary>Pointer to the class name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO.pszLibName">
      <summary>Pointer to the library name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO.pszMemberName">
      <summary>Pointer to the member name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJECTINFO.pszNspcName">
      <summary>Pointer to the name space.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE">
      <summary>Specifies source code element type to navigate to.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE.GS_ANY">
      <summary>Specifies any source file element.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE.GS_DECLARATION">
      <summary>Specifies the source file that contains an object declaration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE.GS_DEFINITION">
      <summary>Specifies the source file that contains an object definition.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBJGOTOSRCTYPE.GS_REFERENCE">
      <summary>Specifies the source files that contain object references.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2">
      <summary>Stores attributes for object navigation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2.dwCustom">
      <summary>DWORD containing custom information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2.pguidLib">
      <summary>Pointer to the GUID of your library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2.pName">
      <summary>Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE" /> struct identifying the library tree node.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO2.pszLibName">
      <summary>String containing the library name.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE">
      <summary>Stores library node information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE.lltName">
      <summary>Specifies the type of library object. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE.pNext">
      <summary>Pointer to the next <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE.pszName">
      <summary>Pointer to a null terminated string containing the name of the library tree node object.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA">
      <summary>Specifies conditions and attributes of a search request.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA.dwCustom">
      <summary>DWORD containing custom information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA.eSrchType">
      <summary>Specifies what part of an object's name is represented by <paramref name="szName" />. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA.grfOptions">
      <summary>Specifies limits on the object search. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA.szName">
      <summary>String containing the name of the item to search for.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE">
      <summary>Specifies the part of a name that a string represents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE.SO_ENTIREWORD">
      <summary>Search for entire word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE.SO_PRESTRING">
      <summary>Search for a word starting with a string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE.SO_SUBSTRING">
      <summary>Search for a word containing a string.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOLECMDEXECOPT_HIWORD">
      <summary>Specifies options for the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)" /> command exec option parameter. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOLECMDEXECOPT_HIWORD" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOLECMDEXECOPT_HIWORD.EXECOPTHW_FILTERKEYS">
      <summary>Value indicating using filter keys. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOLECMDEXECOPT_HIWORD.EXECOPTHW_GETSWATCH">
      <summary>Value indicating getting a swatch control.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW">
      <summary>Similar to the OPENFILENAMEW struct.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.dwFlags">
      <summary>DWORD specifying standard OFN_ flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.dwHelpTopic">
      <summary>DWORD specifying the help topic.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.hwndOwner">
      <summary>HWND of the owing window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.lStructSize">
      <summary>DWORD holding the size of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.nFileExtension">
      <summary>DWORD indicating the file extension.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.nFileOffset">
      <summary>DWORD indicating the file offset.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.nFilterIndex">
      <summary>DWORD indicating the filter index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.nMaxFileName">
      <summary>DWORD holding the maximum number of characters in the file name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.pwzDlgTitle">
      <summary>String holding the title of the dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.pwzFileName">
      <summary>String holding the file name. The first character of this buffer must be NULL if initialization is not necessary.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.pwzFilter">
      <summary>String containing the file name filter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW.pwzInitialDir">
      <summary>String containing the initial directory.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOUTLINECAPTION">
      <summary>Specifies settings for a document outline caption.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOUTLINECAPTION.OUTLINECAPTION_FULL">
      <summary>Name of the outline view – document name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOUTLINECAPTION.OUTLINECAPTION_SIMPLE">
      <summary>Name of the outline view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON">
      <summary>Specifies the overlay icon, returned by the hierarchy, when asked through the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OverlayIconIndex" /> element in <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />. This icon is transparently drawn on top of your item's normal icon to indicate that the state has changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON.OVERLAYICON_CONNECTED">
      <summary>Overlay the standard connected icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON.OVERLAYICON_DISCONNECTED">
      <summary>Overlay the standard disconnected icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON.OVERLAYICON_MAXINDEX">
      <summary>Value is the same as the last valid overlay indicating the end of overlay values.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON.OVERLAYICON_NONE">
      <summary>Indicates that no overlay is to be used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON.OVERLAYICON_POLICY">
      <summary>Overlay the standard policy on the icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON.OVERLAYICON_SHORTCUT">
      <summary>Overlay the standard shortcut on the icon.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSPIAImporter">
      <summary>Implemented by all wrapping tools.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass">
      <summary>Implemented by all wrapping tools.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.#ctor">
      <summary>Initializes a new instance of the VSPIAImporterClass class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.GetMainWrapperFilename(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the filename for a given type library.</summary>
      <returns>Returns S_OK if the method is successful, E_FAIL if the method fails.</returns>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the file name. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.GetMainWrapperFriendlyName(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the name that is displayed in the project system when the component is referred to.</summary>
      <returns>Returns S_OK if the method is successful, E_FAIL if the method fails.</returns>
      <param name="pTypeLibToWrap">[in] Pointer to a type lib to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the friendly file name. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.NeedsRegeneration(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.Int32,System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a given wrapper for a given type library needs to be regenerated.</summary>
      <returns>Returns S_OK if the method is successful, E_FAIL if the method fails.</returns>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="wszKeyFile">[in] Specifies <paramref name="wszkey" /> file.</param>
      <param name="wszKeyContainerName">[in] Specifies <paramref name="wszkey" /> container name.</param>
      <param name="bDelaySign">[in] Boolean indicating whether delay signed. If true, the assembly is partially signed.</param>
      <param name="bCurrentlyDelaySigned">[in] Boolean indicating whether currently delay signed.</param>
      <param name="wszExistingWrapperFilename">[in] Specifies the wrapper filename.</param>
      <param name="pbNeedsRegeneration">[out] false if the wrapper does not need to be regenerated. true if the wrapper needs to be regenerated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.WrapTypeLibrary(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback,System.IntPtr[],System.IntPtr[],System.IntPtr[],System.IntPtr[],System.UInt32@)">
      <summary>Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</summary>
      <returns>Returns S_OK if the method is successful, E_FAIL if the method fails.</returns>
      <param name="pTypeLibToWrap">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="wszDestinationDirectory">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="wszKeyFile">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="wszKeyContainer">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="bDelaySign">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="pCallback">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgbstrWrapperPaths">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgWrappedTypeLibs">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgbGenerated">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgbstrWrapperTools">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="pcWrappedTypeLibs">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION">
      <summary>Specifies the resolution of the standard previewer. Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardPreviewer(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION,System.UInt32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION.PR_1024x768">
      <summary>Resolution is 1024x768.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION.PR_640x480">
      <summary>Resolution is 640x480.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION.PR_800x600">
      <summary>Resolution is 800x600.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION.PR_Default">
      <summary>Use the default resolution.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState">
      <summary>Contains information about the property browser state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState.cbSize">
      <summary>DWORD containing the size of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState" /> (for plug-and-play).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState.cStatusHeight">
      <summary>Count of lines displayed in status pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState.customColors">
      <summary>Custom colors chosen for the property browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState.fOutline">
      <summary>Specifies whether to show categorized outline view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsPropertyBrowserState.fShowStatus">
      <summary>Indicates whether status pane is visible.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE">
      <summary>Specifies a simple or substream property stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE.VSPSPT_PROPERTY_SECTION">
      <summary>Substream within the property stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPERTYSTREAMPROPERTYTYPE.VSPSPT_SIMPLE">
      <summary>Simple property.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE">
      <summary>Sets the characteristics of a properties page. Similar to the Win32 PROPSHEETPAGE structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwFlags">
      <summary>Flags that indicate which options to use when creating the property sheet page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwReserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwSize">
      <summary>Specifies the size, in bytes, of the structure. The size includes any extra application-defined data at the end of the structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwTemplateSize">
      <summary>Use <paramref name="dwTemplateSize" /> when PSP_DLGINDIRECT is specified in <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwFlags" />. Specifies the size of the template specified in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.pTemplate" /> field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.HINSTANCE">
      <summary>Handle to the instance from which to load a dialog template resource.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.hwndDlg">
      <summary>If you cannot pass a dialog template, set the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.HINSTANCE" /> field to a null value and fill in this field instead. A page will then be created, and your hwnd will be attached to it. If you do this, do not use <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.lParam" /> for anything.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.lParam">
      <summary>When the page is created, a copy of the page's <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE" /> structure is passed to the dialog box procedure with a WM_INITDIALOG message. The <paramref name="lParam" /> member is provided to allow you to pass application-specific information to the dialog box procedure. It has no effect on the page itself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.pcRefParent">
      <summary>Address of the reference count value. To use this member, you must set the PSP_USEREFPARENT flag in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwFlags" /> member.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.pfnCallback">
      <summary>Address of an application-defined callback function that is called when the page is created and when it is about to be destroyed. To use this member, you must set the PSP_USECALLBACK flag in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwFlags" /> member.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.pfnDlgProc">
      <summary>Address of the dialog box procedure for the page. Because the pages are created as modeless dialog boxes, the dialog box procedure must not call the EndDialog function.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.pTemplate">
      <summary>Dialog box template in memory to use to create the page. If the PSP_DLGINDIRECT flag in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwFlags" /> member is set, then <paramref name="pTemplate" /> is used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.wTemplateId">
      <summary>Used to specify the resource identifier of your dialog template in the module identified by the handle in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.HINSTANCE" /> field when PSP_DLGINDIRECT is not specified in <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE.dwFlags" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA">
      <summary>Structure with file attributes and size data.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA.dwFileAttributes">
      <summary>Attributes for the file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA.ftLastWriteTime">
      <summary>Date and time the file was last written to.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA.nFileSizeHigh">
      <summary>High 32 bits of the file size.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA.nFileSizeLow">
      <summary>Low 32 bits of the file size.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS">
      <summary>Flags specifying caller options per directory. The flags are associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])" />, which are called by a project to determine whether directories can be added to the project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS.VSQUERYADDDIRECTORYFLAGS_padding">
      <summary>No flags yet.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddNotOK">
      <summary>Directory cannot be added to the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddOK">
      <summary>Directory can be added to the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS">
      <summary>Used in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])" /> methods to indicate the type of file that will be added to the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS.VSQUERYADDFILEFLAGS_IsNestedProjectFile">
      <summary>Nested project (file), for example, the file sitting on the root node of a nested project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS.VSQUERYADDFILEFLAGS_IsSpecialFile">
      <summary>"Special" file, for example, an invisible file associated with another file in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS.VSQUERYADDFILEFLAGS_NoFlags">
      <summary>No flags are associated with the file that will be added to the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS">
      <summary>Flags returned by the environment in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])" /> and the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])" /> methods. These flags indicate whether a project can add the file to the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddNotOK">
      <summary>File cannot be added to the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddOK">
      <summary>File can be added to the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS">
      <summary>Flags specifying caller options per directory. The flags are associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])" />, which are called by a project to determine whether directories can be removed from the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS.VSQUERYREMOVEDIRECTORYFLAGS_padding">
      <summary>No flags yet.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveNotOK">
      <summary>Directory cannot be removed from the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveOK">
      <summary>Directory can be removed from the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS.VSQUERYREMOVEFILEFLAGS_IsNestedProjectFile">
      <summary>Nested project (file), for example, the file sitting on the root node of a nested project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS.VSQUERYREMOVEFILEFLAGS_IsSpecialFile">
      <summary>"Special" file, for example, an invisible file associated with another file in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS.VSQUERYREMOVEFILEFLAGS_NoFlags">
      <summary>No flags are associated with the file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK">
      <summary>File cannot be removed from the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK">
      <summary>File can be removed from the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS">
      <summary>Flags specifying caller options per directory. The flags are associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])" />, which are called by a project to determine whether directories can be renamed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS.VSQUERYRENAMEDIRECTORYFLAGS_padding">
      <summary>No flags yet.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameNotOK">
      <summary>Rename cannot proceed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameOK">
      <summary>Rename can proceed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS.VSQUERYRENAMEFILEFLAGS_Directory">
      <summary>Rename refers to a disk directory, not a file. Callers are encouraged to use the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])" /> method to provide this information instead of using this flag with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS.VSQUERYRENAMEFILEFLAGS_IsNestedProjectFile">
      <summary>Nested project (file), for example, the file sitting on the root node of a nested project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS.VSQUERYRENAMEFILEFLAGS_IsSpecialFile">
      <summary>"Special" file, for example, an invisible file associated with another file in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS.VSQUERYRENAMEFILEFLAGS_NoFlags">
      <summary>No flags.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameNotOK">
      <summary>File cannot be renamed in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameOK">
      <summary>File can be renamed in the project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS">
      <summary>Returns the property state of a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS.QSP_HasDirtyProps">
      <summary>Solution has properties that have changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS.QSP_HasNoDirtyProps">
      <summary>Solution has no properties that have changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS.QSP_HasNoProps">
      <summary>Solution has no properties.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSRECORDSTATE">
      <summary>Specifies the state of the macro recorder of the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRECORDSTATE.VSRECORDSTATE_OFF">
      <summary>Macro recording is off.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRECORDSTATE.VSRECORDSTATE_ON">
      <summary>Macro recording is on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRECORDSTATE.VSRECORDSTATE_PAUSED">
      <summary>Macro recording is paused.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSRELOADOPTION">
      <summary>Specifies how to respond to externally modified documents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRELOADOPTION.VSRELOADOPTION_NEVER">
      <summary>Never reload externally modified documents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRELOADOPTION.VSRELOADOPTION_PROMPT">
      <summary>Prompt user for reload of externally modified documents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRELOADOPTION.VSRELOADOPTION_SILENT">
      <summary>Always silently reload externally modified documents.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS">
      <summary>Flags used by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS.VSREMOVEDIRECTORYFLAGS_IsDirectoryBased">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS.VSREMOVEDIRECTORYFLAGS_NoFlags">
      <summary>No flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS.VSREMOVEDIRECTORYFLAGS_RemoveFromSourceControlDoneExternally">
      <summary>Flag is unused.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS">
      <summary>Flags used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS.VSREMOVEFILEFLAGS_IsDirectoryBased">
      <summary>Deprecated. Do not use</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS.VSREMOVEFILEFLAGS_IsNestedProjectFile">
      <summary>Nested project (file), that is the file located at the root node of a nested project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS.VSREMOVEFILEFLAGS_IsSpecialFile">
      <summary>Special file, that is, an invisible file associated with another file in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS.VSREMOVEFILEFLAGS_NoFlags">
      <summary>No flags associated with the file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS.VSREMOVEFILEFLAGS_RemoveFromSourceControlDoneExternally">
      <summary>Flag is unused.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS.VSRENAMEDIRECTORYFLAGS_NoFlags">
      <summary>No flags associated with the directory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS.VSRENAMEDIRECTORYFLAGS_RenameInSourceControlDoneExternally">
      <summary>Flag is unused.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS">
      <summary>Flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameFile(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)" />, and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFile(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS,System.Int32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_ALL">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_AlreadyOnDisk">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_Directory">
      <summary>Rename refers to a disk directory, not a file. Callers are encouraged to use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])" /> methods to provide this information instead of using this flag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_FromFileChange">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_FromScc">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_FromShellCommand">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_INVALID">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_IsNestedProjectFile">
      <summary>Nested project (file), that is, the file sitting on the root node of a nested project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_IsSpecialFile">
      <summary>Special file, that is, an invisible file associated with another file in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_NoFlags">
      <summary>No flag associated with the file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_RenameInSourceControlDoneExternally">
      <summary>Flag is unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS.VSRENAMEFILEFLAGS_WasQueried">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW">
      <summary>Contains file name and option information needed by the Common Item Dialog, which is used to open or save files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.dwFlags">
      <summary>DWORD specifying standard OFN_ flags, which are used by the OPENFILENAME structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.dwHelpTopic">
      <summary>DWORD specifying the help topic.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.hwndOwner">
      <summary>HWND specifying the handle of the owning window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.lStructSize">
      <summary>DWORD holding the size of this <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.nFileExtension">
      <summary>DWORD indicating the file extension.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.nFileOffset">
      <summary>DWORD indicating the file offset.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.nFilterIndex">
      <summary>DWORD indicating the filter index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.nMaxFileName">
      <summary>DWORD indicating the maximum number of characters in the file name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.pSaveOpts">
      <summary>Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSaveOptionsDlg" /> instance. This interface shows a dialog box from which to choose additional save format options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.pwzDlgTitle">
      <summary>Pointer to a string containing the Save Options dialog box title.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.pwzFileName">
      <summary>Pointer to a string containing the file name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.pwzFilter">
      <summary>Pointer to a string containing the file name filter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW.pwzInitialDir">
      <summary>Pointer to a string containing the initial directory.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS">
      <summary>Specifies file save options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_Save">
      <summary>Saves the current file to itself without being prompted for another file name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_SaveAs">
      <summary>Saves the file to another file specified by the user when prompted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_SaveCopyAs">
      <summary>Saves a copy of the file with a name specified by the user when prompted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS.VSSAVE_SilentSave">
      <summary>Saves the file without prompting for a name or confirmation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS">
      <summary>Sets the window frame position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fDock">
      <summary>Indicates that the tool window frame is currently docked when returned in call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS[],System.Guid@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />. You cannot set this value with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fDockBottom">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fDockLeft">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fDockRight">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fDockTop">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fFloat">
      <summary>Indicates that the tool window frame is currently floating when returned in call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS[],System.Guid@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />. You cannot set this value with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fMdiChild">
      <summary>Indicates that the tool window frame is currently within the MDI space when returned in call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS[],System.Guid@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />. You cannot set this value with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fMove">
      <summary>Allows you to set the screen co-ordinates for a tool window frame when called from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fSize">
      <summary>Allows you to set the width and height of a tool window frame when called from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fTab">
      <summary>Indicates that the tool window frame is currently tabbed when returned in call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS[],System.Guid@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />. You cannot set this value with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fTabFirst">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fTabLast">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fTabNext">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_fTabPrevious">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_maskFrameMode">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS.SFP_maskPosition">
      <summary>Reserved.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS">
      <summary>Identifies solution build results.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_CONTDEPLOYONERROR_QUERY_NO">
      <summary>CONTDEPLOYONERROR query was no.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_CONTDEPLOYONERROR_QUERY_YES">
      <summary>CONTDEPLOYONERROR query was yes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_CONTLAUNCHONERROR_QUERY_NO">
      <summary>CONTLAUNCHONERROR query was no.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_CONTLAUNCHONERROR_QUERY_YES">
      <summary>CONTLAUNCHONERROR query was yes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_OUTOFDATE_QUERY_CANCEL">
      <summary>OUOTOFDATE query was canceled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_OUTOFDATE_QUERY_NO">
      <summary>OUOTOFDATE query was no.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_OUTOFDATE_QUERY_YES">
      <summary>OUOTOFDATE query was yes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_SAVEBEFOREBUILD_QUERY_CANCEL">
      <summary>SAVEBEFOREBUILD query was canceled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_SAVEBEFOREBUILD_QUERY_NO">
      <summary>SAVEBEFOREBUILD query was no.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS.VSSBQR_SAVEBEFOREBUILD_QUERY_YES">
      <summary>SAVEBEFOREBUILD query was yes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS">
      <summary>Identifies solution build updates.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_BUILD">
      <summary>Performs a build (may be ORed with other flags).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_CLEAN">
      <summary>Removes built objects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_DEPLOY">
      <summary>Deploys the solution (may be ORed with other flags).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_FORCE_UPDATE">
      <summary>Forces a rebuild on the project, even if it is not out of date.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_LAUNCH">
      <summary>Launches the application without the debugger involved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_LAUNCHDEBUG">
      <summary>Launches the application for debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_MASK">
      <summary>All build operations are to be performed. Sets all operation control flags on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_NONE">
      <summary>No build operations are to be performed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_OPERATION_SELECTION">
      <summary>Operates on the current shell selection context.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_SUPPRESS_CONTDEPLOYONERROR_QUERY">
      <summary>Takes the default answer for continue-deploy query.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_SUPPRESS_CONTLAUNCHONERROR_QUERY">
      <summary>Takes the default answer for continue launch query.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_SUPPRESS_MASK">
      <summary>Take default answers for all UI queries. Sets all UI suppression flags on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_SUPPRESS_NONE">
      <summary>Perform no UI supression.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_SUPPRESS_OUTOFDATE_QUERY">
      <summary>Takes the default answer for out-of-date query.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS.SBF_SUPPRESS_SAVEBEFOREBUILD_QUERY">
      <summary>Takes the default answer for save-before-build query.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon">
      <summary>Specifies indexes for source control glyphs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_BLANK">
      <summary>Blank Icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_CHECKEDIN">
      <summary>Item is checked in.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_CHECKEDOUT">
      <summary>Item is checked out.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_CHECKEDOUTEXCLUSIVE">
      <summary>Item is checked-out exclusively by user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_CHECKEDOUTEXCLUSIVEOTHER">
      <summary>Item is checked-out exclusively by someone else.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_CHECKEDOUTSHAREDOTHER">
      <summary>Item is checked-out shared by someone else.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_DISABLED">
      <summary>Item is disabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_EDITABLE">
      <summary>Item is editable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_EXCLUDEDFROMSCC">
      <summary>Item is excluded from source code control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_MAXINDEX">
      <summary>Flag to indicate highest value used in the enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_NOSTATEICON">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_ORPHANED">
      <summary>Item is orphaned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_READONLY">
      <summary>Item is read only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS">
      <summary>Contains metrics about a swatch control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.cColumns">
      <summary>Number of columns; must be greater than or equal to 1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.cRows">
      <summary>Number of rows/lines; must be greater than or equal to 1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.cxCell">
      <summary>Width of each cell; 0 or -1 = current button width, -2 = default color cell width.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.cxCtrl">
      <summary>Preferred width of whole control. Office will override if it is too small; use 0 if you don't care.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.cyCell">
      <summary>Height of each cell; 0 or -1 = current button height, -2 = default color cell height.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.cyCtrl">
      <summary>Preferred height of whole control; Office will override if it is too small; use 0 if you don't care.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.dxBetween">
      <summary>Pixel width between cells; 0 or -1 = use default of 2 pixels.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.dyBetween">
      <summary>Pixel height between cells; 0 or -1 = use default of 2 pixels.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS.fPaletteSensitive">
      <summary>true if the client image is sensitive to palette changes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER">
      <summary>Holds information necessary to render a swatch control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER.grfFlags">
      <summary>Control state. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER.hdc">
      <summary>HDC to render image into.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER.nAltitude">
      <summary>Button face altitude; -1 = lowered, 0 = normal, 1 = raised.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER.prc">
      <summary>Bounding rectangle for image.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER.x">
      <summary>Column coordinate of cell to render.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER.y">
      <summary>Row coordinate of cell to render.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR">
      <summary>This enumeration is deprecated. Use <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSYSCOLOREX" /> instead</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR.VSCOLOR_DARK">
      <summary>One interval darker than COLOR_BTNSHADOW.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR.VSCOLOR_LAST">
      <summary>Must be set to the last color enum above.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR.VSCOLOR_LIGHT">
      <summary>One interval lighter than COLOR_BTNFACE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR.VSCOLOR_LIGHTCAPTION">
      <summary>One interval lighter than COLOR_ACTIVECAPTION.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR.VSCOLOR_MEDIUM">
      <summary>One interval darker than COLOR_BTNFACE.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY">
      <summary>Specifies the category of a task item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_ALL">
      <summary>Not a real category. It is used to allow a task list view to show all of the tasks in the task list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_BUILDCOMPILE">
      <summary>Build errors and warnings, and possibly deployment errors. Goes to the same view as CAT_CODESENSE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_CODESENSE">
      <summary>Errors generated as you type source code. Goes to the same view as CAT_BUILDCOMPILE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_COMMENTS">
      <summary>Tasks generated by special comments, such as "TODO," "UNDONE," or "HACK."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_HTML">
      <summary>Tasks which pertain to Web page development.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_MISC">
      <summary>Miscellaneous tasks that VSPackages might want to add to the task list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_SHORTCUTS">
      <summary>Short cuts to code. Shortcuts are generated by the user right-clicking the editor window, and choosing Add Task List Shortcut from the pop-up menu. Users should be encouraged to use short cuts rather than bookmarks to mark positions in the editor window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY.CAT_USER">
      <summary>Tasks entered by the user. The top of the task list, above its first item, is set up to allow users to easily add their own tasks to the task list.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD">
      <summary>Specifies the field of a task item. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_BITMAP">
      <summary>The bitmap icon for the task. See <see cref="T:Microsoft.VisualStudio.Shell.Interop._vstaskbitmap" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.ImageList(System.IntPtr@)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.ImageListIndex(System.Int32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_CATEGORY">
      <summary>Task category. Not visible in the task list, but used for sorting. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterCustomCategory(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])" />, and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_CHECKED">
      <summary>Check box field of the task. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Checked(System.Int32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_COLUMN">
      <summary>Column that the task is associated with in the specified file. A specific column does not need to be specified. Not visible in the task list. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Column(System.Int32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_CUSTOM">
      <summary>A customized field of the task. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_CustomColumnText(System.Guid@,System.UInt32,System.String@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_DESCRIPTION">
      <summary>Task description. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Text(System.String@)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken.Text(System.String@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_FILE">
      <summary>File associated with the task. A specific file does not have to be specified. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Document(System.String@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_LINE">
      <summary>Line in a file that the task is associated with. A specific line does not have to be specified. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Line(System.Int32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_PRIORITY">
      <summary>Task priority. See <see cref="T:EnvDTE.vsTaskPriority" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommentTaskToken.Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_PROVIDERKNOWSORDER">
      <summary>Not visible in the task list, but used for sorting. If this value is specified, then this indicates that the sort order specified by the task provider should be used by the task list rather than the default sort. This would be done only within a custom view. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.MaintainInitialTaskOrder(System.Int32@)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterCustomCategory(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.AutoFilter2(System.Guid@)" />.  </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD.FLD_SUBCATEGORY">
      <summary>Task subcategory. Not visible in the task list, but used for sorting. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.SubcategoryList(System.UInt32,System.String[],System.UInt32@)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.SubcategoryIndex(System.Int32@)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY">
      <summary>Specifies the bitmap used to indicate the priority level of a task item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY.TP_HIGH">
      <summary>Red exclamation mark, indicating high priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY.TP_LOW">
      <summary>Blue down arrow, indicating low priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY.TP_NORMAL">
      <summary>No bitmap, indicating normal priority.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTBM">
      <summary>Contains tool bar metrics.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dxCaptionBtn">
      <summary>Specifies button caption width.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dxpButton">
      <summary>Specifies button width.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dxpGap">
      <summary>Specifies gap width.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dxpMargin">
      <summary>Specifies space around sides of toolbars.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dxpRow">
      <summary>Specifies horizontal row width.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dyCaptionBtn">
      <summary>Specifies button caption height.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dypButton">
      <summary>Specifies button height.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dypGap">
      <summary>Specifies gap height.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dypMargin">
      <summary>Specifies space around top and bottom of button.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.dypRow">
      <summary>Specifies vertical row width.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBM.hfontHalfHtTitle">
      <summary>Specifies font half height of button title.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW">
      <summary>Specifies the type of view for a Toolbox tab.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW.TBXTV_IconView">
      <summary>Items on the Toolbox tab are shown in icon view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW.TBXTV_ListView">
      <summary>Items on the Toolbox tab are shown in list view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTDTYPE">
      <summary>Internal test use only. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTDTYPE.VSTDT_PIC">
      <summary>pguidData and pdwData must be valid; ppvData must be non-null.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTDTYPE.VSTDT_PICDATA">
      <summary>ppvData must be valid; pguidData and pdwData must be non-null.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTDTYPE.VSTDT_PITB">
      <summary>pguidData and pdwData must be valid; ppvData must be non-null.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTDTYPE.VSTDT_PITBDATA">
      <summary>ppvData must be valid; pguidData and pdwData must be non-null.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTDTYPE.VSTDT_PITBS">
      <summary>ppvData must be non-null.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsTextPos">
      <summary>Keeps track of the position of break points, current IP location, and cursor position for quick watch, tooltip, and datatips.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsTextPos.itemid">
      <summary>Specifies the item id.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsTextPos.pHier">
      <summary>Specifies the hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsTextPos.pTextBuf">
      <summary>Specifies the text buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsTextPos.span">
      <summary>Specifies the span of text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS">
      <summary>Specifies possible actions on collapse of a tree view node, which results in the close of its child tree list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS.TCA_CLOSEANDDISCARD">
      <summary>Discard this and all its children lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS.TCA_CLOSECHILDREN">
      <summary>Discard children lists. The children lists will also get an <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.OnClose(Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS[])" /> call.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREECLOSEACTIONS.TCA_NOTHING">
      <summary>Do not do any list discarding; just collapse the node. This is the default if no value is specified.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA">
      <summary>Holds values used to retrieve display data for an item in a tree list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.ForceSelectLength">
      <summary>Length of forced selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.ForceSelectStart">
      <summary>Start of the part of the item to always select (for showing search hits).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.hImageList">
      <summary>Handle to an image list. If <paramref name="hImageList" /> is set to zero, the tool's default image list will be used. Indices for glyphs in the default image list are in omglyphs.h.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.Image">
      <summary>Specifies an index into an image list indicating which glyph is to be displayed. Return <paramref name="Image" /> when <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK.TDM_IMAGE" /> is set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.Mask">
      <summary>Specifies which fields in the structure are of interest. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.SelectedImage">
      <summary>Specifies an index into an image list indicating which glyph is to be displayed when the item is selected. Return <paramref name="SelectedImage" /> when <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYMASK.TDM_SELECTEDIMAGE" /> is set. If not set, the selected image used will be the same as the non-selected image.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.State">
      <summary>Specifies display state. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.StateMask">
      <summary>Specifies which bit fields in State are of interest. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE" /> enumeration.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTREELISTITEMCHANGE">
      <summary>Specifies dynamic changes to a tree list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREELISTITEMCHANGE.grfChange">
      <summary>Specifies the changes that have occurred. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSTREEITEMCHANGESMASK" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREELISTITEMCHANGE.index">
      <summary>Identifies a tree list item.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS">
      <summary>Specifies the type of text being requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_BASETEXT">
      <summary>DO NOT IMPLEMENT. Used internally (shortest form of the name possible).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_CUSTOM">
      <summary>Custom text (depends on the context where used).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_DEFAULT">
      <summary>Default base text. This is used as the display name for the item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_DISPLAYTEXT">
      <summary>Alternate name for TTO_DEFAULT.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_EXTENDED">
      <summary>DO NOT IMPLEMENT. Extended text (prefix2 + prefix + default) is generated by the object manager.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_PREFIX">
      <summary>Fully qualified parent class name for the item. Return an empty string if this item is not part of any class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_PREFIX2">
      <summary>Fully qualified namespace name for the item. Return an empty string if this item is not part of any namespace.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_SEARCHTEXT">
      <summary>Text used for searching. Typically, the same as TTO_DISPLAYTEXT.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_SORTTEXT">
      <summary>Unique pointer used for sorting. May be the same as TTO_DISPLAYTEXT.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE">
      <summary>Specifies the type of tool tip text to display.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE.TIPTYPE_DEFAULT">
      <summary>Default text. If tip text is to be the same as the default display text (<see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTREETEXTOPTIONS.TTO_DISPLAYTEXT" />), implementers don't need to implement tip text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE.TIPTYPE_ICON">
      <summary>Show tip text over the icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTREETOOLTIPTYPE.TIPTYPE_STATEICON">
      <summary>Show tip text over the state icon.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION">
      <summary>Specifies the location of a tool window toolbar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION.VSTWT_BOTTOM">
      <summary>Location is the bottom border of the tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION.VSTWT_LEFT">
      <summary>Location is the left border of the tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION.VSTWT_RIGHT">
      <summary>Location is the right border of the tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION.VSTWT_TOP">
      <summary>Location is the top border of the tool window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON">
      <summary>Returns update information for a project reference.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON.UPR_ItemRenamed">
      <summary>Project item has been renamed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON.UPR_NoUpdate">
      <summary>Project was not updated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON.UPR_ProjectRenamed">
      <summary>Project was renamed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON.UPR_ProjectUsedInNewSolution">
      <summary>Project is being used in a new solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON.UPR_SolutionLocationChanged">
      <summary>Solution location has been changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE">
      <summary>Specifies whether an attribute or keyword is pushed into the context bag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE.VSUC_Usage_Filter">
      <summary>Attribute is pushed into the context bag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE.VSUC_Usage_Lookup">
      <summary>Keyword is pushed into the context bag. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE.VSUC_Usage_Lookup_CaseSensitive">
      <summary>VSUC_Usage_Lookup with case sensitivity.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE.VSUC_Usage_LookupF1">
      <summary>F1 keyword is pushed into the context bag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE.VSUC_Usage_LookupF1_CaseSensitive">
      <summary>VSUC_Usage_LookupF1 with case sensitivity.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY">
      <summary>Specifies the priority of attributes or keywords in the context bag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_Ambient">
      <summary>Low priority level. Typically reserved for start pages, getting started topics, and so on. This value is applied to information which provides useful, but not very specific, Help information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_Enterprise">
      <summary>Priority level for enterprise templates.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_Highest">
      <summary>Specifies the highest priority of any keyword. Priority level for wizards accessed through the automation model.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_MarkerSel">
      <summary>Priority level for a selection container.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_None">
      <summary>Default; lowest priority level. This value is only used internally by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_Project">
      <summary>Priority level for a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_ProjectItem">
      <summary>Priority level for a hierarchy item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_Selection">
      <summary>Priority level for a selection container.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_State">
      <summary>Priority level for command UI context.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_ToolWndSel">
      <summary>Priority level for a selection within a tool window. For example, this value could be assigned to a command within the command window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_Window">
      <summary>Priority level for an editor window. Used by Solution Explorer because it also pushes a selection to the Properties window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY.VSUC_Priority_WindowFrame">
      <summary>Priority level for tool windows that do not want to overwrite <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.SEID_UserContext" />, but want their context to appear at the top of the RL window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSWINDOWSTATE">
      <summary>Controls the display state or appearance of a window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSWINDOWSTATE.VSWS_Maximized">
      <summary>The window is maximized. By default, the system enlarges a maximized window so that it fills the screen or, in the case of a child window, the parent window's client area.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSWINDOWSTATE.VSWS_Minimized">
      <summary>The window is minimized. By default, the system reduces a minimized window to the size of its taskbar button and moves the minimized window to the taskbar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSWINDOWSTATE.VSWS_Normal">
      <summary>The window is in its default state.</summary>
    </member>
  </members>
</doc>