<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.Interop.11.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE">
      <summary>Specifies the type of the document previewer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE.DP_InstalledBrowser">
      <summary>The previewer is a non-default browser installed in the system.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE.DP_InternalBrowser">
      <summary>The previewer is the internal browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE.DP_PackageRegistered">
      <summary>The previewer is registered by one of the installed packages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE.DP_SystemBrowser">
      <summary>The previewer is configured as the system default browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE.DP_UserDefined">
      <summary>The previewer is manually added and configured by the user.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__HierarchyDropArea">
      <summary>Defines directional drop targets that can be used by <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget" /> to specify on, above, and below drop targets. These drop targets can be implemented by <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> implementations to allow user reordering of items within the hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__HierarchyDropArea.DROPAREA_Above">
      <summary>Dropping above the item is supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__HierarchyDropArea.DROPAREA_Below">
      <summary>Dropping below the item is supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__HierarchyDropArea.DROPAREA_On">
      <summary>Dropping on the item is supported.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID5">
      <summary>Specifies Special Project Files that can be created or queried for with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID5.PSFFILEID_AppxManifest">
      <summary>Specifies that the package manifest file is retrieved for Windows Store projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID5.PSFFILEID_FIRST5">
      <summary>Indicates the first PSFFILEID5 member.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__SymbolToolLanguage">
      <summary>Specifies the preferred language during “object browser”/”class view” navigation, overriding the default display language.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__SymbolToolLanguage.SymbolToolLanguage_CSharp">
      <summary>The preferred language is C#.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__SymbolToolLanguage.SymbolToolLanguage_None">
      <summary>No specific language is preferred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__SymbolToolLanguage.SymbolToolLanguage_VB">
      <summary>The preferred language is Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__SymbolToolLanguage.SymbolToolLanguage_VC_CLI">
      <summary>The preferred language is Visual C++ for managed syntax.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__SymbolToolLanguage.SymbolToolLanguage_VC_ZW">
      <summary>The preferred language is Visual C++ with Windows Runtime language extensions (that is, extensions enabled by the ZW compiler flag).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSASSEMBLYPROVIDERTAB">
      <summary>Specifies the set of tabs to show in the provider.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASSEMBLYPROVIDERTAB.TAB_ASSEMBLY_ALL">
      <summary>Show both standard .NET Framework and extensions framework tabs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASSEMBLYPROVIDERTAB.TAB_ASSEMBLY_EXTENSIONS">
      <summary>Show only the tabs that are part of the framework extensions. These extensions go in AssemblyFoldersEx-registered paths and comprise user extensions to the set of assemblies general available to all .NET applications on the machine.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASSEMBLYPROVIDERTAB.TAB_ASSEMBLY_FRAMEWORK">
      <summary>Show only the tabs that are part of the standard .NET Framework contents.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSASYNCTOOLBOXSTATE">
      <summary>Specifies if any asynchronous operations are pending or in progress.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASYNCTOOLBOXSTATE.ATS_FILTERING">
      <summary>The item visibility determination is in progress.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASYNCTOOLBOXSTATE.ATS_INITIALIZING">
      <summary>The initialization sequence is in progress (also set during a reset operation).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASYNCTOOLBOXSTATE.ATS_NONE">
      <summary>No asynchronous operations are pending or in progress.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS6">
      <summary>Specifies flags that control how the debugger is started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS6.DBGLAUNCH_BlockCredentialsDialog">
      <summary>The credentials dialog is blocked from being shown on authentication errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS6.DBGLAUNCH_BlockWWSDialog">
      <summary>The WWS install dialog is blocked from being shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS6.DBGLAUNCH_StartInSimulator">
      <summary>For <see cref="F:Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4.DLO_ImmersiveAppDebug" />, the debugger should launch the application (or expect the application to start) in the simulator.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEHANDLEROPTIONS">
      <summary>Specifies the deletion options for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler3" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEHANDLEROPTIONS.DHO_NONE">
      <summary>No deletion options are specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEHANDLEROPTIONS.DHO_SUPPRESS_UI">
      <summary> No confirmation dialogs or source code control (SCC) checkout UI is displayed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDEVELOPERLICENSINGCOMMANDS">
      <summary>Specifies the command identifier for the licensing commands.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDEVELOPERLICENSINGCOMMANDS.CMDID_AcquireDeveloperLicense">
      <summary>Get a developer’s license.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS">
      <summary>Specifies options for the difference window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS.VSDIFFOPT_DetectBinaryFiles">
      <summary>Display a dialog box if attempting to compare binary files (and return success).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS.VSDIFFOPT_DoNotShow">
      <summary>Do not show the comparison window after creating it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS.VSDIFFOPT_LeftFileIsTemporary">
      <summary>The left file is a temporary file explicitly created for the difference comparison.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS.VSDIFFOPT_PromptForEncodingForLeft">
      <summary>Prompt the user for the encoding of the left file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS.VSDIFFOPT_PromptForEncodingForRight">
      <summary>Prompt the user for the encoding of the right file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS.VSDIFFOPT_RightFileIsTemporary">
      <summary>The right file is a temporary file explicitly created for the difference comparison.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS2">
      <summary>Specifies which projects to enumerate within a solution. These flags extend <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS2.EPF_FAULTED">
      <summary>Only enumerate faulted projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS2.EPF_MATCHUNLOADEDTYPE">
      <summary>Enumerate unloaded projects when matching by project type GUID. Do not combine this flag with EPF_MATCHTYPE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS2.EPF_NOTFAULTED">
      <summary>Only enumerate projects that are not faulted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS2.EPF_PROVISIONED">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5">
      <summary>Specifies property identifiers for window frames, document frames, and tool window frames.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_DontAutoOpen">
      <summary>Indicates whether a window should be reopened when a solution is opened (default false).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_IsPinned">
      <summary>Indicates whether a window is pinned. If true, the window is pinned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_IsProvisional">
      <summary>A tri-state value indicating whether a window is provisional (BOOL/EMPTY). For tool windows, this value is always VARIANT_FALSE and cannot be changed. For document windows, this value is initialized to EMPTY. After the window is created but before it is shown, this value can be set to VARIANT_TRUE to create a preview window. If this value is EMPTY when the window is shown, it will be set to VARIANT_FALSE to indicate a non-preview window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_IsSearchEnabled">
      <summary>Indicates whether the window supports search (a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost" /> was created and associated with the frame, the search was setup with the host, and the search is enabled by the provider).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_NativeScrollbarThemeMode">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_OverrideCaption">
      <summary>Override the generated caption for this frame. A null value restores the default behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_OverrideToolTip">
      <summary>Override the generated tooltip for this frame. A null value restores the default behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_ReplaceDocumentToolbars">
      <summary>Indicates whether any toolbars that are specific to the currently-active document should be hidden. A value of true indicates that when the tool window is active, any toolbars that are specific to the currently active document should be hidden. The default is false. This property only has an effect when the tool window also supplies a CmdUI GUID using the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_CmdUIGuid" /> property. This property is used only for tool windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_SearchHost">
      <summary>Either retrieve the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost" /> associated with the window or create a search host for a search control with shell-owned positioning in the top frame area.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID_SearchPlacement">
      <summary>The search placement when the frame uses a search control with shell-owned positioning in the top frame area (with values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID5.VSFPROPID5_FIRST">
      <summary>The first property ID.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYMANIPULATIONSTATE">
      <summary>Specifies the state of a hierarchy manipulation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYMANIPULATIONSTATE.HMS_System">
      <summary>The hierarchy manipulation was caused by the system (not explicitly by the user).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYMANIPULATIONSTATE.HMS_Unspecified">
      <summary>The calling code that manipulated the hierarchy did not specify a hierarchy manipulation state.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5">
      <summary>Specifies property settings for a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_AppContainer">
      <summary>When set, indicates the target framework moniker to which the project system should retarget upon its first opportunity. The project is responsible for ensuring the applicability of the framework that is returned. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_DemandLoadDependencies">
      <summary>If true and the project was loaded synchronously, all its dependencies will also be loaded synchronously (the default). If false and the project was loaded synchronously, those of its dependencies that support asynchronous load can be loaded asynchronously. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_FaultMessage">
      <summary>A localized message indicating the reason for a faulted project. This string is used in the fault resolution UI. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_FIRST5">
      <summary>Specifies the first property identifier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_ForceFrameworkRetarget">
      <summary>Indicates whether the project's output requires running in an app container or not. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_IsFaulted">
      <summary>For project hierarchies, set to true to indicate that the project has encountered an error. Implementations should raise property change events to all <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" /> sinks whenever this value changes. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_IsPackagingProject">
      <summary>BOOL [optional] Indicates whether the output of the project is a package of its content (i.e. a zip file).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_IsProjectProvisioned">
      <summary>Returns true if an unloaded project is in provisioned state (that is, displayed with "(initializing)" caption). This is implemented only by the stub hierarchy. This property is used when a project that supports Asynchronous Solution Load is loaded in the background. While such projects are loading they are exposed in the Solution as an unloaded project stub. When the background loading project reaches the "provisioned" state, the real project has been created but has not been publicized through the solution load events. Therefore the project <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> exposed in the solution project collection (and Solution Explorer) is still the stub hierarchy and not the real project hierarchy. Only basic hierarchy properties are available, such as the project name and icon. When the loading project reaches the provisioned state, the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreateUI.OnAfterProjectProvisioned(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" /> event is fired. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_MinimumDesignTimeCompatVersion">
      <summary>Gets or sets the minimum design time compatible version with which this project is compatible. This property is set mostly by calls from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAppCompat" /> service during the addition of a new feature in the project that would break compatibility with a previous version of the application. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_MonikerSameAsPersistFile">
      <summary>Indicates that IVsProject.GetMkDocument() for VSITEMID_ROOT returns the same full path to the project file as IPersistFileFormat::GetCurFile.  This is useful when it is more expensive to call GetCurFile due to the need to get the format on-disk.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_OutputType">
      <summary>The output type for a project, from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE" /> enumeration. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_ProjectCapabilities">
      <summary>A space-delimited list of the project's capabilities. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_ProjectPropertiesDebugPageArg">
      <summary>BSTR or VT_I4 [optional] The argument to be passed to the <paramref name="cmdidProjectProperties" /> command to activate the project's debug page. This property is used by the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd11CmdID.StartupProjectProperties" /> command to activate the correct debug property page for the startup project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_ProjectUnloadStatus">
      <summary>The unload status (<see cref="UNLOADSTATUS_UnloadedByUser" />, <see cref="UNLOADSTATUS_LoadPendingIfNeeded" />, and so on) from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSProjectUnloadStatus" /> enumeration. This is implemented only by the stub hierarchy. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_ProvisionalViewingStatus">
      <summary>The provisional viewing status for the item (from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROVISIONALVIEWINGSTATUS" /> enumeration). If this property is not supported and the hierarchy implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" />, the provisional viewing status is determined by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument3.GetProvisionalViewingStatusForFile(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid@)" /> with the name returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject4.GetMkDocument(System.UInt32,System.String@)" />. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_ReferenceManagerUser">
      <summary>Returns the implementation of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUser" /> for a project. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_RequiresReloadForExternalFileChange">
      <summary>Returns true if the file on disk was not last written by the project and therefore the user should be prompted to reload due to an external change to the file. This property is defined for ITEMID_ROOT. It is expected that this property is only called during a FilesChanged event handler. The expected implementation is for projects to record the timestamp on the project file when the file is saved. Later when this property is requested, the project should compare the current timestamp of the file to the last recorded save timestamp. If they are not equal then return true, otherwise return FALSE (that is, a reload is not required). This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_SupportedOutputTypes">
      <summary>A list of supported output types (specified as values used by the <see cref="OutputTypeEx" /> project property). This allows a flavor to customize the contents of the output type dropdown in the property pages. This property will be checked first by the property pages, so this property effectively overrides the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2.VSHPROPID_SupportedMyApplicationTypes" /> property used by the Visual Basic property page. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_SupportsCrossRuntimeReferences">
      <summary>Indicates whether a project allows references across runtimes (for example, native to managed). The default is true, so a project must have the property and set it to false in order to block cross-runtime references. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_TargetPlatformIdentifier">
      <summary>The target platform for a project type. Examples are "Windows", "Windows Phone", " Azure", "XBox 360", and "Portable". This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_TargetPlatformVersion">
      <summary>The version of the target platform (for example "8.0"). This property is optional. However, this property is required if <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_TargetPlatformIdentifier" /> is provided.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_TargetRuntime">
      <summary>The runtime the project targets, from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROJTARGETRUNTIME" /> enumeration. This property is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_WinMDAssembly">
      <summary>Indicates whether the project produces an assembly (.exe or .dll) with WinMD metadata. If true, it produces an assembly. This property is optional.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSIconSource">
      <summary>Options for the source of an icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIconSource.IS_OperatingSystem">
      <summary>The icon is provided by the operating system.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIconSource.IS_Unknown">
      <summary>The icon source is unknown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIconSource.IS_VisualStudio">
      <summary>The icon is provided by Visual Studio.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSNativeScrollbarThemeMode">
      <summary>Indicates how scrollbar themes are to be applied.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSNativeScrollbarThemeMode.NSTM_All">
      <summary>Theme all descendants.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSNativeScrollbarThemeMode.NSTM_None">
      <summary>Don’t theme descendants.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSNativeScrollbarThemeMode.NSTM_OnlyTopLevel">
      <summary>Theme scrollbars on the window to which this is applied, but not its descendants.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSNativeScrollbarThemeMode.NSTM_Undefined">
      <summary>The theme mode isn’t defined.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOVERLAYICON3">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOVERLAYICON2" /> enumerations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOVERLAYICON3.OVERLAYICON_FAULTED">
      <summary>Overlay icon used for Solution Explorer projects that have encountered an error during project loading.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOVERLAYICON3.OVERLAYICON_MAXINDEX3">
      <summary>Indicates the last __VSOVERLAYICON3.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPHYSICALVIEWATTRIBUTES">
      <summary>Specifies the attributes for the physical view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPHYSICALVIEWATTRIBUTES.PVA_None">
      <summary>No attributes are specified for the physical view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPHYSICALVIEWATTRIBUTES.PVA_OpensSlowly">
      <summary>The physical view may open slowly. Slow in this sense means anything longer than approximately two seconds. The time to consider starts when the editor is created and ends when the UI thread is no longer blocked. If the editor takes longer than two seconds to load its file or fully render its content, but that activity takes place on a background thread and does not block the UI thread, the non-blocking activity does not need to be considered when assessing slowness.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPHYSICALVIEWATTRIBUTES.PVA_SupportsPreview">
      <summary>The physical view supports being hosted in a preview tab (that is, it is a document window, not a tool window, a modal dialog, and so on).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS">
      <summary>Specifies the upgrade process of a flavored project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS.VSPUVF_PROJECT_DEPRECATED">
      <summary>No upgrade occurs because the version of the project is no longer supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS.VSPUVF_PROJECT_INCOMPATIBLE">
      <summary>No upgrade occurs because the version of the project is incompatible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS.VSPUVF_PROJECT_NOREPAIR">
      <summary>No upgrade occurs because the project is already up to date.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS.VSPUVF_PROJECT_ONEWAYUPGRADE">
      <summary>A full upgrade occurs that makes the project incompatible with the previous version of the product.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS.VSPUVF_PROJECT_SAFEREPAIR">
      <summary>The upgrade is not a real full upgrade but merely a repair to make the project asset compatible without the risk of issues being encountered by the previous versions of the product.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS.VSPUVF_PROJECT_UNSAFEREPAIR">
      <summary>The upgrade is not a full upgrade, but also has a risk of issues being encountered by the newer or previous version of the product (for example, if a newer dependent SDK is not currently installed).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROFILERLAUNCHOPTS">
      <summary>Specifies the profiler launch options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROFILERLAUNCHOPTS.VSPLO_NOPROFILE">
      <summary>Launch the profiler but do not collect profiling information for this target.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE">
      <summary>Specifies the set of output types that a project system can return when the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID5.VSHPROPID_OutputType" /> hierarchy property is queried on its <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE.VSPROJ_OUTPUTTYPE_APPCONTAINEREXE">
      <summary>An application container executable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE.VSPROJ_OUTPUTTYPE_EXE">
      <summary>A command line executable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE.VSPROJ_OUTPUTTYPE_LIBRARY">
      <summary>Any non-executable assembly (or .DLL for C++) that is not a WinMD output.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE.VSPROJ_OUTPUTTYPE_NONE">
      <summary>No project output type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE.VSPROJ_OUTPUTTYPE_WINEXE">
      <summary>A Windows executable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE.VSPROJ_OUTPUTTYPE_WINMDOBJ">
      <summary>A WinMD object.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROJTARGETRUNTIME">
      <summary>Specifies the project’s target runtime type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJTARGETRUNTIME.VSPROJ_TARGETRUNTIME_APPHOST">
      <summary>The target runtime is JavaScript.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJTARGETRUNTIME.VSPROJ_TARGETRUNTIME_MANAGED">
      <summary>The target runtime is the .NET Common Language Runtime.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJTARGETRUNTIME.VSPROJ_TARGETRUNTIME_NATIVE">
      <summary>The target runtime is native code.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5">
      <summary>Identifies property settings for a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_FaultedProjectCount">
      <summary>The number of faulted projects in the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_FIRST5">
      <summary>Specifies first VSPROPID_.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_IsOpeningProjectUserInitiated">
      <summary>Indicates that a project load/reload is in flight when receiving the solution load event OnAfterOpenProject. This property can be used to distinguish between a user loaded project (e.g. User reloaded or Add existing/new project) as opposed to a project that is being loaded in the background via the Asynchronous Solution Load feature. Using the fAdded flag from OnAfterOpenProject does not distinguish these two conditions. fAdded indicates only whether or not a project was loaded before or after the OnAfterOpenSolution event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_ProjectFaultResolutionContext">
      <summary>The IUnknown of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBag" /> that represents the current project fault resolution context. This property is read only (but the returned property bag is mutable). This property is only non-null if the user has just performed a gesture that requires a batch of faulted projects to be resolved. In this case, before invoking <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFaultResolver.ResolveFault(System.Boolean@)" /> for the first time, a new empty property bag is created and assigned to this property, and the property remains that way for all calls to <see cref="ResolveFault" /> that logically belong to that gesture. After the last call to <see cref="ResolveFault" />, the property is set back to null. Therefore, arbitrary data can be preserved and passed between <see cref="ResolveFault" /> calls in a single gesture. Typically, this is used when fault resolution requires some modal UI prompt, and that provides a "Don't ask me for the remaining projects" flag. This flag can be stored in the property bag along with user's input, and queried on further calls to <see cref="ResolveFault" /> to suppress the UI and apply the same choice to all projects. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFaultResolver" /> for more information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_SolutionFileExt">
      <summary>The solution file extension (default - ".sln").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_SolutionViewModel">
      <summary>The <see cref="IUnknown" /> of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource" /> that contains the view model for some solution properties. This property is primarily used by solution navigator.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_UserOptsFileExt">
      <summary>The solution options file extension (default - ".suo").</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSQUERYFLAVORREFERENCESCONTEXT">
      <summary>Describes the context when querying <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferences3" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSQUERYFLAVORREFERENCESCONTEXT.VSQUERYFLAVORREFERENCESCONTEXT_AddReference">
      <summary>Indicates the project system is attempting to add a new project reference. Normally this happens when a user attempts to add a new project reference through the Reference Manager dialog. The flavor can deny the project reference and show the proper error dialog to prompt the user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSQUERYFLAVORREFERENCESCONTEXT.VSQUERYFLAVORREFERENCESCONTEXT_LoadReference">
      <summary>Indicates the project system is loading the references, which happens when loading a project. As the project is not loaded yet, if the flavor denies the project reference, the project will fail to load. Therefore the flavor should allow any project reference for this context, in order to unblock project loading. The flavor can deny the invalid project reference later when the context is VSQUERYFLAVORREFERENCESCONTEXT.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSQUERYFLAVORREFERENCESCONTEXT.VSQUERYFLAVORREFERENCESCONTEXT_RefreshReference">
      <summary>Indicates the project system is attempting to refresh an existing project reference. This can occur in several scenarios. For example, when the project is first loaded, the project reference is unresolved, so the project system needs to refresh the reference to get it resolved. Additionally, when the reference project is changed, this flavored project also needs to refresh its project reference. The flavor should suppress any UI for this context to avoid confusing the user; instead the flavor can set a proper error message in the output parameter <paramref name="pbstreReason" /> to show the error message in the Error List View.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEDIRECTORYFLAGS2">
      <summary>Specifies the flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnQueryRemoveDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEDIRECTORYFLAGS2.VSQUERYREMOVEDIRECTORYFLAGS_IsRemovedFromProjectOnly">
      <summary>This flag distinguishes two operations: "Remove From Project" and "Delete". If this flag is set, the directory is removed from project, but still exists on disk.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEFILEFLAGS2">
      <summary>Specifies the flags associated with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnQueryRemoveFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEFILEFLAGS2.VSQUERYREMOVEFILEFLAGS_IsRemovedFromProjectOnly">
      <summary>This flag distinguishes two operations: "Remove From Project" and "Delete". If this flag is set, the file is removed from the project, but still exists on disk.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB2">
      <summary>Specifies information about a document in the running document table (RDT).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB2.RDTA_DocDataIsNotReadOnly">
      <summary>The data of the document in the RDT is readable and writable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB2.RDTA_DocDataIsReadOnly">
      <summary>The data of the document in the RDT is read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB2.RDTA_NOTIFYDOCCHANGEDEXMASK">
      <summary>A mask for the flags passed to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.NotifyDocumentChangedEx(System.UInt32,System.UInt32)" /> method.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS3">
      <summary>Specifies additional save options for a document in the running document table (RDT).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS3.RDTSAVEOPT_SilentSave">
      <summary>Instructs the RDT to pass along a request to make the save silent (that is, no UI prompts). The call might fail with this flag if a silent save is not possible.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATION">
      <summary>Specifies the operation to be applied to a reference by a client.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATION.VSREFERENCECHANGEOPERATION_ADD">
      <summary>The reference is added.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATION.VSREFERENCECHANGEOPERATION_REMOVE">
      <summary>The reference is removed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATIONRESULT">
      <summary>Specifies the result of applying a change to a reference by the client.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATIONRESULT.VSREFERENCECHANGEOPERATIONRESULT_ALLOW">
      <summary>The change was allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATIONRESULT.VSREFERENCECHANGEOPERATIONRESULT_DENY">
      <summary>The change was denied.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCEQUERYRESULT">
      <summary>Specifies the result of a reference query.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCEQUERYRESULT.REFERENCE_ALLOW">
      <summary>The reference is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCEQUERYRESULT.REFERENCE_DENY">
      <summary>The reference is not allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCEQUERYRESULT.REFERENCE_UNKNOWN">
      <summary>The system cannot determine if the reference is allowed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEDIRECTORYFLAGS2">
      <summary>Specifies the flags used by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnAfterRemoveDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEDIRECTORYFLAGS2.VSREMOVEDIRECTORYFLAGS_IsRemovedFromProjectOnly">
      <summary>This flag distinguishes two operations: "Remove From Project" and "Delete". If this flag is set, the directory is removed from the project, but still exists on disk.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEFILEFLAGS2">
      <summary>Specifies the flags used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnAfterRemoveFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEFILEFLAGS2.VSREMOVEFILEFLAGS_IsRemovedFromProjectOnly">
      <summary>This flag distinguishes two operations: "Remove From Project" and "Delete". If this flag is set, the file is removed from the project, but still exists on disk.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSDKPROVIDERTAB">
      <summary>Specifies the set of tabs to show. This is the set used in the <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.Tabs" /> property of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSDKPROVIDERTAB.TAB_SDK_ALL">
      <summary>Show both standard .NET Framework and extensions framework tabs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSDKPROVIDERTAB.TAB_SDK_EXTENSIONS">
      <summary>Show only the tabs that are part of the framework extensions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSDKPROVIDERTAB.TAB_SDK_PLATFORM">
      <summary>Show only the tabs that are part of the standard .NET Framework contents.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY">
      <summary>Provides an enumeration of keyboard keys (enter, navigation arrows, page up/page down) that are forwarded by the common search control to your <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch" /> implementation (through a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch.OnNavigationKeyDown(System.UInt32,System.UInt32)" />). You can then intercept these key presses and provide actions specific to your window (for example, select the previous or next search result, execute the currently-selected result, and so on).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY.SNK_DOWN">
      <summary>The down arrow key was pressed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY.SNK_END">
      <summary>The End key was pressed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY.SNK_ENTER">
      <summary>The Enter key was pressed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY.SNK_HOME">
      <summary>The Home key was pressed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY.SNK_PAGEDOWN">
      <summary>The Page Down key was pressed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY.SNK_PAGEUP">
      <summary>The Page Up key was pressed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY.SNK_UP">
      <summary>The up arrow was pressed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPARSEERROR">
      <summary>Specifies the possible bit field values for the search parser errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPARSEERROR.SPE_EMPTYFILTERFIELD">
      <summary>An empty filter field occurred in the token.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPARSEERROR.SPE_EMPTYFILTERVALUE">
      <summary>An empty filter value occurred in the token.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPARSEERROR.SPE_INVALIDESCAPE">
      <summary>An invalid escape character sequence occurred (only \\, \", \:, and \= are accepted).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPARSEERROR.SPE_NONE">
      <summary>No error occurred parsing the string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPARSEERROR.SPE_UNMATCHEDQUOTES">
      <summary>Unmatched or unclosed quotes occurred around a search token.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT">
      <summary>Specifies the search control’s placement in the window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT.SP_CUSTOM">
      <summary>The window has a search host associated with it, but the search control does not have placement in the shell-owned frame area.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT.SP_DYNAMIC">
      <summary>The search control is placed in the shell-owned frame area, and the shell dynamically adjusts the control's location and size depending on the number of toolbars, window size, and so on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT.SP_NONE">
      <summary>The search is not set up for the window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHPLACEMENT.SP_STRETCH">
      <summary>The search control is placed in the shell-owned frame area, below the top toolbars (if any), on its own row, and stretching the frame width.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS">
      <summary>Specifies the status for a search operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS.STS_COMPLETED">
      <summary>The search has completed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS.STS_CREATED">
      <summary>The task was created but the search was not started yet.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS.STS_ERROR">
      <summary>The search has encountered errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS.STS_STARTED">
      <summary>The search was started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS.STS_STOPPED">
      <summary>The search has been stopped or interrupted.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5">
      <summary>Specifies additional shell property settings for the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_AppBrandName">
      <summary>BSTR. The localized full brand name of the application, including SKU information. For example: "Microsoft Visual Studio Professional 2012 RC" or "Microsoft Visual Studio Express 2012 RC for Windows 8".BSTR. A short version of VSSPROPID_AppBrandName, less than 32 chars. For example: "VS Pro 2012 RC" or "VS Express 2012 RC for Win8" or "VSX 2012 RC for Web".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_AppShortBrandName">
      <summary>BSTR. A short version of VSSPROPID_AppBrandName, less than 32 chars. For example: "VS Pro 2012 RC" or "VS Express 2012 RC for Win8" or "VSX 2012 RC for Web".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_EnablePreviewTab">
      <summary>Indicates if the preview tab enabled (default true).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_FIRST5">
      <summary>Flag indicating the first property identifier in this group of identifiers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_LastActiveInputTick">
      <summary>The last recorded tick value for a user input message. In order to avoid noise, property change events are not raised for VSSPROPID_LastActiveInputTick.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_NativeScrollbarThemeModePropName">
      <summary>BSTR, Read-only. The string to be used with ::SetProp/::RemoveProp to control theming of native scrollbars. When calling ::SetProp, the property value provided should be one of the values in the __VSNativeScrollbarThemeMode enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_PreviewFileSizeLimit">
      <summary>UI8, Read-Only. Used when implementing single-click preview. This the maximum size (in bytes) of a file that should be single-click previewed; files larger than this limit should not be single-click previewed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_ProvisionalDelayMilliseconds">
      <summary>The number of milliseconds to wait before previewing a selected item. Used when implementing single-click preview. This property is read only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_ReleaseDescription">
      <summary>The branding for this release (for example, CTP, Beta, RTM, and so on). This property is read only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_ReleaseVersion">
      <summary>The build version of the release and the branch, machine, and user information used to build it (for example, "10.0.30319.01 RTMRel" or "10.0.30128.1 BRANCHNAME(COMPUTERNAME-USERNAME)"). This is the same as the release string shown in Help/About.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID5.VSSPROPID_SKUInfo">
      <summary>BSTR. A localized text describing the current SKU (name, year, release type, etc). For example: "Ultimate 2012 RC" or "Express 2012 RC for Web".</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS">
      <summary>Specifies the task’s continuation options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_AttachedToParent">
      <summary>The task is attached to a parent in the task hierarchy. The parent task is not marked as completed until this child task is completed as well.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_Default">
      <summary>The same as VSTCO_NotOnFaulted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_DenyChildAttach">
      <summary>An <see cref="T:System.InvalidOperationException" /> is thrown if an attempt is made to attach a child task to the created task.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_ExecuteSynchronously">
      <summary>The continuation task should be executed synchronously. With this option specified, the continuation is run on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation is run on the thread creating the continuation. Only very short-running continuations should be executed synchronously.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_IndependentlyCanceled">
      <summary>The task can be canceled independently of any other task.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_LazyCancelation">
      <summary>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_LongRunning">
      <summary>The task is a long-running, course-grained operation. It provides a hint to the task library that oversubscription may be warranted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_None">
      <summary>Default = "Continue on any, no task options, run asynchronously" Specifies that the default behavior should be used. Continuations, by default, are scheduled when the antecedent task completes, regardless of the task's final state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_NotCancelable">
      <summary>The continuation task cannot be canceled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_NotOnCanceled">
      <summary>The continuation task should not be scheduled if its antecedent was canceled. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_NotOnFaulted">
      <summary>The continuation task should not be scheduled if its antecedent threw an unhandled exception. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_NotOnRanToCompletion">
      <summary>The continuation task should not be scheduled if its antecedent ran to completion. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_OnlyOnCanceled">
      <summary>The continuation task should be scheduled only if its antecedent was canceled. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_OnlyOnFaulted">
      <summary>The continuation task should be scheduled only if its antecedent threw an unhandled exception. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_OnlyOnRanToCompletion">
      <summary>The continuation task should be scheduled only if its antecedent ran to completion. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS.VSTCO_PreferFairness">
      <summary>A hint to the task library to schedule a task in as fair a manner as possible, meaning that tasks scheduled sooner are more likely to be run sooner, and tasks scheduled later are more likely to be run later.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS">
      <summary>Specifies the options for creating a task.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS.VSTCRO_AttachedToParent">
      <summary>Creates the task as attached to the currently-running task. The parent task is not marked as completed until this child task is completed as well.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS.VSTCRO_DenyChildAttach">
      <summary>A child task cannot be attached to the task.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS.VSTCRO_LongRunning">
      <summary>The task will be a long-running, coarse-grained operation. It provides a hint to the task library that oversubscription may be warranted. For background tasks, this member causes the task to run its own thread instead of the thread pool.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS.VSTCRO_None">
      <summary>The default behavior should be used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS.VSTCRO_NotCancelable">
      <summary>The task cannot be canceled. Users will get an exception if they try to cancel the task.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS.VSTCRO_PreferFairness">
      <summary>A hint to the task library to schedule a task in as fair a manner as possible, meaning that tasks scheduled sooner will be more likely to be run sooner, and tasks scheduled later will be more likely to be run later.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT">
      <summary>Specifies how the task is run.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT.VSTC_BACKGROUNDTHREAD">
      <summary>Runs the task on the background thread pool with normal priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT.VSTC_BACKGROUNDTHREAD_LOW_IO_PRIORITY">
      <summary>Runs the task on the background thread pool and sets the background mode on the thread while the task is running. This is useful for I/O-heavy background tasks that are not time critical.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT.VSTC_CURRENTCONTEXT">
      <summary>Runs the task on the current context (that is, the UI thread or the background thread).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT.VSTC_UITHREAD_BACKGROUND_PRIORITY">
      <summary>Runs the task on the UI thread using background priority (that is, below user input).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT.VSTC_UITHREAD_IDLE_PRIORITY">
      <summary>Runs the task on the UI thread when Visual Studio is idle.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT.VSTC_UITHREAD_NORMAL_PRIORITY">
      <summary>Run the task on the UI thread with normal priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT.VSTC_UITHREAD_SEND">
      <summary>Run the task on the UI thread with the highest priority. This may cause reentrancy</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKWAITOPTIONS">
      <summary>Specifies the options for task wait operations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKWAITOPTIONS.VSTWO_AbortOnTaskCancellation">
      <summary>The task must return from a wait immediately if the task is canceled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKWAITOPTIONS.VSTWO_None">
      <summary>The default behavior should be used.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions">
      <summary>Specifies the deployment options for a Windows Store app.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions.ACDO_ForceCleanLayout">
      <summary>Always do a clean layout update (that is, remove all old files and copy new files).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions.ACDO_ForceRegistration">
      <summary>Always do a clean registration (unregister and register).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions.ACDO_NetworkLoopbackEnable">
      <summary>The network loopback state for the application is enabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions.ACDO_RefreshLayoutOnly">
      <summary>A fast refresh deployment of a JavaScript application host debuggee. Will not terminate debuggee or force a clean layout/registration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions.ACDO_SetNetworkLoopback">
      <summary>Force deployment to set a network loopback exception for the application.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._AppContainerDeployOptions.ACDO_UseUniqueDeployPackageIdentity">
      <summary>Allow changing the package identity during deployment to ensure no collisions occur with already installed instances.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4">
      <summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4.DLO_AppPackageDebug">
      <summary>The debugger should launch and/or register for debugging of a Windows 8 app container application. When using this option, <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo" /> should be supplied, along with <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrExe" />, launch flags, remote connection information and engine information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4.DLO_AttachToSuspendedLaunchProcess">
      <summary>The debugger should attach to the specified process, where the specified process is a newly-launched process that was launched using the CREATE_SUSPENDED flag to the Win32 CreateProcess API. This allows the debugger to act as though it launched the process, even though the process was actually started using some other mechanism.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._DevLicenseCheckOptions">
      <summary>OBSOLETE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._DevLicenseCheckOptions.DLCO_SilenCheckOnly">
      <summary>OBSOLETE.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS3">
      <summary>Specifies additional options for a document in the running document table (RDT).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS3.RDT_DontPollForState">
      <summary>Do not poll for changes to the document's dirty or read-only state. The document owner takes responsibility for explicitly updating the state using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.UpdateDirtyState(System.UInt32)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.UpdateReadOnlyState(System.UInt32)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab">
      <summary>Specifies the app manifest designer tab to be opened by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService.OpenAppxManifestDesigner(Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab.AppxManifestDesignerTab_Application">
      <summary>Opens the Application UI tab in the app manifest designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab.AppxManifestDesignerTab_Capabilities">
      <summary>Opens the Capabilities tab in the app manifest designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab.AppxManifestDesignerTab_ContentURIs">
      <summary>Opens the Content URIs tab in the app manifest designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab.AppxManifestDesignerTab_Current">
      <summary>Opens whatever tab is currently selected, that is, no change occurs to the tab selection (default).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab.AppxManifestDesignerTab_Declarations">
      <summary>Opens the Declarations tab of the app manifest designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab.AppxManifestDesignerTab_Packaging">
      <summary>Opens the Packaging tab of the app manifest designer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.BuildableProjectCfgOpts2">
      <summary>Specifies additional buildable project configuration options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.BuildableProjectCfgOpts2.Package">
      <summary>The build is to be a package build instead of a regular build. This member is used to create an app package for a Windows Store app.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_REMOTE_DISCOVERY_FLAGS">
      <summary>Specifies the flags used by the Remote Discovery dialog to find remote machines on a local subnet.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_REMOTE_DISCOVERY_FLAGS.DRD_NONE">
      <summary>No flags are specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_REMOTE_DISCOVERY_FLAGS.DRD_SHOW_MANUAL">
      <summary>When the Remote Discovery dialog is initiated from the global dropdown Start Debugging button, setting this member specifies that the dialog shows additional fields that allows the manual entry of a remote machine’s address if automatic discovery does not find it.When the Remote Discovery dialog is initiated from the project’s property page, the property page already has the ability to configure the remote machine’s address manually. Therefore this member is not set, hiding the manual configuration option in the dialog.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.DevLicenseStatus">
      <summary>OBSOLETE. Specifies the status of the developer’s license.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DevLicenseStatus.DLS_DevLicenseExpired">
      <summary>The developer’s license has expired.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DevLicenseStatus.DLS_DevLicenseValid">
      <summary>The developer’s license is valid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.DevLicenseStatus.DLS_NoDevLicense">
      <summary>There is not developer’s license.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IAppxBaseExtension">
      <summary>Provides Share and File Open Picker extensions access to additional app manifest data elements.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxBaseExtension.AddSupportedFileType(System.String)">
      <summary>Adds the specified supported file type to the extension.</summary>
      <param name="supportedFileType">[in] The supported file type to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxBaseExtension.HasSupportedFileType(System.String)">
      <summary>Determines whether the extension supports the specified file type.</summary>
      <returns>true if the file type is supported.</returns>
      <param name="supportedFileType">[in] The file type to be checked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxBaseExtension.RemoveSupportedFileType(System.String)">
      <summary>Removes the specified supported file type from the extension.</summary>
      <param name="supportedFileType">[in] The file type to be removed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxBaseExtension.SupportedFileTypes">
      <summary>Gets the list of supported file types for this extension.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxBaseExtension.SupportsAnyFileType">
      <summary>Gets or sets whether any file type is supported by the extension.</summary>
      <returns>true if any file type is supported.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension">
      <summary>Provides File Open Picker extensions access to additional app manifest data elements.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension.AddSupportedFileType(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension.HasSupportedFileType(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension.RemoveSupportedFileType(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension.SupportedFileTypes"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension.SupportsAnyFileType"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService">
      <summary>Provides programmatic access to a project's app manifest file. This is a global service implemented by the app Manifest designer package.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService.OpenAppxManifestDesigner(Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab)">
      <summary>Provides programmatic access to a project's app manifest file by openingthe Manifest Designer and optionally opening the specified Manifest Designer Tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="documentHandle">[in] The document handle. Can be either <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> or EnvDTE.Project.</param>
      <param name="tab">[in, optional] Specifies which tab has focus after opening.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService.OpenAppxManifestDocument(System.Object,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder@,Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument@)">
      <summary>Provides programmatic access to a project's app manifest file by opening a DocData object provided by the Manifest Designer, ensures it is registered in the running document table (RDT), and returns a document handle object that implements two interfaces: IVsDocumentLockHolder and IVsInvisibleEditor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="project">[in] The DocData object to be opened. This parameter can be either <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> or EnvDTE.Project.</param>
      <param name="documentHandle">[out] The document handle.</param>
      <param name="appxManifestDocument">[out] The app manifest object model.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument">
      <summary>Provides an object model for the app manifest of the current project. It is implemented by the DocData object of the app manifest designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.AddCapability(System.String)">
      <summary>Adds the specified capability to the manifest if it is not already present.</summary>
      <param name="capabilityId">[in] The capability to add to the manifest.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.ApplicationStartPage">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.Capabilities">
      <summary>Gets a list of all capabilities currently declared in the manifest, which may include both standard capabilities and device capabilities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.GetFileOpenPickerExtension(System.String@,System.String@,System.String@,System.String@,Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension@)">
      <summary>Gets the File Open Picker extension.</summary>
      <returns>true if there is a File Open Picker extension associated with the manifest.</returns>
      <param name="executable">[out] The executable field of the app manifest.</param>
      <param name="entryPoint">[out] The entryPoint field of the app manifest.</param>
      <param name="runtimeType">[out] The runtimeType field of the app manifest.</param>
      <param name="startPage">[out] The startPage field of the app manifest.</param>
      <param name="fileOpenPickerExtensionData">[out] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension" /> object that allows mutation of the manifest's File Open Picker extension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.GetSearchExtension(System.String@,System.String@,System.String@,System.String@)">
      <summary>Gets the Search extension.</summary>
      <returns>true if there is a Search extension associated with the manifest.</returns>
      <param name="executable">[out] The executable field of the app manifest.</param>
      <param name="entryPoint">[out] The entryPoint field of the app manifest.</param>
      <param name="runtimeType">[out] The runtimeType field of the app manifest.</param>
      <param name="startPage">[out] The startPage field of the app manifest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.GetShareExtension(System.String@,System.String@,System.String@,System.String@,Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension@)">
      <summary>Gets the Share extension.</summary>
      <returns>true if there is a Share extension associated with the manifest.</returns>
      <param name="executable">[out] The executable field of the App manifest.</param>
      <param name="entryPoint">[out] The entryPoint field of the app manifest.</param>
      <param name="runtimeType">[out] ] The runtimeType field of the app manifest.</param>
      <param name="startPage">[out] The startPage field of the app manifest.</param>
      <param name="shareExtensionData">[out] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension" /> object that allows mutation of the manifest's File Open Picker extension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.HasCapability(System.String)">
      <summary>Detects if the specified capability is currently declared in the manifest.</summary>
      <returns>true if the given capability is currently declared in the manifest.</returns>
      <param name="capabilityId">[in] The identifier of the capability.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.MapCapabilitySid(System.String,System.String@,System.String@)">
      <summary>Produces a capability identifier and a localized name from the specified capability security identifier (SID), such as "S-1-15-3-1" or "S-1-15-3-BFA794E4-F964-4FDB-90F6-51056BFE4B44".</summary>
      <param name="sid">[in] The capability security identifier.</param>
      <param name="capabilityId">[out] The capability identifier.</param>
      <param name="localizedCapabilityName">[out] The localized capability name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.RemoveCapability(System.String)">
      <summary>Removes the specified capability from the manifest if it is currently present.</summary>
      <param name="capabilityId">[in] The identifier of the capability to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.RemoveFileOpenPickerExtension">
      <summary>Removes the File Open Picker extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.RemoveSearchExtension">
      <summary>Removes the Search extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.RemoveShareExtension">
      <summary>Removes the share extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.SetFileOpenPickerExtension(System.String,System.String,System.String,System.String)">
      <summary>Sets the File Open Picker extension.</summary>
      <returns>The File Open Picker extension object that provides access to additional data elements in the manifest.</returns>
      <param name="executable">[in] The executable field of the app manifest. This parameter is optional.</param>
      <param name="entryPoint">[in] The entryPoint field of the app manifest. This parameter is optional.</param>
      <param name="runtimeType">[in] The runtimeType field of the app manifest. This parameter is optional.</param>
      <param name="startPage">[in] The startPage field of the app manifest. This parameter is optional.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.SetSearchExtension(System.String,System.String,System.String,System.String)">
      <summary>Sets the Search extension.</summary>
      <param name="executable">[in] The executable field of the app manifest. This parameter is optional.</param>
      <param name="entryPoint">[in] The entryPoint field of the app manifest. This parameter is optional.</param>
      <param name="runtimeType">[in] The runtimeType field of the app manifest. This parameter is optional.</param>
      <param name="startPage">[in] The startPage field of the app manifest. This parameter is optional.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.SetShareExtension(System.String,System.String,System.String,System.String)">
      <summary>Sets the Share extension.</summary>
      <returns>The Share extension object that provides access to additional data elements in the manifest.</returns>
      <param name="executable">[in] The executable field of the app manifest. This parameter is optional.</param>
      <param name="entryPoint">[in] The entryPoint field of the app manifest. This parameter is optional.</param>
      <param name="runtimeType">[in] The runtimeType field of the app manifest. This parameter is optional.</param>
      <param name="startPage">[in] The startPage field of the app manifest. This parameter is optional.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument.StandardCapabilities">
      <summary>Gets the fixed list of standard capabilities.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension">
      <summary>Provides Share extensions access to additional app manifest data elements.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.AddDataFormat(System.String)">
      <summary>Adds the specified data format to the Share extension.</summary>
      <param name="dataFormat">[in] The data format to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.AddSupportedFileType(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.DataFormats">
      <summary>Gets a list of data formats supported by the Share extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.HasDataFormat(System.String)">
      <summary>Determines whether the Share extension contains the specified data format.</summary>
      <returns>true if the Share extension contains the data format.</returns>
      <param name="dataFormat">[in] The data format to be checked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.HasSupportedFileType(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.RemoveDataFormat(System.String)">
      <summary>Removes the specified data format from the Share extension.</summary>
      <param name="dataFormat">[in] The data format to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.RemoveSupportedFileType(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.SupportedFileTypes"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension.SupportsAnyFileType"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos">
      <summary>Enumerator for items in the profiler target information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos.Clone(Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos@)">
      <summary>Creates another instance of this <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos" /> interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Reference to the cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProfilerTargetInfo[],System.UInt32@)">
      <summary>Retrieves the next group of object interfaces (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerTargetInfo" />) representing profiler target information items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of interfaces to return, or zero to indicate a request for all of the objects.</param>
      <param name="rgelt">[out] An array of IVsProfilerTargetInfo interfaces representing profiler target information items. Contains <paramref name="pceltFetched" /> objects.</param>
      <param name="pceltFetched">[out] Actual number of interfaces retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos.Reset">
      <summary>Returns the enumerator to its initial state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos.Skip(System.UInt32)">
      <summary>Skip over a specified number of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerTargetInfo" /> interfaces representing profiler target information items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of interfaces to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppCompat">
      <summary>The IVsAppCompat interface is typically used to break compatibility of projects with previous versions of the application. This interface is available via the SVsSolution service.For more information, see Making Custom Projects Version-Aware.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppCompat.AskForUserConsentToBreakAssetCompat(System.Array)">
      <summary>Shows a dialog box that asks for user consent to break the compatibility of projects in a list. If the user does not agree to continue, this method throws a <see cref="T:System.Runtime.InteropServices.COMException" /> with an ErrorCode of OLE_E_PROMPTSAVECANCELLED.</summary>
      <param name="sarrProjectHierarchies">The list of projects whose compatibility would be broken by adding a feature.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppCompat.BreakAssetCompatibility(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppCompat.GetCurrentDesignTimeCompatVersion(System.String@)">
      <summary>Gets the current design time-compatibility version for this version of Visual Studio.</summary>
      <param name="pbstrCurrentDesignTimeCompatVersion">[out] The current design-time compatibility version (for example, “11.0”).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing">
      <summary>Provides base support for dealing with developer licensing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing.AcquireDeveloperLicense(System.String@)">
      <summary>Acquires the developer license on the specified machine.</summary>
      <returns>The expiration date of the developer license.</returns>
      <param name="pbstrMachine">[in] The machine for which the license is acquired. If this parameter is null or empty, this method is applied to the local machine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing.CheckDeveloperLicense(System.String@)">
      <summary>Determines whether the specified machine has a developer license.</summary>
      <returns>The expiration date of the developer license.</returns>
      <param name="pbstrMachine">[in] The machine for which the license is queried. If this parameter is null or empty, this method is applied to the local machine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing.RemoveDeveloperLicense(System.String@)">
      <summary>Removes the developer license from the specified machine.</summary>
      <param name="pbstrMachine">[in] The machine from which the license is to be removed. If this parameter is null or empty, this method is applied to the local machine.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy">
      <summary>Deploys the app container application.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.AdviseAppContainerDeployEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents)">
      <summary>Enables a client to be notified of app container deployment events.</summary>
      <returns>A cookie associated with the given <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents" /> interface.</returns>
      <param name="sink">[in] The event sink to call when an app container deployment event occurs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.StartDeployAsync(System.UInt32,System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback)">
      <summary>Initiates deployment of the app container application on the local machine. It creates a "layout folder" containing the app files as defined in the package recipe file and registers the application with Windows package manager. After successfully executing of this process, the application is ready to be launched on the local box or on the simulator.</summary>
      <returns>The app container application deployed on the local machine.</returns>
      <param name="deployFlags">[in] The deployment options for this instance of the app container application.</param>
      <param name="packageContentsRecipe">[in] The package recipe file that defines the package contents.</param>
      <param name="layoutLocation">[in] The location where the app container application is deployed.</param>
      <param name="projectUniqueName">[in] The unique name of the project.</param>
      <param name="deployCallback">[in] The callback routine that is to be notified when events occur.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.StartRemoteDeployAsync(System.UInt32,System.Object,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback)">
      <summary>Initiate deployment of the app container application on a remote machine.</summary>
      <returns>The app container application deployed on the remote machine.</returns>
      <param name="deployFlags">[in] The deployment options for this instance of the app container application.</param>
      <param name="deployConnection">[in] The protocol used to interact with the remote machine.</param>
      <param name="packageContentsRecipe">[in] The package recipe file that defines the package contents.</param>
      <param name="projectUniqueName">[in] The unique name of the project.</param>
      <param name="deployCallback">[in] The callback routine that is to be notified when events occur.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.UnadviseAppContainerDeployEvents(System.UInt32)">
      <summary>Disables clients from receiving notifications of app container deployment events.</summary>
      <param name="cookie">[in] The value that is associated with the instance of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents" /> object that was returned from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.AdviseAppContainerDeployEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback">
      <summary>Provides information about and defines callback methods for monitoring an app container project deployment operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback.OnEndDeploy(System.Boolean,System.String,System.String)">
      <summary>Indicates that the asynchronous deployment process has finished.</summary>
      <param name="successful">[in] Indicates whether the asynchronous deployment process succeeded or failed. This parameter is true if the process succeeded.</param>
      <param name="deployedPackageMoniker">[in] The moniker of the deployed package.</param>
      <param name="deployedAppUserModelID">[in] The deployed application’s user model identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback.OutputMessage(System.String)">
      <summary>Logs errors and messages.</summary>
      <param name="message">[in] The error or message to be logged.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents">
      <summary>Handles events that occur before and after the app container deployment process.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents.OnDeployEnd(System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult)">
      <summary>Called after the application deployment operation is complete. This event is fired after <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback.OnEndDeploy(System.Boolean,System.String,System.String)" /> is called.</summary>
      <param name="projectUniqueName">[in] The unique name of the project.</param>
      <param name="result">[in] The results of the deployment operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents.OnDeployStart(System.String)">
      <summary>Called before the application deployment begins. This event is only fired if no one canceled the deployment operation in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents.QueryDeployStart(System.String,System.Boolean@,System.Boolean@,System.String@)" />.</summary>
      <param name="projectUniqueName">[in] The unique name of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents.QueryDeployStart(System.String,System.Boolean@,System.Boolean@,System.String@)">
      <summary>Called before the application deployment begins. This event gives components the opportunity to stop the deployment process or force a local machine deployment.</summary>
      <param name="projectUniqueName">[in] The unique name of the project.</param>
      <param name="fForceLocalDeployment">[out] Indicates whether to force local deployment. If true, local deployment is forced.</param>
      <param name="fCancel">[out] Indicates whether the deployment is canceled. If true, the deployment is canceled.</param>
      <param name="cancelReason">[out] The reason the deployment was canceled.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployOperation">
      <summary>Provides control while the app container application is being deployed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployOperation.GetDeployResult">
      <summary>Gets detailed results of the deployment operation.</summary>
      <returns>The results of the application deployment operation.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployOperation.StopDeploy(System.Boolean)">
      <summary>Cancels the deployment operation. Calling this method causes the deployment process to be terminated as soon as possible.</summary>
      <param name="fSync">[in] Indicates whether the cancelation is asynchronous. If this parameter is set to false, the cancelation is asynchronous and the caller must wait for an <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback.OnEndDeploy(System.Boolean,System.String,System.String)" /> notification. If this parameter is set to true, this method does not return until the cancelation is complete.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult">
      <summary>Provides detailed results of the app container application deployment operation.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.DeploySuccess">
      <summary>Gets whether the app container application deployment operation succeeded.</summary>
      <returns>true if the deployment operation was successful, or false if the deployment failed.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.FirstAppUserModelID">
      <summary>Gets the first entry point in the manifest.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.LayoutFolder">
      <summary>Gets the layout folder where the app container application was installed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.PackageFullName">
      <summary>Gets the full package name of the installed application.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReference">
      <summary>Provides information about Visual Studio assembly references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReference.AlreadyReferenced"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReference.FullPath"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReference.Name"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext">
      <summary>The context object used to initialize the assembly reference provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.AddReference(Microsoft.VisualStudio.Shell.Interop.IVsReference)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.AssemblySearchPaths">
      <summary>Gets or sets the paths to search for extension assemblies, which may include registry paths in the MSBuild-normal form.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.CreateReference"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.GetNoItemsMessageForTab(System.UInt32)">
      <summary>Retrieves the custom no items message for a particular tab.</summary>
      <returns>The custom no items message.</returns>
      <param name="etabId">[in] The set of tabs from which to get the no items message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.GetTabTitle(System.UInt32)">
      <summary>Retrieves the tab title for each tab.</summary>
      <returns>The tab title.</returns>
      <param name="etabId">[in] The set of tabs from which to get each tab title.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.IsImplicitlyReferenced">
      <summary>Gets or sets whether the assembly is referenced implicitly.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.ProviderGuid"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.ReferenceFilterPaths"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.References"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.RetargetingMessage">
      <summary>Gets or sets the message to display during retargeting.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.SetNoItemsMessageForTab(System.UInt32,System.String)">
      <summary>Sets the custom no items message for the specified tab.</summary>
      <param name="etabId">[in] The set of tabs in which to set the custom no items message.</param>
      <param name="bstrNoItemsMessage">[in] The custom no items message to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.SetTabTitle(System.UInt32,System.String)">
      <summary>Sets the tab title for each tab.</summary>
      <param name="etabId">[in] The set of tabs in which to set the tab title.</param>
      <param name="szTabTitle">[in] The text of the tab title.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.SupportsRetargeting">
      <summary>Gets or sets whether the assembly supports retargeting.</summary>
      <returns>true if the assembly supports retargeting.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.Tabs">
      <summary>Specifies the set of tabs to show. Defaults to all tabs.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAssemblyReferenceProviderContext.TargetFrameworkMoniker">
      <summary>Gets or sets the target framework moniker, for example ".NETFramework, version=4.5".</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreate">
      <summary>Creates projects asynchronously. This interface is implemented by project factories to support background solution load (BSL).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreate.CanCreateProjectAsynchronously(System.Guid@,System.String,System.UInt32)">
      <summary>Indicates if the project can be created asynchronously.</summary>
      <returns>true if the project can be created asynchronously.</returns>
      <param name="rguidProjectID">[in] GUID of the project in the solution file (same as what will be returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetGuidOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)" />).</param>
      <param name="filename">[in] Filename of the project.</param>
      <param name="flags">[in] Creation flags. Not used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreate.CreateProjectAsync(System.Guid@,System.String,System.String,System.String,System.UInt32)">
      <summary>Creates a project asynchronously.</summary>
      <returns>The task that identifies the project that was created.</returns>
      <param name="rguidProjectID">[in] GUID of the project in the solution file (the same as what is returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetGuidOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)" />).</param>
      <param name="filename">[in] Filename of the project. </param>
      <param name="location">[in] Location of the project.</param>
      <param name="pszName">[in] Project name.</param>
      <param name="flags">[in] Creation flags. Not used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreate.OnBeforeCreateProjectAsync(System.Guid@,System.String,System.String,System.String,System.UInt32)">
      <summary>Called if <paramref name="canOpenAsync" /> from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreate.CanCreateProjectAsynchronously(System.Guid@,System.String,System.UInt32)" /> is not VARIANT_FALSE and if the project has been successfully scheduled for background loading.</summary>
      <param name="rguidProjectID">[in] GUID of the project in the solution file (the same as what is returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetGuidOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)" />).</param>
      <param name="filename">[in] Filename of the project.</param>
      <param name="location">[in] Location of the project.</param>
      <param name="pszName">[in] Project name.</param>
      <param name="flags">[in] Creation flags. Not used.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreateUI">
      <summary>Notifies a client when the loading project reaches the provisioned state. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsynchronousProjectCreateUI.OnAfterProjectProvisioned(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Called when a project that supports Asynchronous Solution Load is loaded in the background.</summary>
      <param name="pHier">[in] The hierarchy in which the event occurred.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBackForwardNavigation2">
      <summary>Enables the window to navigate back and forward to saved navigation points.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBackForwardNavigation2.RequestAddNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Requests that a navigation point be added for the view's current location in the frame.</summary>
      <returns>true if the navigation item was successfully added.</returns>
      <param name="frame">Frame containing the navigation item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2">
      <summary>Provides a way to synchronize access to the default MSBuild build manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.AcquireBuildResources(Microsoft.VisualStudio.Shell.Interop.VSBUILDMANAGERRESOURCE,System.UInt32@)">
      <summary>Acquires the design-time build resource and/or the UI thread for a build, if they are available.</summary>
      <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
      <param name="fResources">[in] The type of resource to acquire.</param>
      <param name="phCookie">[out] A cookie that identifies the resource, and can be used to release the resource(s).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.BeginDesignTimeBuild">
      <summary>Signals that a modal, design-time build, such as reference resolution, is about to take place.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.ClaimUIThreadForBuild">
      <summary>Attempts to get the UI thread in order to start a build.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.DesignTimeBuildAvailable">
      <summary>Gets an event that is signaled whenever the design-time build resource is available.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.EndDesignTimeBuild">
      <summary>Signals that a modal, design-time build, such as reference resolution, should end.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.Escape(System.String,System.String@)">
      <summary>Prepares a string to be persisted within MSBuild without evaluation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszUnescapedValue">The unescaped value.</param>
      <param name="pbstrEscapedValue">[out] The escaped value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.GetCurrentBatchBuildId(System.UInt32@)">
      <summary>Returns the current batch build ID, or 0 if there is no batch build going on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBatchId">[out] The batch ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.GetSolutionConfiguration(System.Object,System.String@)">
      <summary>Gets the solution configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkRootProject">The IVsHierarchy project about to be built that will receive the returned solution configuration.</param>
      <param name="pbstrXmlFragment">[out] An XML fragment, interpreted as a string, that should be passed to MSBuild.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.RegisterLogger(System.Int32,System.Object)">
      <summary>Registers a logger for the submission.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="submissionId">The submission for which the logger should be registered.</param>
      <param name="punkLogger">The logger to register. The logger must implement <see cref="T:Microsoft.Build.Framework.ILogger" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.ReleaseBuildResources(System.UInt32)">
      <summary>Releases the resource(s) acquired with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.AcquireBuildResources(Microsoft.VisualStudio.Shell.Interop.VSBUILDMANAGERRESOURCE,System.UInt32@)" />.</summary>
      <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
      <param name="hCookie">[in] The cookie that identifies the resource(s) to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.ReleaseUIThreadForBuild">
      <summary>Releases a previously-claimed UI thread.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.UIThreadIsAvailableForBuild">
      <summary>Gets an event that is signaled whenever the UI thread is available for a build.</summary>
      <returns>The wait handle.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.Unescape(System.String,System.String@)">
      <summary>Restores a previously escaped string to its original value.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszEscapedValue">The escaped value.</param>
      <param name="pbstrUnescapedValue">[out] The unescaped value</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor2.UnregisterLoggers(System.Int32)">
      <summary>Unregisters all loggers for a given submission.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="submissionId">The submission ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComReference">
      <summary>Provides information about Visual Studio COM references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReference.AlreadyReferenced"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReference.FullPath"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReference.Guid">
      <summary>Gets or sets the GUID that identifies the COM reference.</summary>
      <returns>The GUID of the COM reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReference.Identity">
      <summary>Gets or sets the identity of the COM reference.</summary>
      <returns>The identity of the COM reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReference.MajorVersion">
      <summary>Gets or sets the major version number of the COM reference.</summary>
      <returns>The major version number of the COM reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReference.MinorVersion">
      <summary>Gets or sets the minor version number of the COM reference.</summary>
      <returns>The minor version number of the COM reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReference.Name"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsComReferenceProviderContext">
      <summary>The context object used to initialize the COM reference provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComReferenceProviderContext.AddReference(Microsoft.VisualStudio.Shell.Interop.IVsReference)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsComReferenceProviderContext.CreateReference"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReferenceProviderContext.ProviderGuid"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReferenceProviderContext.ReferenceFilterPaths"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsComReferenceProviderContext.References"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2">
      <summary>Enables storage of name/value pairs in an IDataObject. Multiple string maps with different names can exist in a single data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2.AdviseChanges(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapEvents,System.UInt32@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2.ClearMapCache(System.String)">
      <summary>Clears cached string map data for all data objects with the specified string map name.</summary>
      <param name="szStringMapName">String map name of the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2.CreateStringMap(Microsoft.VisualStudio.Shell.Interop.IVsStringMap@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2.ReadStringMap(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String,Microsoft.VisualStudio.Shell.Interop.IVsStringMap@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2.UnadviseChanges(System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataObjectStringMapManager2.WriteStringMap(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsStringMap)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger4">
      <summary>Provides additional access to the debugger. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsShellDebugger" /> (SID_SVsShellDebugger) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger4.EnumCurrentlyDebuggingProjects(Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies@)">
      <summary>Returns the set of projects that have been launched through a debugger launch (F5) and that the debugger is currently debugging.</summary>
      <param name="projects">The set of projects that have been launched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugger4.LaunchDebugTargets4(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4[],Microsoft.VisualStudio.Shell.Interop.VsDebugTargetProcessInfo[])">
      <summary>Launches the specified debug targets.</summary>
      <param name="DebugTargetCount">[in] Number of debug targets.</param>
      <param name="pDebugTargets">[in, size_is(DebugTargetCount)] List of debug targets.</param>
      <param name="pLaunchResults">[out, size_is(DebugTargetCount)] List of process identifiers (PIDs) and creation times for the debug targets. PIDs are only returned when DLO_CreateProcess/DLO_Custom and DLO_LaunchBrowser are specified when a new browser process is started (non-attach case).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugRemoteDiscoveryUI">
      <summary>Provides methods for discovery of Remote Debugging computers. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsDebugRemoteDiscoveryUI" /> (SID_SVsDebugRemoteDiscoveryUI) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugRemoteDiscoveryUI.SelectRemoteInstanceViaDlg(System.String,System.Guid,System.UInt32,System.String@,System.Guid@)">
      <summary>Shows the Remote Debugger Discovery dialog, returning the selected computer.</summary>
      <param name="currentTransportQualifier">The current transport qualifier.</param>
      <param name="currentPortSupplier">The current port supplier.</param>
      <param name="flags">Flags specified in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_REMOTE_DISCOVERY_FLAGS" /> enumeration.</param>
      <param name="transportQualifier">String to pass to the debugger to connect to the selected computer. This is also the string that shows up in the project properties.</param>
      <param name="guidPortSupplier">GUID indicating the transport (port supplier) to use when connecting. Currently this is either Guid.Empty to indicate Windows authentication, or guidNoAuthPortSupplier for no-authentication.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugTargetSelectionService">
      <summary>Provides Debug Target selection services. This interface is implemented by the singleton DebugTargetHandler package. Projects can optionally participate with this common implementation of the DebugTarget menu controller. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsDebugTargetSelectionService" /> (SID_SVsDebugTargetSelectionService) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDebugTargetSelectionService.UpdateDebugTargets">
      <summary>Updates the debug targets.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDiagnosticsProvider.DataModel">
      <summary>Gets the data model object of the diagnostics provider.</summary>
      <returns>The data model object of the diagnostics provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDiagnosticsProvider.Version">
      <summary>Gets the data model version of the diagnostics provider.</summary>
      <returns>The data model version of the diagnostics provider.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDifferenceService">
      <summary>Opens a window in Visual Studio that compares two files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDifferenceService.OpenComparisonWindow(System.String,System.String)">
      <summary>Opens and displays a file comparison window in Visual Studio with default labels and no additional roles.</summary>
      <returns>The window frame used for the comparison.</returns>
      <param name="leftFileMoniker">[in] Path to the file that will be displayed in the left side of the comparison.</param>
      <param name="rightFileMoniker">[in] Path to the file that will be displayed in the right side of the comparison.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDifferenceService.OpenComparisonWindow2(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.UInt32)">
      <summary>Opens and displays a file comparison window in Visual Studio.</summary>
      <returns>Window frame for the comparison view.</returns>
      <param name="leftFileMoniker">[in] Path to the file that will be displayed in the left side of the comparison.</param>
      <param name="rightFileMoniker">[in] Path to the file that will be displayed in the right side of the comparison.</param>
      <param name="caption">[in] Caption to display in the document tab. If this parameter is null or empty, {0} vs. {1} is shown.</param>
      <param name="Tooltip">[in] Tooltip to display for the document tab. If this parameter is null or empty, the default tooltip is used.</param>
      <param name="leftLabel">[in] Label to display above the left view. If this parameter is null or empty, then no label is shown.</param>
      <param name="rightLabel">[in] Label to display above the right view. If this parameter is null or empty, then no label is shown.</param>
      <param name="inlineLabel">[in] Label to display above the inline view. If this parameter is null or empty, then no label is shown.</param>
      <param name="roles">[in] Additional text view roles added to the difference views. For more information about text view roles, see Editor Extension Points.</param>
      <param name="grfDiffOptions">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDIFFSERVICEOPTIONS" /> for the comparison window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDifferenceService.OpenComparisonWindowFromCommandLineArguments(System.String)">
      <summary>Opens and displays a file comparison window in Visual Studio, parsing the arguments parameter to extract the left and right files, and the labels and roles (using the default labels and roles if none are specified explicitly).</summary>
      <returns>Window frame for the comparison view.</returns>
      <param name="Arguments">[in] The arguments for opening and displaying the file comparison window.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer">
      <summary>Provides information about the document previewer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer.Arguments">
      <summary>Gets the arguments that can be passed when invoking the previewer, or null if this is the internal previewer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer.DisplayName">
      <summary>Gets the friendly name of the previewer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer.IsDefault">
      <summary>Gets whether the previewer is configured as a default browser (more than one previewer can be marked as the default).</summary>
      <returns>true if the previewer is configured as a default browser.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer.Path">
      <summary>Gets the path to the .exe browser.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer.Resolution">
      <summary>Gets the preferred resolution of the previewer window.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer.Type">
      <summary>Gets the previewer type as a member of <see cref="T:Microsoft.VisualStudio.Shell.Interop.__DOCUMENTPREVIEWERTYPE" /> (internal, system, user-defined, or package-registered).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDynamicNavigationItem">
      <summary>Provides information about a dynamically-created navigation item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDynamicNavigationItem.GetText(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Provides the current text for the navigation item.</summary>
      <returns>The text to display for the navigation item.</returns>
      <param name="pFrame">[in] The frame containing the navigation item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers">
      <summary>Enumerates a set of document previewers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers@)">
      <summary>Creates another enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppEnum">[out] Pointer to the cloned IVsEnumDocumentPreviewers interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer[],System.UInt32@)">
      <summary>Retrieves a specified number of document previewers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of document previewers to retrieve.</param>
      <param name="rgelt">[out, size_is(celt), length_is(*pceltFetched)] The list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of document previewers supplied in <paramref name="rgelt" />. Returns null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumDocumentPreviewers.Skip(System.UInt32)">
      <summary>Skips a specified number of document previewers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of document previewers in the enumeration to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions">
      <summary>Enumerates a collection of window search options.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions@)">
      <summary>Creates another enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppEnum">[out] Pointer to the cloned IVsEnumWindowSearchOptions interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchOption[],System.UInt32@)">
      <summary>Retrieves a specified number of window search options in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of window search options to retrieve.</param>
      <param name="rgelt">[out, size_is(celt), length_is(*pceltFetched)] The list of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of window search options supplied in <paramref name="rgelt" />. Returns null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsEnumWindowSearchOptions.Skip(System.UInt32)">
      <summary>Skips a specified number of window search options in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of window search options in the enumeration to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileMergeService">
      <summary>Manages a window in Visual Studio that performs a three-way merge operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileMergeService.OpenAndRegisterMergeWindow(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
      <summary>Opens a three way merge window to perform a three way merge operation.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> for the merge window that was created.</returns>
      <param name="leftFileMoniker">[in] The left file path.</param>
      <param name="rightFileMoniker">[in] The right file path.</param>
      <param name="baseFileMoniker">[in] The base file path.</param>
      <param name="resultFileMoniker">[in] The result file path where the merge results are to be stored.</param>
      <param name="leftFileTag">[in] The tag for the left file.</param>
      <param name="rightFileTag">[in] The tag for the right file.</param>
      <param name="baseFileTag">[in] The tag for the base file.</param>
      <param name="resultFileTag">[in] The tag for the result file.</param>
      <param name="leftFileLabel">[in] The label for the left file.</param>
      <param name="rightFileLabel">[in] The label for the right file.</param>
      <param name="baseFileLabel">[in] The label for the base file.</param>
      <param name="resultFileLabel">[in] The label for the result file.</param>
      <param name="serverGuid">[in] The server GUID for which this method is called (can be empty). This parameter is used to make special features, such as history and annotate, available.</param>
      <param name="leftFileSpec">[in] The server file specification for the left file. This parameter is used to make special features, such as history and annotate, available.</param>
      <param name="rightFileSpec">[in] The server file specification for the right file. This parameter is used to make special features, such as history and annotate, available.</param>
      <param name="cookie">[out] A cookie for the window that was created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileMergeService.QueryMergeWindowState(System.Int32,System.Int32@,System.String@)">
      <summary>Queries the service for the merge window result.</summary>
      <param name="cookie">[in] The cookie for the window frame.</param>
      <param name="pfState">[out] The current state of the window.</param>
      <param name="errorAndWarningMsg">[out] A string array of any errors or warnings to prompt the user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileMergeService.UnregisterMergeWindow(System.Int32)">
      <summary>Unregisters the merge window previously created.</summary>
      <param name="cookie">[in] The cookie for the window frame to be unregistered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileReference">
      <summary>Provides information about Visual Studio file references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReference.AlreadyReferenced"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReference.FullPath"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReference.Name"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext">
      <summary>The context object used to initialize the file reference provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext.AddReference(Microsoft.VisualStudio.Shell.Interop.IVsReference)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext.BrowseFilter">
      <summary>Gets or sets the file types to filter, such as *.dll, *.ocx, and so on.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext.CreateReference"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext.DefaultBrowseLocation">
      <summary>Gets or sets the default browse location. If this property returns a non-empty string, reference manager uses the passed in value instead of the last browsed location.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext.ProviderGuid"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext.ReferenceFilterPaths"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsFileReferenceProviderContext.References"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFireUpdateSolutionEvents">
      <summary>Implemented by the Environment. Used by projects that nest sub-projects. These projects must implement IVsParentProject. This interface allows a project that nests sub-projects to fire the same UpdateSolutionEvents that the Solution normally fires. This interface is similar to the related  IVsFireSolutionEvents interface but is accessed via QueryService for the SVsSolutionBuildManager service. These methods iterate through the notification sinks of clients of IVsUpdateSolutionEvents and call the appropriate notification method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireUpdateSolutionEvents.FireOnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fires when the active project configuration changes.</summary>
      <param name="pIVsHierarchy">The project hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireUpdateSolutionEvents.FireOnActiveProjectCfgChangeBatchBegin">
      <summary>Fires when a batch change to the active project configuration begins.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFireUpdateSolutionEvents.FireOnActiveProjectCfgChangeBatchEnd">
      <summary>Fires when the batch active project configuration change ends.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage3">
      <summary>Allows a VSPackage to manage registry font and color entries.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage3.RevertAllCategoriesToDefault">
      <summary>Reverts all items in all categories to their default values.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage3.RevertAllItemsToDefault"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage3.RevertFontToDefault"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage3.RevertItemToDefault(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2.GetSDKDisplayName(System.String)">
      <summary>Takes the location of the SDK root folder and returns the SDK display name.</summary>
      <returns>The SDK display name.</returns>
      <param name="pwszSDKRootDirectory">[in] The location of the SDK root folder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2.GetSDKReferences(System.String)">
      <summary>Enumerates the list of installed SDKs.</summary>
      <returns>An array of SDK references as paths.</returns>
      <param name="pwszSDKRootDirectory">[in] The location of the SDK root folder.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2.GetSDKRootFolders">
      <summary>Gets the list of SDK root folders, both platform and extension SDK.</summary>
      <returns>The list of SDK root folders.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFrameworkMultiTargeting2.ResolveAssemblyPathsInTargetFx2(System.String,System.Array,System.UInt32,System.Boolean,Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath[],System.UInt32@)">
      <summary>Resolves the assembly reference paths for the passed in assemblies in the given target framework while ignoring the version for resolving framework references (as described in the framework redistributable list).</summary>
      <param name="pwszTargetFrameworkMoniker">[in] The target framework in which to resolve the assemblies.</param>
      <param name="prgAssemblySpecs">[in, size_is(cAssembliesToResolve)] Array of strings containing the list of assembly specifications that need to be resolved.</param>
      <param name="cAssembliesToResolve">[in] Number of assembly specifications passed in to <paramref name="prgAssemblySpecs" />.</param>
      <param name="ignoreVersionForFrameworkReferences">[in] Specifies if the version is to be ignored when resolving framework references. If true, the version is ignored.</param>
      <param name="prgResolvedAssemblyPaths">[in, out, size_is(cAssembliesToResolve)] Array containing the resolved assembly reference paths. You need to pre-allocate this array for <paramref name="cAssembliesToResolve" /> elements.</param>
      <param name="pcResolvedAssemblyPaths">[out] Number of resolved assembly paths in the <paramref name="prgResolvedAssemblyPaths" /> output array.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGetScciProviderInterface">
      <summary>Gets the source code control provider interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGetScciProviderInterface.GetSourceControlProviderID(System.Guid@)">
      <summary>Gets a pointer to the active source code control provider.</summary>
      <param name="pguidSCCProvider">[out] GUID of the active source code control provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGetScciProviderInterface.GetSourceControlProviderInterface(System.Guid@,System.IntPtr@)">
      <summary>Gets the specified source code control provider object.</summary>
      <param name="riid">[in] Identifier of the requested source code control provider interface.</param>
      <param name="ppvObject">[out] Address of a pointer containing the requested source control provider interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch">
      <summary>Manages Integrated Development Environment (IDE)-wide searches.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.CreateSearch(Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery,Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback,System.Guid)">
      <summary>Creates a search task for the available providers or a specific provider category.</summary>
      <returns>The search task (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask" />) that was created.</returns>
      <param name="pSearchQuery">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery" /> interface that contains the structured search string.</param>
      <param name="pSearchCallback">[in] The callback to be used to track progress of the search.</param>
      <param name="guidCategory">[in, optional] GUID that identifies the category of the search provider. Use GUID_NULL for this parameter to search across all providers.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.GetProvider(System.Guid)">
      <summary>Gets the provider supporting the specified category.</summary>
      <returns>The provider supporting the category, or null if no such category exists.</returns>
      <param name="guidCategoryId">[in] GUID that identifies the category of the search provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.GetProviderSettings(System.Guid)">
      <summary>Gets the provider settings for the specified category.</summary>
      <returns>Returns the provider settings for the category, or null if no such category exists.</returns>
      <param name="guidCategoryId">[in] GUID that identifies the category of the search provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.IsProviderEnabled(System.Guid)">
      <summary>Indicates whether the specified search provider is enabled.</summary>
      <returns>VARIANT_BOOL that indicates if the search provider is enabled. If true, the search provider is enabled.</returns>
      <param name="guidCategoryId">[in] GUID that identifies the category of the search provider.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.Providers">
      <summary>Gets a list of all available and installed providers.</summary>
      <returns>The list of all available and installed providers.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.RegisterProvider(Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider)">
      <summary>Registers the specified search provider.</summary>
      <param name="pProvider">[in] The search provider to be registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.SetProviderEnabled(System.Guid,System.Boolean)">
      <summary>Enables or disables the specified search provider.</summary>
      <param name="guidCategoryId">[in] GUID that identifies the category of the search provider.</param>
      <param name="fEnabled">Specifies whether the search provider is to be enabled or disabled. If true, the search provider is enabled. If false, the search provider is disabled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch.UnregisterProvider(System.Guid)">
      <summary>Unregisters the specified search provider.</summary>
      <param name="guidCategoryId">[in] GUID that identifies the category of the search provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback">
      <summary>Tracks the progress of global searches.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback.ProgressReported(Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask,Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider,System.UInt32,System.UInt32)">
      <summary>Indicates the progress reported by the specified provider.</summary>
      <param name="pTask">[in] The search task for the global search.</param>
      <param name="pProvider">[in] The search provider.</param>
      <param name="dwProgress">[in] Current progress measurement.</param>
      <param name="dwMaxProgress">[in] Maximum progress measurement.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback.ProviderSearchCompleted(Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask,Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider,Microsoft.VisualStudio.Shell.Interop.IVsSearchTask)">
      <summary>Indicates that the provider search has completed.</summary>
      <param name="pTask">[in] The search task for the global search.</param>
      <param name="pProvider">[in] The search provider.</param>
      <param name="pProviderTask">[in] The search task that stopped the search operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback.ProviderSearchStarted(Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask,Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider,Microsoft.VisualStudio.Shell.Interop.IVsSearchTask)">
      <summary>Indicates that the provider search has started.</summary>
      <param name="pTask">[in] The search task for the global search.</param>
      <param name="pProvider">[in] The search provider.</param>
      <param name="pProviderTask">[in] The search task that started the search operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback.ReportComplete(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback.ReportProgress(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,System.UInt32,System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback.ResultReported(Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask,Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider,Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult)">
      <summary>Indicates that a result has been reported for the specified provider.</summary>
      <param name="pTask">[in] The search task for the global search.</param>
      <param name="pProvider">[in] The search provider.</param>
      <param name="pItemResult">[in] Information about the search result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchCallback.ResultsReported(Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask,Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult[])">
      <summary>Indicates that a collection of results have been reported for the specified provider.</summary>
      <param name="pTask">[in] The search task for the global search.</param>
      <param name="pProvider">[in] The search provider.</param>
      <param name="dwResults">[in] Number of results specified in <paramref name="pSearchItemResults" />.</param>
      <param name="pSearchItemResults">[in, size_is(dwResults)] [in] Information about the search results.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask">
      <summary>Implements the global search task that performs searches across multiple providers.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask.ErrorCode"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask.Id"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask.Providers">
      <summary>Gets the list of providers active when the search task was created.</summary>
      <returns>The list of providers.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask.SearchQuery"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask.Start"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask.Status"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchTask.Stop"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI">
      <summary>Provides access to the Integrated Development Environment (IDE) global search user interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.Activate">
      <summary>Focuses the global search control, or shows the next results category if the control is active already (navigate forwards).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.ActivateBack">
      <summary>Focuses the global search control, or shows the previous results category if the control is active already (navigate backwards).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.ActiveResultsCategory">
      <summary>Gets the active category index.</summary>
      <returns>The active category index or -1 if no results are displayed (that is, no categories exist yet).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.GetResultsCategories(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory[])">
      <summary>Get the results categories for the current search.</summary>
      <returns>The number of results categories retrieved in <paramref name="rgpResultsCategories" />.</returns>
      <param name="dwMaxCategories">[in] The maximum number of global search results categories to retrieve.</param>
      <param name="rgpResultsCategories">[out, size_is(dwMaxCategories), length_is(*pdwCategoriesReturned)] The results categories to be retrieved.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.IsActive">
      <summary>Gets whether the global search control or its popup has focus.</summary>
      <returns>true if the global search control or its popup has focus, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.IsEnabled">
      <summary>Gets or sets the state of the global search UI. If true, the global search UI is enabled. If false, the global search UI is disabled.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.IsResultsListVisible">
      <summary>Sets whether the global search results popup is visible. If set to true, the global search results popup is visible.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.PreserveResults">
      <summary>Gets or sets whether the global search preserves results from a previous search to be displayed when the UI is shown again. If true, the results are preserved.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUI.SearchHost">
      <summary>Gets the search host of the global search control. Can be used to initiate IDE-wide searches with the UI, get the status of the existing search, and so on.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory">
      <summary>Provides information from search categories that have returned results.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory.CategoryProvider">
      <summary>Gets the provider supporting the category, or null for the “All providers” category.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory.DisplayAllResults">
      <summary>Displays all results from this category.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory.DisplayedResultsCount">
      <summary>Gets the number of results displayed from this category.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory.DisplayText">
      <summary>Gets the name of the category, for example, "All providers" or "Menu items".</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory.GetResult(System.UInt32)">
      <summary>Get the displayed result by index from this category.</summary>
      <returns>The displayed result.</returns>
      <param name="dwIndex">[in] Index of the displayed result to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory.IsDisplayingAllResults">
      <summary>Gets whether the category is displaying all results. If true, all results are being displayed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearchUIResultsCategory.TotalResultsCount">
      <summary>Gets the total number of results in this category.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler3">
      <summary>Provides bulk item delete capability.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler3.DeleteItems(System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
      <summary>Handles the deletion or removal of one or more hierarchy items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cItems">[in] The number of items to be deleted or removed.</param>
      <param name="dwDelItemOp">[in] Determines whether the hierarchy or hierarchy items are deleted from storage or removed from the project. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> enumeration.</param>
      <param name="itemid">[in, size_is(cItems)] Array of item identifiers of the items in the hierarchy. VSITEMID_ROOT deletes everything in the hierarchy. VSITEMID_SELECTION is not supported.</param>
      <param name="dwFlags">[in] Provides options for the deletion process. If set to DHO_SUPPRESS_UI, no confirmation dialogs or source code control (SCC) checkout UI is displayed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDeleteHandler3.QueryDeleteItems(System.UInt32,System.UInt32,System.UInt32[],System.Boolean[])">
      <summary>Determines whether the hierarchy supports item deletion, removal, or both.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cItems">[in] The number of items to be deleted or removed.</param>
      <param name="dwDelItemOp">[in] Determines whether the hierarchy or hierarchy items are deleted from storage or removed from the project. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION" /> enumeration.</param>
      <param name="itemid">[in, size_is(cItems)] Array of item identifiers of the items in the hierarchy. VSITEMID_ROOT deletes everything in the hierarchy. VSITEMID_SELECTION is not supported.</param>
      <param name="pfCanDelete">[in, out, size_is(cItems)] An array that specifies whether individual items can be deleted or removed from the hierarchy. If true, then the hierarchy supports either item deletion or item removal, depending on the value specified for the <paramref name="dwDelItemOp" /> parameter. If false, then the hierarchy or hierarchy item cannot be deleted.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget">
      <summary>Handles drop targets above, below, and on the item. This interface is implemented by an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget.DragEnterArea(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Informs the hierarchy that dragging has entered a new area.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] The item being dragged. This data object contains the data being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the hierarchy window.</param>
      <param name="grfKeyState">[in] Current state of the keyboard and the mouse modifier keys.</param>
      <param name="itemid">[in] Item identifier of the item currently being dragged. For a list of <paramref name="itemid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSITEMID" />.</param>
      <param name="area">[in] The new area the item is to enter.</param>
      <param name="pdwEffect">[in, out] On entry, pointer to the value of the <paramref name="pdwEffect" /> parameter of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object, identifying all effects that the hierarchy supports. On return, must contain one of the effect flags that indicate the result of the drop operation. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget.DragLeaveArea">
      <summary>Informs the hierarchy that dragging has left the area.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget.DragOverArea(System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Informs the hierarchy that dragging has continued over an area.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfKeyState">[in] Current state of the keyboard keys and the mouse modifier buttons.</param>
      <param name="itemid">[in] Item identifier of the drop data target over which the item is being dragged. For a list of <paramref name="itemid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSITEMID" />.</param>
      <param name="area">[in] The area over which the item is dragged.</param>
      <param name="pdwEffect">[in, out] On entry, pointer to the value of the <paramref name="pdwEffect" /> parameter of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object, identifying all effects that the hierarchy supports. On return, the <paramref name="pdwEffect" /> parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of <paramref name="pwdEffects" /> values, see <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget.DragEnterArea(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget.DropArea(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Informs the hierarchy that data has been dropped on an area.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDataObject">[in] The item being dragged. This data object contains the data being transferred in the drag-and-drop operation. If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>
      <param name="grfKeyState">[in] Current state of the keyboard and the mouse modifier keys.</param>
      <param name="itemid">[in] Item identifier of the drop data target over which the item is being dragged. For a list of <paramref name="itemid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSITEMID" />.</param>
      <param name="area">[in] The area over which the item is to be dropped.</param>
      <param name="pdwEffect">[in, out] Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. The value of <paramref name="dwEffects" /> passed to the source object through the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource2.OnDropNotify(System.Int32,System.UInt32)" /> method is the value of <paramref name="pdwEffects" /> returned by this method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDirectionalDropDataTarget.GetSupportedAreas(System.UInt32,System.UInt32@)">
      <summary>Gets the areas supported by the target.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] [in] Item identifier of the drop data target over which the item is being dragged. For a list of <paramref name="itemid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSITEMID" />.</param>
      <param name="pSupportedAreas">[out] The areas supported by the target. The value of this parameter can be any combination of Above, Below, and On masked together.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents2">
      <summary>Notifies clients of additional changes to the hierarchy.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents2.OnItemAdded(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
      <summary>Notifies clients when an item is added to the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidParent">[in] Identifier of the parent, or root node of the hierarchy in which the item is added.</param>
      <param name="itemidSiblingPrev">[in] Identifier that indicates where the item is added in relation to other items (siblings) within the parent hierarchy (<paramref name="itemidParent" />). If the new item is added at the beginning of the sibling items, then a value of <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> is specified. If the item is added after a particular node, the Item Id of the node in question is specified.</param>
      <param name="itemidAdded">[in] Identifier of the added item.</param>
      <param name="ensureVisible">Indicates whether to make sure the node is visible after it is added. If true, the node is visible after it is added.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulation">
      <summary>Controls the state of the hierarchy within the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulation.SetManipulationState(System.UInt32)">
      <summary>Specifies the state at the time that an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> is manipulated.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulationStateContext" /> used to restore the hierarchy.</returns>
      <param name="state">[in] The state that is causing the manipulation of a hierarchy.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulationStateContext">
      <summary>Deterministically restores the hierarchy manipulation state at a specific point in time.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulationStateContext.Restore">
      <summary>Restores the hierarchy manipulation state to the value it had before this context was created by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulation.SetManipulationState(System.UInt32)" />. This method is implicitly called on final release of the interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsImageService">
      <summary>Registers well-known images (such as icons) for Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsImageService.Add(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
      <summary>Adds an icon with the specified name to the service.</summary>
      <param name="Name">[in] Name of the icon.</param>
      <param name="pIconObject">[in] The icon object to add to the service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsImageService.Get(System.String)">
      <summary>Gets the icon with the specified name.</summary>
      <returns>The icon object. Returns null if the icon does not exist.</returns>
      <param name="Name">[in] The name of the icon.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsImageService.GetIconForFile(System.String,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT)">
      <summary>Gets the 16x16 icon for the specified file.</summary>
      <returns>The icon object. Returns null if the icon cannot be retrieved.</returns>
      <param name="filename">[in] The file name of the icon.</param>
      <param name="desiredFormat">[in] The data format used in the user interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsImageService.GetIconForFileEx(System.String,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT,System.UInt32@)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2">
      <summary>Provides additional error reporting for a language service with a project system.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2.ClearErrors"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2.ReportError(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY,System.Int32,System.Int32,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLanguageServiceBuildErrorReporter2.ReportError2(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>Reports a build error.</summary>
      <param name="bstrErrorMessage">The error message.</param>
      <param name="bstrErrorId">The error ID.</param>
      <param name="nPriority">The error priority.</param>
      <param name="iStartLine">The starting line of the source code file.</param>
      <param name="iStartColumn">The starting column of the source code file.</param>
      <param name="iEndLine">The ending line of the source code file.</param>
      <param name="iEndColumn">The ending column of the source code file.</param>
      <param name="bstrFileName">The source code file name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad4">
      <summary>Launches a console application with elevation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLaunchPad4.ExecCommandWithElevation(System.String,System.String,System.String)">
      <summary>Executes the given command with elevation.</summary>
      <returns>Exit code value returned by the process (this value cannot be null).</returns>
      <param name="pszApplicationName">[in] Application name that is passed to CreateProcess by the environment.</param>
      <param name="pszCommandLine">[in] Command line string that is passed to CreateProcess by the environment.</param>
      <param name="pszWorkingDir">[in] Working directory that is passed to CreateProcess by the environment. Can be null.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLibrary3">
      <summary>Creates <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2" /> objects from a vector of <see cref="T:Microsoft.VisualStudio.Shell.Interop.SYMBOL_DESCRIPTION_NODE" /> objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary3.CreateNavInfo2(System.UInt32,Microsoft.VisualStudio.Shell.Interop.SYMBOL_DESCRIPTION_NODE[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2@)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2" /> object with the specified language.</summary>
      <param name="language">[in] The preferred language.</param>
      <param name="rgSymbolNodes">[in, size_is(ulcNodes)] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.SYMBOL_DESCRIPTION_NODE" /> objects describing each node in the tree.</param>
      <param name="ulcNodes">[in] The number of objects in the <paramref name="rgSymbolNodes" /> array.</param>
      <param name="ppNavInfo">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2" /> object representing the navigation information for all nodes in the tree.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsManifestReferenceResolver">
      <summary>Provides a way to resolve deployed manifest file reference paths to local file paths.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsManifestReferenceResolver.ResolveReferenceAsync(System.String,System.String)">
      <summary>Returns a task that asynchronously resolves deployed manifest file reference paths to local file paths.</summary>
      <returns>The reference path to a local file on disk (for example, C:\users\&lt;username&gt;\projects\MyApp\js\default.js). If the result is null, the reference path could not be resolved.</returns>
      <param name="reference">[in] The reference path to resolve (for example, ms-appx://MyApp-d83h4ljidgki/js/default.js).</param>
      <param name="relativeToFile">[in] Defines the local root folder to which the reference parameter value is relative. If this parameter is null, the implementation defaults to using the project root folder.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider">
      <summary>Exposes a single Most Recently Executed command search provider.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.Category"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.Close">
      <summary>Closes the search provider and saves the MRE items.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.CreateItemResult(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.CreateSearch(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery,Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.Description"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.DisplayText"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.ProvideSearchSettings(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.SetMostRecentlyExecuted(Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery,Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult[],System.UInt32@)">
      <summary>Gets a new collection of MRE items for the specified search query.</summary>
      <param name="pSearchQuery">[in] The search query from which to retrieve the MRE items.</param>
      <param name="pResult">[in] The result of the search query.</param>
      <param name="dwMaxResults">[in] The maximum number of MRE items to retrieve.</param>
      <param name="pSearchItemResults">[in, out, size_is(dwMaxResults), length_is(*pdwActualResults)] The collection of MRE items.</param>
      <param name="pdwActualResults">[in, out] The actual number of MRE items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes the search provider.</summary>
      <param name="pSP">A pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> that can be used to obtain other shell services.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.Shortcut"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsMRESearchProvider.Tooltip"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore">
      <summary>Controls the most recently used (MRU) items collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore.AddMRUItem(System.Guid@,System.String)">
      <summary>Adds a most recently used (MRU) item to the MRU item collection.</summary>
      <param name="guidCategory">[in] The GUID of the category of item to be added to the collection.</param>
      <param name="lpszItem">[in] The item to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore.DeleteMRUItem(System.Guid@,System.String)">
      <summary>Deletes the specified item from the most recently used (MRU) item collection.</summary>
      <param name="guidCategory">[in] The GUID of the category of item to be removed from the MRU item collection.</param>
      <param name="lpszItem">[in] The item to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore.DeleteMRUItems(System.Guid@)">
      <summary>Removes the specified category of items from the most recently used (MRU) item collection.</summary>
      <param name="guidCategory">[in] The category of items to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore.GetMRUItems(System.Guid@,System.String,System.UInt32,System.String[])">
      <summary>Retrieves the specified items from the most recently used (MRU) item collection.</summary>
      <returns>The actual number of items that were retrieved from the MRU item collection.</returns>
      <param name="guidCategory">[in] The GUID of the category of items to be retrieved.</param>
      <param name="lpszPrefix">[in] The prefix of the items to be retrieved.</param>
      <param name="dwMaxResults">[in] The maximum number of items to retrieve.</param>
      <param name="rgbstrItems">[out, size_is(dwMaxResults), length_is(*pdwResultsFetched)] The most recently used items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore.SetMaxMRUItems(System.Guid@,System.UInt32)">
      <summary>Sets the maximum number of items in the specified category that can be displayed from the most recently used (MRU) item collection.</summary>
      <param name="guidCategory">[in] The GUID of the category of items.</param>
      <param name="dwMaxItems">[in] The maximum number of items for the category specified in <paramref name="guidCategory" /> that can be displayed </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore.SetMRUItem(System.Guid@,System.String)">
      <summary>Sets the item in the specified category to be displayed.</summary>
      <param name="guidCategory">[in] The category of the item to be displayed.</param>
      <param name="lpszItem">[in] The item to be displayed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2">
      <summary>Identifies a symbol in the hierarchical tree of symbols.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2.EnumCanonicalNodes(Microsoft.VisualStudio.Shell.Interop.IVsEnumNavInfoNodes@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2.EnumPresentationNodes(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsEnumNavInfoNodes@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2.GetLibGuid(System.Guid@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2.GetPreferredLanguage(System.UInt32@)">
      <summary>Specifies a preferred language for the COMPlus library, overriding the default algorithm for determining the display language.</summary>
      <param name="pLanguage">[out] The preferred language for the COMPlus library.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2.GetSymbolType(System.UInt32@)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts2">
      <summary>Provides additional access to user-specific options in the user options file associated with the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts2.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts2.LoadUserOptionsEx(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
      <summary>Loads user options for a given solution.</summary>
      <param name="fPreLoad">[in] Inidicates if any user options are to be preloaded. If true, the user options are preloaded.</param>
      <param name="pPersistence">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> interface on which the VSPackage should call its <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)" /> method for each stream name it wants to read from the user options (.opt) file.</param>
      <param name="grfLoadOpts">[in] User options whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS" /> DWORD.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts2.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts2.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts2.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReference">
      <summary>Provides information about Visual Studio platform references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReference.AlreadyReferenced"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReference.FullPath"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReference.IsSDK">
      <summary>Gets or sets whether the platform reference is a software development kit (SDK) reference or a Windows Metadata (WinMD) reference.</summary>
      <returns>true if the reference is an SDK reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReference.Name"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReference.SDKIdentity">
      <summary>Gets or sets the unique name of the platform reference.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext">
      <summary>The context object used to initialize the platform reference provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.AddReference(Microsoft.VisualStudio.Shell.Interop.IVsReference)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.AssemblySearchPaths">
      <summary>Gets or sets the paths to the loose extension assemblies.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.CreateReference"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.ExpandSDKContents">
      <summary>Gets or sets whether to expand the software development kit (SDK) contents.</summary>
      <returns>true if the Windows Metadata (WinMDs) from the SDK are shown in place of the SDK itself.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.GetNoItemsMessageForTab(System.UInt32)">
      <summary>Retrieves the custom no items message for a particular tab.</summary>
      <returns>The custom no items message.</returns>
      <param name="etabId">[in] The set of tabs from which to get the no items message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.GetTabTitle(System.UInt32)">
      <summary>Retrieves the tab title for each tab.</summary>
      <returns>The tab title.</returns>
      <param name="etabId">[in] The set of tabs from which to get each tab title.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.IsImplicitlyReferenced">
      <summary>Gets or sets whether it is unnecessary to show the Windows tab, which allows selection of core Windows Metadata (WinMDs), because they are implicitly referenced by the project system.</summary>
      <returns>true if the Windows tab is not shown.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.ProviderGuid"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.ReferenceFilterPaths"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.References"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.SDKDirectoryRoot">
      <summary>Gets or sets he location on disk where unregistered software development kits (SDKs) are stored.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.SDKFilterKeywords">
      <summary>Gets or sets a space-delimited list of the capabilities.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.SDKRegistryRoot">
      <summary>Gets or sets the location where the software development kits (SDKs) are registered in the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.SetNoItemsMessageForTab(System.UInt32,System.String)">
      <summary>Sets the custom no items message for the specified tab.</summary>
      <param name="etabId">[in] The set of tabs in which to set the custom no items message.</param>
      <param name="bstrNoItemsMessage">[in] The custom no items message to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.SetTabTitle(System.UInt32,System.String)">
      <summary>Sets the tab title for each tab.</summary>
      <param name="etabId">[in] The set of tabs in which to set the tab title.</param>
      <param name="szTabTitle">[in] The text of the tab title.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.Tabs">
      <summary>Gets or sets the set of tabs to show. Defaults to all tabs.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.TargetFrameworkMoniker">
      <summary>Gets or sets the moniker of the target framework.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.TargetPlatformIdentifier">
      <summary>Gets or sets the target platform identifier, which indicates where to find software development kit (SDK) references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.TargetPlatformReferencesLocation">
      <summary>Gets or sets the location of the platform references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.TargetPlatformVersion">
      <summary>Gets or sets the target platform version, which indicates to the user where the references come from.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext.VisualStudioVersion">
      <summary>Gets or sets the supported Visual Studio version (for example, Visual Studio 2012). Software development kits (SDKs) with a higher Visual Studio version are filtered out.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPrioritizedSolutionEventsSink">
      <summary>Sinks (event listeners) implementing this interface will get priority notification of solution events.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg">
      <summary>Indicates that the project can be profiled.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.AllBrowserTargetsFinished">
      <summary>If browser targets were created, call this method when all of the browser targets have exited. This is useful if you want the project system finish profiling when the browser is closed by shutting down any services they provided.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.BeforeLaunch(System.String)">
      <summary>Gives the project system the opportunity to decide not to launch before the launch proceeds.</summary>
      <param name="profilingTask">[in] The profiling task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.BeforeTargetsLaunched">
      <summary>Task to run before profiling of targets starts. Call this method after the monitor starts and after instrumentation (except for dynamic website instrumentation). Call this method before any launch targets are started.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.GetSupportedProfilingTasks(System.Array@)">
      <summary>Specifies the profiling tasks that are supported by this project system.</summary>
      <param name="tasks">[out] An array of profiling tasks supported by this project system.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.LaunchProfiler">
      <summary>The profiler calls this method in the project system to start the launch procedure.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.LegacyWebSupportRequired">
      <summary>Indicates whether legacy Web support is required. Some legacy Web projects (like SharePoint) need additional assistance to start profiling a scenario, as they rely on existing Visual Studio Profiler functionality. New projects (like IISExpress) do not need it.</summary>
      <returns>true if legacy Web support is required.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.ProfilerAnalysisFinished">
      <summary>Called when a profiler analysis is fully completed. This method notifies the project system that it can now make a necessary cleaning (which should not be done too early because it would risk removing files that are still being analyzed by the profiler).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.QueryProfilerTargetInfoEnum(Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos@)">
      <summary>Provides information about targets that will be used for launch.</summary>
      <param name="targetsEnum">[out] The profiler target information.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilableProjectCfg.SuppressSignedAssemblyWarnings">
      <summary>Indicates if signed assembly warnings are to be displayed.</summary>
      <returns>If true, the signed assembly warnings are not displayed. If false, the signed assembly warnings are displayed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerAttachTargetInfo">
      <summary>Requests that the profiler attach to the specified process identifier.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerAttachTargetInfo.ProcessArchitecture"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerAttachTargetInfo.ProcessId">
      <summary>Gets the process identifier to which to attach.</summary>
      <returns>The process identifier.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchBrowserTargetInfo">
      <summary>Launches a Web browser with a specified URL.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchBrowserTargetInfo.EnvironmentSettings"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchBrowserTargetInfo.LaunchProfilerFlags"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchBrowserTargetInfo.ProcessArchitecture"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchBrowserTargetInfo.References"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchBrowserTargetInfo.Url">
      <summary>Gets the URL to launch in the Web browser.</summary>
      <returns>The URL to launch.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLauncher">
      <summary>Provides the project system with the capability to launch targets under profiling.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLauncher.LaunchProfiler(Microsoft.VisualStudio.Shell.Interop.IEnumVsProfilerTargetInfos)">
      <summary>Launches the profiler targets. If the project system has already done the launch, this method notifies the profiler about the targets that were launched.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="targetsEnum">[in] The list of profiler targets to be launched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLauncher.QueryProfilingEnvironment(System.Array@)">
      <summary>Queries the profiler for the profiling environment variables.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="environment">[out] The profiling environment variables. Each element of environment is in the form “Variable=Value”.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo">
      <summary>Specifies the executable target that is launched by the profiler, not the project system.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo.EnvironmentSettings"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo.ExecutableArguments">
      <summary>Gets the command-line arguments for the executable.</summary>
      <returns>The command-line arguments.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo.ExecutablePath">
      <summary>Gets the executable name and, optionally, the full path.</summary>
      <returns>The executable name and, optionally, the full path.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo.LaunchProfilerFlags"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo.ProcessArchitecture"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo.References"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchExeTargetInfo.WorkingDirectory">
      <summary>Gets the working directory in which the process is to run.</summary>
      <returns>The working directory.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchTargetInfo">
      <summary>Specifies the target that will be launched by the profiler, not the project system.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchTargetInfo.EnvironmentSettings">
      <summary>Gets the environment variables that the project system sets for the process to be launched. These variables are returned as a series of elements in the form “Variable=Value”.</summary>
      <returns>The environment variables.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchTargetInfo.LaunchProfilerFlags">
      <summary>Gets the flags that affect the launch.</summary>
      <returns>The flags that affect the launch.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchTargetInfo.ProcessArchitecture">
      <summary>Gets the architecture of the process that will be launched. This information is needed to correctly determine which profiling monitor to start.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchTargetInfo.References">
      <summary>Gets the references. If binaries are referenced by this project, they are returned in this property. For VSLangProj.VSProjects, this can be the References property. You can also provide the full path to a project file if you have a project reference.</summary>
      <returns>The references.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchWebServerTargetInfo">
      <summary>Launches a Web server. This interface uses the URL to determine which instance of the worker process (w3wp) to restart or update and then attach to.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchWebServerTargetInfo.EnvironmentSettings"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchWebServerTargetInfo.LaunchProfilerFlags"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchWebServerTargetInfo.ProcessArchitecture"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchWebServerTargetInfo.References"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLaunchWebServerTargetInfo.Url">
      <summary>Gets the URL that will be used in the Web server.</summary>
      <returns>The URL to be used in the Web server.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerTargetInfo">
      <summary>Provides a base class for profiler target information.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProfilerTargetInfo.ProcessArchitecture">
      <summary>Gets the architecture of the process that will be launched. This information is needed to correctly determine which profiling monitor to start.</summary>
      <returns>The architecture of the process.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageEvents">
      <summary>Provides an event sink for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageReporter" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageEvents.OnBuildMessage(System.UInt32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Object)">
      <summary>Called for every build message received from the build system by the implementer of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageReporter" />. This method is called before the implementer does any usual processing of the message (such as creating a corresponding Error List item, and so on).</summary>
      <returns>Boolean that indicates if any more error messages should be processed. If true, the caller must assume that the implementation of this method has taken full responsibility over its proper processing and reporting. In particular, the caller must not create any Error List items corresponding to this message. Furthermore, if there is more than one subscriber to this event, the remaining subscribers will not be called. If false, the caller must proceed to invoke any remaining subscribers. If all subscribers set this value to false, the message will be processed normally (that is, an Error List item is created and so on).</returns>
      <param name="Category">[in] Describes the severity of the error message.</param>
      <param name="szMessage">[in] The error message.</param>
      <param name="szErrorCode">[in] The error code of the error message.</param>
      <param name="szHelpKeyword">[in] Keyword for the error message.</param>
      <param name="line">[in] Starting line on which the error occurred. Line numbers start at 1.</param>
      <param name="column">[in] Starting column in which the error occurred. Column numbers start at 1.</param>
      <param name="endingLine">[in] Ending line on which the error occurred.</param>
      <param name="endingColumn">[in] Ending column in which the error occurred.</param>
      <param name="szFile">[in] The file in which the error occurred.</param>
      <param name="pAdditionalInfo">[in, optional] Object containing any additional information about the error message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageReporter">
      <summary>Provides project hierarchies the ability to intercept build messages (errors, warnings, and so on) for that project for the purposes of custom reporting.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageReporter.AdviseProjectBuildMessageEvents(Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageEvents,System.UInt32@)">
      <summary>Subscribes the project hierarchy to the build message event.</summary>
      <param name="pEvents">[in] Pointer to the event that occurred.</param>
      <param name="pdwCookie">[out] Pointer to a variable that receives a cookie, or identifier, for use with this build message event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectBuildMessageReporter.UnadviseProjectBuildMessageEvents(System.UInt32)">
      <summary>Unsubscribes the project hierarchy to the build message event.</summary>
      <param name="dwCookie">[in] Cookie, or identifier, that identifies the build message event from which to unsubscribe.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTargetSelection">
      <summary>Allows a project to participate in the debug target menu controller feature. This interface is optional.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTargetSelection.GetCurrentDebugTarget(System.Guid@,System.UInt32@,System.String@)">
      <summary>Retrieves the command that is currently latched on the debug target menu controller.</summary>
      <param name="pguidDebugTargetType">[out] A GUID containing the debug target type.</param>
      <param name="pDebugTargetTypeId">[out] The identifier of the debug target type.</param>
      <param name="pbstrCurrentDebugTarget">[out] The current debug target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTargetSelection.GetDebugTargetListOfType(System.Guid,System.UInt32)">
      <summary>Retrieves a list of strings your project requires for the specified debug target type command.</summary>
      <returns>An array containing the debug target list.</returns>
      <param name="guidDebugTargetType">[in] The debug target type for which to retrieve the list of strings.</param>
      <param name="debugTargetTypeId">[in] The identifier of the debug target type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTargetSelection.HasDebugTargets(Microsoft.VisualStudio.Shell.Interop.IVsDebugTargetSelectionService,System.Array@)">
      <summary>Retrieves a list of supported debug target types. This list is returned as a set of "&lt;Guid&gt;:&lt;Id&gt;" pairs as an array of strings.</summary>
      <returns>Boolean that indicates whether there were any debug targets to retrieve. If true, there were debug targets to retrieve.</returns>
      <param name="pDebugTargetSelectionService">[in] The debug target selection service that can be used to update the debug targets.</param>
      <param name="pbstrSupportedTargetCommandIDs">[out] An array containing the supported debug target types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTargetSelection.SetCurrentDebugTarget(System.Guid,System.UInt32,System.String)">
      <summary>Sets the current debug target when the user picks an item on the debug target menu controller.</summary>
      <param name="guidDebugTargetType">[in] The debug target type to be set.</param>
      <param name="debugTargetTypeId">[in] The identifier of the debug target type.</param>
      <param name="bstrCurrentDebugTarget">[in] The current debug target.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTypeSelection">
      <summary>An optional interface implemented by projects to expose the debugger type to the Visual Studio toolbar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTypeSelection.GetCurrentDebugType(System.String@)">
      <summary>Retrieves the current debug type.</summary>
      <param name="pbstrDebugType">[out] The current debug type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTypeSelection.GetDebugTypeName(System.String,System.String@)">
      <summary>Gets the localized debug type name from the debug type.</summary>
      <param name="bstrDebugType">[in] The debug type from which to retrieve the debug type name.</param>
      <param name="pbstrDebugTypeName">[out] The debug type name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTypeSelection.GetDebugTypes(System.Array@)">
      <summary>Gets a list of debugger types.  These are enum properties with metadata key=IsDebugType value=true</summary>
      <param name="pbstrDebugTypes">[out] The list of debugger types. This list contains enumeration properties with the metadata key=IsDebugType value=true.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgDebugTypeSelection.SetCurrentDebugType(System.String)">
      <summary>Sets the current debug type.</summary>
      <param name="bstrDebugType">[in] The debug type to be set as current.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFaultResolver">
      <summary>Resolves faults on project hierarchies.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFaultResolver.ResolveFault(System.Boolean@)">
      <summary>Resolves the fault on this project.</summary>
      <param name="pfShouldReload">[out] Specifies if the project should be reloaded.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferenceManager">
      <summary>Gives the flavor a way to control invocation and handling of the reference manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferenceManager.ShowReferenceManager(Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager,Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUser,System.String,System.String,System.Guid,System.Boolean)">
      <summary>Allows the flavor to control a request to invoke the reference manager.</summary>
      <param name="pRefMgr">[in] The reference manager instance that should be invoked.</param>
      <param name="pRefMgrUser">[in] The reference manager user that can handle reference callbacks.</param>
      <param name="lpszDlgTitle">[in] The dialog title.</param>
      <param name="lpszHelpTopic">[in] The help topic.</param>
      <param name="guidDefaultProviderContext">[in] The GUID of the default provider context. Reference manager uses the default provider context if the last visible provider is not present in the current invocation of reference manager.</param>
      <param name="fForceShowDefaultProvider">[in] Indicates whether to force showing the initial provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferences3">
      <summary>Allows the project subtype (flavor) to control certain aspects of project reference handling.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferences3.QueryAddProjectReferenceEx(System.Object,System.Int32,System.UInt32@,System.String@)">
      <summary>Called before this flavored project attempts to make a reference to another project, or before this flavored project attempts to refresh an existing project reference. This flavored project can refuse referencing another project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pReferencedProject">[in] The project to be referenced.</param>
      <param name="queryContext">[in] The context of how the project is referenced.</param>
      <param name="pResult">[out] The result of the reference query.</param>
      <param name="pbstreReason">[out] An optional reason that can be used with a reference refresh. During a reference refresh, the flavor should not show any dialogs. Instead the flavor can output this optional parameter that is shown in the Error List View.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorReferences3.QueryCanBeReferencedEx(System.Object,System.Int32,System.UInt32@,System.String@)">
      <summary>Called before another project attempts to make a reference to this flavored project, or before another project attempts to refresh an existing project reference to this flavored project. This flavored project can refuse being referenced.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="pReferencingProject">[in] The project to be referenced.</param>
      <param name="queryContext">[in] The context of how the project is referenced.</param>
      <param name="pResult">[out] The result of the reference query.</param>
      <param name="pbstreReason">[out] An optional reason that can be used with a reference refresh. During a reference refresh, the flavor should not show any dialogs. Instead the flavor can output this optional parameter that is shown in the Error List View.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorUpgradeViaFactory2">
      <summary>Allows a project factory of a Project Flavor to participate in the upgrade process of a flavored base project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorUpgradeViaFactory2.UpgradeProjectFlavor_CheckOnly(System.String,System.Object,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger,System.UInt32@,System.Guid@)">
      <summary>Checks if a flavored project upgrade is possible.</summary>
      <param name="pszFileName">[in] Name of the file to upgrade.</param>
      <param name="pUpgradeBuildPropStg">[in] Used to read and update build-related properties and imports.</param>
      <param name="pszProjFileXMLFragment">[in] Project file XML fragment.</param>
      <param name="pszUserFileXMLFragment">[in] Project user file XML fragment.</param>
      <param name="pLogger">[in] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger" /> upgrade logger.</param>
      <param name="pUpgradeRequired">[out] The flag indicating the type of upgrade.</param>
      <param name="pguidNewProjectFactory">[out, optional] Pointer to the project factory. If a different project flavor factory should be used to create the upgraded project, the GUID is returned here</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectReference">
      <summary>Provides information about Visual Studio project references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReference.AlreadyReferenced"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReference.FullPath"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReference.Identity">
      <summary>Gets or sets the identity of the project reference.</summary>
      <returns>The identity of the project reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReference.Name"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReference.ReferenceSpecification">
      <summary>Gets or sets the specification information for the project reference. The reference specification is made up of the project’s GUID and the project’s Visual Studio unique name, separated by a “|” character.</summary>
      <returns>The reference specification string.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext">
      <summary>The context object used to initialize the project reference provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext.AddReference(Microsoft.VisualStudio.Shell.Interop.IVsReference)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext.CreateReference"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext.CurrentProject">
      <summary>Gets or sets the current project in the hierarchy.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext.ProviderGuid"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext.ReferenceFilterPaths"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectReferenceProviderContext.References"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgradeViaFactory4">
      <summary>Upgrades the project using the project factory. Used by the solution before opening the project. This interface must be available through querying the project factory</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgradeViaFactory4.UpgradeProject_CheckOnly(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger,System.UInt32@,System.Guid@,System.UInt32@)">
      <summary>Checks to see if a project needs to be upgraded.</summary>
      <param name="pszFileName">[in] Project file of project to update.</param>
      <param name="pLogger">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger" /> interface to the upgrade logger.</param>
      <param name="pUpgradeRequired">[out] The specialized upgrade options specified by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPPROJECTUPGRADEVIAFACTORYREPAIRFLAGS" /> enumeration.</param>
      <param name="pguidNewProjectFactory">[out] If a different project factory is used to create the upgraded project, the GUID should be returned here.</param>
      <param name="pUpgradeProjectCapabilityFlags">[in] Upgrade types specified by the __VSPPROJECTUPGRADEVIAFACTORYFLAGS enumeration. Only one may be specified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBag">
      <summary>Manages a name-value pair collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBag.GetValue(System.String)">
      <summary>Retrieves the value of a named property from the property bag.</summary>
      <returns>The value of the property. If the property is not in the bag, then E_INVALIDARG is returned.</returns>
      <param name="szName">[in] Name of the property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBag.SetValue(System.String,System.Object@)">
      <summary>Adds or updates a named property in the property bag.</summary>
      <param name="szName">[in] Name of the property.</param>
      <param name="pVarValue">[in] The new or updated value for the property.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProvisionalItem">
      <summary>Provides a way to opt out of creating a provisional view for an item.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProvisionalItem.IsProvisonalViewingEnabled">
      <summary>Indicates whether provisional viewing is enabled.</summary>
      <returns>true if provisional viewing is enabled, or false if provisional viewing is not disabled.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsQueryDebuggableProjectCfg2">
      <summary>Responds to queries about how the project would launch the debugger. Implemented by a project system that supports Debug Launch (F5 command), and that needs to return additional information that is not supported by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsQueryDebuggableProjectCfg2" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryDebuggableProjectCfg2.QueryDebugTargets(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4[],System.UInt32[])">
      <summary>Retrieves information about a project's debugging targets.</summary>
      <param name="grfLaunch">[in] Bit flags representing options for launching the debugger. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS6" /> enumeration.</param>
      <param name="cTargets">[in] The maximum number of debug targets—the length of the <paramref name="rgDebugTargetInfo" /> array.</param>
      <param name="rgDebugTargetInfo">[in, out, size_is(cTargets)] Array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4" /> structures representing debug targets.</param>
      <param name="pcActual">[out, optional] The number of debug targets found and returned in <paramref name="rgDebugTargetInfo" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsReference">
      <summary>Provides basic information about Visual Studio references.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsReference.AlreadyReferenced">
      <summary>Gets or sets whether the reference already exists.</summary>
      <returns>true if the reference already exists, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsReference.FullPath">
      <summary>Gets or sets the full path to the reference.</summary>
      <returns>The full path to the reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsReference.Name">
      <summary>Gets or sets the name that identifies the reference.</summary>
      <returns>The name that identifies the reference.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager">
      <summary>Defines the methods provided by the Reference Manager service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager.CreateProviderContext(System.Guid)">
      <summary>Creates a provider context to be used in ShowReferenceManager.</summary>
      <returns>The created provider context.</returns>
      <param name="guidProvider">[in] The provider's GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager.QueryCanReferenceProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Allows a client to determine if one project can reference another based on the Visual Studio default reference algorithm.</summary>
      <returns>The result of the query.</returns>
      <param name="pReferencing">[in] The project that is doing the referencing.</param>
      <param name="pReferenced">[in] The project being referenced.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager.ShowReferenceManager(Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUser,System.String,System.String,System.Guid,System.Boolean)">
      <summary>Shows the Reference Manager.</summary>
      <param name="pRefMgrUser">[in] The callback interface provided by the client.</param>
      <param name="lpszDlgTitle">[in] The dialog title.</param>
      <param name="lpszHelpTopic">[in] The dialog help topic.</param>
      <param name="guidDefaultProviderContext">[in] The GUID of the default provider context. Reference Manager uses the default if the last visible provider is not present in the current invocation of Reference Manager.</param>
      <param name="fForceShowDefaultProvider">[in] Specifies whether to force showing the initial provider. If true, the initial provider is shown.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager2">
      <summary>Provides reference methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager2.GetSDKReferenceDependencies(System.String,Microsoft.VisualStudio.Shell.Interop.IVsPlatformReferenceProviderContext)">
      <summary>Given an SDK Reference, parse the manifest and return a list of dependencies.</summary>
      <returns>The dependencies.</returns>
      <param name="SDKIdentifier">The SDK reference identifier.</param>
      <param name="pContext">The context.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUser">
      <summary>Defines the contract used by the Reference Manager to communicate with clients.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUser.ChangeReferences(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext)">
      <summary>Updates references that are modified by the user.</summary>
      <param name="operation">[in] Indicates whether the change operation is allowed or denied. If true, the change operation is allowed.</param>
      <param name="changedContext">[in] The references to change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManagerUser.GetProviderContexts">
      <summary>Retrieves the set of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext" /> objects describing the kinds of references to be managed by the Reference Manager.</summary>
      <returns>The objects describing the kinds of references to be managed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext">
      <summary>Provides basic information about the context object used to initialize the reference provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext.AddReference(Microsoft.VisualStudio.Shell.Interop.IVsReference)">
      <summary>Adds a reference to the references collection.</summary>
      <param name="pReference">[in] The reference to add to the reference collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext.CreateReference">
      <summary>Creates a new reference.</summary>
      <returns>The reference that was created.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext.ProviderGuid">
      <summary>Gets the GUID of the reference provider.</summary>
      <returns>The GUID of the reference provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext.ReferenceFilterPaths">
      <summary>Gets or sets a list of paths to references to be filtered. This property can be used to filter out specific files or directories from the references enumeration.</summary>
      <returns>The reference paths to be filtered.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext.References">
      <summary>Gets a collection of references.</summary>
      <returns>The collection of references.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents5">
      <summary>Implements additional methods that fire in response to changes to documents in the Running Document Table (RDT).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents5.OnAfterDocumentLockCountChanged(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after the document lock count changes.</summary>
      <param name="docCookie">[in] The document that has changed.</param>
      <param name="dwRDTLockType">[in] The lock options for the document.</param>
      <param name="dwOldLockCount">[in] The lock count before the change occurred.</param>
      <param name="dwNewLockCount">[in] The lock count after the change occurred.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3">
      <summary>Represents the running document table (RDT) and provides additional functionality beyond the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable2" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.GetRelatedSaveTreeItems(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM[])">
      <summary>Retrieves the related save tree items for a document.</summary>
      <returns>The actual number of related save tree items that was retrieved.</returns>
      <param name="cookie">[in] Document from which to get the related save tree items.</param>
      <param name="grfSave">[in] Save options for the document in the running document table (RDT).</param>
      <param name="celt">[in] Size the related save tree items.</param>
      <param name="rgSaveTreeItems">[out, size_is(celt), length_is(*pcActual)] Array that contains the save options for the tree-view item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.IsDocumentDirty(System.UInt32)">
      <summary>Indicates whether the document has changed since the last save.</summary>
      <returns>true if the document has changed, or false if the document has not changed since the last save.</returns>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.IsDocumentReadOnly(System.UInt32)">
      <summary>Indicates whether the document is a read-only document.</summary>
      <returns>true if the document can only be read, or false if information can be written to the document.</returns>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.NotifyDocumentChangedEx(System.UInt32,System.UInt32)">
      <summary>Notifies the client when changes are made to the document.</summary>
      <param name="cookie">[in] The document that is changed.</param>
      <param name="attributes">[in] The new attributes for the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.UpdateDirtyState(System.UInt32)">
      <summary>Updates the status of the dirty state.</summary>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.UpdateReadOnlyState(System.UInt32)">
      <summary>Updates the document’s read-only state.</summary>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3">
      <summary>Allows projects and hierarchies to register themselves with source control and obtain information on source control status.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.BrowseForProject(System.String@,System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.CancelAfterBrowseForProject"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.GetSccGlyph(System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.GetSccGlyphFromStatus(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsStateIcon[])"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.IsBSLSupported">
      <summary>Specifies whether the active SCC provider supports background solution load (BSL).</summary>
      <returns>true if the provider supports BSL, or false if the provider does not support BSL.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.IsInstalled(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.RegisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2,System.String,System.String,System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.UnregisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEvents">
      <summary>Implements methods that fire when a project changes its source code control (SCC) bindings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEvents.OnProjectRegisteredForSccChange(System.Guid@,System.Boolean)">
      <summary>Raised when a project calls <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.RegisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2,System.String,System.String,System.String,System.String)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager3.UnregisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2)" />.</summary>
      <param name="guidProject">[in] The project identifier.</param>
      <param name="fIsRegistered">[in] Indicates whether the project has been registered or unregistered. If true, the project has been registered. If false, the project has been unregistered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSccTrackProjectEvents">
      <summary>Starts or terminates an advisory loop that tracks source code control (SCC) events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccTrackProjectEvents.AdviseSccProjectEvents(Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEvents)">
      <summary>Registers an advise sink object to receive notification of specified events affecting the source code control (SCC) project.</summary>
      <returns>A pointer to a returned token that uniquely identifies this SCC project.</returns>
      <param name="pEventSink">[in] A pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEvents" /> interface on the client's advise sink. The client's sink receives outgoing calls from the SCC project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccTrackProjectEvents.UnAdviseSccProjectEvents(System.UInt32)">
      <summary>Cancels the sending of notifications previously set up with a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSccTrackProjectEvents.AdviseSccProjectEvents(Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEvents)" /> method.</summary>
      <param name="dwCookie">[in] The token that identifies the SCC project.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchCallback">
      <summary>Implemented by the search consumer (e.g. window search host). 
The search task will call this interface to report progress or completion.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchCallback.ReportComplete(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchCallback.ReportProgress(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,System.UInt32,System.UInt32)"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.FilterField">
      <summary>Gets the filter name and field, with quotes removed and characters not escaped.</summary>
      <returns>The filter name and field.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.FilterSeparatorPosition">
      <summary>Gets the position of the filter field separator in the original text of the token.</summary>
      <returns>The position of the filter field separator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.FilterTokenType">
      <summary>Gets the filter token type.</summary>
      <returns>The filter token type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.FilterValue">
      <summary>Gets the filter value, with quotes removed and characters not escaped.</summary>
      <returns>The filter value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.OriginalTokenText"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.ParsedTokenText"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.ParseError"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchFilterToken.TokenStartPosition"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult">
      <summary>Updates properties that can change dynamically (for example, properties dependent on UI context changes in the shell).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.Description"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.DisplayText"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.Icon"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.InvokeAction"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.PersistenceData"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.SearchProvider"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.Tooltip"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemDynamicResult.Update">
      <summary>Forces an update of the item properties to reflect the current state of the shell.</summary>
      <returns>true if the property is still valid, or false if the property is not invalid.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult">
      <summary>Provides search results representing an open document.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult.Description">
      <summary>Gets a more detailed description of the search result.</summary>
      <returns>The detailed description of the search result</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult.DisplayText">
      <summary>Gets the text of the item to be displayed on the UI.</summary>
      <returns>The display text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult.Icon">
      <summary>Gets an icon associated with the search result for the item.</summary>
      <returns>The icon (as an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIObject" /> of the VSUI_TYPE_ICON or VSUI_TYPE_BITMAP type).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult.InvokeAction">
      <summary>Invokes a specific action associated with the object when the result is selected.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult.PersistenceData">
      <summary>Gets a string that can be used to persist this result and that allows reconstruction of the result after a shell restart.</summary>
      <returns>The persistence data string.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult.SearchProvider">
      <summary>Gets the search provider that generated this search result.</summary>
      <returns>The search provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult.Tooltip">
      <summary>Gets the tooltip for the item.</summary>
      <returns>The tooltip.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider">
      <summary>Exposes a single search provider.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.Category">
      <summary>Gets an identifier for the search provider.</summary>
      <returns>The search provider identifier.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.CreateItemResult(System.String)">
      <summary>Creates a new instance of a search result from a persistence string previously obtained by getting the value of the persistence data string.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult" /> if the persisted item is valid in the current context, null otherwise.</returns>
      <param name="lpszPersistenceData">[in] The persistence string from which to re-create a previous search result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.CreateSearch(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery,Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback)">
      <summary>Creates a search task from the specified cookie and search query.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask" /> that identifies the search task.</returns>
      <param name="dwCookie">[in] The cookie that identifies the search task.</param>
      <param name="pSearchQuery">[in] The search query against which the search task should operate.</param>
      <param name="pSearchCallback">[in] A callback to report search progress.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.Description">
      <summary>Gets a description of the provider results, for example "Searches top-level menu items."</summary>
      <returns>The description of the provider results.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.DisplayText">
      <summary>Gets a displayable name for the search provider, for example "Menu items."</summary>
      <returns>The name for the search provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.ProvideSearchSettings(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
      <summary>Injects specialized settings into the data model associated with the command search provider.</summary>
      <param name="pSearchOptions">[in] The data model into which to place any special values to control how the Quick Access service treats this search provider.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.Shortcut">
      <summary>Gets a unique category shortcut that can be used in filtering the results from multiple providers. For example, searching for "@cmd" only returns search results from the provider with category shortcut "cmd".</summary>
      <returns>The unique category shortcut.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider.Tooltip">
      <summary>Gets a tooltip for the provider. The tooltip is displayed when it appears in the Global Search UI instead of "Show results from this category only".</summary>
      <returns>The tooltip for the provider.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback">
      <summary>Allows providers to return search results.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback.ReportComplete(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback.ReportProgress(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,System.UInt32,System.UInt32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback.ReportResult(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult)">
      <summary>Reports a result of the specified search task.</summary>
      <param name="pTask">[in] The search task from which the result was obtained.</param>
      <param name="pSearchItemResult">[in] The search result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchProviderCallback.ReportResults(Microsoft.VisualStudio.Shell.Interop.IVsSearchTask,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchItemResult[])">
      <summary>Reports the results of the specified search tasks.</summary>
      <param name="pTask">[in] The search task from which the results were obtained.</param>
      <param name="dwResults">[in] The number of results in <paramref name="pSearchItemResults" />.</param>
      <param name="pSearchItemResults">[in, size_is(dwResults)] The search results.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery">
      <summary>Describes a structured search string.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery.GetTokens(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchToken[])">
      <summary>Gets the search tokens.</summary>
      <returns>The actual number of search tokens returned in <paramref name="rgpSearchTokens" />.</returns>
      <param name="dwMaxTokens">[in] The maximum number of search tokens.</param>
      <param name="rgpSearchTokens">[out, size_is(dwMaxTokens), length_is(*pdwTokensReturned)] The search tokens.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery.ParseError">
      <summary>Gets whether there was any error while parsing the search string into tokens.</summary>
      <returns>true if a parse error occurred, or false if no error occurred.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery.SearchString">
      <summary>Gets the original search string.</summary>
      <returns>The original search string.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchQueryParser">
      <summary>Manages parsing of the search query string.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchQueryParser.BuildSearchString(Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery)">
      <summary>Retrieves a search string built from the specified search query.</summary>
      <returns>The built search string.</returns>
      <param name="pSearchQuery">[in] The search query from which to build the search string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchQueryParser.BuildSearchStringFromTokens(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchToken[])">
      <summary>Retrieves a search string built from a sequence of tokens.</summary>
      <returns>The built search string.</returns>
      <param name="dwTokens">[in] The number of tokens.</param>
      <param name="pSearchTokens">[in, size_is(dwTokens)] The tokens from which to build the search string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchQueryParser.GetSearchFilterToken(System.String,System.String,System.UInt32)">
      <summary>Retrieves a search filter token built from the specified filter token components.</summary>
      <returns>The search filter token.</returns>
      <param name="pszFilterField">[in] The filter token’s field.</param>
      <param name="pszFilterValue">[in] The filter token’s value.</param>
      <param name="dwFilterTokenType">[in] The filter token type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchQueryParser.GetSearchToken(System.String)">
      <summary>Retrieves a search token that parses to the specified token text.</summary>
      <returns>The search token.</returns>
      <param name="pszTokenText">[in] The token text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchQueryParser.Parse(System.String)">
      <summary>Parses the search string and returns the search query.</summary>
      <returns>The search query.</returns>
      <param name="pszSearchString">[in] The search string to parse.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask">
      <summary>Starts or stops a search operation.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask.ErrorCode">
      <summary>Gets the error code for the search (meaningful only if the search has encountered an error).</summary>
      <returns>The error code for the search.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask.Id">
      <summary>Gets the VSCOOKIE identifying the task.</summary>
      <returns>The VSCOOKIE identifying the task.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask.SearchQuery">
      <summary>Gets the search query used when the search task was created.</summary>
      <returns>The search query.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask.Start">
      <summary>Starts the actual search. Search operations are always called on background threads.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask.Status">
      <summary>Gets the task status, with values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHTASKSTATUS" />.</summary>
      <returns>The task status.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSearchTask.Stop">
      <summary>Stops a previously-started search (for example, the user clicked the X button during a long search).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchToken.OriginalTokenText">
      <summary>Gets the original text of the token.</summary>
      <returns>The original text of the token.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchToken.ParseError">
      <summary>Gets any error that occurred while parsing the token.</summary>
      <returns>The parsing error.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSearchToken.TokenStartPosition">
      <summary>Gets the position of the token in the original text of the search query.</summary>
      <returns>The position of the token.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSerializeNavigationItem">
      <summary>Allows a navigation item to be saved after the window frame with which it is associated is closed. If the document associated with that window frame is opened again, the navigation item can be recreated using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSerializeNavigationItem.Deserialize(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,Microsoft.VisualStudio.OLE.Interop.IStream)" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSerializeNavigationItem.Deserialize(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Deserializes an object from the stream.</summary>
      <returns>The deserialized object.</returns>
      <param name="pFrame">[in] Window frame containing the navigation item.</param>
      <param name="pStream">[in] Stream from which to deserialize.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSerializeNavigationItem.Serialize(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,Microsoft.VisualStudio.OLE.Interop.IStream,System.Object)">
      <summary>Serializes the object to the stream.</summary>
      <param name="pFrame">[in] Window frame containing the navigation item.</param>
      <param name="pStream">[in] Stream to which to serialize.</param>
      <param name="punkObject">[in] Object to serialize (originally provided through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.AddNewBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object,System.Int32)" />).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsShell5">
      <summary>Provides additional access to the fundamental environment services, specifically those dealing with VSPackages and the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell5.CreatePackageExtension(System.Guid@,System.Guid@,System.Guid@)">
      <summary>Loads, if necessary, the specified package and creates an instance of the given type of extension point using <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackageExtensionProvider" />.</summary>
      <returns>The requested extension point instance.</returns>
      <param name="Package">[in] Package containing the desired extension.</param>
      <param name="extensionPoint">[in] The type of extension point.</param>
      <param name="instance">[in] The instance identifier of the requested extension point.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell5.LoadPackageWithContext(System.Guid@,System.Int32,System.Guid@)">
      <summary>Loads a package. If the package is not already loaded, this method provides additional diagnostic information about the reason for loading. Negative reason codes are reserved by the environment.</summary>
      <returns>The loaded package.</returns>
      <param name="packageGuid">[in] GUID of the package to load.</param>
      <param name="reason">[in] The reason for loading the package.</param>
      <param name="context">[in] Optional context information associated with the reason.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution5">
      <summary>Provides additional top-level manipulation or maintenance of the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution5.GetGuidOfProjectFile(System.String)">
      <summary>Retrieves the GUID of the project specified by the given project file.</summary>
      <returns>The GUID of the project.</returns>
      <param name="pszProjectFile">[in] The project file from which to retrieve the GUID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution5.ResolveFaultedProjects(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],Microsoft.VisualStudio.Shell.Interop.IVsPropertyBag,System.UInt32@,System.UInt32@)">
      <summary>Resolves faulted projects.</summary>
      <param name="cHierarchies">[in] The number of project hierarchies that are to be resolved. If this parameter is empty (cHierarchies == 0), all faulted projects in the solution are resolved.</param>
      <param name="rgHierarchies">[in, size_is(cHierarchies)] Array of project hierarchies that are to be resolved.</param>
      <param name="pProjectFaultResolutionContext">[in, unique] Property bag to be used as a fault resolution context. If this parameter is provided, <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID5.VSPROPID_ProjectFaultResolutionContext" /> references this property bag for the duration of the call. The caller can use this property bag to pass initial values for specific properties instead of the default values. If null is passed in this parameter, a new blank property bag will be used as the context.</param>
      <param name="pcResolved">[out] The number of projects for which resolution was attempted (that is, that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectFaultResolver.ResolveFault(System.Boolean@)" /> called and/or the project reloaded). This might be less than <paramref name="cHierarchies" /> if some of the projects in <paramref name="rgHierarchies" /> are not faulted, or if one of the projects failed to resolve with <see cref="F:Microsoft.VisualStudio.VSConstants.OLE_E_PROMPTSAVECANCELLED" />.</param>
      <param name="pcFailed">[out] The number of projects that remain in the faulted state after an attempted resolution. This parameter does not count projects for which resolution was not attempted, for example those following the project that failed to resolve with <see cref="F:Microsoft.VisualStudio.VSConstants.OLE_E_PROMPTSAVECANCELLED" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5">
      <summary>Provides access to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4" /> events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5.AdviseUpdateSolutionEvents4(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4,System.UInt32@)">
      <summary>Subscribes to update solution events.</summary>
      <param name="pIVsUpdateSolutionEvents4">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4" /> to which to register.</param>
      <param name="pdwCookie">[out] The unique identifier used to unsubscribe from these events. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5.AdviseUpdateSolutionEventsAsync(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsync,System.UInt32@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5.FindActiveProjectCfgName(System.Guid@,System.String@)">
      <summary>Obtains the full name (for example "Debug|Win32") of the project configuration that is in the active solution configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProjectID">[in] The identifier of the project from which to get the full name.</param>
      <param name="pbstrProjectCfgCanonicalName">[out] The full name of the project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5.UnadviseUpdateSolutionEvents4(System.UInt32)">
      <summary>Disables client notification of update solution events.</summary>
      <param name="dwCookie">[in] The unique identifier that was handed back with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5.AdviseUpdateSolutionEvents4(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5.UnadviseUpdateSolutionEventsAsync(System.UInt32)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents5">
      <summary>Listening interface that monitors any notifications of changes to the solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents5.OnBeforeOpenProject(System.Guid@,System.Guid@,System.String)">
      <summary>Fired before each project is opened.</summary>
      <param name="guidProjectID">[in] The GUID of the individual project to be opened.</param>
      <param name="guidProjectType">[in] The GUID of the type of project (for example, Visual Basic or C#) to be opened.</param>
      <param name="pszFileName">[in] The name of the project file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIEvents">
      <summary>Filters events in Solution Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIEvents.OnFilterAsyncLoadCompleted(System.Guid@,System.UInt32)">
      <summary>Called when a filter has finished its asynchronous initialization.</summary>
      <param name="pguidFilterGroup">[in] The group to which the filter belongs.</param>
      <param name="nFilterID">[in] The identifier of the filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIEvents.OnFilterAsyncLoadStarted(System.Guid@,System.UInt32)">
      <summary>Called after a filter has been created and is starting to be initialized.</summary>
      <param name="pguidFilterGroup">[in] The group to which the filter belongs.</param>
      <param name="nFilterID">[in] The identifier of the filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIEvents.OnFilterChanged(System.Guid@,System.UInt32,System.Guid@,System.UInt32)">
      <summary>Called when a filter is enabled or disabled.</summary>
      <param name="pguidOldFilterGoup">[in] The group to which the old filter belongs.</param>
      <param name="nOldFilterID">[in] The identifier of the old filter.</param>
      <param name="pguidNewFilterGroup">[in] The group to which the new filter belongs.</param>
      <param name="nNewFilterID">[in] The identifier of the new filter.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow">
      <summary>Provides programmatic access to the Solution Explorer window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.AdviseSolutionUIEvents(Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIEvents,System.UInt32@)">
      <summary>Registers an event sink to listen to events related to the Solution Explorer window.</summary>
      <param name="pEventSink">[in] The object that receives event notices.</param>
      <param name="pdwCookie">[out] Returns an abstract value that identifies the client to be advised of Solution Explorer window events. Use this cookie later in a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.UnadviseSolutionUIEvents(System.UInt32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.DisableFilter">
      <summary>Disables the currently-enabled filter. If no filter is currently enabled, this method does nothing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.EnableFilter(System.Guid@,System.UInt32)">
      <summary>Enable the filter specified by the filter group and filter identifier pair.</summary>
      <returns>true if the filter was successfully enabled.</returns>
      <param name="pguidFilterGroup">[in] The group to which the filter belongs.</param>
      <param name="nFilterID">[in] The identifier of the filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.GetCurrentFilter(System.Guid@,System.UInt32@)">
      <summary>Gets the filter group and filter identifier pair for the currently-enabled filter.</summary>
      <param name="pguidFilterGroup">[out] The group to which the filter belongs.</param>
      <param name="nFilterID">[out] The identifier of the filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.IsFilterEnabled">
      <summary>Indicates whether the current filter is enabled or disabled.</summary>
      <returns>true if the current filter is enabled and false if it is disabled.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.UnadviseSolutionUIEvents(System.UInt32)">
      <summary>Unregister an event sink so that it will no longer receive events from the Solution Explorer window.</summary>
      <param name="dwCookie">[in] The unique value that was returned from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIHierarchyWindow.AdviseSolutionUIEvents(Microsoft.VisualStudio.Shell.Interop.IVsSolutionUIEvents,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser2">
      <summary>Used to define each user of the status bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser2.ClearInfo">
      <summary>Removes the user’s information in the status bar.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsStrongNameKeys2">
      <summary>Provides additional common strong name key utility methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStrongNameKeys2.CreateNewKey2(System.String,System.String@)">
      <summary>Creates a new key to be used for signing, exporting to a file, and creating a new key container.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szFileLocation">[in] The location to save the key file.</param>
      <param name="pbstrFileName">[in] The name of the file in which to store the key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStrongNameKeys2.CreateNewKeyWithNameAndSpecifiedSignatureAlgorithm(System.String,System.UInt32,System.String,System.String,System.String)">
      <summary>Creates a new key using a specified Signature Algorithm to be used for signing, exporting to a file, and creating a new key container.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszAlgorithmID">[in] The encryption algorithm identifier. If null is passed in for this parameter, the default SHA-256 algorithm is used.</param>
      <param name="dwKeyLength">[in] The length of the encryption key. If zero (0) is passed in for this parameter, the system default key length is used.</param>
      <param name="szFile">[in] The file in which to store the encryption key.</param>
      <param name="szPassword">[in] The password for the key being generated.</param>
      <param name="szSubjectName">[in] The name that goes after “CN=” in the certificate name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTask">
      <summary>Provides methods that interact with a task, such as starting it, cancelling it, or appending continuations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.AbortIfCanceled">
      <summary>Aborts the task if the task has been cancelled. Use this method to return from a cancelled task.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.AsyncState">
      <summary>Gets the asynchronous state object that was given when the task was created.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.Cancel">
      <summary>Cancels the task group. An antecedent task and all of its children share the same cancellation token, so cancelling any of the tasks cancels the whole task group.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.ContinueWith(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
      <summary>Appends the provided action to this task to be run after the task is run to completion. The action is invoked on the context provided.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> instance that has the current task as its parent.</returns>
      <param name="context">[in] Where to run this task. Values are from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT" />.</param>
      <param name="pTaskBody">[in] Action to be executed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.ContinueWithEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
      <summary>Appends the provided action (using the specified options) to this task to be run after the task is run to completion. The action is invoked on the context provided.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> instance that has the current task as its parent.</returns>
      <param name="context">[in] Where to run this task. Values are from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT" />.</param>
      <param name="options">[in] Allows setting task continuation options. Values are from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS" />.</param>
      <param name="pTaskBody">[in] Action to be executed.</param>
      <param name="pAsyncState">[in] The asynchronous state of the task.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.Description">
      <summary>Gets or sets the description for the text that is displayed for component diagnostics.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.GetResult">
      <summary>Waits for the task to complete (not including any continuations) and returns the result set by the task. If the task returns an error code or an exception, this method returns the same error code.</summary>
      <returns>The result set by the task.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.IsCanceled">
      <summary>Gets whether the task group is cancelled. If true, the task group is cancelled.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.IsCompleted">
      <summary>Gets whether the task result is available. If true, the task result is available. If false, a <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.GetResult" /> call is blocked until the task is completed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.IsFaulted">
      <summary>Gets whether the task completed with an exception. If true, an exception occurred.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.Start">
      <summary>Starts the task.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.Wait">
      <summary>Waits for the task to complete (not including any continuations). If the task returns an error code or an exception, this method returns the same error code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.WaitEx(System.Int32,System.UInt32)">
      <summary>Waits for the task to complete (not including any continuations). You can either specify a timeout (or INFINITE) or set the option to abort on task cancellation.</summary>
      <returns>true if the task completed successfully before <paramref name="millisecondsTimeout" />, otherwise false.</returns>
      <param name="millisecondsTimeout">The timeout (in milliseconds) or INFINITE.</param>
      <param name="options">Values are of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKWAITOPTIONS" />. Set to VSTWO_AbortOnTaskCancellation to abort if a cancellation occurs.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource">
      <summary>Interacts with a task completion source to set its state and get the internal <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.AddDependentTask(Microsoft.VisualStudio.Shell.Interop.IVsTask)">
      <summary>Adds the specified task to the task completion sources dependent task list. Then if <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.Wait" /> is called on IVsTaskCompletionSource.Task, the UI can be unblocked correctly.</summary>
      <param name="pTask">The task to add to the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.SetCanceled">
      <summary>Sets the task owned by this source to cancelled state, also cancelling the task.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.SetFaulted(System.Int32)">
      <summary>Sets the task owned by this source to the faulted state (with the given HRESULT code).</summary>
      <param name="hr">The error code to set in the faulted state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.SetResult(System.Object)">
      <summary>Sets the task owned by this source to completed state with the result.</summary>
      <param name="result">The result to be set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.Task">
      <summary>Gets the task owned by this source.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList3">
      <summary>Provides for asynchronous task updates for specific providers (or all providers) in task and error lists.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList3.RefreshAllProvidersAsync">
      <summary>Refreshes all tasks asynchronously from all registered providers.</summary>
      <returns>The asynchronous task that you can use to schedule work that will be executed once the refresh operation is finished.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList3.RefreshOrAddTasksAsync(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTaskItem[])">
      <summary>Refreshes all cached information asynchronously for the given tasks.</summary>
      <returns>The asynchronous task that you can use to schedule work that will be executed once the refresh operation is finished.</returns>
      <param name="providerCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
      <param name="taskItemCount">[in] The number of tasks to refresh.</param>
      <param name="taskItems">[in] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> items to refresh.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList3.RefreshTasksAsync(System.UInt32)">
      <summary>Refreshes all cached information asynchronously for the given task.</summary>
      <returns>The asynchronous task that you can use to schedule work that will be executed once the refresh operation is finished.</returns>
      <param name="providerCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList3.RemoveTasksAsync(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTaskItem[])">
      <summary>Removes tasks asynchronously from the task list.</summary>
      <returns>The asynchronous task that you can use to schedule work that will be executed once the remove operation is finished.</returns>
      <param name="providerCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
      <param name="taskItemCount">[in] The number of tasks to remove.</param>
      <param name="taskItems">[in] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> items to remove.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider4">
      <summary>Provides task methods.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider4.ThemedImageList">
      <summary>Gets the themed image list.</summary>
      <returns>The handle to the image list.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService">
      <summary>Creates and interacts with Asynchrous task blocks.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.ContinueWhenAllCompleted(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask[],Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
      <summary>Creates an asynchrous task that is run after all the provided tasks have either finished running or have been cancelled.</summary>
      <returns>The created task that runs after all of the other tasks have completed.</returns>
      <param name="context">[in] Where to run this task.</param>
      <param name="dwTasks">[in] The number of tasks to wait.</param>
      <param name="pDependentTasks">[in] An array of tasks to wait.</param>
      <param name="pTaskBody">[in] Worker method for the task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.ContinueWhenAllCompletedEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
      <summary>Creates a task (using the specified options) that is run after all the given tasks are completed.</summary>
      <returns>The created task that runs after all of the other tasks have completed.</returns>
      <param name="context">[in] Where to run this task.</param>
      <param name="dwTasks">[in] The number of tasks to wait.</param>
      <param name="pDependentTasks">[in] An array of tasks to wait.</param>
      <param name="options">[in] The continuation options set for the task.</param>
      <param name="pTaskBody">[in] Worker method for the task.</param>
      <param name="pAsyncState">[in] Asynchronous state for the task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTask(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
      <summary>Creates a task that is run on the given context.</summary>
      <returns>The task to be run.</returns>
      <param name="context">[in] Where to run this task. Values are from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT" />.</param>
      <param name="pTaskBody">[in] Action to be executed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTaskCompletionSource">
      <summary>Creates a task completion source instance that can be used to start a task, or can cancel or append continuations.</summary>
      <returns>The task completion source instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTaskCompletionSourceEx(System.UInt32,System.Object)">
      <summary>Creates a task completion source instance with the specified options.</summary>
      <returns>The task completion source instance.</returns>
      <param name="options">[in] Task creation options for the task controlled by the completion source.</param>
      <param name="AsyncState">[in] Asynchronous state that will be stored by the task controlled by the completion source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTaskEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
      <summary>Creates a task with the specified options that is run on the given context.</summary>
      <returns>The new task instance.</returns>
      <param name="context">[in] Where to run this task. Values are from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKRUNCONTEXT" />.</param>
      <param name="options">[in] The creation options set for the task. Values are from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS" />.</param>
      <param name="pTaskBody">[in] Action to be executed.</param>
      <param name="pAsyncState">[in] The asynchronous state of the task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.EndWaitDialog(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.HasCanceled(System.Boolean@)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.StartWaitDialog(System.String,System.String,System.String,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.StartWaitDialogWithCallback(System.String,System.String,System.String,System.Object,System.String,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogCallback)">
      <summary>Displays an instance of a wait dialog with a callback that can be used to cancel the wait dialog.</summary>
      <param name="szWaitCaption">[in, unique] The dialog caption.</param>
      <param name="szWaitMessage">[in] The wait message.</param>
      <param name="szProgressText">[in, unique] The text that accompanies the progress bar. Can be a null reference.</param>
      <param name="varStatusBmpAnim">[in] Should be a VT_INT_PTR containing a valid BMP, or VT_NULL.</param>
      <param name="szStatusBarText">[in, unique] The text on the status bar. Can be a null reference.</param>
      <param name="fIsCancelable">[in] true if there should be a Cancel button on the dialog, otherwise false.</param>
      <param name="iDelayToShowDialog">[in] Number of seconds to delay showing the dialog.</param>
      <param name="fShowProgress">[in] true if there should be a visible marquee-style progress bar on the dialog, otherwise false.</param>
      <param name="iTotalSteps">[in] Specifies how many steps equals 100% complete. Specify zero (0) or negative for marquee progress.</param>
      <param name="iCurrentStep">[in] Specifies how many steps have been completed so far.</param>
      <param name="pCallback">[in] Callback routine that enables the client to receive events about the threaded wait dialog.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.StartWaitDialogWithPercentageProgress(System.String,System.String,System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.UpdateProgress(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean@)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6">
      <summary>Additional methods used to manage the Toolbox.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.AddItemToDesigner(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Adds the specified item to the active designer as if it was double-clicked in the toolbox.</summary>
      <param name="pItem">[in] The item to be added to the active designer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.CopyToClipboard(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Copies the item from the toolbox onto the clipboard.</summary>
      <param name="pItem">[in] The item to be copied from the toolbox onto the clipboard.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.EnumTabIDs">
      <summary>Retrieves an enumeration of the identifiers for the tabs on the toolbox.</summary>
      <returns>The collection of identifiers for the toolbox tabs.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.GetAsyncState">
      <summary>Indicate what (if any) asynchronous operations are pending or in progress.</summary>
      <returns>Any asynchronous operations that are pending or in progress.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.GetBitmapBackground(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Retrieves the transparent background color of the specified toolbox item.</summary>
      <returns>The transparent background color.</returns>
      <param name="pItem">[in] The toolbox item from which to retrieve the transparent background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.GetUnresolvedItemName(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Retrieves the "unresolved" name of the specified item.</summary>
      <returns>If the item's name was initially specified as a resource identifier, this method returns the resource identifier (unlike <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetItemDisplayName(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String@)" />, which loads the resource string and returns that). If the item's name was specified as a literal string, that string is returned.</returns>
      <param name="pItem">[in] The item from which to get the unresolved name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.GetUnresolvedTabName(System.String)">
      <summary>Retrieves the "unresolved" name of the specified tab.</summary>
      <returns>If the tab's name was initially specified as a resource identifier, this method returns the resource identifier (unlike <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetTabOfID(System.String,System.String@)" />, which loads the resource string and returns that). If the tab's name was specified as a literal string, that string is returned.</returns>
      <param name="szID">[in] The identifier of the tab from which to get the unresolved name.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.IsFiltered">
      <summary>Gets or sets whether the toolbox is currently filtering items against the active designer and project. This is the inverse of the "Show All" toggle in the context menu.</summary>
      <returns>true if the toolbox is currently filtering items, or false if the toolbox is not filtering items.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.IsItemFilteredInvisible(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Indicates whether the specified item is currently invisible due to a search filter.</summary>
      <returns>true if the item is invisible, or false if the item is visible.</returns>
      <param name="pItem">[in] The item to check for invisibility.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.IsTabVisible(System.String,System.Boolean)">
      <summary>Indicates whether the specified tab is visible (for example, has any enabled items) in the current context.</summary>
      <returns>true if the tab is visible, or false if the tab is invisible.</returns>
      <param name="szID">[in] The identifier of the tab to check for visibility.</param>
      <param name="fRefresh">[in] Specifies how to handle the tab’s state. If this parameter is false, the last-known visible state of the tab will be returned, which should match what is shown in the UI. If this parameter is true, the tab's visibility will be re-evaluated based on its items, so the most up-to-date status will be returned; but that may not match what is shown in the UI yet.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.MoveItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Moves the specified toolbox item to a position just before the specified "insertion point" item. If the insertion point is on a different tab, the toolbox item will be moved to that tab.</summary>
      <param name="pItem">[in] The toolbox item to move.</param>
      <param name="pInsertionPoint">[in] The insertion point.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.MoveItemToTab(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String)">
      <summary>Moves a toolbox item to the end of the specified tab.</summary>
      <param name="pItem">[in] The toolbox item to move.</param>
      <param name="szTabID">[in] The identifier of the tab to which to move the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.MoveTab(System.String,System.String)">
      <summary>Moves the specified tab before the tab whose identifier is specified by <paramref name="szInsertionPoint" />.</summary>
      <param name="szID">[in] The identifier of the tab to be moved.</param>
      <param name="szInsertionPoint">[in] The insertion point to move the tab. To move the tab to the end of the toolbox, pass in null for this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.PasteFromClipboard(System.String,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Pastes the current clipboard contents into the toolbox at the end of the specified tab.</summary>
      <param name="szTabID">[in] The identifier of the tab to receive the current clipboard contents.</param>
      <param name="ppItem">[out] The resulting toolbox item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.RemovePackageContent(System.Guid@)">
      <summary>Removes all items created by the specified package. Groups created by that package are also removed unless they contain items not created by that package.</summary>
      <param name="Package">[in] The package from which to remove the items.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.RenameItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String)">
      <summary>Renames the specified item.</summary>
      <param name="pItem">[in] The item to be renamed.</param>
      <param name="szName">[in] The new name for the item. This parameter can be a literal string or a resource identifier. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager2.ParseResourceID(System.String,System.UInt32,System.String@,System.Guid@,System.String@)" /> for supported resource identifier formats.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.RenameTab(System.String,System.String)">
      <summary>Renames the specified tab.</summary>
      <param name="szID">[in] The identifier of the tab to be renamed.</param>
      <param name="szName">[in] The new name for the tab. This parameter can be a literal string or a resource identifier. See <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager2.ParseResourceID(System.String,System.UInt32,System.String@,System.Guid@,System.String@)" /> for supported resource identifier formats.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox6.ResetToolbox(System.Boolean)">
      <summary>Resets the toolbox to its default state, discarding all user customizations.</summary>
      <returns>Toolbox reset might be asynchronous, so this method returns quickly with the pending portion of the work. If null, the reset completed synchronously.</returns>
      <param name="promptUser">[in] Specifies whether to prompt the user before resetting the toolbox to its default state. If this parameter is true, the user will be given an option to cancel the reset first.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.AddToolbar(Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION,System.Guid@,System.UInt32)">
      <summary>Adds a toolbar to the tool window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwLoc">[in] Specifies the location of the toolbar within the tool window. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION" /> enumeration.</param>
      <param name="pguid">[in] Pointer to a unique identifier for the toolbar's menu group.</param>
      <param name="dwId">[in] DWORD that, in combination with <paramref name="pguid" />, identifies the toolbar to be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.BorderChanged">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.Close(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">[in] Reserved. Must be 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.ForceUpdateUI">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.Hide(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.ProcessMouseActivation(System.IntPtr,System.UInt32,System.UInt32,System.Int32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
      <param name="hwnd">Do not use.</param>
      <param name="msg">Do not use.</param>
      <param name="wp">Do not use.</param>
      <param name="lp">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.ProcessMouseActivationModal(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32@)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
      <param name="hwnd">Do not use.</param>
      <param name="msg">Do not use.</param>
      <param name="wp">Do not use.</param>
      <param name="lp">Do not use.</param>
      <param name="plResult">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.Show(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost3.ShowHideToolbar(System.Guid@,System.UInt32,System.Int32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="pguid">Do not use.</param>
      <param name="dwId">Do not use.</param>
      <param name="fShow">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4">
      <summary>Used by projects to query the environment for permission to remove a file or directory in a solution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnAfterRemoveDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[])">
      <summary>Called by a project after directories have been removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project from which the directories have been removed.</param>
      <param name="cDirectories">[in] Number of directories that were removed.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories that were removed.</param>
      <param name="rgFlags">[in, size_is(cDirectories)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEDIRECTORYFLAGS2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnAfterRemoveFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[])">
      <summary>Called by a project after files have been removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project from which the files have been removed.</param>
      <param name="cFiles">[in] Number of files that were removed.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files that were removed.</param>
      <param name="rgFlags">[in, size_is(cFiles)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEFILEFLAGS2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnQueryRemoveDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
      <summary>Called by a project to determine whether directories can be removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the directories to remove.</param>
      <param name="cDirectories">[in] Number of directories to remove.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories to remove.</param>
      <param name="rgFlags">[in, size_is(cDirectories)] Array of directory removal flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEDIRECTORYFLAGS2" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveNotOK" />; if the results for all files are yes, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out, size_is(cDirectories)] Array of results. If you pass in a null reference for this parameter, then only the summary result is returned (<paramref name="pSummaryResult" />). For a list of <paramref name="rgResults" /> values, see VSQUERYREMOVEDIRECTORYRESULTS.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments4.OnQueryRemoveFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
      <summary>Called by a project to determine whether files can be removed from the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project containing the files to remove.</param>
      <param name="cFiles">[in] Number of files to remove.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files to be removed.</param>
      <param name="rgFlags">[in, size_is(cFiles)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEFILEFLAGS2" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file is no, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out, size_is(cFiles)] Array of results. If you pass in a null reference for this parameter, then only the summary result is returned (<paramref name="pSummaryResult" />). For a list of <paramref name="rgResults" /> values, see VSQUERYREMOVEFILERESULTS.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents4">
      <summary>Notifies clients of additional changes made to project files or directories.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents4.OnAfterRemoveDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
      <summary>Notifies the client when directories have been removed from the project.</summary>
      <param name="cProjects">[in] Number of projects from which directories were removed.</param>
      <param name="cDirectories">[in] Number of directories removed.</param>
      <param name="rgpProjects">[in, size_is(cProjects)] Array of projects from which directories were removed.</param>
      <param name="rgFirstIndices">[in, size_is(cProjects)] Array of first indices identifying to which project each directory belongs. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories that were removed.</param>
      <param name="rgFlags">[in, size_is(cDirectories)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEDIRECTORYFLAGS2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents4.OnAfterRemoveFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
      <summary>Notifies the client after files are removed from the project.</summary>
      <param name="cProjects">[in] Number of projects from which files were removed.</param>
      <param name="cFiles">[in] Number of files removed.</param>
      <param name="rgpProjects">[in, size_is(cProjects)] Array of projects from which files were removed.</param>
      <param name="rgFirstIndices">[in, size_is(cProjects)] Array of first indices identifying to which project each file belongs. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files that were removed.</param>
      <param name="rgFlags">[in, size_is(cFiles)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEFILEFLAGS2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents4.OnQueryRemoveDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
      <summary>Notifies the client when a project has requested to remove directories.</summary>
      <param name="pProject">[in] Project from which the directories will be removed.</param>
      <param name="cDirectories">[in] Number of directories to remove.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories to remove.</param>
      <param name="rgFlags">[in, size_is(cDirectories)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEDIRECTORYFLAGS2" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveNotOK" />; if the results for all files are yes, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out, size_is(cDirectories)] Array of results. For a list of <paramref name="rgResults" /> values, see VSQUERYREMOVEDIRECTORYRESULTS.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents4.OnQueryRemoveFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
      <summary>Notifies the client when a project has requested to remove files.</summary>
      <param name="pProject">[in] Project from which the files will be removed.</param>
      <param name="cFiles">[in] Number of files to remove.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files to be removed.</param>
      <param name="rgFlags">[in, size_is(cFiles)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSQUERYREMOVEFILEFLAGS2" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file is no, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then this parameter is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out, size_is(cFiles)] Array of results. For a list of <paramref name="rgResults" /> values, see VSQUERYREMOVEFILERESULTS.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell5.CreateThemedImageList(System.IntPtr,System.UInt32)">
      <summary>Creates a themed image list. Themed image lists attempt to transform the images to target a given background. The caller is responsible for calling ImageList_Destroy to delete the image list. NOTE: </summary>
      <returns>A pointer to an HIMAGELIST, but including commctrl.h can produce build issues for projects that would not otherwise support common controls.</returns>
      <param name="hImageList">The image list.</param>
      <param name="crBackground">The background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell5.EnumKeyBindingScopes">
      <summary>Retrieves a collection of the available key binding scopes.</summary>
      <returns>The available key binding scopes.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell5.GetOpenFileNameViaDlgEx2(Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW[],System.String,System.String)">
      <summary>Brings up the File Open dialog box to obtain a specified open file.</summary>
      <param name="openFileName">[in, out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW" /> structure that contains information used to initialize the File Open dialog box. When this method returns, this structure contains information about the user's file selection.</param>
      <param name="HelpTopic">[in] A string containing the help topic.</param>
      <param name="openButtonLabel">[in] The caption of the Open button in the File Open dialog displayed during the call. This parameter overrides the default Open name of the button.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell5.ThemeDIBits(System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.Boolean,System.UInt32)">
      <summary>Applies theming to BGRA32 device-independent bitmap bits. The luminosity of the image is transformed so that the constant "halo" luminosity blends in with the background. This has the effect of eliminating the halo visually. The "halo" luminosity is an immutable constant, and is not calculated from the input image. Images which contain cyan (#00FFFF) in their top-right pixel are not inverted. Instead, the top-right pixel is cleared (RGBA are all set to 0) and S_OK is returned without otherwise modifying the image.</summary>
      <param name="dwBitmapLength">The bitmap length.</param>
      <param name="pBitmap">The array of bytes that makes up the bitmap.</param>
      <param name="dwPixelWidth">The pixel width.</param>
      <param name="dwPixelHeight">The pixel height.</param>
      <param name="fIsTopDownBitmap">True if this is a top-down bitmap, otherwise false.</param>
      <param name="crBackground">The background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell5.ThemeWindow(System.IntPtr)">
      <summary>Apply the VS-theme to the specified window, for supported window classes.</summary>
      <returns>True if the color theme was applied, otherwise false.</returns>
      <param name="hwnd">The pointer to the window.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument3.DocumentPreviewersEnum">
      <summary>Gets an interface that can be used to enumerate the available document previewers.</summary>
      <returns>The interface to enumerate the document previewers.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument3.FirstDefaultPreviewer">
      <summary>Returns an interface that obtains information about the first default previewer, for example, path, arguments, and browser type.</summary>
      <returns>The .exe file path.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument3.GetProvisionalViewingStatusForEditor(System.Guid@,System.Guid@)">
      <summary>Retrieves the provisional viewing status for an editor and logical view combination.</summary>
      <returns>The provisional viewing status as a member of <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROVISIONALVIEWINGSTATUS" />. The default provisional viewing status is PVS_Disabled, but may be modified by the editor's "CommonPhysicalViewAttributes" registry value and the values under its "PhysicalViewAttributes" registry subkey.</returns>
      <param name="editor">[in] The editor to query.</param>
      <param name="logicalView">[in] The logical view to query.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument3.SetDefaultPreviewer(Microsoft.VisualStudio.Shell.Interop.IVsDocumentPreviewer,System.UInt32,System.Boolean)">
      <summary>Allows setting a previewer as default, either exclusive or in addition to the existing previewers. The previewer must be one of the available previewers.</summary>
      <param name="pPreviewer">[in] The document previewer to set as the default previewer.</param>
      <param name="Resolution">[in] The resolution of the document previewer.</param>
      <param name="fExclusive">[in] Indicates whether the document previewer is exclusive or in addition to the existing previewers. If true, the document previewer is exclusive.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4">
      <summary>Defines events for changes in the solution configuration. To monitor these events, implement the interface and use it as an argument of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5.AdviseUpdateSolutionEvents4(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4,System.UInt32@)" /> method of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager5" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.OnActiveProjectCfgChangeBatchBegin">
      <summary>Fired to indicate that several <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" /> events will follow in rapid succession. OnActiveProjectCfgChangeBatchEnd is fired afterwards to indicate the end of batch.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.OnActiveProjectCfgChangeBatchEnd">
      <summary>Fired to indicate the end of the event batch that began with OnActiveProjectCfgChangeBatchBegin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.UpdateSolution_BeginFirstUpdateAction">
      <summary>Fired to start the first update action.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.UpdateSolution_BeginUpdateAction(System.UInt32)">
      <summary>Fired before every update action begins during solution build (before the first <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)" /> for the same action, but after <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.UpdateSolution_BeginFirstUpdateAction" /> if this is the first action).</summary>
      <param name="dwAction">[in] The update action that is about to begin.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.UpdateSolution_EndLastUpdateAction">
      <summary>Fired just after the last update action, but before <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)" /> is invoked.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.UpdateSolution_EndUpdateAction(System.UInt32)">
      <summary>Fired after every update actions ends, and the next one (if any) is about to begin (after the last <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)" /> for the same action, but before <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.UpdateSolution_EndLastUpdateAction" /> if this is the last action).</summary>
      <param name="dwAction">[in] The update action that is about to end.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents4.UpdateSolution_QueryDelayFirstUpdateAction(System.Int32@)">
      <summary>Fired before the first update action, just after <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_StartUpdate(System.Int32@)" /> to determine if a delay should occur.</summary>
      <param name="pfDelay">[out] The delay. If this parameter is non-zero, the update action will be delayed and invoked at a later idle time.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsync">
      <summary>This interface is implemented by clients of the SolutionBuildManager which need to be able to respond to the UpdateSolution_EndLastUpdateActionAsync event.  When clients have completed their work, they invoke the CompleteLastUpdateAction() method on the provided callback, indicating the SolutionBuildManager need no longer wait for them. This is used to allow clients to avoid blocking for possibly long running work on the UI thread.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsync.UpdateSolution_EndLastUpdateActionAsync(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsyncCallback)">
      <summary>Completes the last update action.</summary>
      <param name="pCallback">The callback.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsyncCallback">
      <summary>Provides a method for asynchronous implementers of UpdateSolution_EndLastUpdateActionAsync to notify the SolutionBuildManager when their work is complete. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsync" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEventsAsyncCallback.CompleteLastUpdateAction">
      <summary>Finishes the last update action.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger2">
      <summary>Reports errors and informational messages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger2.ChangeUpgradeLogPath(System.String)">
      <summary>Changes the absolute path and file name of the upgrade log file after the upgrade logger has been initialized.</summary>
      <param name="lpszNewLogFileName">[in] The new absolute path and file name of the upgrade log file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchBooleanOption">
      <summary>Implements Boolean options for the common search control’s popup.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchBooleanOption.DisplayText">
      <summary>Gets a displayable string that will be used for the option's text.</summary>
      <returns>A displayable string that will be used for the option's text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchBooleanOption.Tooltip">
      <summary>Gets a description of the option.</summary>
      <returns>The description of the option.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchBooleanOption.Value">
      <summary>Gets or set the Boolean value of the checkbox state.</summary>
      <returns>true if the checkbox is checked, or false if the checkbox is not checked.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchEvents">
      <summary>Notifies the window host that changes occurred to the search filters or options that have to be reflected in the UI.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchEvents.SearchFiltersChanged">
      <summary>Provides notification that there was a change in the search filters (for example, filters were added or removed, displayed text changed, and so on).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchEvents.SearchOptionsChanged">
      <summary>Provides notification that there was a change in the search options (for example, options were added or removed, displayed text changed, and so on).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchEvents.SearchOptionValueChanged(Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchBooleanOption)">
      <summary>Provides notification that there was a change in the Boolean search option's value.</summary>
      <param name="pOption">[in] The Boolean search option that contains the value that changed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchFilter">
      <summary>Provides information about the window search filter.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchFilter.DisplayText">
      <summary>Gets a displayable string that is used on the filter button in the UI.</summary>
      <returns>A displayable string that is used on the filter button in the UI.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchFilter.Tooltip">
      <summary>Gets a string that describes the search filter functionality.</summary>
      <returns>A string that describes the search filter functionality.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.Activate">
      <summary>Sets focus to the search control.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.HelpTopic">
      <summary>Gets or sets the help topic associated with the search control.</summary>
      <returns>The help topic. Returns null if no topic has been set.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.IsEnabled">
      <summary>Gets or sets whether the search control has been enabled or disabled.</summary>
      <returns>true if the search control is enabled, or false if the search control is disabled.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.IsPopupVisible">
      <summary>Gets or sets whether to show or hide the search control's popup (if the search control has settings requiring a popup, such as MRU, options, or filters).</summary>
      <returns>true if the search control’s popup is visible, or false if the popup is not visible.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.IsVisible">
      <summary>Gets or sets whether to show or hide the search control.</summary>
      <returns>true if the search control is set up and visible, or false if the search control is not visible.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.SearchAsync(Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery)">
      <summary>Sets the search query and begins a search. If the query is null, the search is stopped if it had already started.</summary>
      <param name="pSearchQuery">[in] The query to be searched.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.SearchEvents">
      <summary>Gets the search events callback once the search has been set up with the host.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.SearchObject">
      <summary>Gets the search object once the search has been set up with the host.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.SearchQuery">
      <summary>Gets the current search query that resulted from the parsing the current text in the search control.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.SearchQueryParser">
      <summary>Gets the search query parser used by the search host to create the search queries from search strings typed by the user.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.SearchTask">
      <summary>Gets the current search task if a search is in progress.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.SetupSearch(Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch)">
      <summary>Associates the search host control with the window search provider.</summary>
      <param name="pWindowSearch">[in] The window search provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHost.TerminateSearch">
      <summary>Disassociates the search host control from the window search provider, and releases resources used by the search.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHostFactory">
      <summary>Creates a window search control. This interface is implemented by the Visual Studio environment, and is obtained from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsWindowSearchHostFactory" /> service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHostFactory.CreateWindowSearchHost(System.Object,Microsoft.VisualStudio.OLE.Interop.IDropTarget)">
      <summary>Creates a search control child of the specified control and returns its search host interface.</summary>
      <returns>The search host interface.</returns>
      <param name="pParentControl">[in] The parent search control.</param>
      <param name="pDropTarget">[in, optional] The target for data during a drag-and-drop operation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchOption">
      <summary>Provides displayable options for the window search control.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchOption.DisplayText">
      <summary>Gets a displayable string that is used for the option's text.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchOption.Tooltip">
      <summary>Gets a string that describes the option.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchSimpleFilter">
      <summary>Provides a basic search filter for the search control.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchSimpleFilter.DefaultFilterValue">
      <summary>Gets a default value string that is used by the shell in constructs like filterfield:defaultvalue when the filter button is clicked.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchSimpleFilter.DisplayText">
      <summary>Gets a displayable string that is used on the filter button in the UI.</summary>
      <returns>A displayable string that is used on the filter button in the UI.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchSimpleFilter.FilterField">
      <summary>Gets a string that identifies this filter (in constructs like filterfield:value).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchSimpleFilter.Tooltip">
      <summary>Gets a string that describes the search filter functionality.</summary>
      <returns>A string that describes the search filter functionality.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4">
      <summary>Extracts information out of XML documentation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetAssociatedCapabilities">
      <summary>Gets the list of associated capabilities from the XML documentation (&lt;capability&gt; tags).</summary>
      <returns>The list of associated capabilities.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetCompletionListText(System.String@)">
      <summary>Gets the text of a completion list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCompletionList">[out] The completion list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetCompletionListTextAt(System.Int32,System.String@)">
      <summary>Gets a value from a completion list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iParam">[in] The position of the list element.</param>
      <param name="pbstrCompletionList">[out] The value of the list element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetExceptionCount(System.Int32@)">
      <summary>Gets the number of exceptions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piExceptions">[out] The number of exceptions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetExceptionTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the exception text from the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iException">[in] The position of the exception in the collection.</param>
      <param name="pbstrType">[out] The type of the exception.</param>
      <param name="pbstrText">[out] The text of the exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetFilterPriority(System.Int32@)">
      <summary>Gets the priority of a filter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piFilterPriority">[out] The filter priority.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetParamCount(System.Int32@)">
      <summary>Gets the number of parameters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piParams">[out] The number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the text describing a specific parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iParam">[in] The position of the parameter in the signature.</param>
      <param name="pbstrName">[out] The name of the parameter.</param>
      <param name="pbstrText">[out] The text describing the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetPermissionSet(System.String@)">
      <summary>Gets the permission set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrPermissionSetXML">[out] The permission set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetRemarksText(System.String@)">
      <summary>Gets remarks for an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRemarks">[out] The remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetReturnsText(System.String@)">
      <summary>Gets the description of return values for a method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrReturns">[out] The return value description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetSummaryText(System.String@)">
      <summary>Gets the summary text for an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrSummary">[in] The summary text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetTypeParamCount(System.Int32@)">
      <summary>Gets the number of parameters for a type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piTypeParams">[out] The number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.GetTypeParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the type of a specific parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTypeParam">[in] The position of the parameter in the collection.</param>
      <param name="pbstrName">[out] The name of the parameter.</param>
      <param name="pbstrText">[out] The type name of the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData4.SetOptions(System.UInt32)">
      <summary>Sets the specified options for XML member data elements.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="options">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_OPTIONS" /> enumeration that specifies the options.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCapability">
      <summary>Represents capability information in XML documentation.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCapability.Description">
      <summary>Gets the description of the capability.</summary>
      <returns>The description of the capability.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCapability.Type">
      <summary>Gets the type of capability.</summary>
      <returns>The type of capability.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SAppxManifestDesignerService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAppContainerDeveloperLicensing">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAppContainerProjectDeploy">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDebugRemoteDiscoveryUI">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugRemoteDiscoveryUI" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDebugTargetSelectionService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugTargetSelectionService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDifferenceService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDifferenceService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFileMergeService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFileMergeService" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsGlobalSearch">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGlobalSearch" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsHierarchyManipulation">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyManipulation" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsMRUItemsStore">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMRUItemsStore" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsProfilerLauncher">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilerLauncher" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsReferenceManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsWindowSearchHostFactory">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchHostFactory" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo">
      <summary>Specifies the properties for <see cref="F:Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4.DLO_AppPackageDebug" /> targets.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo.AppPlatform">
      <summary>The platform that the application is targeting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo.AppUserModelID">
      <summary>String identifying the application to activate. This member is not required to be from the same package as <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsImmersiveAppInfo.PackageMoniker" />. This member can be null if the debugger should not activate any application. This member is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo.PackageMoniker">
      <summary>String identifying the application package to debug. For  Windows Store apps, this is the full name of the package.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsAppPackagePlatform">
      <summary>Specifies the platform that the application is targeting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsAppPackagePlatform.APPPLAT_WindowsAppx">
      <summary>Used for Windows Store apps.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsAppPackagePlatform.APPPLAT_WindowsPhoneXAP">
      <summary>Used for Windows Phone XAP applications.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSBUILDMANAGERRESOURCE">
      <summary>Specifies a type of build resource to be acquired from the BuildManagerAccessor service.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBUILDMANAGERRESOURCE.VSBUILDMANAGERRESOURCE_DESIGNTIME">
      <summary>The design-time build resource is required, such as for reference resolution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSBUILDMANAGERRESOURCE.VSBUILDMANAGERRESOURCE_UITHREAD">
      <summary>The UI thread resource is required during the build.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4">
      <summary>Provides information about the debug target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.AppPackageLaunchInfo">
      <summary>Information required to start or launch app container applications (<see cref="F:Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4.DLO_AppPackageDebug" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrArg">
      <summary>BSTR containing the command line arguments (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrCurDir">
      <summary>BSTR containing the current directory (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrEnv">
      <summary>BSTR containing custom environment variables (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrExe">
      <summary>BSTR containing the name of the executable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrOptions">
      <summary>BSTR containing custom options specific to each debugger (null is recommended).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrPortName">
      <summary>BSTR containing the name of the port from the supplier specified in <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.guidPortSupplier" /> (can be null).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.bstrRemoteMachine">
      <summary>BSTR containing the machine name for a remote machine. Use null for the local machine.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.dlo">
      <summary>Specifies how this process should be launched or attached.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.dwDebugEngineCount">
      <summary>Specifies the number of debug engine GUIDs in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.guidLaunchDebugEngine" /> array.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.dwProcessId">
      <summary>Specifies the process identifier (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_AlreadyRunning" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.fSendToOutputWindow">
      <summary>BOOL - if true, stdout and stderr are to be routed to the output window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.guidLaunchDebugEngine">
      <summary>Specifies the GUID of the debug engine used for launch (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.guidPortSupplier">
      <summary>Specifies the GUID of the port supplier.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.guidProcessLanguage">
      <summary>Specifies the language of the hosting process. Used to preload expression evaluators.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.LaunchFlags">
      <summary>Specifies the launch flags that were passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.DebugLaunch(System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.pDebugEngines">
      <summary>Specifies an array of debug engine guids, or null if <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.dwDebugEngineCount" /> is zero.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.project">
      <summary>Project that is being launched. This is currently used with <see cref="F:Microsoft.VisualStudio.Shell.Interop._DEBUG_LAUNCH_OPERATION4.DLO_ImmersiveAppDebug" /> to update application capabilities when an operation fails due to use of undeclared capabilities. This member is optional.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.pStartupInfo">
      <summary>Additional options to be passed to (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4.pUnknown">
      <summary>Specifies an interface pointer - usage depends on <see cref="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE">
      <summary>Specifies the profiler processor architecture type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE.ARCH_UNKNOWN">
      <summary>The architecture type is unknown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE.ARCH_X64">
      <summary>The processor architecture uses 64-bit data.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSPROFILERPROCESSARCHTYPE.ARCH_X86">
      <summary>The processor architecture uses 32-bit data.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsProjectCapabilityExpressionMatcher">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolExpressionEvaluator" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsUIElementDescriptor">
      <summary>Contains an identifier for an element in a UI factory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUIElementDescriptor.ElementID">
      <summary>The element in the factory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUIElementDescriptor.Factory">
      <summary>The UI factory identifier.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags2">
      <summary>Flags passed into <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager3.AreProjectsUpToDate(System.UInt32)" /> as well as <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.QueryStartUpToDateCheck(System.UInt32,System.Int32[],System.Int32[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg.StartUpToDateCheck(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)" /> to indicate that the operation for the purpose of a particular build request is done.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags2.VSUTDCF_PACKAGE">
      <summary>A package build (to create an app package for a Windows Store app) has been requested.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags2.VSUTDCF_PRIVATE">
      <summary>A mask for any custom VS_BUILDABLEPROJECTCFGOPTS_PRIVATE flags that were specified with the build.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags2.VSUTDCF_REBUILD">
      <summary>A full rebuild has been requested.</summary>
    </member>
  </members>
</doc>